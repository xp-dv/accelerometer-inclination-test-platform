
Accelerometer_Inclination_Test_Platform.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ba8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000674  08008d48  08008d48  00009d48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093bc  080093bc  0000c944  2**0
                  CONTENTS
  4 .ARM          00000008  080093bc  080093bc  0000a3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093c4  080093c4  0000c944  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093c4  080093c4  0000a3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093c8  080093c8  0000a3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001944  20000000  080093cc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20001944  0800ad10  0000c944  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d90  0800ad10  0000cd90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c944  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010467  00000000  00000000  0000c974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002756  00000000  00000000  0001cddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  0001f538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d1d  00000000  00000000  00020608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ee8  00000000  00000000  00021325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001270b  00000000  00000000  0003920d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093d97  00000000  00000000  0004b918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df6af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059dc  00000000  00000000  000df6f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  000e50d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20001944 	.word	0x20001944
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008d30 	.word	0x08008d30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20001948 	.word	0x20001948
 80001dc:	08008d30 	.word	0x08008d30

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//* Interrupt Callbacks
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
   * Should allow quick successive messages to fill buffer while waiting for CPU
   * Segments commands by their terminator '}'
   * Perhaps, uses two separate index pointers
   */
  static int i = 0;
  if (instruction_flag == 0) {
 8000eb0:	4b17      	ldr	r3, [pc, #92]	@ (8000f10 <HAL_UART_RxCpltCallback+0x68>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d121      	bne.n	8000efc <HAL_UART_RxCpltCallback+0x54>
    uart_circ_buf[i] = uart_rx_char[0];
 8000eb8:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <HAL_UART_RxCpltCallback+0x6c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a16      	ldr	r2, [pc, #88]	@ (8000f18 <HAL_UART_RxCpltCallback+0x70>)
 8000ebe:	7811      	ldrb	r1, [r2, #0]
 8000ec0:	4a16      	ldr	r2, [pc, #88]	@ (8000f1c <HAL_UART_RxCpltCallback+0x74>)
 8000ec2:	54d1      	strb	r1, [r2, r3]
    if (uart_circ_buf[i] == '}') {
 8000ec4:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <HAL_UART_RxCpltCallback+0x6c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a14      	ldr	r2, [pc, #80]	@ (8000f1c <HAL_UART_RxCpltCallback+0x74>)
 8000eca:	5cd3      	ldrb	r3, [r2, r3]
 8000ecc:	2b7d      	cmp	r3, #125	@ 0x7d
 8000ece:	d106      	bne.n	8000ede <HAL_UART_RxCpltCallback+0x36>
      instruction_flag = 1;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <HAL_UART_RxCpltCallback+0x68>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	701a      	strb	r2, [r3, #0]
      i = 0;
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <HAL_UART_RxCpltCallback+0x6c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	e00e      	b.n	8000efc <HAL_UART_RxCpltCallback+0x54>
    } else if (++i >= (sizeof(uart_circ_buf) - 1)) { // - 1 for NULL terminator
 8000ede:	4b0d      	ldr	r3, [pc, #52]	@ (8000f14 <HAL_UART_RxCpltCallback+0x6c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	4a0b      	ldr	r2, [pc, #44]	@ (8000f14 <HAL_UART_RxCpltCallback+0x6c>)
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f14 <HAL_UART_RxCpltCallback+0x6c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b7a      	cmp	r3, #122	@ 0x7a
 8000eee:	d905      	bls.n	8000efc <HAL_UART_RxCpltCallback+0x54>
      i = 0;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <HAL_UART_RxCpltCallback+0x6c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
      uart_it_status = STATUS_ERR_UART_OF; // Buffer Overflow
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <HAL_UART_RxCpltCallback+0x78>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	701a      	strb	r2, [r3, #0]
    }
  }
  // UART Interrupt Rx Reactivate
  HAL_UART_Receive_IT(&huart2, (uint8_t *)uart_rx_char, 1U); // Receive single char
 8000efc:	2201      	movs	r2, #1
 8000efe:	4906      	ldr	r1, [pc, #24]	@ (8000f18 <HAL_UART_RxCpltCallback+0x70>)
 8000f00:	4808      	ldr	r0, [pc, #32]	@ (8000f24 <HAL_UART_RxCpltCallback+0x7c>)
 8000f02:	f004 f8c0 	bl	8005086 <HAL_UART_Receive_IT>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20001b18 	.word	0x20001b18
 8000f14:	20001b1c 	.word	0x20001b1c
 8000f18:	20001a98 	.word	0x20001a98
 8000f1c:	20001a9c 	.word	0x20001a9c
 8000f20:	20001b19 	.word	0x20001b19
 8000f24:	20001a48 	.word	0x20001a48

08000f28 <uart_echo>:

//* Private Functions
void uart_echo(char* tx_buf, const char* rx_buf, const int status) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  sprintf(tx_buf, "%s[%02d]", rx_buf, (status % 100)); // Modulo truncates to 2 digits
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a0f      	ldr	r2, [pc, #60]	@ (8000f74 <uart_echo+0x4c>)
 8000f38:	fb82 1203 	smull	r1, r2, r2, r3
 8000f3c:	1151      	asrs	r1, r2, #5
 8000f3e:	17da      	asrs	r2, r3, #31
 8000f40:	1a8a      	subs	r2, r1, r2
 8000f42:	2164      	movs	r1, #100	@ 0x64
 8000f44:	fb01 f202 	mul.w	r2, r1, r2
 8000f48:	1a9a      	subs	r2, r3, r2
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	490a      	ldr	r1, [pc, #40]	@ (8000f78 <uart_echo+0x50>)
 8000f50:	68f8      	ldr	r0, [r7, #12]
 8000f52:	f005 fe19 	bl	8006b88 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*)tx_buf, strlen(tx_buf), UART_TX_TIMEOUT);
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f7ff f992 	bl	8000280 <strlen>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	2332      	movs	r3, #50	@ 0x32
 8000f62:	68f9      	ldr	r1, [r7, #12]
 8000f64:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <uart_echo+0x54>)
 8000f66:	f004 f803 	bl	8004f70 <HAL_UART_Transmit>
}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	51eb851f 	.word	0x51eb851f
 8000f78:	08008d48 	.word	0x08008d48
 8000f7c:	20001a48 	.word	0x20001a48

08000f80 <strtoint>:

int strtoint(char* str) {
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  int num = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
  if (str != NULL) {
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d01f      	beq.n	8000fd2 <strtoint+0x52>
    while (*str != '\0') { // Terminates at NULL character
 8000f92:	e019      	b.n	8000fc8 <strtoint+0x48>
      if (*str >= '0' && *str <= '9') {
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b2f      	cmp	r3, #47	@ 0x2f
 8000f9a:	d912      	bls.n	8000fc2 <strtoint+0x42>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b39      	cmp	r3, #57	@ 0x39
 8000fa2:	d80e      	bhi.n	8000fc2 <strtoint+0x42>
        num = num * 10U + (*str - '0'); // String (base 10) to int
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	461a      	mov	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	3b30      	subs	r3, #48	@ 0x30
 8000fb8:	60fb      	str	r3, [r7, #12]
      } else {
        return -1; // NaN
      }
      str++;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	e002      	b.n	8000fc8 <strtoint+0x48>
        return -1; // NaN
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	e008      	b.n	8000fda <strtoint+0x5a>
    while (*str != '\0') { // Terminates at NULL character
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1e1      	bne.n	8000f94 <strtoint+0x14>
 8000fd0:	e002      	b.n	8000fd8 <strtoint+0x58>
    }
  } else {
    return -1; // NULL
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	e000      	b.n	8000fda <strtoint+0x5a>
  }
  return num;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <parse_instruction>:

instruction_t parse_instruction(char* parse_buf) {
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b08b      	sub	sp, #44	@ 0x2c
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  instruction_t instruction = {
 8000ff2:	f107 0308 	add.w	r3, r7, #8
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	819a      	strh	r2, [r3, #12]
  char* terminator_p;
  char* digit_token_p;
  int num;

  // Find start and end characters
  indicator_p = strchr(parse_buf, '{');
 8001000:	217b      	movs	r1, #123	@ 0x7b
 8001002:	6838      	ldr	r0, [r7, #0]
 8001004:	f005 fe2b 	bl	8006c5e <strchr>
 8001008:	6278      	str	r0, [r7, #36]	@ 0x24
  if (!indicator_p) {
 800100a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800100c:	2b00      	cmp	r3, #0
 800100e:	d10c      	bne.n	800102a <parse_instruction+0x42>
    instruction.status = STATUS_ERR_NO_INDICATOR;
 8001010:	2302      	movs	r3, #2
 8001012:	723b      	strb	r3, [r7, #8]
    return instruction;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	461c      	mov	r4, r3
 8001018:	f107 0308 	add.w	r3, r7, #8
 800101c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800101e:	6020      	str	r0, [r4, #0]
 8001020:	6061      	str	r1, [r4, #4]
 8001022:	60a2      	str	r2, [r4, #8]
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	81a3      	strh	r3, [r4, #12]
 8001028:	e0a8      	b.n	800117c <parse_instruction+0x194>
  }
  terminator_p = strchr(parse_buf, '}');
 800102a:	217d      	movs	r1, #125	@ 0x7d
 800102c:	6838      	ldr	r0, [r7, #0]
 800102e:	f005 fe16 	bl	8006c5e <strchr>
 8001032:	6238      	str	r0, [r7, #32]
  if (!terminator_p) {
 8001034:	6a3b      	ldr	r3, [r7, #32]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d10c      	bne.n	8001054 <parse_instruction+0x6c>
    instruction.status = STATUS_ERR_NO_TERMINATOR;
 800103a:	2303      	movs	r3, #3
 800103c:	723b      	strb	r3, [r7, #8]
    return instruction;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	461c      	mov	r4, r3
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001048:	6020      	str	r0, [r4, #0]
 800104a:	6061      	str	r1, [r4, #4]
 800104c:	60a2      	str	r2, [r4, #8]
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	81a3      	strh	r3, [r4, #12]
 8001052:	e093      	b.n	800117c <parse_instruction+0x194>
  }
  ++indicator_p; // Increment past the start indicator '{'
 8001054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001056:	3301      	adds	r3, #1
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24

  // Parse instruction code
  digit_token_p = strtok(indicator_p, "|}"); // Isolate digits by tokenizing the string between '{' and '}'
 800105a:	494a      	ldr	r1, [pc, #296]	@ (8001184 <parse_instruction+0x19c>)
 800105c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800105e:	f005 fe0b 	bl	8006c78 <strtok>
 8001062:	61f8      	str	r0, [r7, #28]
  num = strtoint(digit_token_p);
 8001064:	69f8      	ldr	r0, [r7, #28]
 8001066:	f7ff ff8b 	bl	8000f80 <strtoint>
 800106a:	61b8      	str	r0, [r7, #24]
  if (num < 0) {
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	2b00      	cmp	r3, #0
 8001070:	da0c      	bge.n	800108c <parse_instruction+0xa4>
    instruction.status = STATUS_ERR_INVALID_INSTRUCTION;
 8001072:	2304      	movs	r3, #4
 8001074:	723b      	strb	r3, [r7, #8]
    return instruction;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	461c      	mov	r4, r3
 800107a:	f107 0308 	add.w	r3, r7, #8
 800107e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001080:	6020      	str	r0, [r4, #0]
 8001082:	6061      	str	r1, [r4, #4]
 8001084:	60a2      	str	r2, [r4, #8]
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	81a3      	strh	r3, [r4, #12]
 800108a:	e077      	b.n	800117c <parse_instruction+0x194>
  }
  if (num > INSTRUCTION_CODE_T_MAX) {
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001092:	d30c      	bcc.n	80010ae <parse_instruction+0xc6>
    instruction.status = STATUS_ERR_INSTRUCTION_OUT_OF_RANGE;
 8001094:	2305      	movs	r3, #5
 8001096:	723b      	strb	r3, [r7, #8]
    return instruction;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	461c      	mov	r4, r3
 800109c:	f107 0308 	add.w	r3, r7, #8
 80010a0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80010a2:	6020      	str	r0, [r4, #0]
 80010a4:	6061      	str	r1, [r4, #4]
 80010a6:	60a2      	str	r2, [r4, #8]
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	81a3      	strh	r3, [r4, #12]
 80010ac:	e066      	b.n	800117c <parse_instruction+0x194>
  }
  instruction.code = num;
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	817b      	strh	r3, [r7, #10]

  // Parse arguments
  while ((digit_token_p = strtok(NULL, "|}")) != NULL) {
 80010b4:	e050      	b.n	8001158 <parse_instruction+0x170>
    if (*digit_token_p == '{') {
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b7b      	cmp	r3, #123	@ 0x7b
 80010bc:	d10c      	bne.n	80010d8 <parse_instruction+0xf0>
      instruction.status = STATUS_ERR_TOO_MANY_INSTRUCTIONS;
 80010be:	2306      	movs	r3, #6
 80010c0:	723b      	strb	r3, [r7, #8]
      return instruction;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	461c      	mov	r4, r3
 80010c6:	f107 0308 	add.w	r3, r7, #8
 80010ca:	cb07      	ldmia	r3!, {r0, r1, r2}
 80010cc:	6020      	str	r0, [r4, #0]
 80010ce:	6061      	str	r1, [r4, #4]
 80010d0:	60a2      	str	r2, [r4, #8]
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	81a3      	strh	r3, [r4, #12]
 80010d6:	e051      	b.n	800117c <parse_instruction+0x194>
    }
    num = strtoint(digit_token_p);
 80010d8:	69f8      	ldr	r0, [r7, #28]
 80010da:	f7ff ff51 	bl	8000f80 <strtoint>
 80010de:	61b8      	str	r0, [r7, #24]
    if (num < 0) {
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	da0c      	bge.n	8001100 <parse_instruction+0x118>
      instruction.status = STATUS_ERR_INVALID_ARG;
 80010e6:	2307      	movs	r3, #7
 80010e8:	723b      	strb	r3, [r7, #8]
      return instruction;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	461c      	mov	r4, r3
 80010ee:	f107 0308 	add.w	r3, r7, #8
 80010f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80010f4:	6020      	str	r0, [r4, #0]
 80010f6:	6061      	str	r1, [r4, #4]
 80010f8:	60a2      	str	r2, [r4, #8]
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	81a3      	strh	r3, [r4, #12]
 80010fe:	e03d      	b.n	800117c <parse_instruction+0x194>
    }
    if (num > INSTRUCTION_CODE_T_MAX) {
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001106:	d30c      	bcc.n	8001122 <parse_instruction+0x13a>
      instruction.status = STATUS_ERR_ARG_OUT_OF_RANGE;
 8001108:	2308      	movs	r3, #8
 800110a:	723b      	strb	r3, [r7, #8]
      return instruction;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	461c      	mov	r4, r3
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001116:	6020      	str	r0, [r4, #0]
 8001118:	6061      	str	r1, [r4, #4]
 800111a:	60a2      	str	r2, [r4, #8]
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	81a3      	strh	r3, [r4, #12]
 8001120:	e02c      	b.n	800117c <parse_instruction+0x194>
    }
    if (instruction.arg_count >= INSTRUCTION_MAX_ARGS) {
 8001122:	8abb      	ldrh	r3, [r7, #20]
 8001124:	2b03      	cmp	r3, #3
 8001126:	d90c      	bls.n	8001142 <parse_instruction+0x15a>
      instruction.status = STATUS_ERR_TOO_MANY_ARGS;
 8001128:	2309      	movs	r3, #9
 800112a:	723b      	strb	r3, [r7, #8]
      return instruction;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	461c      	mov	r4, r3
 8001130:	f107 0308 	add.w	r3, r7, #8
 8001134:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001136:	6020      	str	r0, [r4, #0]
 8001138:	6061      	str	r1, [r4, #4]
 800113a:	60a2      	str	r2, [r4, #8]
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	81a3      	strh	r3, [r4, #12]
 8001140:	e01c      	b.n	800117c <parse_instruction+0x194>
    }
    instruction.arguments[instruction.arg_count++] = num;
 8001142:	8abb      	ldrh	r3, [r7, #20]
 8001144:	1c5a      	adds	r2, r3, #1
 8001146:	b292      	uxth	r2, r2
 8001148:	82ba      	strh	r2, [r7, #20]
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	b292      	uxth	r2, r2
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	3328      	adds	r3, #40	@ 0x28
 8001152:	443b      	add	r3, r7
 8001154:	f823 2c1c 	strh.w	r2, [r3, #-28]
  while ((digit_token_p = strtok(NULL, "|}")) != NULL) {
 8001158:	490a      	ldr	r1, [pc, #40]	@ (8001184 <parse_instruction+0x19c>)
 800115a:	2000      	movs	r0, #0
 800115c:	f005 fd8c 	bl	8006c78 <strtok>
 8001160:	61f8      	str	r0, [r7, #28]
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1a6      	bne.n	80010b6 <parse_instruction+0xce>
  }

  return instruction;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	461c      	mov	r4, r3
 800116c:	f107 0308 	add.w	r3, r7, #8
 8001170:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001172:	6020      	str	r0, [r4, #0]
 8001174:	6061      	str	r1, [r4, #4]
 8001176:	60a2      	str	r2, [r4, #8]
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	81a3      	strh	r3, [r4, #12]
}
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	372c      	adds	r7, #44	@ 0x2c
 8001180:	46bd      	mov	sp, r7
 8001182:	bd90      	pop	{r4, r7, pc}
 8001184:	08008d54 	.word	0x08008d54

08001188 <adxl_tx>:



void adxl_tx(uint8_t address, uint8_t value) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	460a      	mov	r2, r1
 8001192:	71fb      	strb	r3, [r7, #7]
 8001194:	4613      	mov	r3, r2
 8001196:	71bb      	strb	r3, [r7, #6]
  uint8_t data[2];
  data[0] = address | BIT_6_MASK;  // Multibyte write enabled
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	733b      	strb	r3, [r7, #12]
  data[1] = value;
 80011a2:	79bb      	ldrb	r3, [r7, #6]
 80011a4:	737b      	strb	r3, [r7, #13]
  HAL_GPIO_WritePin(ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_RESET); // Pull the cs pin low to enable the slave
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011ac:	4809      	ldr	r0, [pc, #36]	@ (80011d4 <adxl_tx+0x4c>)
 80011ae:	f001 fdc9 	bl	8002d44 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, data, sizeof(data), ADXL_TIMEOUT); // Transmit the address and data
 80011b2:	f107 010c 	add.w	r1, r7, #12
 80011b6:	2364      	movs	r3, #100	@ 0x64
 80011b8:	2202      	movs	r2, #2
 80011ba:	4807      	ldr	r0, [pc, #28]	@ (80011d8 <adxl_tx+0x50>)
 80011bc:	f002 fb17 	bl	80037ee <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_SET); // Pull the cs pin high to disable the slave
 80011c0:	2201      	movs	r2, #1
 80011c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011c6:	4803      	ldr	r0, [pc, #12]	@ (80011d4 <adxl_tx+0x4c>)
 80011c8:	f001 fdbc 	bl	8002d44 <HAL_GPIO_WritePin>
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40020400 	.word	0x40020400
 80011d8:	20001960 	.word	0x20001960

080011dc <adxl_rx>:

void adxl_rx(uint8_t address) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
  address |= BIT_7_MASK;  // Read operation
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	71fb      	strb	r3, [r7, #7]
  address |= BIT_6_MASK;  // Multibyte read
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_RESET);  // Pull the cs pin low to enable the slave
 80011fa:	2200      	movs	r2, #0
 80011fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001200:	480c      	ldr	r0, [pc, #48]	@ (8001234 <adxl_rx+0x58>)
 8001202:	f001 fd9f 	bl	8002d44 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &address, ADXL_ADDRESS_SIZE, ADXL_TIMEOUT);  // Send single-byte address from where you want to read data
 8001206:	1df9      	adds	r1, r7, #7
 8001208:	2364      	movs	r3, #100	@ 0x64
 800120a:	2201      	movs	r2, #1
 800120c:	480a      	ldr	r0, [pc, #40]	@ (8001238 <adxl_rx+0x5c>)
 800120e:	f002 faee 	bl	80037ee <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3, adxl_rx_buf, ADXL_DATA_SIZE, ADXL_TIMEOUT);  // Read the 6 bytes of data
 8001212:	2364      	movs	r3, #100	@ 0x64
 8001214:	2206      	movs	r2, #6
 8001216:	4909      	ldr	r1, [pc, #36]	@ (800123c <adxl_rx+0x60>)
 8001218:	4807      	ldr	r0, [pc, #28]	@ (8001238 <adxl_rx+0x5c>)
 800121a:	f002 fc2c 	bl	8003a76 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_SET);  // Pull the cs pin high to disable the slave
 800121e:	2201      	movs	r2, #1
 8001220:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001224:	4803      	ldr	r0, [pc, #12]	@ (8001234 <adxl_rx+0x58>)
 8001226:	f001 fd8d 	bl	8002d44 <HAL_GPIO_WritePin>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40020400 	.word	0x40020400
 8001238:	20001960 	.word	0x20001960
 800123c:	20001a90 	.word	0x20001a90

08001240 <adxl_init>:

void adxl_init(void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  HAL_Delay(STARTUP_DELAY);
 8001244:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001248:	f000 ff48 	bl	80020dc <HAL_Delay>
  adxl_tx(ADXL_DATA_FORMAT, BIT_0_MASK);  // Data format range = +/- 4g
 800124c:	2101      	movs	r1, #1
 800124e:	2031      	movs	r0, #49	@ 0x31
 8001250:	f7ff ff9a 	bl	8001188 <adxl_tx>
  adxl_tx(ADXL_POWER_CTL, BIT_RESET_MASK);  // Reset all bits
 8001254:	2100      	movs	r1, #0
 8001256:	202d      	movs	r0, #45	@ 0x2d
 8001258:	f7ff ff96 	bl	8001188 <adxl_tx>
  adxl_tx(ADXL_POWER_CTL, BIT_3_MASK);  // Set power control mode to measure
 800125c:	2108      	movs	r1, #8
 800125e:	202d      	movs	r0, #45	@ 0x2d
 8001260:	f7ff ff92 	bl	8001188 <adxl_tx>
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}

08001268 <adxl_id>:

void adxl_id(void) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
  uint8_t device_id = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	77fb      	strb	r3, [r7, #31]
  adxl_rx(ADXL_DEVID); // Assuming this will populate 'adxl_rx_buf' with the Device ID
 8001272:	2000      	movs	r0, #0
 8001274:	f7ff ffb2 	bl	80011dc <adxl_rx>
  device_id = adxl_rx_buf[0]; // Assuming the ID is the first byte read
 8001278:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <adxl_id+0x58>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	77fb      	strb	r3, [r7, #31]

  #ifdef DEBUG
    char debug_buf[30];
    sprintf(debug_buf, "Device ID: 0x%X\r\n", device_id);
 800127e:	7ffa      	ldrb	r2, [r7, #31]
 8001280:	463b      	mov	r3, r7
 8001282:	4910      	ldr	r1, [pc, #64]	@ (80012c4 <adxl_id+0x5c>)
 8001284:	4618      	mov	r0, r3
 8001286:	f005 fc7f 	bl	8006b88 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)debug_buf, strlen(debug_buf), UART_TX_TIMEOUT);
 800128a:	463b      	mov	r3, r7
 800128c:	4618      	mov	r0, r3
 800128e:	f7fe fff7 	bl	8000280 <strlen>
 8001292:	4603      	mov	r3, r0
 8001294:	b29a      	uxth	r2, r3
 8001296:	4639      	mov	r1, r7
 8001298:	2332      	movs	r3, #50	@ 0x32
 800129a:	480b      	ldr	r0, [pc, #44]	@ (80012c8 <adxl_id+0x60>)
 800129c:	f003 fe68 	bl	8004f70 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)debug_buf, strlen(debug_buf), UART_TX_TIMEOUT);
 80012a0:	463b      	mov	r3, r7
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7fe ffec 	bl	8000280 <strlen>
 80012a8:	4603      	mov	r3, r0
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	4639      	mov	r1, r7
 80012ae:	2332      	movs	r3, #50	@ 0x32
 80012b0:	4806      	ldr	r0, [pc, #24]	@ (80012cc <adxl_id+0x64>)
 80012b2:	f003 fe5d 	bl	8004f70 <HAL_UART_Transmit>
  #endif
}
 80012b6:	bf00      	nop
 80012b8:	3720      	adds	r7, #32
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20001a90 	.word	0x20001a90
 80012c4:	08008d58 	.word	0x08008d58
 80012c8:	20001a00 	.word	0x20001a00
 80012cc:	20001a48 	.word	0x20001a48

080012d0 <startup_state_handler>:
  }
  return STATUS_OK;
}

//* Event Handlers
system_state_t startup_state_handler(void) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  //* PWM
  // Internal Clock (HCLK) = 100 MHz. If Prescaler = (100 - 1) & Max Timer Count = (20000 - 1),
  // then f = 100 MHz / 100 = 1 MHz, T = 1 us, and PWM f = 1/(20000 * T) = 50 Hz
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80012d4:	2100      	movs	r1, #0
 80012d6:	4809      	ldr	r0, [pc, #36]	@ (80012fc <startup_state_handler+0x2c>)
 80012d8:	f003 f87a 	bl	80043d0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80012dc:	2104      	movs	r1, #4
 80012de:	4807      	ldr	r0, [pc, #28]	@ (80012fc <startup_state_handler+0x2c>)
 80012e0:	f003 f876 	bl	80043d0 <HAL_TIM_PWM_Start>

  //* Accelerometer
  adxl_init();
 80012e4:	f7ff ffac 	bl	8001240 <adxl_init>
  adxl_id();
 80012e8:	f7ff ffbe 	bl	8001268 <adxl_id>

  //* UART
  // Rx Interrupt Setup
  HAL_UART_Receive_IT(&huart2, (uint8_t *)uart_rx_char, 1U); // Receive single char
 80012ec:	2201      	movs	r2, #1
 80012ee:	4904      	ldr	r1, [pc, #16]	@ (8001300 <startup_state_handler+0x30>)
 80012f0:	4804      	ldr	r0, [pc, #16]	@ (8001304 <startup_state_handler+0x34>)
 80012f2:	f003 fec8 	bl	8005086 <HAL_UART_Receive_IT>

  return INSTRUCTION_WAIT_STATE;
 80012f6:	2301      	movs	r3, #1
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	200019b8 	.word	0x200019b8
 8001300:	20001a98 	.word	0x20001a98
 8001304:	20001a48 	.word	0x20001a48

08001308 <instruction_wait_state_handler>:

system_state_t instruction_wait_state_handler(void) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
  static char uart_tx_buf[UART_TX_BUF_LEN];
  static char uart_rx_buf[UART_RX_BUF_LEN];

  //* Wait for UART instruction_flag to trigger via interrupt
  if (instruction_flag) {
 800130e:	4b3d      	ldr	r3, [pc, #244]	@ (8001404 <instruction_wait_state_handler+0xfc>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d070      	beq.n	80013f8 <instruction_wait_state_handler+0xf0>
    strcpy(uart_rx_buf, uart_circ_buf); // TODO: True circular buffer
 8001316:	493c      	ldr	r1, [pc, #240]	@ (8001408 <instruction_wait_state_handler+0x100>)
 8001318:	483c      	ldr	r0, [pc, #240]	@ (800140c <instruction_wait_state_handler+0x104>)
 800131a:	f005 fd90 	bl	8006e3e <strcpy>

    if (uart_it_status != STATUS_OK) {
 800131e:	4b3c      	ldr	r3, [pc, #240]	@ (8001410 <instruction_wait_state_handler+0x108>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00a      	beq.n	800133c <instruction_wait_state_handler+0x34>

      // Echo received instruction with error status
      uart_echo(uart_tx_buf, uart_rx_buf, uart_it_status);
 8001326:	4b3a      	ldr	r3, [pc, #232]	@ (8001410 <instruction_wait_state_handler+0x108>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	4937      	ldr	r1, [pc, #220]	@ (800140c <instruction_wait_state_handler+0x104>)
 800132e:	4839      	ldr	r0, [pc, #228]	@ (8001414 <instruction_wait_state_handler+0x10c>)
 8001330:	f7ff fdfa 	bl	8000f28 <uart_echo>
      uart_it_status = STATUS_OK;
 8001334:	4b36      	ldr	r3, [pc, #216]	@ (8001410 <instruction_wait_state_handler+0x108>)
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
 800133a:	e050      	b.n	80013de <instruction_wait_state_handler+0xd6>

    } else if (uart_it_status == STATUS_OK) {
 800133c:	4b34      	ldr	r3, [pc, #208]	@ (8001410 <instruction_wait_state_handler+0x108>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d14c      	bne.n	80013de <instruction_wait_state_handler+0xd6>

      //* Parse received instruction
      // Copy UART buffer to prevent parse_instruction() from manipulating the original (due to strtok())
      char* parse_buf = calloc((strlen(uart_rx_buf) + 1U), sizeof(char)); // Allocate memory based on size of text in buffer
 8001344:	4831      	ldr	r0, [pc, #196]	@ (800140c <instruction_wait_state_handler+0x104>)
 8001346:	f7fe ff9b 	bl	8000280 <strlen>
 800134a:	4603      	mov	r3, r0
 800134c:	3301      	adds	r3, #1
 800134e:	2101      	movs	r1, #1
 8001350:	4618      	mov	r0, r3
 8001352:	f004 fe13 	bl	8005f7c <calloc>
 8001356:	4603      	mov	r3, r0
 8001358:	613b      	str	r3, [r7, #16]
      strcpy(parse_buf, uart_rx_buf);
 800135a:	492c      	ldr	r1, [pc, #176]	@ (800140c <instruction_wait_state_handler+0x104>)
 800135c:	6938      	ldr	r0, [r7, #16]
 800135e:	f005 fd6e 	bl	8006e3e <strcpy>

      instruction_t instruction = parse_instruction(parse_buf);
 8001362:	463b      	mov	r3, r7
 8001364:	6939      	ldr	r1, [r7, #16]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fe3e 	bl	8000fe8 <parse_instruction>
      free(parse_buf); // Free memory allocated by calloc()
 800136c:	6938      	ldr	r0, [r7, #16]
 800136e:	f004 fe29 	bl	8005fc4 <free>

      //* Echo received instruction with status after parsing
      // TODO: Check valid instruction code and args with our set of instructions
      uart_echo(uart_tx_buf, uart_rx_buf, instruction.status);
 8001372:	783b      	ldrb	r3, [r7, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	4925      	ldr	r1, [pc, #148]	@ (800140c <instruction_wait_state_handler+0x104>)
 8001378:	4826      	ldr	r0, [pc, #152]	@ (8001414 <instruction_wait_state_handler+0x10c>)
 800137a:	f7ff fdd5 	bl	8000f28 <uart_echo>

      //* Instruction switch
      // TODO: Finish all cases in instruction_code_t
      switch (instruction.code) {
 800137e:	887b      	ldrh	r3, [r7, #2]
 8001380:	461a      	mov	r2, r3
 8001382:	f240 33e6 	movw	r3, #998	@ 0x3e6
 8001386:	429a      	cmp	r2, r3
 8001388:	d104      	bne.n	8001394 <instruction_wait_state_handler+0x8c>
        case TEST_LED_INSTRUCTION:
          HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800138a:	2120      	movs	r1, #32
 800138c:	4822      	ldr	r0, [pc, #136]	@ (8001418 <instruction_wait_state_handler+0x110>)
 800138e:	f001 fcf2 	bl	8002d76 <HAL_GPIO_TogglePin>
          break;
 8001392:	bf00      	nop
      }

      // TODO: Change debug_print() to print with UART
      debug_print("Echo: %s\n", uart_tx_buf);
 8001394:	491f      	ldr	r1, [pc, #124]	@ (8001414 <instruction_wait_state_handler+0x10c>)
 8001396:	4821      	ldr	r0, [pc, #132]	@ (800141c <instruction_wait_state_handler+0x114>)
 8001398:	f005 fbe4 	bl	8006b64 <iprintf>

      debug_print("Instruction code: %d\n", instruction.code);
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	4619      	mov	r1, r3
 80013a0:	481f      	ldr	r0, [pc, #124]	@ (8001420 <instruction_wait_state_handler+0x118>)
 80013a2:	f005 fbdf 	bl	8006b64 <iprintf>
      for (int i = 0; i < instruction.arg_count; ++i) {
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	e00e      	b.n	80013ca <instruction_wait_state_handler+0xc2>
        debug_print("Argument %d: %d\n", i + 1, instruction.arguments[i]);
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	1c59      	adds	r1, r3, #1
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	3318      	adds	r3, #24
 80013b6:	443b      	add	r3, r7
 80013b8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80013bc:	461a      	mov	r2, r3
 80013be:	4819      	ldr	r0, [pc, #100]	@ (8001424 <instruction_wait_state_handler+0x11c>)
 80013c0:	f005 fbd0 	bl	8006b64 <iprintf>
      for (int i = 0; i < instruction.arg_count; ++i) {
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	3301      	adds	r3, #1
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	89bb      	ldrh	r3, [r7, #12]
 80013cc:	461a      	mov	r2, r3
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	4293      	cmp	r3, r2
 80013d2:	dbeb      	blt.n	80013ac <instruction_wait_state_handler+0xa4>
      }
      debug_print("Arg Count: %d\n", instruction.arg_count);
 80013d4:	89bb      	ldrh	r3, [r7, #12]
 80013d6:	4619      	mov	r1, r3
 80013d8:	4813      	ldr	r0, [pc, #76]	@ (8001428 <instruction_wait_state_handler+0x120>)
 80013da:	f005 fbc3 	bl	8006b64 <iprintf>

    }
    // Reset buffers and flags
    memset(uart_circ_buf, 0, sizeof(uart_circ_buf)); // TODO: True circular buffer
 80013de:	227c      	movs	r2, #124	@ 0x7c
 80013e0:	2100      	movs	r1, #0
 80013e2:	4809      	ldr	r0, [pc, #36]	@ (8001408 <instruction_wait_state_handler+0x100>)
 80013e4:	f005 fc33 	bl	8006c4e <memset>
    memset(uart_tx_buf, 0, sizeof(uart_tx_buf));
 80013e8:	2280      	movs	r2, #128	@ 0x80
 80013ea:	2100      	movs	r1, #0
 80013ec:	4809      	ldr	r0, [pc, #36]	@ (8001414 <instruction_wait_state_handler+0x10c>)
 80013ee:	f005 fc2e 	bl	8006c4e <memset>
    instruction_flag = 0;
 80013f2:	4b04      	ldr	r3, [pc, #16]	@ (8001404 <instruction_wait_state_handler+0xfc>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
  }
  return INSTRUCTION_WAIT_STATE;
 80013f8:	2301      	movs	r3, #1
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20001b18 	.word	0x20001b18
 8001408:	20001a9c 	.word	0x20001a9c
 800140c:	20001b20 	.word	0x20001b20
 8001410:	20001b19 	.word	0x20001b19
 8001414:	20001b9c 	.word	0x20001b9c
 8001418:	40020000 	.word	0x40020000
 800141c:	08008f94 	.word	0x08008f94
 8001420:	08008fa0 	.word	0x08008fa0
 8001424:	08008fb8 	.word	0x08008fb8
 8001428:	08008fcc 	.word	0x08008fcc

0800142c <edit_sequence_state_handler>:

system_state_t edit_sequence_state_handler(void) {
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  // Allow user to define and store a sequence
  return INSTRUCTION_WAIT_STATE;
 8001430:	2301      	movs	r3, #1
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <run_state_handler>:

system_state_t run_state_handler(void) {
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  // Listen for stop commands
  // Run test setpoint
  // Calls move servo function
  return INSTRUCTION_WAIT_STATE;
 8001440:	2301      	movs	r3, #1
}
 8001442:	4618      	mov	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <SaveStructArrayToFlash.0>:
  /* USER CODE BEGIN 2 */

  //* Startup State
  system_state_t next_state_e = STARTUP_STATE;
  //* Unlock flash memory to write
  void SaveStructArrayToFlash(setpoint_t* array, uint32_t array_size) {
 800144c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001450:	b08e      	sub	sp, #56	@ 0x38
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	f8c7 c004 	str.w	ip, [r7, #4]
      // Unlock flash memory for writing
      HAL_FLASH_Unlock();
 800145c:	f001 f85a 	bl	8002514 <HAL_FLASH_Unlock>

      // Erase the flash memory sector where storing the struct
      FLASH_EraseInitTypeDef erase_init_struct;
      uint32_t page_error = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]

      erase_init_struct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001464:	2300      	movs	r3, #0
 8001466:	61bb      	str	r3, [r7, #24]
      erase_init_struct.Sector = SECTOR_NUMBER;
 8001468:	2306      	movs	r3, #6
 800146a:	623b      	str	r3, [r7, #32]
      erase_init_struct.NbSectors = 1;
 800146c:	2301      	movs	r3, #1
 800146e:	627b      	str	r3, [r7, #36]	@ 0x24
      erase_init_struct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001470:	2302      	movs	r3, #2
 8001472:	62bb      	str	r3, [r7, #40]	@ 0x28

      if (HAL_FLASHEx_Erase(&erase_init_struct, &page_error) != HAL_OK) {
 8001474:	f107 0214 	add.w	r2, r7, #20
 8001478:	f107 0318 	add.w	r3, r7, #24
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f001 f9ba 	bl	80027f8 <HAL_FLASHEx_Erase>
          // Handle error
      }

      // writing the struct array to flash memory
      uint32_t start_address = FLASH_USER_START_ADDR;
 8001484:	4b2b      	ldr	r3, [pc, #172]	@ (8001534 <SaveStructArrayToFlash.0+0xe8>)
 8001486:	633b      	str	r3, [r7, #48]	@ 0x30
      for (uint32_t i = 0; i < array_size; i++) {
 8001488:	2300      	movs	r3, #0
 800148a:	637b      	str	r3, [r7, #52]	@ 0x34
 800148c:	e046      	b.n	800151c <SaveStructArrayToFlash.0+0xd0>
          uint32_t address = start_address + (i * sizeof(setpoint_t));
 800148e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001490:	4613      	mov	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	461a      	mov	r2, r3
 800149a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800149c:	4413      	add	r3, r2
 800149e:	62fb      	str	r3, [r7, #44]	@ 0x2c

          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address, array[i].x) != HAL_OK) {
 80014a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014a2:	4613      	mov	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4413      	add	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	461a      	mov	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4413      	add	r3, r2
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	2200      	movs	r2, #0
 80014b6:	461c      	mov	r4, r3
 80014b8:	4615      	mov	r5, r2
 80014ba:	4622      	mov	r2, r4
 80014bc:	462b      	mov	r3, r5
 80014be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80014c0:	2001      	movs	r0, #1
 80014c2:	f000 ffd3 	bl	800246c <HAL_FLASH_Program>
              // Handle error
          }
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 2, array[i].y) != HAL_OK) {
 80014c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c8:	1c99      	adds	r1, r3, #2
 80014ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	461a      	mov	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4413      	add	r3, r2
 80014da:	885b      	ldrh	r3, [r3, #2]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	2200      	movs	r2, #0
 80014e0:	4698      	mov	r8, r3
 80014e2:	4691      	mov	r9, r2
 80014e4:	4642      	mov	r2, r8
 80014e6:	464b      	mov	r3, r9
 80014e8:	2001      	movs	r0, #1
 80014ea:	f000 ffbf 	bl	800246c <HAL_FLASH_Program>
              // Handle error
          }
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + 4, array[i].speed) != HAL_OK) {
 80014ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014f0:	1d19      	adds	r1, r3, #4
 80014f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80014f4:	4613      	mov	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	4413      	add	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	461a      	mov	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4413      	add	r3, r2
 8001502:	889b      	ldrh	r3, [r3, #4]
 8001504:	b29b      	uxth	r3, r3
 8001506:	2200      	movs	r2, #0
 8001508:	469a      	mov	sl, r3
 800150a:	4693      	mov	fp, r2
 800150c:	4652      	mov	r2, sl
 800150e:	465b      	mov	r3, fp
 8001510:	2001      	movs	r0, #1
 8001512:	f000 ffab 	bl	800246c <HAL_FLASH_Program>
      for (uint32_t i = 0; i < array_size; i++) {
 8001516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001518:	3301      	adds	r3, #1
 800151a:	637b      	str	r3, [r7, #52]	@ 0x34
 800151c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	429a      	cmp	r2, r3
 8001522:	d3b4      	bcc.n	800148e <SaveStructArrayToFlash.0+0x42>
              // Handle error
          }
      }

      // Lock flash memory after writing
      HAL_FLASH_Lock();
 8001524:	f001 f818 	bl	8002558 <HAL_FLASH_Lock>
  }
 8001528:	bf00      	nop
 800152a:	3738      	adds	r7, #56	@ 0x38
 800152c:	46bd      	mov	sp, r7
 800152e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001532:	bf00      	nop
 8001534:	08040000 	.word	0x08040000

08001538 <main>:
{
 8001538:	b580      	push	{r7, lr}
 800153a:	f5ad 5dbb 	sub.w	sp, sp, #5984	@ 0x1760
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
int main(void)
 8001542:	f507 53bc 	add.w	r3, r7, #6016	@ 0x1780
 8001546:	f507 52bb 	add.w	r2, r7, #5984	@ 0x1760
 800154a:	f102 0210 	add.w	r2, r2, #16
 800154e:	6013      	str	r3, [r2, #0]
  HAL_Init();
 8001550:	f000 fd52 	bl	8001ff8 <HAL_Init>
  SystemClock_Config();
 8001554:	f000 f8b8 	bl	80016c8 <SystemClock_Config>
  MX_GPIO_Init();
 8001558:	f000 fa28 	bl	80019ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800155c:	f000 f9fc 	bl	8001958 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8001560:	f000 f91a 	bl	8001798 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001564:	f000 f9ce 	bl	8001904 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001568:	f000 f94c 	bl	8001804 <MX_TIM2_Init>
  system_state_t next_state_e = STARTUP_STATE;
 800156c:	2300      	movs	r3, #0
 800156e:	f507 52bb 	add.w	r2, r7, #5984	@ 0x1760
 8001572:	f102 0217 	add.w	r2, r2, #23
 8001576:	7013      	strb	r3, [r2, #0]

  //call the save to flash function
  SaveStructArrayToFlash(setpoints, MAX_LEN);
 8001578:	f507 53bb 	add.w	r3, r7, #5984	@ 0x1760
 800157c:	f103 0310 	add.w	r3, r3, #16
 8001580:	469c      	mov	ip, r3
 8001582:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001586:	4828      	ldr	r0, [pc, #160]	@ (8001628 <main+0xf0>)
 8001588:	f7ff ff60 	bl	800144c <SaveStructArrayToFlash.0>
      }
  }
  // define the loaded-from-flash setpoints
  setpoint_t loaded_setpoints[MAX_LEN];
  // call the load-from-flash function
  LoadStructArrayFromFlash(loaded_setpoints, MAX_LEN);
 800158c:	f107 0318 	add.w	r3, r7, #24
 8001590:	3b18      	subs	r3, #24
 8001592:	f507 52bb 	add.w	r2, r7, #5984	@ 0x1760
 8001596:	f102 0210 	add.w	r2, r2, #16
 800159a:	4694      	mov	ip, r2
 800159c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80015a0:	4618      	mov	r0, r3
 80015a2:	f000 f843 	bl	800162c <LoadStructArrayFromFlash.1>

    /* USER CODE BEGIN 3 */

    //* State Handlers
    // Perform functions for given state, then return the value of the next state
    switch (next_state_e) {
 80015a6:	f507 53bb 	add.w	r3, r7, #5984	@ 0x1760
 80015aa:	f103 0317 	add.w	r3, r3, #23
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d82f      	bhi.n	8001614 <main+0xdc>
 80015b4:	a201      	add	r2, pc, #4	@ (adr r2, 80015bc <main+0x84>)
 80015b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ba:	bf00      	nop
 80015bc:	080015cd 	.word	0x080015cd
 80015c0:	080015df 	.word	0x080015df
 80015c4:	080015f1 	.word	0x080015f1
 80015c8:	08001603 	.word	0x08001603
      case STARTUP_STATE:
        next_state_e = startup_state_handler();
 80015cc:	f7ff fe80 	bl	80012d0 <startup_state_handler>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f507 52bb 	add.w	r2, r7, #5984	@ 0x1760
 80015d6:	f102 0217 	add.w	r2, r2, #23
 80015da:	7013      	strb	r3, [r2, #0]
        break;
 80015dc:	e023      	b.n	8001626 <main+0xee>
      case INSTRUCTION_WAIT_STATE:
        next_state_e = instruction_wait_state_handler();
 80015de:	f7ff fe93 	bl	8001308 <instruction_wait_state_handler>
 80015e2:	4603      	mov	r3, r0
 80015e4:	f507 52bb 	add.w	r2, r7, #5984	@ 0x1760
 80015e8:	f102 0217 	add.w	r2, r2, #23
 80015ec:	7013      	strb	r3, [r2, #0]
        break;
 80015ee:	e01a      	b.n	8001626 <main+0xee>
      case EDIT_SEQUENCE_STATE:
        next_state_e = edit_sequence_state_handler();
 80015f0:	f7ff ff1c 	bl	800142c <edit_sequence_state_handler>
 80015f4:	4603      	mov	r3, r0
 80015f6:	f507 52bb 	add.w	r2, r7, #5984	@ 0x1760
 80015fa:	f102 0217 	add.w	r2, r2, #23
 80015fe:	7013      	strb	r3, [r2, #0]
        break;
 8001600:	e011      	b.n	8001626 <main+0xee>
      case RUN_STATE:
        next_state_e = run_state_handler();
 8001602:	f7ff ff1b 	bl	800143c <run_state_handler>
 8001606:	4603      	mov	r3, r0
 8001608:	f507 52bb 	add.w	r2, r7, #5984	@ 0x1760
 800160c:	f102 0217 	add.w	r2, r2, #23
 8001610:	7013      	strb	r3, [r2, #0]
        break;
 8001612:	e008      	b.n	8001626 <main+0xee>
      default:
        next_state_e = startup_state_handler();
 8001614:	f7ff fe5c 	bl	80012d0 <startup_state_handler>
 8001618:	4603      	mov	r3, r0
 800161a:	f507 52bb 	add.w	r2, r7, #5984	@ 0x1760
 800161e:	f102 0217 	add.w	r2, r2, #23
 8001622:	7013      	strb	r3, [r2, #0]
        break;
 8001624:	bf00      	nop
    switch (next_state_e) {
 8001626:	e7be      	b.n	80015a6 <main+0x6e>
 8001628:	20000000 	.word	0x20000000

0800162c <LoadStructArrayFromFlash.1>:
  void LoadStructArrayFromFlash(setpoint_t* array, uint32_t array_size) {
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	@ 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	f8c7 c004 	str.w	ip, [r7, #4]
      uint32_t start_address = FLASH_USER_START_ADDR;
 800163a:	4b22      	ldr	r3, [pc, #136]	@ (80016c4 <LoadStructArrayFromFlash.1+0x98>)
 800163c:	61bb      	str	r3, [r7, #24]
      for (uint32_t i = 0; i < array_size; i++) {
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	e033      	b.n	80016ac <LoadStructArrayFromFlash.1+0x80>
          uint32_t address = start_address + (i * sizeof(setpoint_t));
 8001644:	69fa      	ldr	r2, [r7, #28]
 8001646:	4613      	mov	r3, r2
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4413      	add	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	461a      	mov	r2, r3
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	4413      	add	r3, r2
 8001654:	617b      	str	r3, [r7, #20]
          array[i].x = *(__IO uint16_t*)address;
 8001656:	6979      	ldr	r1, [r7, #20]
 8001658:	69fa      	ldr	r2, [r7, #28]
 800165a:	4613      	mov	r3, r2
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4413      	add	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4413      	add	r3, r2
 8001668:	880a      	ldrh	r2, [r1, #0]
 800166a:	b292      	uxth	r2, r2
 800166c:	801a      	strh	r2, [r3, #0]
          array[i].y = *(__IO uint16_t*)(address + 2);
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	3302      	adds	r3, #2
 8001672:	4619      	mov	r1, r3
 8001674:	69fa      	ldr	r2, [r7, #28]
 8001676:	4613      	mov	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	461a      	mov	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4413      	add	r3, r2
 8001684:	880a      	ldrh	r2, [r1, #0]
 8001686:	b292      	uxth	r2, r2
 8001688:	805a      	strh	r2, [r3, #2]
          array[i].speed = *(__IO uint16_t*)(address + 4);
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	3304      	adds	r3, #4
 800168e:	4619      	mov	r1, r3
 8001690:	69fa      	ldr	r2, [r7, #28]
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	461a      	mov	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	880a      	ldrh	r2, [r1, #0]
 80016a2:	b292      	uxth	r2, r2
 80016a4:	809a      	strh	r2, [r3, #4]
      for (uint32_t i = 0; i < array_size; i++) {
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3301      	adds	r3, #1
 80016aa:	61fb      	str	r3, [r7, #28]
 80016ac:	69fa      	ldr	r2, [r7, #28]
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d3c7      	bcc.n	8001644 <LoadStructArrayFromFlash.1+0x18>
  }
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3724      	adds	r7, #36	@ 0x24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	08040000 	.word	0x08040000

080016c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b094      	sub	sp, #80	@ 0x50
 80016cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ce:	f107 0320 	add.w	r3, r7, #32
 80016d2:	2230      	movs	r2, #48	@ 0x30
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f005 fab9 	bl	8006c4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	4b27      	ldr	r3, [pc, #156]	@ (8001790 <SystemClock_Config+0xc8>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	4a26      	ldr	r2, [pc, #152]	@ (8001790 <SystemClock_Config+0xc8>)
 80016f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fc:	4b24      	ldr	r3, [pc, #144]	@ (8001790 <SystemClock_Config+0xc8>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001708:	2300      	movs	r3, #0
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	4b21      	ldr	r3, [pc, #132]	@ (8001794 <SystemClock_Config+0xcc>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a20      	ldr	r2, [pc, #128]	@ (8001794 <SystemClock_Config+0xcc>)
 8001712:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b1e      	ldr	r3, [pc, #120]	@ (8001794 <SystemClock_Config+0xcc>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001724:	2301      	movs	r3, #1
 8001726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001728:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800172c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800172e:	2302      	movs	r3, #2
 8001730:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001732:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001738:	2304      	movs	r3, #4
 800173a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800173c:	2364      	movs	r3, #100	@ 0x64
 800173e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001740:	2302      	movs	r3, #2
 8001742:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001744:	2304      	movs	r3, #4
 8001746:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001748:	f107 0320 	add.w	r3, r7, #32
 800174c:	4618      	mov	r0, r3
 800174e:	f001 fb2d 	bl	8002dac <HAL_RCC_OscConfig>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001758:	f000 f9ae 	bl	8001ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800175c:	230f      	movs	r3, #15
 800175e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001760:	2302      	movs	r3, #2
 8001762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001768:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800176c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	2103      	movs	r1, #3
 8001778:	4618      	mov	r0, r3
 800177a:	f001 fd8f 	bl	800329c <HAL_RCC_ClockConfig>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001784:	f000 f998 	bl	8001ab8 <Error_Handler>
  }
}
 8001788:	bf00      	nop
 800178a:	3750      	adds	r7, #80	@ 0x50
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40023800 	.word	0x40023800
 8001794:	40007000 	.word	0x40007000

08001798 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800179c:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <MX_SPI3_Init+0x64>)
 800179e:	4a18      	ldr	r2, [pc, #96]	@ (8001800 <MX_SPI3_Init+0x68>)
 80017a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80017a2:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <MX_SPI3_Init+0x64>)
 80017a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017a8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80017aa:	4b14      	ldr	r3, [pc, #80]	@ (80017fc <MX_SPI3_Init+0x64>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80017b0:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <MX_SPI3_Init+0x64>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80017b6:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <MX_SPI3_Init+0x64>)
 80017b8:	2202      	movs	r2, #2
 80017ba:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <MX_SPI3_Init+0x64>)
 80017be:	2201      	movs	r2, #1
 80017c0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <MX_SPI3_Init+0x64>)
 80017c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017c8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80017ca:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <MX_SPI3_Init+0x64>)
 80017cc:	2228      	movs	r2, #40	@ 0x28
 80017ce:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017d0:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <MX_SPI3_Init+0x64>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80017d6:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <MX_SPI3_Init+0x64>)
 80017d8:	2200      	movs	r2, #0
 80017da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017dc:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <MX_SPI3_Init+0x64>)
 80017de:	2200      	movs	r2, #0
 80017e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <MX_SPI3_Init+0x64>)
 80017e4:	220a      	movs	r2, #10
 80017e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80017e8:	4804      	ldr	r0, [pc, #16]	@ (80017fc <MX_SPI3_Init+0x64>)
 80017ea:	f001 ff77 	bl	80036dc <HAL_SPI_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80017f4:	f000 f960 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20001960 	.word	0x20001960
 8001800:	40003c00 	.word	0x40003c00

08001804 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08e      	sub	sp, #56	@ 0x38
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800180a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001818:	f107 0320 	add.w	r3, r7, #32
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
 8001830:	615a      	str	r2, [r3, #20]
 8001832:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001834:	4b32      	ldr	r3, [pc, #200]	@ (8001900 <MX_TIM2_Init+0xfc>)
 8001836:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800183a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 800183c:	4b30      	ldr	r3, [pc, #192]	@ (8001900 <MX_TIM2_Init+0xfc>)
 800183e:	2263      	movs	r2, #99	@ 0x63
 8001840:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001842:	4b2f      	ldr	r3, [pc, #188]	@ (8001900 <MX_TIM2_Init+0xfc>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000 - 1;
 8001848:	4b2d      	ldr	r3, [pc, #180]	@ (8001900 <MX_TIM2_Init+0xfc>)
 800184a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800184e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001850:	4b2b      	ldr	r3, [pc, #172]	@ (8001900 <MX_TIM2_Init+0xfc>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001856:	4b2a      	ldr	r3, [pc, #168]	@ (8001900 <MX_TIM2_Init+0xfc>)
 8001858:	2280      	movs	r2, #128	@ 0x80
 800185a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800185c:	4828      	ldr	r0, [pc, #160]	@ (8001900 <MX_TIM2_Init+0xfc>)
 800185e:	f002 fd0f 	bl	8004280 <HAL_TIM_Base_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001868:	f000 f926 	bl	8001ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800186c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001870:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001872:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001876:	4619      	mov	r1, r3
 8001878:	4821      	ldr	r0, [pc, #132]	@ (8001900 <MX_TIM2_Init+0xfc>)
 800187a:	f002 ff1b 	bl	80046b4 <HAL_TIM_ConfigClockSource>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001884:	f000 f918 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001888:	481d      	ldr	r0, [pc, #116]	@ (8001900 <MX_TIM2_Init+0xfc>)
 800188a:	f002 fd48 	bl	800431e <HAL_TIM_PWM_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001894:	f000 f910 	bl	8001ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018a0:	f107 0320 	add.w	r3, r7, #32
 80018a4:	4619      	mov	r1, r3
 80018a6:	4816      	ldr	r0, [pc, #88]	@ (8001900 <MX_TIM2_Init+0xfc>)
 80018a8:	f003 faa4 	bl	8004df4 <HAL_TIMEx_MasterConfigSynchronization>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80018b2:	f000 f901 	bl	8001ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018b6:	2360      	movs	r3, #96	@ 0x60
 80018b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	2200      	movs	r2, #0
 80018ca:	4619      	mov	r1, r3
 80018cc:	480c      	ldr	r0, [pc, #48]	@ (8001900 <MX_TIM2_Init+0xfc>)
 80018ce:	f002 fe2f 	bl	8004530 <HAL_TIM_PWM_ConfigChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80018d8:	f000 f8ee 	bl	8001ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	2204      	movs	r2, #4
 80018e0:	4619      	mov	r1, r3
 80018e2:	4807      	ldr	r0, [pc, #28]	@ (8001900 <MX_TIM2_Init+0xfc>)
 80018e4:	f002 fe24 	bl	8004530 <HAL_TIM_PWM_ConfigChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80018ee:	f000 f8e3 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018f2:	4803      	ldr	r0, [pc, #12]	@ (8001900 <MX_TIM2_Init+0xfc>)
 80018f4:	f000 f976 	bl	8001be4 <HAL_TIM_MspPostInit>

}
 80018f8:	bf00      	nop
 80018fa:	3738      	adds	r7, #56	@ 0x38
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	200019b8 	.word	0x200019b8

08001904 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001908:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <MX_USART1_UART_Init+0x4c>)
 800190a:	4a12      	ldr	r2, [pc, #72]	@ (8001954 <MX_USART1_UART_Init+0x50>)
 800190c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = BAUD_RATE;
 800190e:	4b10      	ldr	r3, [pc, #64]	@ (8001950 <MX_USART1_UART_Init+0x4c>)
 8001910:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001914:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001916:	4b0e      	ldr	r3, [pc, #56]	@ (8001950 <MX_USART1_UART_Init+0x4c>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800191c:	4b0c      	ldr	r3, [pc, #48]	@ (8001950 <MX_USART1_UART_Init+0x4c>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001922:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <MX_USART1_UART_Init+0x4c>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001928:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <MX_USART1_UART_Init+0x4c>)
 800192a:	220c      	movs	r2, #12
 800192c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192e:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <MX_USART1_UART_Init+0x4c>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001934:	4b06      	ldr	r3, [pc, #24]	@ (8001950 <MX_USART1_UART_Init+0x4c>)
 8001936:	2200      	movs	r2, #0
 8001938:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800193a:	4805      	ldr	r0, [pc, #20]	@ (8001950 <MX_USART1_UART_Init+0x4c>)
 800193c:	f003 fac8 	bl	8004ed0 <HAL_UART_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001946:	f000 f8b7 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20001a00 	.word	0x20001a00
 8001954:	40011000 	.word	0x40011000

08001958 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <MX_USART2_UART_Init+0x4c>)
 800195e:	4a12      	ldr	r2, [pc, #72]	@ (80019a8 <MX_USART2_UART_Init+0x50>)
 8001960:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = BAUD_RATE;
 8001962:	4b10      	ldr	r3, [pc, #64]	@ (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001964:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001968:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800196a:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <MX_USART2_UART_Init+0x4c>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001970:	4b0c      	ldr	r3, [pc, #48]	@ (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001976:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800197c:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <MX_USART2_UART_Init+0x4c>)
 800197e:	220c      	movs	r2, #12
 8001980:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001982:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <MX_USART2_UART_Init+0x4c>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800198e:	4805      	ldr	r0, [pc, #20]	@ (80019a4 <MX_USART2_UART_Init+0x4c>)
 8001990:	f003 fa9e 	bl	8004ed0 <HAL_UART_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800199a:	f000 f88d 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20001a48 	.word	0x20001a48
 80019a8:	40004400 	.word	0x40004400

080019ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	@ 0x28
 80019b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b38      	ldr	r3, [pc, #224]	@ (8001aa8 <MX_GPIO_Init+0xfc>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	4a37      	ldr	r2, [pc, #220]	@ (8001aa8 <MX_GPIO_Init+0xfc>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d2:	4b35      	ldr	r3, [pc, #212]	@ (8001aa8 <MX_GPIO_Init+0xfc>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b31      	ldr	r3, [pc, #196]	@ (8001aa8 <MX_GPIO_Init+0xfc>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	4a30      	ldr	r2, [pc, #192]	@ (8001aa8 <MX_GPIO_Init+0xfc>)
 80019e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ee:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa8 <MX_GPIO_Init+0xfc>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa8 <MX_GPIO_Init+0xfc>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	4a29      	ldr	r2, [pc, #164]	@ (8001aa8 <MX_GPIO_Init+0xfc>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0a:	4b27      	ldr	r3, [pc, #156]	@ (8001aa8 <MX_GPIO_Init+0xfc>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	4b23      	ldr	r3, [pc, #140]	@ (8001aa8 <MX_GPIO_Init+0xfc>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	4a22      	ldr	r2, [pc, #136]	@ (8001aa8 <MX_GPIO_Init+0xfc>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a26:	4b20      	ldr	r3, [pc, #128]	@ (8001aa8 <MX_GPIO_Init+0xfc>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2120      	movs	r1, #32
 8001a36:	481d      	ldr	r0, [pc, #116]	@ (8001aac <MX_GPIO_Init+0x100>)
 8001a38:	f001 f984 	bl	8002d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_RESET);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001a42:	481b      	ldr	r0, [pc, #108]	@ (8001ab0 <MX_GPIO_Init+0x104>)
 8001a44:	f001 f97e 	bl	8002d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a4e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4815      	ldr	r0, [pc, #84]	@ (8001ab4 <MX_GPIO_Init+0x108>)
 8001a60:	f000 ffec 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a64:	2320      	movs	r3, #32
 8001a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	480c      	ldr	r0, [pc, #48]	@ (8001aac <MX_GPIO_Init+0x100>)
 8001a7c:	f000 ffde 	bl	8002a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADXL_CS_Pin */
  GPIO_InitStruct.Pin = ADXL_CS_Pin;
 8001a80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a86:	2301      	movs	r3, #1
 8001a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADXL_CS_GPIO_Port, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	@ (8001ab0 <MX_GPIO_Init+0x104>)
 8001a9a:	f000 ffcf 	bl	8002a3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a9e:	bf00      	nop
 8001aa0:	3728      	adds	r7, #40	@ 0x28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40020000 	.word	0x40020000
 8001ab0:	40020400 	.word	0x40020400
 8001ab4:	40020800 	.word	0x40020800

08001ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001abc:	b672      	cpsid	i
}
 8001abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac0:	bf00      	nop
 8001ac2:	e7fd      	b.n	8001ac0 <Error_Handler+0x8>

08001ac4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <HAL_MspInit+0x4c>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad2:	4a0f      	ldr	r2, [pc, #60]	@ (8001b10 <HAL_MspInit+0x4c>)
 8001ad4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ad8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ada:	4b0d      	ldr	r3, [pc, #52]	@ (8001b10 <HAL_MspInit+0x4c>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ade:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	603b      	str	r3, [r7, #0]
 8001aea:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <HAL_MspInit+0x4c>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	4a08      	ldr	r2, [pc, #32]	@ (8001b10 <HAL_MspInit+0x4c>)
 8001af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001af6:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <HAL_MspInit+0x4c>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b02:	2007      	movs	r0, #7
 8001b04:	f000 fbde 	bl	80022c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40023800 	.word	0x40023800

08001b14 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	@ 0x28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a19      	ldr	r2, [pc, #100]	@ (8001b98 <HAL_SPI_MspInit+0x84>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d12b      	bne.n	8001b8e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	4b18      	ldr	r3, [pc, #96]	@ (8001b9c <HAL_SPI_MspInit+0x88>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	4a17      	ldr	r2, [pc, #92]	@ (8001b9c <HAL_SPI_MspInit+0x88>)
 8001b40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b46:	4b15      	ldr	r3, [pc, #84]	@ (8001b9c <HAL_SPI_MspInit+0x88>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b11      	ldr	r3, [pc, #68]	@ (8001b9c <HAL_SPI_MspInit+0x88>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	4a10      	ldr	r2, [pc, #64]	@ (8001b9c <HAL_SPI_MspInit+0x88>)
 8001b5c:	f043 0302 	orr.w	r3, r3, #2
 8001b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b62:	4b0e      	ldr	r3, [pc, #56]	@ (8001b9c <HAL_SPI_MspInit+0x88>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = ADXL_SCL_Pin|ADXL_SDO_Pin|ADXL_SDA_Pin;
 8001b6e:	2338      	movs	r3, #56	@ 0x38
 8001b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b7e:	2306      	movs	r3, #6
 8001b80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b82:	f107 0314 	add.w	r3, r7, #20
 8001b86:	4619      	mov	r1, r3
 8001b88:	4805      	ldr	r0, [pc, #20]	@ (8001ba0 <HAL_SPI_MspInit+0x8c>)
 8001b8a:	f000 ff57 	bl	8002a3c <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001b8e:	bf00      	nop
 8001b90:	3728      	adds	r7, #40	@ 0x28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40003c00 	.word	0x40003c00
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40020400 	.word	0x40020400

08001ba4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bb4:	d10d      	bne.n	8001bd2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <HAL_TIM_Base_MspInit+0x3c>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bbe:	4a08      	ldr	r2, [pc, #32]	@ (8001be0 <HAL_TIM_Base_MspInit+0x3c>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bc6:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <HAL_TIM_Base_MspInit+0x3c>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001bd2:	bf00      	nop
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800

08001be4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 030c 	add.w	r3, r7, #12
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c04:	d11d      	bne.n	8001c42 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	4b10      	ldr	r3, [pc, #64]	@ (8001c4c <HAL_TIM_MspPostInit+0x68>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c4c <HAL_TIM_MspPostInit+0x68>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c16:	4b0d      	ldr	r3, [pc, #52]	@ (8001c4c <HAL_TIM_MspPostInit+0x68>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PWM_X_Pin|PWM_Y_Pin;
 8001c22:	2303      	movs	r3, #3
 8001c24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c32:	2301      	movs	r3, #1
 8001c34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4804      	ldr	r0, [pc, #16]	@ (8001c50 <HAL_TIM_MspPostInit+0x6c>)
 8001c3e:	f000 fefd 	bl	8002a3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c42:	bf00      	nop
 8001c44:	3720      	adds	r7, #32
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40020000 	.word	0x40020000

08001c54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b08c      	sub	sp, #48	@ 0x30
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5c:	f107 031c 	add.w	r3, r7, #28
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a3a      	ldr	r2, [pc, #232]	@ (8001d5c <HAL_UART_MspInit+0x108>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d135      	bne.n	8001ce2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	61bb      	str	r3, [r7, #24]
 8001c7a:	4b39      	ldr	r3, [pc, #228]	@ (8001d60 <HAL_UART_MspInit+0x10c>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7e:	4a38      	ldr	r2, [pc, #224]	@ (8001d60 <HAL_UART_MspInit+0x10c>)
 8001c80:	f043 0310 	orr.w	r3, r3, #16
 8001c84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c86:	4b36      	ldr	r3, [pc, #216]	@ (8001d60 <HAL_UART_MspInit+0x10c>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	61bb      	str	r3, [r7, #24]
 8001c90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	4b32      	ldr	r3, [pc, #200]	@ (8001d60 <HAL_UART_MspInit+0x10c>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	4a31      	ldr	r2, [pc, #196]	@ (8001d60 <HAL_UART_MspInit+0x10c>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca2:	4b2f      	ldr	r3, [pc, #188]	@ (8001d60 <HAL_UART_MspInit+0x10c>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cae:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cc0:	2307      	movs	r3, #7
 8001cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4826      	ldr	r0, [pc, #152]	@ (8001d64 <HAL_UART_MspInit+0x110>)
 8001ccc:	f000 feb6 	bl	8002a3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	2025      	movs	r0, #37	@ 0x25
 8001cd6:	f000 fb00 	bl	80022da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cda:	2025      	movs	r0, #37	@ 0x25
 8001cdc:	f000 fb19 	bl	8002312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ce0:	e038      	b.n	8001d54 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a20      	ldr	r2, [pc, #128]	@ (8001d68 <HAL_UART_MspInit+0x114>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d133      	bne.n	8001d54 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d60 <HAL_UART_MspInit+0x10c>)
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf4:	4a1a      	ldr	r2, [pc, #104]	@ (8001d60 <HAL_UART_MspInit+0x10c>)
 8001cf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cfc:	4b18      	ldr	r3, [pc, #96]	@ (8001d60 <HAL_UART_MspInit+0x10c>)
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	4b14      	ldr	r3, [pc, #80]	@ (8001d60 <HAL_UART_MspInit+0x10c>)
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d10:	4a13      	ldr	r2, [pc, #76]	@ (8001d60 <HAL_UART_MspInit+0x10c>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d18:	4b11      	ldr	r3, [pc, #68]	@ (8001d60 <HAL_UART_MspInit+0x10c>)
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d24:	230c      	movs	r3, #12
 8001d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d30:	2303      	movs	r3, #3
 8001d32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d34:	2307      	movs	r3, #7
 8001d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d38:	f107 031c 	add.w	r3, r7, #28
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4809      	ldr	r0, [pc, #36]	@ (8001d64 <HAL_UART_MspInit+0x110>)
 8001d40:	f000 fe7c 	bl	8002a3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d44:	2200      	movs	r2, #0
 8001d46:	2100      	movs	r1, #0
 8001d48:	2026      	movs	r0, #38	@ 0x26
 8001d4a:	f000 fac6 	bl	80022da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d4e:	2026      	movs	r0, #38	@ 0x26
 8001d50:	f000 fadf 	bl	8002312 <HAL_NVIC_EnableIRQ>
}
 8001d54:	bf00      	nop
 8001d56:	3730      	adds	r7, #48	@ 0x30
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40011000 	.word	0x40011000
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40020000 	.word	0x40020000
 8001d68:	40004400 	.word	0x40004400

08001d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <NMI_Handler+0x4>

08001d74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <HardFault_Handler+0x4>

08001d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <MemManage_Handler+0x4>

08001d84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d88:	bf00      	nop
 8001d8a:	e7fd      	b.n	8001d88 <BusFault_Handler+0x4>

08001d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d90:	bf00      	nop
 8001d92:	e7fd      	b.n	8001d90 <UsageFault_Handler+0x4>

08001d94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc2:	f000 f96b 	bl	800209c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dd0:	4802      	ldr	r0, [pc, #8]	@ (8001ddc <USART1_IRQHandler+0x10>)
 8001dd2:	f003 f97d 	bl	80050d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20001a00 	.word	0x20001a00

08001de0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001de4:	4802      	ldr	r0, [pc, #8]	@ (8001df0 <USART2_IRQHandler+0x10>)
 8001de6:	f003 f973 	bl	80050d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20001a48 	.word	0x20001a48

08001df4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return 1;
 8001df8:	2301      	movs	r3, #1
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <_kill>:

int _kill(int pid, int sig)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e0e:	f004 ffe9 	bl	8006de4 <__errno>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2216      	movs	r2, #22
 8001e16:	601a      	str	r2, [r3, #0]
  return -1;
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <_exit>:

void _exit (int status)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ffe7 	bl	8001e04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e36:	bf00      	nop
 8001e38:	e7fd      	b.n	8001e36 <_exit+0x12>

08001e3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	e00a      	b.n	8001e62 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e4c:	f3af 8000 	nop.w
 8001e50:	4601      	mov	r1, r0
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	60ba      	str	r2, [r7, #8]
 8001e58:	b2ca      	uxtb	r2, r1
 8001e5a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	dbf0      	blt.n	8001e4c <_read+0x12>
  }

  return len;
 8001e6a:	687b      	ldr	r3, [r7, #4]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	e009      	b.n	8001e9a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	60ba      	str	r2, [r7, #8]
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	3301      	adds	r3, #1
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	dbf1      	blt.n	8001e86 <_write+0x12>
  }
  return len;
 8001ea2:	687b      	ldr	r3, [r7, #4]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <_close>:

int _close(int file)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ed4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <_isatty>:

int _isatty(int file)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eec:	2301      	movs	r3, #1
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b085      	sub	sp, #20
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f1c:	4a14      	ldr	r2, [pc, #80]	@ (8001f70 <_sbrk+0x5c>)
 8001f1e:	4b15      	ldr	r3, [pc, #84]	@ (8001f74 <_sbrk+0x60>)
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f28:	4b13      	ldr	r3, [pc, #76]	@ (8001f78 <_sbrk+0x64>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d102      	bne.n	8001f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f30:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <_sbrk+0x64>)
 8001f32:	4a12      	ldr	r2, [pc, #72]	@ (8001f7c <_sbrk+0x68>)
 8001f34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f36:	4b10      	ldr	r3, [pc, #64]	@ (8001f78 <_sbrk+0x64>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d207      	bcs.n	8001f54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f44:	f004 ff4e 	bl	8006de4 <__errno>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f52:	e009      	b.n	8001f68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f54:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <_sbrk+0x64>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f5a:	4b07      	ldr	r3, [pc, #28]	@ (8001f78 <_sbrk+0x64>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	4a05      	ldr	r2, [pc, #20]	@ (8001f78 <_sbrk+0x64>)
 8001f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f66:	68fb      	ldr	r3, [r7, #12]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20020000 	.word	0x20020000
 8001f74:	00000400 	.word	0x00000400
 8001f78:	20001c1c 	.word	0x20001c1c
 8001f7c:	20001d90 	.word	0x20001d90

08001f80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f84:	4b06      	ldr	r3, [pc, #24]	@ (8001fa0 <SystemInit+0x20>)
 8001f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f8a:	4a05      	ldr	r2, [pc, #20]	@ (8001fa0 <SystemInit+0x20>)
 8001f8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fa8:	480d      	ldr	r0, [pc, #52]	@ (8001fe0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001faa:	490e      	ldr	r1, [pc, #56]	@ (8001fe4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fac:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb0:	e002      	b.n	8001fb8 <LoopCopyDataInit>

08001fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb6:	3304      	adds	r3, #4

08001fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fbc:	d3f9      	bcc.n	8001fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fbe:	4a0b      	ldr	r2, [pc, #44]	@ (8001fec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fc0:	4c0b      	ldr	r4, [pc, #44]	@ (8001ff0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc4:	e001      	b.n	8001fca <LoopFillZerobss>

08001fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc8:	3204      	adds	r2, #4

08001fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fcc:	d3fb      	bcc.n	8001fc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fce:	f7ff ffd7 	bl	8001f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fd2:	f004 ff0d 	bl	8006df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fd6:	f7ff faaf 	bl	8001538 <main>
  bx  lr    
 8001fda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe4:	20001944 	.word	0x20001944
  ldr r2, =_sidata
 8001fe8:	080093cc 	.word	0x080093cc
  ldr r2, =_sbss
 8001fec:	20001944 	.word	0x20001944
  ldr r4, =_ebss
 8001ff0:	20001d90 	.word	0x20001d90

08001ff4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff4:	e7fe      	b.n	8001ff4 <ADC_IRQHandler>
	...

08001ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <HAL_Init+0x40>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0d      	ldr	r2, [pc, #52]	@ (8002038 <HAL_Init+0x40>)
 8002002:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002006:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002008:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <HAL_Init+0x40>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a0a      	ldr	r2, [pc, #40]	@ (8002038 <HAL_Init+0x40>)
 800200e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002012:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002014:	4b08      	ldr	r3, [pc, #32]	@ (8002038 <HAL_Init+0x40>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a07      	ldr	r2, [pc, #28]	@ (8002038 <HAL_Init+0x40>)
 800201a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800201e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002020:	2003      	movs	r0, #3
 8002022:	f000 f94f 	bl	80022c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002026:	2000      	movs	r0, #0
 8002028:	f000 f808 	bl	800203c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800202c:	f7ff fd4a 	bl	8001ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023c00 	.word	0x40023c00

0800203c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002044:	4b12      	ldr	r3, [pc, #72]	@ (8002090 <HAL_InitTick+0x54>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <HAL_InitTick+0x58>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4619      	mov	r1, r3
 800204e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002052:	fbb3 f3f1 	udiv	r3, r3, r1
 8002056:	fbb2 f3f3 	udiv	r3, r2, r3
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f967 	bl	800232e <HAL_SYSTICK_Config>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e00e      	b.n	8002088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b0f      	cmp	r3, #15
 800206e:	d80a      	bhi.n	8002086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002070:	2200      	movs	r2, #0
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	f000 f92f 	bl	80022da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800207c:	4a06      	ldr	r2, [pc, #24]	@ (8002098 <HAL_InitTick+0x5c>)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	e000      	b.n	8002088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	20001770 	.word	0x20001770
 8002094:	20001778 	.word	0x20001778
 8002098:	20001774 	.word	0x20001774

0800209c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a0:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <HAL_IncTick+0x20>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <HAL_IncTick+0x24>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	4a04      	ldr	r2, [pc, #16]	@ (80020c0 <HAL_IncTick+0x24>)
 80020ae:	6013      	str	r3, [r2, #0]
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	20001778 	.word	0x20001778
 80020c0:	20001c20 	.word	0x20001c20

080020c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return uwTick;
 80020c8:	4b03      	ldr	r3, [pc, #12]	@ (80020d8 <HAL_GetTick+0x14>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20001c20 	.word	0x20001c20

080020dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e4:	f7ff ffee 	bl	80020c4 <HAL_GetTick>
 80020e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f4:	d005      	beq.n	8002102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002120 <HAL_Delay+0x44>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4413      	add	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002102:	bf00      	nop
 8002104:	f7ff ffde 	bl	80020c4 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	429a      	cmp	r2, r3
 8002112:	d8f7      	bhi.n	8002104 <HAL_Delay+0x28>
  {
  }
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	20001778 	.word	0x20001778

08002124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002134:	4b0c      	ldr	r3, [pc, #48]	@ (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800214c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002156:	4a04      	ldr	r2, [pc, #16]	@ (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	60d3      	str	r3, [r2, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002170:	4b04      	ldr	r3, [pc, #16]	@ (8002184 <__NVIC_GetPriorityGrouping+0x18>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	f003 0307 	and.w	r3, r3, #7
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	2b00      	cmp	r3, #0
 8002198:	db0b      	blt.n	80021b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	f003 021f 	and.w	r2, r3, #31
 80021a0:	4907      	ldr	r1, [pc, #28]	@ (80021c0 <__NVIC_EnableIRQ+0x38>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	2001      	movs	r0, #1
 80021aa:	fa00 f202 	lsl.w	r2, r0, r2
 80021ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000e100 	.word	0xe000e100

080021c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	6039      	str	r1, [r7, #0]
 80021ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	db0a      	blt.n	80021ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	490c      	ldr	r1, [pc, #48]	@ (8002210 <__NVIC_SetPriority+0x4c>)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	0112      	lsls	r2, r2, #4
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	440b      	add	r3, r1
 80021e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021ec:	e00a      	b.n	8002204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4908      	ldr	r1, [pc, #32]	@ (8002214 <__NVIC_SetPriority+0x50>)
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	3b04      	subs	r3, #4
 80021fc:	0112      	lsls	r2, r2, #4
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	440b      	add	r3, r1
 8002202:	761a      	strb	r2, [r3, #24]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000e100 	.word	0xe000e100
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	@ 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f1c3 0307 	rsb	r3, r3, #7
 8002232:	2b04      	cmp	r3, #4
 8002234:	bf28      	it	cs
 8002236:	2304      	movcs	r3, #4
 8002238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3304      	adds	r3, #4
 800223e:	2b06      	cmp	r3, #6
 8002240:	d902      	bls.n	8002248 <NVIC_EncodePriority+0x30>
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3b03      	subs	r3, #3
 8002246:	e000      	b.n	800224a <NVIC_EncodePriority+0x32>
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	f04f 32ff 	mov.w	r2, #4294967295
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43da      	mvns	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	401a      	ands	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002260:	f04f 31ff 	mov.w	r1, #4294967295
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	43d9      	mvns	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	4313      	orrs	r3, r2
         );
}
 8002272:	4618      	mov	r0, r3
 8002274:	3724      	adds	r7, #36	@ 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002290:	d301      	bcc.n	8002296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002292:	2301      	movs	r3, #1
 8002294:	e00f      	b.n	80022b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002296:	4a0a      	ldr	r2, [pc, #40]	@ (80022c0 <SysTick_Config+0x40>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229e:	210f      	movs	r1, #15
 80022a0:	f04f 30ff 	mov.w	r0, #4294967295
 80022a4:	f7ff ff8e 	bl	80021c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a8:	4b05      	ldr	r3, [pc, #20]	@ (80022c0 <SysTick_Config+0x40>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ae:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <SysTick_Config+0x40>)
 80022b0:	2207      	movs	r2, #7
 80022b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	e000e010 	.word	0xe000e010

080022c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff29 	bl	8002124 <__NVIC_SetPriorityGrouping>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ec:	f7ff ff3e 	bl	800216c <__NVIC_GetPriorityGrouping>
 80022f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	6978      	ldr	r0, [r7, #20]
 80022f8:	f7ff ff8e 	bl	8002218 <NVIC_EncodePriority>
 80022fc:	4602      	mov	r2, r0
 80022fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002302:	4611      	mov	r1, r2
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff5d 	bl	80021c4 <__NVIC_SetPriority>
}
 800230a:	bf00      	nop
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800231c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff31 	bl	8002188 <__NVIC_EnableIRQ>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ffa2 	bl	8002280 <SysTick_Config>
 800233c:	4603      	mov	r3, r0
}
 800233e:	4618      	mov	r0, r3
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002352:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002354:	f7ff feb6 	bl	80020c4 <HAL_GetTick>
 8002358:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d008      	beq.n	8002378 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2280      	movs	r2, #128	@ 0x80
 800236a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e052      	b.n	800241e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f022 0216 	bic.w	r2, r2, #22
 8002386:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	695a      	ldr	r2, [r3, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002396:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239c:	2b00      	cmp	r3, #0
 800239e:	d103      	bne.n	80023a8 <HAL_DMA_Abort+0x62>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d007      	beq.n	80023b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0208 	bic.w	r2, r2, #8
 80023b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0201 	bic.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023c8:	e013      	b.n	80023f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023ca:	f7ff fe7b 	bl	80020c4 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b05      	cmp	r3, #5
 80023d6:	d90c      	bls.n	80023f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2220      	movs	r2, #32
 80023dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2203      	movs	r2, #3
 80023e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e015      	b.n	800241e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1e4      	bne.n	80023ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002404:	223f      	movs	r2, #63	@ 0x3f
 8002406:	409a      	lsls	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3710      	adds	r7, #16
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}

08002426 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d004      	beq.n	8002444 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2280      	movs	r2, #128	@ 0x80
 800243e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e00c      	b.n	800245e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2205      	movs	r2, #5
 8002448:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0201 	bic.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800247e:	4b23      	ldr	r3, [pc, #140]	@ (800250c <HAL_FLASH_Program+0xa0>)
 8002480:	7e1b      	ldrb	r3, [r3, #24]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_FLASH_Program+0x1e>
 8002486:	2302      	movs	r3, #2
 8002488:	e03b      	b.n	8002502 <HAL_FLASH_Program+0x96>
 800248a:	4b20      	ldr	r3, [pc, #128]	@ (800250c <HAL_FLASH_Program+0xa0>)
 800248c:	2201      	movs	r2, #1
 800248e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002490:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002494:	f000 f870 	bl	8002578 <FLASH_WaitForLastOperation>
 8002498:	4603      	mov	r3, r0
 800249a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800249c:	7dfb      	ldrb	r3, [r7, #23]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d12b      	bne.n	80024fa <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d105      	bne.n	80024b4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80024a8:	783b      	ldrb	r3, [r7, #0]
 80024aa:	4619      	mov	r1, r3
 80024ac:	68b8      	ldr	r0, [r7, #8]
 80024ae:	f000 f91b 	bl	80026e8 <FLASH_Program_Byte>
 80024b2:	e016      	b.n	80024e2 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d105      	bne.n	80024c6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80024ba:	883b      	ldrh	r3, [r7, #0]
 80024bc:	4619      	mov	r1, r3
 80024be:	68b8      	ldr	r0, [r7, #8]
 80024c0:	f000 f8ee 	bl	80026a0 <FLASH_Program_HalfWord>
 80024c4:	e00d      	b.n	80024e2 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d105      	bne.n	80024d8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	4619      	mov	r1, r3
 80024d0:	68b8      	ldr	r0, [r7, #8]
 80024d2:	f000 f8c3 	bl	800265c <FLASH_Program_Word>
 80024d6:	e004      	b.n	80024e2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80024d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024dc:	68b8      	ldr	r0, [r7, #8]
 80024de:	f000 f88b 	bl	80025f8 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024e2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80024e6:	f000 f847 	bl	8002578 <FLASH_WaitForLastOperation>
 80024ea:	4603      	mov	r3, r0
 80024ec:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80024ee:	4b08      	ldr	r3, [pc, #32]	@ (8002510 <HAL_FLASH_Program+0xa4>)
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	4a07      	ldr	r2, [pc, #28]	@ (8002510 <HAL_FLASH_Program+0xa4>)
 80024f4:	f023 0301 	bic.w	r3, r3, #1
 80024f8:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80024fa:	4b04      	ldr	r3, [pc, #16]	@ (800250c <HAL_FLASH_Program+0xa0>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	761a      	strb	r2, [r3, #24]

  return status;
 8002500:	7dfb      	ldrb	r3, [r7, #23]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3718      	adds	r7, #24
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20001c24 	.word	0x20001c24
 8002510:	40023c00 	.word	0x40023c00

08002514 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800251e:	4b0b      	ldr	r3, [pc, #44]	@ (800254c <HAL_FLASH_Unlock+0x38>)
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b00      	cmp	r3, #0
 8002524:	da0b      	bge.n	800253e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002526:	4b09      	ldr	r3, [pc, #36]	@ (800254c <HAL_FLASH_Unlock+0x38>)
 8002528:	4a09      	ldr	r2, [pc, #36]	@ (8002550 <HAL_FLASH_Unlock+0x3c>)
 800252a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800252c:	4b07      	ldr	r3, [pc, #28]	@ (800254c <HAL_FLASH_Unlock+0x38>)
 800252e:	4a09      	ldr	r2, [pc, #36]	@ (8002554 <HAL_FLASH_Unlock+0x40>)
 8002530:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002532:	4b06      	ldr	r3, [pc, #24]	@ (800254c <HAL_FLASH_Unlock+0x38>)
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b00      	cmp	r3, #0
 8002538:	da01      	bge.n	800253e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800253e:	79fb      	ldrb	r3, [r7, #7]
}
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	40023c00 	.word	0x40023c00
 8002550:	45670123 	.word	0x45670123
 8002554:	cdef89ab 	.word	0xcdef89ab

08002558 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800255c:	4b05      	ldr	r3, [pc, #20]	@ (8002574 <HAL_FLASH_Lock+0x1c>)
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	4a04      	ldr	r2, [pc, #16]	@ (8002574 <HAL_FLASH_Lock+0x1c>)
 8002562:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002566:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	40023c00 	.word	0x40023c00

08002578 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002584:	4b1a      	ldr	r3, [pc, #104]	@ (80025f0 <FLASH_WaitForLastOperation+0x78>)
 8002586:	2200      	movs	r2, #0
 8002588:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800258a:	f7ff fd9b 	bl	80020c4 <HAL_GetTick>
 800258e:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8002590:	e010      	b.n	80025b4 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002598:	d00c      	beq.n	80025b4 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d007      	beq.n	80025b0 <FLASH_WaitForLastOperation+0x38>
 80025a0:	f7ff fd90 	bl	80020c4 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d201      	bcs.n	80025b4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e019      	b.n	80025e8 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80025b4:	4b0f      	ldr	r3, [pc, #60]	@ (80025f4 <FLASH_WaitForLastOperation+0x7c>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1e8      	bne.n	8002592 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80025c0:	4b0c      	ldr	r3, [pc, #48]	@ (80025f4 <FLASH_WaitForLastOperation+0x7c>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80025cc:	4b09      	ldr	r3, [pc, #36]	@ (80025f4 <FLASH_WaitForLastOperation+0x7c>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80025d2:	4b08      	ldr	r3, [pc, #32]	@ (80025f4 <FLASH_WaitForLastOperation+0x7c>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80025de:	f000 f8a5 	bl	800272c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0

}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20001c24 	.word	0x20001c24
 80025f4:	40023c00 	.word	0x40023c00

080025f8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002604:	4b14      	ldr	r3, [pc, #80]	@ (8002658 <FLASH_Program_DoubleWord+0x60>)
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	4a13      	ldr	r2, [pc, #76]	@ (8002658 <FLASH_Program_DoubleWord+0x60>)
 800260a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800260e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002610:	4b11      	ldr	r3, [pc, #68]	@ (8002658 <FLASH_Program_DoubleWord+0x60>)
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	4a10      	ldr	r2, [pc, #64]	@ (8002658 <FLASH_Program_DoubleWord+0x60>)
 8002616:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800261a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800261c:	4b0e      	ldr	r3, [pc, #56]	@ (8002658 <FLASH_Program_DoubleWord+0x60>)
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	4a0d      	ldr	r2, [pc, #52]	@ (8002658 <FLASH_Program_DoubleWord+0x60>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800262e:	f3bf 8f6f 	isb	sy
}
 8002632:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8002634:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	f04f 0300 	mov.w	r3, #0
 8002640:	000a      	movs	r2, r1
 8002642:	2300      	movs	r3, #0
 8002644:	68f9      	ldr	r1, [r7, #12]
 8002646:	3104      	adds	r1, #4
 8002648:	4613      	mov	r3, r2
 800264a:	600b      	str	r3, [r1, #0]
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	40023c00 	.word	0x40023c00

0800265c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002666:	4b0d      	ldr	r3, [pc, #52]	@ (800269c <FLASH_Program_Word+0x40>)
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	4a0c      	ldr	r2, [pc, #48]	@ (800269c <FLASH_Program_Word+0x40>)
 800266c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002670:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002672:	4b0a      	ldr	r3, [pc, #40]	@ (800269c <FLASH_Program_Word+0x40>)
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	4a09      	ldr	r2, [pc, #36]	@ (800269c <FLASH_Program_Word+0x40>)
 8002678:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800267c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800267e:	4b07      	ldr	r3, [pc, #28]	@ (800269c <FLASH_Program_Word+0x40>)
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	4a06      	ldr	r2, [pc, #24]	@ (800269c <FLASH_Program_Word+0x40>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	601a      	str	r2, [r3, #0]
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	40023c00 	.word	0x40023c00

080026a0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80026ac:	4b0d      	ldr	r3, [pc, #52]	@ (80026e4 <FLASH_Program_HalfWord+0x44>)
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	4a0c      	ldr	r2, [pc, #48]	@ (80026e4 <FLASH_Program_HalfWord+0x44>)
 80026b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80026b8:	4b0a      	ldr	r3, [pc, #40]	@ (80026e4 <FLASH_Program_HalfWord+0x44>)
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	4a09      	ldr	r2, [pc, #36]	@ (80026e4 <FLASH_Program_HalfWord+0x44>)
 80026be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80026c4:	4b07      	ldr	r3, [pc, #28]	@ (80026e4 <FLASH_Program_HalfWord+0x44>)
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	4a06      	ldr	r2, [pc, #24]	@ (80026e4 <FLASH_Program_HalfWord+0x44>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	887a      	ldrh	r2, [r7, #2]
 80026d4:	801a      	strh	r2, [r3, #0]
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40023c00 	.word	0x40023c00

080026e8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80026f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002728 <FLASH_Program_Byte+0x40>)
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002728 <FLASH_Program_Byte+0x40>)
 80026fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002700:	4b09      	ldr	r3, [pc, #36]	@ (8002728 <FLASH_Program_Byte+0x40>)
 8002702:	4a09      	ldr	r2, [pc, #36]	@ (8002728 <FLASH_Program_Byte+0x40>)
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002708:	4b07      	ldr	r3, [pc, #28]	@ (8002728 <FLASH_Program_Byte+0x40>)
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	4a06      	ldr	r2, [pc, #24]	@ (8002728 <FLASH_Program_Byte+0x40>)
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	78fa      	ldrb	r2, [r7, #3]
 8002718:	701a      	strb	r2, [r3, #0]
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40023c00 	.word	0x40023c00

0800272c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002730:	4b2f      	ldr	r3, [pc, #188]	@ (80027f0 <FLASH_SetErrorCode+0xc4>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800273c:	4b2d      	ldr	r3, [pc, #180]	@ (80027f4 <FLASH_SetErrorCode+0xc8>)
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	f043 0310 	orr.w	r3, r3, #16
 8002744:	4a2b      	ldr	r2, [pc, #172]	@ (80027f4 <FLASH_SetErrorCode+0xc8>)
 8002746:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002748:	4b29      	ldr	r3, [pc, #164]	@ (80027f0 <FLASH_SetErrorCode+0xc4>)
 800274a:	2210      	movs	r2, #16
 800274c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800274e:	4b28      	ldr	r3, [pc, #160]	@ (80027f0 <FLASH_SetErrorCode+0xc4>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	f003 0320 	and.w	r3, r3, #32
 8002756:	2b00      	cmp	r3, #0
 8002758:	d008      	beq.n	800276c <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800275a:	4b26      	ldr	r3, [pc, #152]	@ (80027f4 <FLASH_SetErrorCode+0xc8>)
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f043 0308 	orr.w	r3, r3, #8
 8002762:	4a24      	ldr	r2, [pc, #144]	@ (80027f4 <FLASH_SetErrorCode+0xc8>)
 8002764:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002766:	4b22      	ldr	r3, [pc, #136]	@ (80027f0 <FLASH_SetErrorCode+0xc4>)
 8002768:	2220      	movs	r2, #32
 800276a:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800276c:	4b20      	ldr	r3, [pc, #128]	@ (80027f0 <FLASH_SetErrorCode+0xc4>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002778:	4b1e      	ldr	r3, [pc, #120]	@ (80027f4 <FLASH_SetErrorCode+0xc8>)
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	f043 0304 	orr.w	r3, r3, #4
 8002780:	4a1c      	ldr	r2, [pc, #112]	@ (80027f4 <FLASH_SetErrorCode+0xc8>)
 8002782:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002784:	4b1a      	ldr	r3, [pc, #104]	@ (80027f0 <FLASH_SetErrorCode+0xc4>)
 8002786:	2240      	movs	r2, #64	@ 0x40
 8002788:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800278a:	4b19      	ldr	r3, [pc, #100]	@ (80027f0 <FLASH_SetErrorCode+0xc4>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002792:	2b00      	cmp	r3, #0
 8002794:	d008      	beq.n	80027a8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002796:	4b17      	ldr	r3, [pc, #92]	@ (80027f4 <FLASH_SetErrorCode+0xc8>)
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	f043 0302 	orr.w	r3, r3, #2
 800279e:	4a15      	ldr	r2, [pc, #84]	@ (80027f4 <FLASH_SetErrorCode+0xc8>)
 80027a0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80027a2:	4b13      	ldr	r3, [pc, #76]	@ (80027f0 <FLASH_SetErrorCode+0xc4>)
 80027a4:	2280      	movs	r2, #128	@ 0x80
 80027a6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80027a8:	4b11      	ldr	r3, [pc, #68]	@ (80027f0 <FLASH_SetErrorCode+0xc4>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d009      	beq.n	80027c8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80027b4:	4b0f      	ldr	r3, [pc, #60]	@ (80027f4 <FLASH_SetErrorCode+0xc8>)
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	4a0d      	ldr	r2, [pc, #52]	@ (80027f4 <FLASH_SetErrorCode+0xc8>)
 80027be:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80027c0:	4b0b      	ldr	r3, [pc, #44]	@ (80027f0 <FLASH_SetErrorCode+0xc4>)
 80027c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027c6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80027c8:	4b09      	ldr	r3, [pc, #36]	@ (80027f0 <FLASH_SetErrorCode+0xc4>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d008      	beq.n	80027e6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80027d4:	4b07      	ldr	r3, [pc, #28]	@ (80027f4 <FLASH_SetErrorCode+0xc8>)
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	f043 0320 	orr.w	r3, r3, #32
 80027dc:	4a05      	ldr	r2, [pc, #20]	@ (80027f4 <FLASH_SetErrorCode+0xc8>)
 80027de:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80027e0:	4b03      	ldr	r3, [pc, #12]	@ (80027f0 <FLASH_SetErrorCode+0xc4>)
 80027e2:	2202      	movs	r2, #2
 80027e4:	60da      	str	r2, [r3, #12]
  }
}
 80027e6:	bf00      	nop
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	40023c00 	.word	0x40023c00
 80027f4:	20001c24 	.word	0x20001c24

080027f8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800280a:	4b31      	ldr	r3, [pc, #196]	@ (80028d0 <HAL_FLASHEx_Erase+0xd8>)
 800280c:	7e1b      	ldrb	r3, [r3, #24]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_FLASHEx_Erase+0x1e>
 8002812:	2302      	movs	r3, #2
 8002814:	e058      	b.n	80028c8 <HAL_FLASHEx_Erase+0xd0>
 8002816:	4b2e      	ldr	r3, [pc, #184]	@ (80028d0 <HAL_FLASHEx_Erase+0xd8>)
 8002818:	2201      	movs	r2, #1
 800281a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800281c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002820:	f7ff feaa 	bl	8002578 <FLASH_WaitForLastOperation>
 8002824:	4603      	mov	r3, r0
 8002826:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d148      	bne.n	80028c0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	f04f 32ff 	mov.w	r2, #4294967295
 8002834:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d115      	bne.n	800286a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	b2da      	uxtb	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	4619      	mov	r1, r3
 800284a:	4610      	mov	r0, r2
 800284c:	f000 f844 	bl	80028d8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002850:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002854:	f7ff fe90 	bl	8002578 <FLASH_WaitForLastOperation>
 8002858:	4603      	mov	r3, r0
 800285a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800285c:	4b1d      	ldr	r3, [pc, #116]	@ (80028d4 <HAL_FLASHEx_Erase+0xdc>)
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	4a1c      	ldr	r2, [pc, #112]	@ (80028d4 <HAL_FLASHEx_Erase+0xdc>)
 8002862:	f023 0304 	bic.w	r3, r3, #4
 8002866:	6113      	str	r3, [r2, #16]
 8002868:	e028      	b.n	80028bc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	60bb      	str	r3, [r7, #8]
 8002870:	e01c      	b.n	80028ac <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	4619      	mov	r1, r3
 800287a:	68b8      	ldr	r0, [r7, #8]
 800287c:	f000 f850 	bl	8002920 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002880:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002884:	f7ff fe78 	bl	8002578 <FLASH_WaitForLastOperation>
 8002888:	4603      	mov	r3, r0
 800288a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800288c:	4b11      	ldr	r3, [pc, #68]	@ (80028d4 <HAL_FLASHEx_Erase+0xdc>)
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	4a10      	ldr	r2, [pc, #64]	@ (80028d4 <HAL_FLASHEx_Erase+0xdc>)
 8002892:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8002896:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	601a      	str	r2, [r3, #0]
          break;
 80028a4:	e00a      	b.n	80028bc <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	3301      	adds	r3, #1
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	4413      	add	r3, r2
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d3da      	bcc.n	8002872 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80028bc:	f000 f878 	bl	80029b0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80028c0:	4b03      	ldr	r3, [pc, #12]	@ (80028d0 <HAL_FLASHEx_Erase+0xd8>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	761a      	strb	r2, [r3, #24]

  return status;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20001c24 	.word	0x20001c24
 80028d4:	40023c00 	.word	0x40023c00

080028d8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	6039      	str	r1, [r7, #0]
 80028e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80028e4:	4b0d      	ldr	r3, [pc, #52]	@ (800291c <FLASH_MassErase+0x44>)
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	4a0c      	ldr	r2, [pc, #48]	@ (800291c <FLASH_MassErase+0x44>)
 80028ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80028f0:	4b0a      	ldr	r3, [pc, #40]	@ (800291c <FLASH_MassErase+0x44>)
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	4a09      	ldr	r2, [pc, #36]	@ (800291c <FLASH_MassErase+0x44>)
 80028f6:	f043 0304 	orr.w	r3, r3, #4
 80028fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80028fc:	4b07      	ldr	r3, [pc, #28]	@ (800291c <FLASH_MassErase+0x44>)
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	4313      	orrs	r3, r2
 8002906:	4a05      	ldr	r2, [pc, #20]	@ (800291c <FLASH_MassErase+0x44>)
 8002908:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800290c:	6113      	str	r3, [r2, #16]
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40023c00 	.word	0x40023c00

08002920 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002930:	78fb      	ldrb	r3, [r7, #3]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d102      	bne.n	800293c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002936:	2300      	movs	r3, #0
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	e010      	b.n	800295e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d103      	bne.n	800294a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002942:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	e009      	b.n	800295e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d103      	bne.n	8002958 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002950:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	e002      	b.n	800295e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002958:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800295c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800295e:	4b13      	ldr	r3, [pc, #76]	@ (80029ac <FLASH_Erase_Sector+0x8c>)
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	4a12      	ldr	r2, [pc, #72]	@ (80029ac <FLASH_Erase_Sector+0x8c>)
 8002964:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002968:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800296a:	4b10      	ldr	r3, [pc, #64]	@ (80029ac <FLASH_Erase_Sector+0x8c>)
 800296c:	691a      	ldr	r2, [r3, #16]
 800296e:	490f      	ldr	r1, [pc, #60]	@ (80029ac <FLASH_Erase_Sector+0x8c>)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4313      	orrs	r3, r2
 8002974:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002976:	4b0d      	ldr	r3, [pc, #52]	@ (80029ac <FLASH_Erase_Sector+0x8c>)
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	4a0c      	ldr	r2, [pc, #48]	@ (80029ac <FLASH_Erase_Sector+0x8c>)
 800297c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002980:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002982:	4b0a      	ldr	r3, [pc, #40]	@ (80029ac <FLASH_Erase_Sector+0x8c>)
 8002984:	691a      	ldr	r2, [r3, #16]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4313      	orrs	r3, r2
 800298c:	4a07      	ldr	r2, [pc, #28]	@ (80029ac <FLASH_Erase_Sector+0x8c>)
 800298e:	f043 0302 	orr.w	r3, r3, #2
 8002992:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002994:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <FLASH_Erase_Sector+0x8c>)
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	4a04      	ldr	r2, [pc, #16]	@ (80029ac <FLASH_Erase_Sector+0x8c>)
 800299a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800299e:	6113      	str	r3, [r2, #16]
}
 80029a0:	bf00      	nop
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	40023c00 	.word	0x40023c00

080029b0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80029b4:	4b20      	ldr	r3, [pc, #128]	@ (8002a38 <FLASH_FlushCaches+0x88>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d017      	beq.n	80029f0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80029c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a38 <FLASH_FlushCaches+0x88>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a38 <FLASH_FlushCaches+0x88>)
 80029c6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80029ca:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80029cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a38 <FLASH_FlushCaches+0x88>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a19      	ldr	r2, [pc, #100]	@ (8002a38 <FLASH_FlushCaches+0x88>)
 80029d2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	4b17      	ldr	r3, [pc, #92]	@ (8002a38 <FLASH_FlushCaches+0x88>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a16      	ldr	r2, [pc, #88]	@ (8002a38 <FLASH_FlushCaches+0x88>)
 80029de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80029e2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029e4:	4b14      	ldr	r3, [pc, #80]	@ (8002a38 <FLASH_FlushCaches+0x88>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a13      	ldr	r2, [pc, #76]	@ (8002a38 <FLASH_FlushCaches+0x88>)
 80029ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029ee:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80029f0:	4b11      	ldr	r3, [pc, #68]	@ (8002a38 <FLASH_FlushCaches+0x88>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d017      	beq.n	8002a2c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80029fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002a38 <FLASH_FlushCaches+0x88>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a0d      	ldr	r2, [pc, #52]	@ (8002a38 <FLASH_FlushCaches+0x88>)
 8002a02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002a06:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002a08:	4b0b      	ldr	r3, [pc, #44]	@ (8002a38 <FLASH_FlushCaches+0x88>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a38 <FLASH_FlushCaches+0x88>)
 8002a0e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	4b08      	ldr	r3, [pc, #32]	@ (8002a38 <FLASH_FlushCaches+0x88>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a07      	ldr	r2, [pc, #28]	@ (8002a38 <FLASH_FlushCaches+0x88>)
 8002a1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a1e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a20:	4b05      	ldr	r3, [pc, #20]	@ (8002a38 <FLASH_FlushCaches+0x88>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a04      	ldr	r2, [pc, #16]	@ (8002a38 <FLASH_FlushCaches+0x88>)
 8002a26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a2a:	6013      	str	r3, [r2, #0]
  }
}
 8002a2c:	bf00      	nop
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40023c00 	.word	0x40023c00

08002a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b089      	sub	sp, #36	@ 0x24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
 8002a56:	e159      	b.n	8002d0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a58:	2201      	movs	r2, #1
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	f040 8148 	bne.w	8002d06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d005      	beq.n	8002a8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d130      	bne.n	8002af0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	2203      	movs	r2, #3
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	f003 0201 	and.w	r2, r3, #1
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d017      	beq.n	8002b2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2203      	movs	r2, #3
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d123      	bne.n	8002b80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	08da      	lsrs	r2, r3, #3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3208      	adds	r2, #8
 8002b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	220f      	movs	r2, #15
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	08da      	lsrs	r2, r3, #3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	3208      	adds	r2, #8
 8002b7a:	69b9      	ldr	r1, [r7, #24]
 8002b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f003 0203 	and.w	r2, r3, #3
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80a2 	beq.w	8002d06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	4b57      	ldr	r3, [pc, #348]	@ (8002d24 <HAL_GPIO_Init+0x2e8>)
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bca:	4a56      	ldr	r2, [pc, #344]	@ (8002d24 <HAL_GPIO_Init+0x2e8>)
 8002bcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bd2:	4b54      	ldr	r3, [pc, #336]	@ (8002d24 <HAL_GPIO_Init+0x2e8>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bde:	4a52      	ldr	r2, [pc, #328]	@ (8002d28 <HAL_GPIO_Init+0x2ec>)
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	089b      	lsrs	r3, r3, #2
 8002be4:	3302      	adds	r3, #2
 8002be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	220f      	movs	r2, #15
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a49      	ldr	r2, [pc, #292]	@ (8002d2c <HAL_GPIO_Init+0x2f0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d019      	beq.n	8002c3e <HAL_GPIO_Init+0x202>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a48      	ldr	r2, [pc, #288]	@ (8002d30 <HAL_GPIO_Init+0x2f4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d013      	beq.n	8002c3a <HAL_GPIO_Init+0x1fe>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a47      	ldr	r2, [pc, #284]	@ (8002d34 <HAL_GPIO_Init+0x2f8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d00d      	beq.n	8002c36 <HAL_GPIO_Init+0x1fa>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a46      	ldr	r2, [pc, #280]	@ (8002d38 <HAL_GPIO_Init+0x2fc>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d007      	beq.n	8002c32 <HAL_GPIO_Init+0x1f6>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a45      	ldr	r2, [pc, #276]	@ (8002d3c <HAL_GPIO_Init+0x300>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d101      	bne.n	8002c2e <HAL_GPIO_Init+0x1f2>
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	e008      	b.n	8002c40 <HAL_GPIO_Init+0x204>
 8002c2e:	2307      	movs	r3, #7
 8002c30:	e006      	b.n	8002c40 <HAL_GPIO_Init+0x204>
 8002c32:	2303      	movs	r3, #3
 8002c34:	e004      	b.n	8002c40 <HAL_GPIO_Init+0x204>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e002      	b.n	8002c40 <HAL_GPIO_Init+0x204>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <HAL_GPIO_Init+0x204>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	69fa      	ldr	r2, [r7, #28]
 8002c42:	f002 0203 	and.w	r2, r2, #3
 8002c46:	0092      	lsls	r2, r2, #2
 8002c48:	4093      	lsls	r3, r2
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c50:	4935      	ldr	r1, [pc, #212]	@ (8002d28 <HAL_GPIO_Init+0x2ec>)
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	089b      	lsrs	r3, r3, #2
 8002c56:	3302      	adds	r3, #2
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c5e:	4b38      	ldr	r3, [pc, #224]	@ (8002d40 <HAL_GPIO_Init+0x304>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c82:	4a2f      	ldr	r2, [pc, #188]	@ (8002d40 <HAL_GPIO_Init+0x304>)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c88:	4b2d      	ldr	r3, [pc, #180]	@ (8002d40 <HAL_GPIO_Init+0x304>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cac:	4a24      	ldr	r2, [pc, #144]	@ (8002d40 <HAL_GPIO_Init+0x304>)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cb2:	4b23      	ldr	r3, [pc, #140]	@ (8002d40 <HAL_GPIO_Init+0x304>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cd6:	4a1a      	ldr	r2, [pc, #104]	@ (8002d40 <HAL_GPIO_Init+0x304>)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cdc:	4b18      	ldr	r3, [pc, #96]	@ (8002d40 <HAL_GPIO_Init+0x304>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d00:	4a0f      	ldr	r2, [pc, #60]	@ (8002d40 <HAL_GPIO_Init+0x304>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	61fb      	str	r3, [r7, #28]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	2b0f      	cmp	r3, #15
 8002d10:	f67f aea2 	bls.w	8002a58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop
 8002d18:	3724      	adds	r7, #36	@ 0x24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40013800 	.word	0x40013800
 8002d2c:	40020000 	.word	0x40020000
 8002d30:	40020400 	.word	0x40020400
 8002d34:	40020800 	.word	0x40020800
 8002d38:	40020c00 	.word	0x40020c00
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40013c00 	.word	0x40013c00

08002d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	807b      	strh	r3, [r7, #2]
 8002d50:	4613      	mov	r3, r2
 8002d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d54:	787b      	ldrb	r3, [r7, #1]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d5a:	887a      	ldrh	r2, [r7, #2]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d60:	e003      	b.n	8002d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d62:	887b      	ldrh	r3, [r7, #2]
 8002d64:	041a      	lsls	r2, r3, #16
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	619a      	str	r2, [r3, #24]
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b085      	sub	sp, #20
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d88:	887a      	ldrh	r2, [r7, #2]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	041a      	lsls	r2, r3, #16
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	43d9      	mvns	r1, r3
 8002d94:	887b      	ldrh	r3, [r7, #2]
 8002d96:	400b      	ands	r3, r1
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	619a      	str	r2, [r3, #24]
}
 8002d9e:	bf00      	nop
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e267      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d075      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002dca:	4b88      	ldr	r3, [pc, #544]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d00c      	beq.n	8002df0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dd6:	4b85      	ldr	r3, [pc, #532]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d112      	bne.n	8002e08 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002de2:	4b82      	ldr	r3, [pc, #520]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dee:	d10b      	bne.n	8002e08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df0:	4b7e      	ldr	r3, [pc, #504]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d05b      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x108>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d157      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e242      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e10:	d106      	bne.n	8002e20 <HAL_RCC_OscConfig+0x74>
 8002e12:	4b76      	ldr	r3, [pc, #472]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a75      	ldr	r2, [pc, #468]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	e01d      	b.n	8002e5c <HAL_RCC_OscConfig+0xb0>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e28:	d10c      	bne.n	8002e44 <HAL_RCC_OscConfig+0x98>
 8002e2a:	4b70      	ldr	r3, [pc, #448]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a6f      	ldr	r2, [pc, #444]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	4b6d      	ldr	r3, [pc, #436]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a6c      	ldr	r2, [pc, #432]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	e00b      	b.n	8002e5c <HAL_RCC_OscConfig+0xb0>
 8002e44:	4b69      	ldr	r3, [pc, #420]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a68      	ldr	r2, [pc, #416]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	4b66      	ldr	r3, [pc, #408]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a65      	ldr	r2, [pc, #404]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d013      	beq.n	8002e8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7ff f92e 	bl	80020c4 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e6c:	f7ff f92a 	bl	80020c4 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	@ 0x64
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e207      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e7e:	4b5b      	ldr	r3, [pc, #364]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0f0      	beq.n	8002e6c <HAL_RCC_OscConfig+0xc0>
 8002e8a:	e014      	b.n	8002eb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7ff f91a 	bl	80020c4 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e94:	f7ff f916 	bl	80020c4 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e1f3      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ea6:	4b51      	ldr	r3, [pc, #324]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0xe8>
 8002eb2:	e000      	b.n	8002eb6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d063      	beq.n	8002f8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ec2:	4b4a      	ldr	r3, [pc, #296]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00b      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ece:	4b47      	ldr	r3, [pc, #284]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d11c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eda:	4b44      	ldr	r3, [pc, #272]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d116      	bne.n	8002f14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee6:	4b41      	ldr	r3, [pc, #260]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <HAL_RCC_OscConfig+0x152>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d001      	beq.n	8002efe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e1c7      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efe:	4b3b      	ldr	r3, [pc, #236]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4937      	ldr	r1, [pc, #220]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f12:	e03a      	b.n	8002f8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d020      	beq.n	8002f5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f1c:	4b34      	ldr	r3, [pc, #208]	@ (8002ff0 <HAL_RCC_OscConfig+0x244>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f22:	f7ff f8cf 	bl	80020c4 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f28:	e008      	b.n	8002f3c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f2a:	f7ff f8cb 	bl	80020c4 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d901      	bls.n	8002f3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e1a8      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f0      	beq.n	8002f2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f48:	4b28      	ldr	r3, [pc, #160]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4925      	ldr	r1, [pc, #148]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	600b      	str	r3, [r1, #0]
 8002f5c:	e015      	b.n	8002f8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f5e:	4b24      	ldr	r3, [pc, #144]	@ (8002ff0 <HAL_RCC_OscConfig+0x244>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7ff f8ae 	bl	80020c4 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f6c:	f7ff f8aa 	bl	80020c4 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e187      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d036      	beq.n	8003004 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d016      	beq.n	8002fcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f9e:	4b15      	ldr	r3, [pc, #84]	@ (8002ff4 <HAL_RCC_OscConfig+0x248>)
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa4:	f7ff f88e 	bl	80020c4 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fac:	f7ff f88a 	bl	80020c4 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e167      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8002fec <HAL_RCC_OscConfig+0x240>)
 8002fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d0f0      	beq.n	8002fac <HAL_RCC_OscConfig+0x200>
 8002fca:	e01b      	b.n	8003004 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fcc:	4b09      	ldr	r3, [pc, #36]	@ (8002ff4 <HAL_RCC_OscConfig+0x248>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd2:	f7ff f877 	bl	80020c4 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd8:	e00e      	b.n	8002ff8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fda:	f7ff f873 	bl	80020c4 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d907      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e150      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	42470000 	.word	0x42470000
 8002ff4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff8:	4b88      	ldr	r3, [pc, #544]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 8002ffa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1ea      	bne.n	8002fda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 8097 	beq.w	8003140 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003012:	2300      	movs	r3, #0
 8003014:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003016:	4b81      	ldr	r3, [pc, #516]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10f      	bne.n	8003042 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	4b7d      	ldr	r3, [pc, #500]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	4a7c      	ldr	r2, [pc, #496]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 800302c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003030:	6413      	str	r3, [r2, #64]	@ 0x40
 8003032:	4b7a      	ldr	r3, [pc, #488]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800303a:	60bb      	str	r3, [r7, #8]
 800303c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800303e:	2301      	movs	r3, #1
 8003040:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003042:	4b77      	ldr	r3, [pc, #476]	@ (8003220 <HAL_RCC_OscConfig+0x474>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304a:	2b00      	cmp	r3, #0
 800304c:	d118      	bne.n	8003080 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800304e:	4b74      	ldr	r3, [pc, #464]	@ (8003220 <HAL_RCC_OscConfig+0x474>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a73      	ldr	r2, [pc, #460]	@ (8003220 <HAL_RCC_OscConfig+0x474>)
 8003054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800305a:	f7ff f833 	bl	80020c4 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003062:	f7ff f82f 	bl	80020c4 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e10c      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003074:	4b6a      	ldr	r3, [pc, #424]	@ (8003220 <HAL_RCC_OscConfig+0x474>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d106      	bne.n	8003096 <HAL_RCC_OscConfig+0x2ea>
 8003088:	4b64      	ldr	r3, [pc, #400]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308c:	4a63      	ldr	r2, [pc, #396]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	6713      	str	r3, [r2, #112]	@ 0x70
 8003094:	e01c      	b.n	80030d0 <HAL_RCC_OscConfig+0x324>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	2b05      	cmp	r3, #5
 800309c:	d10c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x30c>
 800309e:	4b5f      	ldr	r3, [pc, #380]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 80030a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a2:	4a5e      	ldr	r2, [pc, #376]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 80030a4:	f043 0304 	orr.w	r3, r3, #4
 80030a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80030aa:	4b5c      	ldr	r3, [pc, #368]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ae:	4a5b      	ldr	r2, [pc, #364]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80030b6:	e00b      	b.n	80030d0 <HAL_RCC_OscConfig+0x324>
 80030b8:	4b58      	ldr	r3, [pc, #352]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 80030ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030bc:	4a57      	ldr	r2, [pc, #348]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 80030be:	f023 0301 	bic.w	r3, r3, #1
 80030c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80030c4:	4b55      	ldr	r3, [pc, #340]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 80030c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c8:	4a54      	ldr	r2, [pc, #336]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 80030ca:	f023 0304 	bic.w	r3, r3, #4
 80030ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d015      	beq.n	8003104 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d8:	f7fe fff4 	bl	80020c4 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030de:	e00a      	b.n	80030f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e0:	f7fe fff0 	bl	80020c4 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e0cb      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f6:	4b49      	ldr	r3, [pc, #292]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0ee      	beq.n	80030e0 <HAL_RCC_OscConfig+0x334>
 8003102:	e014      	b.n	800312e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003104:	f7fe ffde 	bl	80020c4 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800310a:	e00a      	b.n	8003122 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800310c:	f7fe ffda 	bl	80020c4 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800311a:	4293      	cmp	r3, r2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e0b5      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003122:	4b3e      	ldr	r3, [pc, #248]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 8003124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1ee      	bne.n	800310c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800312e:	7dfb      	ldrb	r3, [r7, #23]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d105      	bne.n	8003140 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003134:	4b39      	ldr	r3, [pc, #228]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 8003136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003138:	4a38      	ldr	r2, [pc, #224]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 800313a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800313e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80a1 	beq.w	800328c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800314a:	4b34      	ldr	r3, [pc, #208]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	2b08      	cmp	r3, #8
 8003154:	d05c      	beq.n	8003210 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d141      	bne.n	80031e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800315e:	4b31      	ldr	r3, [pc, #196]	@ (8003224 <HAL_RCC_OscConfig+0x478>)
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003164:	f7fe ffae 	bl	80020c4 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800316c:	f7fe ffaa 	bl	80020c4 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e087      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800317e:	4b27      	ldr	r3, [pc, #156]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69da      	ldr	r2, [r3, #28]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003198:	019b      	lsls	r3, r3, #6
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a0:	085b      	lsrs	r3, r3, #1
 80031a2:	3b01      	subs	r3, #1
 80031a4:	041b      	lsls	r3, r3, #16
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ac:	061b      	lsls	r3, r3, #24
 80031ae:	491b      	ldr	r1, [pc, #108]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003224 <HAL_RCC_OscConfig+0x478>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ba:	f7fe ff83 	bl	80020c4 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c2:	f7fe ff7f 	bl	80020c4 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e05c      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d4:	4b11      	ldr	r3, [pc, #68]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0f0      	beq.n	80031c2 <HAL_RCC_OscConfig+0x416>
 80031e0:	e054      	b.n	800328c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e2:	4b10      	ldr	r3, [pc, #64]	@ (8003224 <HAL_RCC_OscConfig+0x478>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7fe ff6c 	bl	80020c4 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f0:	f7fe ff68 	bl	80020c4 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e045      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003202:	4b06      	ldr	r3, [pc, #24]	@ (800321c <HAL_RCC_OscConfig+0x470>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x444>
 800320e:	e03d      	b.n	800328c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d107      	bne.n	8003228 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e038      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
 800321c:	40023800 	.word	0x40023800
 8003220:	40007000 	.word	0x40007000
 8003224:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003228:	4b1b      	ldr	r3, [pc, #108]	@ (8003298 <HAL_RCC_OscConfig+0x4ec>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d028      	beq.n	8003288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d121      	bne.n	8003288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324e:	429a      	cmp	r2, r3
 8003250:	d11a      	bne.n	8003288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003258:	4013      	ands	r3, r2
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800325e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003260:	4293      	cmp	r3, r2
 8003262:	d111      	bne.n	8003288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326e:	085b      	lsrs	r3, r3, #1
 8003270:	3b01      	subs	r3, #1
 8003272:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003274:	429a      	cmp	r2, r3
 8003276:	d107      	bne.n	8003288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003282:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	40023800 	.word	0x40023800

0800329c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0cc      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032b0:	4b68      	ldr	r3, [pc, #416]	@ (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d90c      	bls.n	80032d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032be:	4b65      	ldr	r3, [pc, #404]	@ (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c6:	4b63      	ldr	r3, [pc, #396]	@ (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0b8      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d020      	beq.n	8003326 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d005      	beq.n	80032fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032f0:	4b59      	ldr	r3, [pc, #356]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	4a58      	ldr	r2, [pc, #352]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003308:	4b53      	ldr	r3, [pc, #332]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	4a52      	ldr	r2, [pc, #328]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003312:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003314:	4b50      	ldr	r3, [pc, #320]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	494d      	ldr	r1, [pc, #308]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	4313      	orrs	r3, r2
 8003324:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d044      	beq.n	80033bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d107      	bne.n	800334a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333a:	4b47      	ldr	r3, [pc, #284]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d119      	bne.n	800337a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e07f      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d003      	beq.n	800335a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003356:	2b03      	cmp	r3, #3
 8003358:	d107      	bne.n	800336a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800335a:	4b3f      	ldr	r3, [pc, #252]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e06f      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800336a:	4b3b      	ldr	r3, [pc, #236]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e067      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800337a:	4b37      	ldr	r3, [pc, #220]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f023 0203 	bic.w	r2, r3, #3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4934      	ldr	r1, [pc, #208]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	4313      	orrs	r3, r2
 800338a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800338c:	f7fe fe9a 	bl	80020c4 <HAL_GetTick>
 8003390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003392:	e00a      	b.n	80033aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003394:	f7fe fe96 	bl	80020c4 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e04f      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 020c 	and.w	r2, r3, #12
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d1eb      	bne.n	8003394 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033bc:	4b25      	ldr	r3, [pc, #148]	@ (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d20c      	bcs.n	80033e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ca:	4b22      	ldr	r3, [pc, #136]	@ (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d2:	4b20      	ldr	r3, [pc, #128]	@ (8003454 <HAL_RCC_ClockConfig+0x1b8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e032      	b.n	800344a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f0:	4b19      	ldr	r3, [pc, #100]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4916      	ldr	r1, [pc, #88]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d009      	beq.n	8003422 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800340e:	4b12      	ldr	r3, [pc, #72]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	490e      	ldr	r1, [pc, #56]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	4313      	orrs	r3, r2
 8003420:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003422:	f000 f821 	bl	8003468 <HAL_RCC_GetSysClockFreq>
 8003426:	4602      	mov	r2, r0
 8003428:	4b0b      	ldr	r3, [pc, #44]	@ (8003458 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	091b      	lsrs	r3, r3, #4
 800342e:	f003 030f 	and.w	r3, r3, #15
 8003432:	490a      	ldr	r1, [pc, #40]	@ (800345c <HAL_RCC_ClockConfig+0x1c0>)
 8003434:	5ccb      	ldrb	r3, [r1, r3]
 8003436:	fa22 f303 	lsr.w	r3, r2, r3
 800343a:	4a09      	ldr	r2, [pc, #36]	@ (8003460 <HAL_RCC_ClockConfig+0x1c4>)
 800343c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800343e:	4b09      	ldr	r3, [pc, #36]	@ (8003464 <HAL_RCC_ClockConfig+0x1c8>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7fe fdfa 	bl	800203c <HAL_InitTick>

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40023c00 	.word	0x40023c00
 8003458:	40023800 	.word	0x40023800
 800345c:	08008fdc 	.word	0x08008fdc
 8003460:	20001770 	.word	0x20001770
 8003464:	20001774 	.word	0x20001774

08003468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800346c:	b094      	sub	sp, #80	@ 0x50
 800346e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003478:	2300      	movs	r3, #0
 800347a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003480:	4b79      	ldr	r3, [pc, #484]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x200>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 030c 	and.w	r3, r3, #12
 8003488:	2b08      	cmp	r3, #8
 800348a:	d00d      	beq.n	80034a8 <HAL_RCC_GetSysClockFreq+0x40>
 800348c:	2b08      	cmp	r3, #8
 800348e:	f200 80e1 	bhi.w	8003654 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0x34>
 8003496:	2b04      	cmp	r3, #4
 8003498:	d003      	beq.n	80034a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800349a:	e0db      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800349c:	4b73      	ldr	r3, [pc, #460]	@ (800366c <HAL_RCC_GetSysClockFreq+0x204>)
 800349e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034a0:	e0db      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034a2:	4b73      	ldr	r3, [pc, #460]	@ (8003670 <HAL_RCC_GetSysClockFreq+0x208>)
 80034a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80034a6:	e0d8      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034a8:	4b6f      	ldr	r3, [pc, #444]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x200>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034b2:	4b6d      	ldr	r3, [pc, #436]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x200>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d063      	beq.n	8003586 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034be:	4b6a      	ldr	r3, [pc, #424]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	099b      	lsrs	r3, r3, #6
 80034c4:	2200      	movs	r2, #0
 80034c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80034ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80034d2:	2300      	movs	r3, #0
 80034d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80034d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80034da:	4622      	mov	r2, r4
 80034dc:	462b      	mov	r3, r5
 80034de:	f04f 0000 	mov.w	r0, #0
 80034e2:	f04f 0100 	mov.w	r1, #0
 80034e6:	0159      	lsls	r1, r3, #5
 80034e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ec:	0150      	lsls	r0, r2, #5
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4621      	mov	r1, r4
 80034f4:	1a51      	subs	r1, r2, r1
 80034f6:	6139      	str	r1, [r7, #16]
 80034f8:	4629      	mov	r1, r5
 80034fa:	eb63 0301 	sbc.w	r3, r3, r1
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800350c:	4659      	mov	r1, fp
 800350e:	018b      	lsls	r3, r1, #6
 8003510:	4651      	mov	r1, sl
 8003512:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003516:	4651      	mov	r1, sl
 8003518:	018a      	lsls	r2, r1, #6
 800351a:	4651      	mov	r1, sl
 800351c:	ebb2 0801 	subs.w	r8, r2, r1
 8003520:	4659      	mov	r1, fp
 8003522:	eb63 0901 	sbc.w	r9, r3, r1
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800353a:	4690      	mov	r8, r2
 800353c:	4699      	mov	r9, r3
 800353e:	4623      	mov	r3, r4
 8003540:	eb18 0303 	adds.w	r3, r8, r3
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	462b      	mov	r3, r5
 8003548:	eb49 0303 	adc.w	r3, r9, r3
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800355a:	4629      	mov	r1, r5
 800355c:	024b      	lsls	r3, r1, #9
 800355e:	4621      	mov	r1, r4
 8003560:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003564:	4621      	mov	r1, r4
 8003566:	024a      	lsls	r2, r1, #9
 8003568:	4610      	mov	r0, r2
 800356a:	4619      	mov	r1, r3
 800356c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800356e:	2200      	movs	r2, #0
 8003570:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003572:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003574:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003578:	f7fd fb1e 	bl	8000bb8 <__aeabi_uldivmod>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4613      	mov	r3, r2
 8003582:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003584:	e058      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003586:	4b38      	ldr	r3, [pc, #224]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x200>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	099b      	lsrs	r3, r3, #6
 800358c:	2200      	movs	r2, #0
 800358e:	4618      	mov	r0, r3
 8003590:	4611      	mov	r1, r2
 8003592:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003596:	623b      	str	r3, [r7, #32]
 8003598:	2300      	movs	r3, #0
 800359a:	627b      	str	r3, [r7, #36]	@ 0x24
 800359c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035a0:	4642      	mov	r2, r8
 80035a2:	464b      	mov	r3, r9
 80035a4:	f04f 0000 	mov.w	r0, #0
 80035a8:	f04f 0100 	mov.w	r1, #0
 80035ac:	0159      	lsls	r1, r3, #5
 80035ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035b2:	0150      	lsls	r0, r2, #5
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4641      	mov	r1, r8
 80035ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80035be:	4649      	mov	r1, r9
 80035c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035d8:	ebb2 040a 	subs.w	r4, r2, sl
 80035dc:	eb63 050b 	sbc.w	r5, r3, fp
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	00eb      	lsls	r3, r5, #3
 80035ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ee:	00e2      	lsls	r2, r4, #3
 80035f0:	4614      	mov	r4, r2
 80035f2:	461d      	mov	r5, r3
 80035f4:	4643      	mov	r3, r8
 80035f6:	18e3      	adds	r3, r4, r3
 80035f8:	603b      	str	r3, [r7, #0]
 80035fa:	464b      	mov	r3, r9
 80035fc:	eb45 0303 	adc.w	r3, r5, r3
 8003600:	607b      	str	r3, [r7, #4]
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800360e:	4629      	mov	r1, r5
 8003610:	028b      	lsls	r3, r1, #10
 8003612:	4621      	mov	r1, r4
 8003614:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003618:	4621      	mov	r1, r4
 800361a:	028a      	lsls	r2, r1, #10
 800361c:	4610      	mov	r0, r2
 800361e:	4619      	mov	r1, r3
 8003620:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003622:	2200      	movs	r2, #0
 8003624:	61bb      	str	r3, [r7, #24]
 8003626:	61fa      	str	r2, [r7, #28]
 8003628:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800362c:	f7fd fac4 	bl	8000bb8 <__aeabi_uldivmod>
 8003630:	4602      	mov	r2, r0
 8003632:	460b      	mov	r3, r1
 8003634:	4613      	mov	r3, r2
 8003636:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003638:	4b0b      	ldr	r3, [pc, #44]	@ (8003668 <HAL_RCC_GetSysClockFreq+0x200>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	0c1b      	lsrs	r3, r3, #16
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	3301      	adds	r3, #1
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003648:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800364a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800364c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003650:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003652:	e002      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003654:	4b05      	ldr	r3, [pc, #20]	@ (800366c <HAL_RCC_GetSysClockFreq+0x204>)
 8003656:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800365a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800365c:	4618      	mov	r0, r3
 800365e:	3750      	adds	r7, #80	@ 0x50
 8003660:	46bd      	mov	sp, r7
 8003662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003666:	bf00      	nop
 8003668:	40023800 	.word	0x40023800
 800366c:	00f42400 	.word	0x00f42400
 8003670:	007a1200 	.word	0x007a1200

08003674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003678:	4b03      	ldr	r3, [pc, #12]	@ (8003688 <HAL_RCC_GetHCLKFreq+0x14>)
 800367a:	681b      	ldr	r3, [r3, #0]
}
 800367c:	4618      	mov	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	20001770 	.word	0x20001770

0800368c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003690:	f7ff fff0 	bl	8003674 <HAL_RCC_GetHCLKFreq>
 8003694:	4602      	mov	r2, r0
 8003696:	4b05      	ldr	r3, [pc, #20]	@ (80036ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	0a9b      	lsrs	r3, r3, #10
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	4903      	ldr	r1, [pc, #12]	@ (80036b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036a2:	5ccb      	ldrb	r3, [r1, r3]
 80036a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40023800 	.word	0x40023800
 80036b0:	08008fec 	.word	0x08008fec

080036b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036b8:	f7ff ffdc 	bl	8003674 <HAL_RCC_GetHCLKFreq>
 80036bc:	4602      	mov	r2, r0
 80036be:	4b05      	ldr	r3, [pc, #20]	@ (80036d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	0b5b      	lsrs	r3, r3, #13
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	4903      	ldr	r1, [pc, #12]	@ (80036d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ca:	5ccb      	ldrb	r3, [r1, r3]
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40023800 	.word	0x40023800
 80036d8:	08008fec 	.word	0x08008fec

080036dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e07b      	b.n	80037e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d108      	bne.n	8003708 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036fe:	d009      	beq.n	8003714 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	61da      	str	r2, [r3, #28]
 8003706:	e005      	b.n	8003714 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7fe f9f0 	bl	8001b14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800374a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800375c:	431a      	orrs	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	431a      	orrs	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003784:	431a      	orrs	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003798:	ea42 0103 	orr.w	r1, r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	0c1b      	lsrs	r3, r3, #16
 80037b2:	f003 0104 	and.w	r1, r3, #4
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ba:	f003 0210 	and.w	r2, r3, #16
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69da      	ldr	r2, [r3, #28]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b088      	sub	sp, #32
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	603b      	str	r3, [r7, #0]
 80037fa:	4613      	mov	r3, r2
 80037fc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037fe:	f7fe fc61 	bl	80020c4 <HAL_GetTick>
 8003802:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003804:	88fb      	ldrh	r3, [r7, #6]
 8003806:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b01      	cmp	r3, #1
 8003812:	d001      	beq.n	8003818 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003814:	2302      	movs	r3, #2
 8003816:	e12a      	b.n	8003a6e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <HAL_SPI_Transmit+0x36>
 800381e:	88fb      	ldrh	r3, [r7, #6]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e122      	b.n	8003a6e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <HAL_SPI_Transmit+0x48>
 8003832:	2302      	movs	r3, #2
 8003834:	e11b      	b.n	8003a6e <HAL_SPI_Transmit+0x280>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2203      	movs	r2, #3
 8003842:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	88fa      	ldrh	r2, [r7, #6]
 8003856:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	88fa      	ldrh	r2, [r7, #6]
 800385c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003884:	d10f      	bne.n	80038a6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003894:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038b0:	2b40      	cmp	r3, #64	@ 0x40
 80038b2:	d007      	beq.n	80038c4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038cc:	d152      	bne.n	8003974 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d002      	beq.n	80038dc <HAL_SPI_Transmit+0xee>
 80038d6:	8b7b      	ldrh	r3, [r7, #26]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d145      	bne.n	8003968 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e0:	881a      	ldrh	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ec:	1c9a      	adds	r2, r3, #2
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003900:	e032      	b.n	8003968 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b02      	cmp	r3, #2
 800390e:	d112      	bne.n	8003936 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003914:	881a      	ldrh	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003920:	1c9a      	adds	r2, r3, #2
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003934:	e018      	b.n	8003968 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003936:	f7fe fbc5 	bl	80020c4 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d803      	bhi.n	800394e <HAL_SPI_Transmit+0x160>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d102      	bne.n	8003954 <HAL_SPI_Transmit+0x166>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d109      	bne.n	8003968 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e082      	b.n	8003a6e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1c7      	bne.n	8003902 <HAL_SPI_Transmit+0x114>
 8003972:	e053      	b.n	8003a1c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <HAL_SPI_Transmit+0x194>
 800397c:	8b7b      	ldrh	r3, [r7, #26]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d147      	bne.n	8003a12 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	330c      	adds	r3, #12
 800398c:	7812      	ldrb	r2, [r2, #0]
 800398e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800399e:	b29b      	uxth	r3, r3
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80039a8:	e033      	b.n	8003a12 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d113      	bne.n	80039e0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	330c      	adds	r3, #12
 80039c2:	7812      	ldrb	r2, [r2, #0]
 80039c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b29a      	uxth	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80039de:	e018      	b.n	8003a12 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039e0:	f7fe fb70 	bl	80020c4 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d803      	bhi.n	80039f8 <HAL_SPI_Transmit+0x20a>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f6:	d102      	bne.n	80039fe <HAL_SPI_Transmit+0x210>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d109      	bne.n	8003a12 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e02d      	b.n	8003a6e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1c6      	bne.n	80039aa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a1c:	69fa      	ldr	r2, [r7, #28]
 8003a1e:	6839      	ldr	r1, [r7, #0]
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 fbd9 	bl	80041d8 <SPI_EndRxTxTransaction>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10a      	bne.n	8003a50 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	617b      	str	r3, [r7, #20]
 8003a4e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e000      	b.n	8003a6e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
  }
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3720      	adds	r7, #32
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b088      	sub	sp, #32
 8003a7a:	af02      	add	r7, sp, #8
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	603b      	str	r3, [r7, #0]
 8003a82:	4613      	mov	r3, r2
 8003a84:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d001      	beq.n	8003a96 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003a92:	2302      	movs	r3, #2
 8003a94:	e104      	b.n	8003ca0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a9e:	d112      	bne.n	8003ac6 <HAL_SPI_Receive+0x50>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10e      	bne.n	8003ac6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2204      	movs	r2, #4
 8003aac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ab0:	88fa      	ldrh	r2, [r7, #6]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	68b9      	ldr	r1, [r7, #8]
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 f8f3 	bl	8003ca8 <HAL_SPI_TransmitReceive>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	e0ec      	b.n	8003ca0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ac6:	f7fe fafd 	bl	80020c4 <HAL_GetTick>
 8003aca:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <HAL_SPI_Receive+0x62>
 8003ad2:	88fb      	ldrh	r3, [r7, #6]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0e1      	b.n	8003ca0 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_SPI_Receive+0x74>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e0da      	b.n	8003ca0 <HAL_SPI_Receive+0x22a>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2204      	movs	r2, #4
 8003af6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	88fa      	ldrh	r2, [r7, #6]
 8003b0a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	88fa      	ldrh	r2, [r7, #6]
 8003b10:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b38:	d10f      	bne.n	8003b5a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b58:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b64:	2b40      	cmp	r3, #64	@ 0x40
 8003b66:	d007      	beq.n	8003b78 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b76:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d170      	bne.n	8003c62 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b80:	e035      	b.n	8003bee <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d115      	bne.n	8003bbc <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f103 020c 	add.w	r2, r3, #12
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9c:	7812      	ldrb	r2, [r2, #0]
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bba:	e018      	b.n	8003bee <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bbc:	f7fe fa82 	bl	80020c4 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d803      	bhi.n	8003bd4 <HAL_SPI_Receive+0x15e>
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd2:	d102      	bne.n	8003bda <HAL_SPI_Receive+0x164>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d109      	bne.n	8003bee <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e058      	b.n	8003ca0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1c4      	bne.n	8003b82 <HAL_SPI_Receive+0x10c>
 8003bf8:	e038      	b.n	8003c6c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d113      	bne.n	8003c30 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c12:	b292      	uxth	r2, r2
 8003c14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c1a:	1c9a      	adds	r2, r3, #2
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c2e:	e018      	b.n	8003c62 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c30:	f7fe fa48 	bl	80020c4 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d803      	bhi.n	8003c48 <HAL_SPI_Receive+0x1d2>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c46:	d102      	bne.n	8003c4e <HAL_SPI_Receive+0x1d8>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d109      	bne.n	8003c62 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e01e      	b.n	8003ca0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1c6      	bne.n	8003bfa <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	6839      	ldr	r1, [r7, #0]
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 fa4b 	bl	800410c <SPI_EndRxTransaction>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d002      	beq.n	8003c82 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
  }
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08a      	sub	sp, #40	@ 0x28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
 8003cb4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cba:	f7fe fa03 	bl	80020c4 <HAL_GetTick>
 8003cbe:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cc6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003cce:	887b      	ldrh	r3, [r7, #2]
 8003cd0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cd2:	7ffb      	ldrb	r3, [r7, #31]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d00c      	beq.n	8003cf2 <HAL_SPI_TransmitReceive+0x4a>
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cde:	d106      	bne.n	8003cee <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d102      	bne.n	8003cee <HAL_SPI_TransmitReceive+0x46>
 8003ce8:	7ffb      	ldrb	r3, [r7, #31]
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d001      	beq.n	8003cf2 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	e17f      	b.n	8003ff2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_SPI_TransmitReceive+0x5c>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_SPI_TransmitReceive+0x5c>
 8003cfe:	887b      	ldrh	r3, [r7, #2]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e174      	b.n	8003ff2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d101      	bne.n	8003d16 <HAL_SPI_TransmitReceive+0x6e>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e16d      	b.n	8003ff2 <HAL_SPI_TransmitReceive+0x34a>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d003      	beq.n	8003d32 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2205      	movs	r2, #5
 8003d2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	887a      	ldrh	r2, [r7, #2]
 8003d42:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	887a      	ldrh	r2, [r7, #2]
 8003d48:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	887a      	ldrh	r2, [r7, #2]
 8003d54:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	887a      	ldrh	r2, [r7, #2]
 8003d5a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d72:	2b40      	cmp	r3, #64	@ 0x40
 8003d74:	d007      	beq.n	8003d86 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d8e:	d17e      	bne.n	8003e8e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_SPI_TransmitReceive+0xf6>
 8003d98:	8afb      	ldrh	r3, [r7, #22]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d16c      	bne.n	8003e78 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da2:	881a      	ldrh	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dae:	1c9a      	adds	r2, r3, #2
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dc2:	e059      	b.n	8003e78 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d11b      	bne.n	8003e0a <HAL_SPI_TransmitReceive+0x162>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d016      	beq.n	8003e0a <HAL_SPI_TransmitReceive+0x162>
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d113      	bne.n	8003e0a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de6:	881a      	ldrh	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df2:	1c9a      	adds	r2, r3, #2
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d119      	bne.n	8003e4c <HAL_SPI_TransmitReceive+0x1a4>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d014      	beq.n	8003e4c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2c:	b292      	uxth	r2, r2
 8003e2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e34:	1c9a      	adds	r2, r3, #2
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e4c:	f7fe f93a 	bl	80020c4 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d80d      	bhi.n	8003e78 <HAL_SPI_TransmitReceive+0x1d0>
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e62:	d009      	beq.n	8003e78 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e0bc      	b.n	8003ff2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1a0      	bne.n	8003dc4 <HAL_SPI_TransmitReceive+0x11c>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d19b      	bne.n	8003dc4 <HAL_SPI_TransmitReceive+0x11c>
 8003e8c:	e082      	b.n	8003f94 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_SPI_TransmitReceive+0x1f4>
 8003e96:	8afb      	ldrh	r3, [r7, #22]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d171      	bne.n	8003f80 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	330c      	adds	r3, #12
 8003ea6:	7812      	ldrb	r2, [r2, #0]
 8003ea8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eae:	1c5a      	adds	r2, r3, #1
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ec2:	e05d      	b.n	8003f80 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d11c      	bne.n	8003f0c <HAL_SPI_TransmitReceive+0x264>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d017      	beq.n	8003f0c <HAL_SPI_TransmitReceive+0x264>
 8003edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d114      	bne.n	8003f0c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	330c      	adds	r3, #12
 8003eec:	7812      	ldrb	r2, [r2, #0]
 8003eee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d119      	bne.n	8003f4e <HAL_SPI_TransmitReceive+0x2a6>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d014      	beq.n	8003f4e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f36:	1c5a      	adds	r2, r3, #1
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	3b01      	subs	r3, #1
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f4e:	f7fe f8b9 	bl	80020c4 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d803      	bhi.n	8003f66 <HAL_SPI_TransmitReceive+0x2be>
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f64:	d102      	bne.n	8003f6c <HAL_SPI_TransmitReceive+0x2c4>
 8003f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d109      	bne.n	8003f80 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e038      	b.n	8003ff2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d19c      	bne.n	8003ec4 <HAL_SPI_TransmitReceive+0x21c>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d197      	bne.n	8003ec4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f94:	6a3a      	ldr	r2, [r7, #32]
 8003f96:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 f91d 	bl	80041d8 <SPI_EndRxTxTransaction>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e01d      	b.n	8003ff2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10a      	bne.n	8003fd4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
  }
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3728      	adds	r7, #40	@ 0x28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
	...

08003ffc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800400c:	f7fe f85a 	bl	80020c4 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	4413      	add	r3, r2
 800401a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800401c:	f7fe f852 	bl	80020c4 <HAL_GetTick>
 8004020:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004022:	4b39      	ldr	r3, [pc, #228]	@ (8004108 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	015b      	lsls	r3, r3, #5
 8004028:	0d1b      	lsrs	r3, r3, #20
 800402a:	69fa      	ldr	r2, [r7, #28]
 800402c:	fb02 f303 	mul.w	r3, r2, r3
 8004030:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004032:	e054      	b.n	80040de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403a:	d050      	beq.n	80040de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800403c:	f7fe f842 	bl	80020c4 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	69fa      	ldr	r2, [r7, #28]
 8004048:	429a      	cmp	r2, r3
 800404a:	d902      	bls.n	8004052 <SPI_WaitFlagStateUntilTimeout+0x56>
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d13d      	bne.n	80040ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004060:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800406a:	d111      	bne.n	8004090 <SPI_WaitFlagStateUntilTimeout+0x94>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004074:	d004      	beq.n	8004080 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800407e:	d107      	bne.n	8004090 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800408e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004094:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004098:	d10f      	bne.n	80040ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e017      	b.n	80040fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	3b01      	subs	r3, #1
 80040dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4013      	ands	r3, r2
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	bf0c      	ite	eq
 80040ee:	2301      	moveq	r3, #1
 80040f0:	2300      	movne	r3, #0
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	79fb      	ldrb	r3, [r7, #7]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d19b      	bne.n	8004034 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3720      	adds	r7, #32
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	20001770 	.word	0x20001770

0800410c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af02      	add	r7, sp, #8
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004120:	d111      	bne.n	8004146 <SPI_EndRxTransaction+0x3a>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800412a:	d004      	beq.n	8004136 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004134:	d107      	bne.n	8004146 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004144:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800414e:	d12a      	bne.n	80041a6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004158:	d012      	beq.n	8004180 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2200      	movs	r2, #0
 8004162:	2180      	movs	r1, #128	@ 0x80
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f7ff ff49 	bl	8003ffc <SPI_WaitFlagStateUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d02d      	beq.n	80041cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004174:	f043 0220 	orr.w	r2, r3, #32
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e026      	b.n	80041ce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2200      	movs	r2, #0
 8004188:	2101      	movs	r1, #1
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f7ff ff36 	bl	8003ffc <SPI_WaitFlagStateUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d01a      	beq.n	80041cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800419a:	f043 0220 	orr.w	r2, r3, #32
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e013      	b.n	80041ce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2200      	movs	r2, #0
 80041ae:	2101      	movs	r1, #1
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f7ff ff23 	bl	8003ffc <SPI_WaitFlagStateUntilTimeout>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d007      	beq.n	80041cc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c0:	f043 0220 	orr.w	r2, r3, #32
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e000      	b.n	80041ce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af02      	add	r7, sp, #8
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2201      	movs	r2, #1
 80041ec:	2102      	movs	r1, #2
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f7ff ff04 	bl	8003ffc <SPI_WaitFlagStateUntilTimeout>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d007      	beq.n	800420a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fe:	f043 0220 	orr.w	r2, r3, #32
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e032      	b.n	8004270 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800420a:	4b1b      	ldr	r3, [pc, #108]	@ (8004278 <SPI_EndRxTxTransaction+0xa0>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a1b      	ldr	r2, [pc, #108]	@ (800427c <SPI_EndRxTxTransaction+0xa4>)
 8004210:	fba2 2303 	umull	r2, r3, r2, r3
 8004214:	0d5b      	lsrs	r3, r3, #21
 8004216:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800421a:	fb02 f303 	mul.w	r3, r2, r3
 800421e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004228:	d112      	bne.n	8004250 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2200      	movs	r2, #0
 8004232:	2180      	movs	r1, #128	@ 0x80
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f7ff fee1 	bl	8003ffc <SPI_WaitFlagStateUntilTimeout>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d016      	beq.n	800426e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004244:	f043 0220 	orr.w	r2, r3, #32
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e00f      	b.n	8004270 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	3b01      	subs	r3, #1
 800425a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004266:	2b80      	cmp	r3, #128	@ 0x80
 8004268:	d0f2      	beq.n	8004250 <SPI_EndRxTxTransaction+0x78>
 800426a:	e000      	b.n	800426e <SPI_EndRxTxTransaction+0x96>
        break;
 800426c:	bf00      	nop
  }

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	20001770 	.word	0x20001770
 800427c:	165e9f81 	.word	0x165e9f81

08004280 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e041      	b.n	8004316 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fd fc7c 	bl	8001ba4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2202      	movs	r2, #2
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4619      	mov	r1, r3
 80042be:	4610      	mov	r0, r2
 80042c0:	f000 fac0 	bl	8004844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e041      	b.n	80043b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d106      	bne.n	800434a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f000 f839 	bl	80043bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2202      	movs	r2, #2
 800434e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3304      	adds	r3, #4
 800435a:	4619      	mov	r1, r3
 800435c:	4610      	mov	r0, r2
 800435e:	f000 fa71 	bl	8004844 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d109      	bne.n	80043f4 <HAL_TIM_PWM_Start+0x24>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	bf14      	ite	ne
 80043ec:	2301      	movne	r3, #1
 80043ee:	2300      	moveq	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	e022      	b.n	800443a <HAL_TIM_PWM_Start+0x6a>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d109      	bne.n	800440e <HAL_TIM_PWM_Start+0x3e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b01      	cmp	r3, #1
 8004404:	bf14      	ite	ne
 8004406:	2301      	movne	r3, #1
 8004408:	2300      	moveq	r3, #0
 800440a:	b2db      	uxtb	r3, r3
 800440c:	e015      	b.n	800443a <HAL_TIM_PWM_Start+0x6a>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b08      	cmp	r3, #8
 8004412:	d109      	bne.n	8004428 <HAL_TIM_PWM_Start+0x58>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b01      	cmp	r3, #1
 800441e:	bf14      	ite	ne
 8004420:	2301      	movne	r3, #1
 8004422:	2300      	moveq	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	e008      	b.n	800443a <HAL_TIM_PWM_Start+0x6a>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b01      	cmp	r3, #1
 8004432:	bf14      	ite	ne
 8004434:	2301      	movne	r3, #1
 8004436:	2300      	moveq	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e068      	b.n	8004514 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d104      	bne.n	8004452 <HAL_TIM_PWM_Start+0x82>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004450:	e013      	b.n	800447a <HAL_TIM_PWM_Start+0xaa>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b04      	cmp	r3, #4
 8004456:	d104      	bne.n	8004462 <HAL_TIM_PWM_Start+0x92>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004460:	e00b      	b.n	800447a <HAL_TIM_PWM_Start+0xaa>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b08      	cmp	r3, #8
 8004466:	d104      	bne.n	8004472 <HAL_TIM_PWM_Start+0xa2>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004470:	e003      	b.n	800447a <HAL_TIM_PWM_Start+0xaa>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2202      	movs	r2, #2
 8004476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2201      	movs	r2, #1
 8004480:	6839      	ldr	r1, [r7, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fc90 	bl	8004da8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a23      	ldr	r2, [pc, #140]	@ (800451c <HAL_TIM_PWM_Start+0x14c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d107      	bne.n	80044a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1d      	ldr	r2, [pc, #116]	@ (800451c <HAL_TIM_PWM_Start+0x14c>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d018      	beq.n	80044de <HAL_TIM_PWM_Start+0x10e>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044b4:	d013      	beq.n	80044de <HAL_TIM_PWM_Start+0x10e>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a19      	ldr	r2, [pc, #100]	@ (8004520 <HAL_TIM_PWM_Start+0x150>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00e      	beq.n	80044de <HAL_TIM_PWM_Start+0x10e>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a17      	ldr	r2, [pc, #92]	@ (8004524 <HAL_TIM_PWM_Start+0x154>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d009      	beq.n	80044de <HAL_TIM_PWM_Start+0x10e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a16      	ldr	r2, [pc, #88]	@ (8004528 <HAL_TIM_PWM_Start+0x158>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d004      	beq.n	80044de <HAL_TIM_PWM_Start+0x10e>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a14      	ldr	r2, [pc, #80]	@ (800452c <HAL_TIM_PWM_Start+0x15c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d111      	bne.n	8004502 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2b06      	cmp	r3, #6
 80044ee:	d010      	beq.n	8004512 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004500:	e007      	b.n	8004512 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f042 0201 	orr.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	40010000 	.word	0x40010000
 8004520:	40000400 	.word	0x40000400
 8004524:	40000800 	.word	0x40000800
 8004528:	40000c00 	.word	0x40000c00
 800452c:	40014000 	.word	0x40014000

08004530 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004546:	2b01      	cmp	r3, #1
 8004548:	d101      	bne.n	800454e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800454a:	2302      	movs	r3, #2
 800454c:	e0ae      	b.n	80046ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b0c      	cmp	r3, #12
 800455a:	f200 809f 	bhi.w	800469c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800455e:	a201      	add	r2, pc, #4	@ (adr r2, 8004564 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	08004599 	.word	0x08004599
 8004568:	0800469d 	.word	0x0800469d
 800456c:	0800469d 	.word	0x0800469d
 8004570:	0800469d 	.word	0x0800469d
 8004574:	080045d9 	.word	0x080045d9
 8004578:	0800469d 	.word	0x0800469d
 800457c:	0800469d 	.word	0x0800469d
 8004580:	0800469d 	.word	0x0800469d
 8004584:	0800461b 	.word	0x0800461b
 8004588:	0800469d 	.word	0x0800469d
 800458c:	0800469d 	.word	0x0800469d
 8004590:	0800469d 	.word	0x0800469d
 8004594:	0800465b 	.word	0x0800465b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68b9      	ldr	r1, [r7, #8]
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 f9dc 	bl	800495c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699a      	ldr	r2, [r3, #24]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0208 	orr.w	r2, r2, #8
 80045b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	699a      	ldr	r2, [r3, #24]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0204 	bic.w	r2, r2, #4
 80045c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6999      	ldr	r1, [r3, #24]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	619a      	str	r2, [r3, #24]
      break;
 80045d6:	e064      	b.n	80046a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68b9      	ldr	r1, [r7, #8]
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fa22 	bl	8004a28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699a      	ldr	r2, [r3, #24]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6999      	ldr	r1, [r3, #24]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	021a      	lsls	r2, r3, #8
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	619a      	str	r2, [r3, #24]
      break;
 8004618:	e043      	b.n	80046a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68b9      	ldr	r1, [r7, #8]
 8004620:	4618      	mov	r0, r3
 8004622:	f000 fa6d 	bl	8004b00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69da      	ldr	r2, [r3, #28]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f042 0208 	orr.w	r2, r2, #8
 8004634:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69da      	ldr	r2, [r3, #28]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0204 	bic.w	r2, r2, #4
 8004644:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69d9      	ldr	r1, [r3, #28]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	61da      	str	r2, [r3, #28]
      break;
 8004658:	e023      	b.n	80046a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68b9      	ldr	r1, [r7, #8]
 8004660:	4618      	mov	r0, r3
 8004662:	f000 fab7 	bl	8004bd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69da      	ldr	r2, [r3, #28]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	69d9      	ldr	r1, [r3, #28]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	021a      	lsls	r2, r3, #8
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	61da      	str	r2, [r3, #28]
      break;
 800469a:	e002      	b.n	80046a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	75fb      	strb	r3, [r7, #23]
      break;
 80046a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3718      	adds	r7, #24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <HAL_TIM_ConfigClockSource+0x1c>
 80046cc:	2302      	movs	r3, #2
 80046ce:	e0b4      	b.n	800483a <HAL_TIM_ConfigClockSource+0x186>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80046ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004708:	d03e      	beq.n	8004788 <HAL_TIM_ConfigClockSource+0xd4>
 800470a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800470e:	f200 8087 	bhi.w	8004820 <HAL_TIM_ConfigClockSource+0x16c>
 8004712:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004716:	f000 8086 	beq.w	8004826 <HAL_TIM_ConfigClockSource+0x172>
 800471a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800471e:	d87f      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x16c>
 8004720:	2b70      	cmp	r3, #112	@ 0x70
 8004722:	d01a      	beq.n	800475a <HAL_TIM_ConfigClockSource+0xa6>
 8004724:	2b70      	cmp	r3, #112	@ 0x70
 8004726:	d87b      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x16c>
 8004728:	2b60      	cmp	r3, #96	@ 0x60
 800472a:	d050      	beq.n	80047ce <HAL_TIM_ConfigClockSource+0x11a>
 800472c:	2b60      	cmp	r3, #96	@ 0x60
 800472e:	d877      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x16c>
 8004730:	2b50      	cmp	r3, #80	@ 0x50
 8004732:	d03c      	beq.n	80047ae <HAL_TIM_ConfigClockSource+0xfa>
 8004734:	2b50      	cmp	r3, #80	@ 0x50
 8004736:	d873      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x16c>
 8004738:	2b40      	cmp	r3, #64	@ 0x40
 800473a:	d058      	beq.n	80047ee <HAL_TIM_ConfigClockSource+0x13a>
 800473c:	2b40      	cmp	r3, #64	@ 0x40
 800473e:	d86f      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x16c>
 8004740:	2b30      	cmp	r3, #48	@ 0x30
 8004742:	d064      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x15a>
 8004744:	2b30      	cmp	r3, #48	@ 0x30
 8004746:	d86b      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x16c>
 8004748:	2b20      	cmp	r3, #32
 800474a:	d060      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x15a>
 800474c:	2b20      	cmp	r3, #32
 800474e:	d867      	bhi.n	8004820 <HAL_TIM_ConfigClockSource+0x16c>
 8004750:	2b00      	cmp	r3, #0
 8004752:	d05c      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x15a>
 8004754:	2b10      	cmp	r3, #16
 8004756:	d05a      	beq.n	800480e <HAL_TIM_ConfigClockSource+0x15a>
 8004758:	e062      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800476a:	f000 fafd 	bl	8004d68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800477c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68ba      	ldr	r2, [r7, #8]
 8004784:	609a      	str	r2, [r3, #8]
      break;
 8004786:	e04f      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004798:	f000 fae6 	bl	8004d68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689a      	ldr	r2, [r3, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047aa:	609a      	str	r2, [r3, #8]
      break;
 80047ac:	e03c      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ba:	461a      	mov	r2, r3
 80047bc:	f000 fa5a 	bl	8004c74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2150      	movs	r1, #80	@ 0x50
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 fab3 	bl	8004d32 <TIM_ITRx_SetConfig>
      break;
 80047cc:	e02c      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047da:	461a      	mov	r2, r3
 80047dc:	f000 fa79 	bl	8004cd2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2160      	movs	r1, #96	@ 0x60
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 faa3 	bl	8004d32 <TIM_ITRx_SetConfig>
      break;
 80047ec:	e01c      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047fa:	461a      	mov	r2, r3
 80047fc:	f000 fa3a 	bl	8004c74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2140      	movs	r1, #64	@ 0x40
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fa93 	bl	8004d32 <TIM_ITRx_SetConfig>
      break;
 800480c:	e00c      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4619      	mov	r1, r3
 8004818:	4610      	mov	r0, r2
 800481a:	f000 fa8a 	bl	8004d32 <TIM_ITRx_SetConfig>
      break;
 800481e:	e003      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	73fb      	strb	r3, [r7, #15]
      break;
 8004824:	e000      	b.n	8004828 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004826:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004838:	7bfb      	ldrb	r3, [r7, #15]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a3a      	ldr	r2, [pc, #232]	@ (8004940 <TIM_Base_SetConfig+0xfc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00f      	beq.n	800487c <TIM_Base_SetConfig+0x38>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004862:	d00b      	beq.n	800487c <TIM_Base_SetConfig+0x38>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a37      	ldr	r2, [pc, #220]	@ (8004944 <TIM_Base_SetConfig+0x100>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d007      	beq.n	800487c <TIM_Base_SetConfig+0x38>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a36      	ldr	r2, [pc, #216]	@ (8004948 <TIM_Base_SetConfig+0x104>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d003      	beq.n	800487c <TIM_Base_SetConfig+0x38>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a35      	ldr	r2, [pc, #212]	@ (800494c <TIM_Base_SetConfig+0x108>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d108      	bne.n	800488e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a2b      	ldr	r2, [pc, #172]	@ (8004940 <TIM_Base_SetConfig+0xfc>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d01b      	beq.n	80048ce <TIM_Base_SetConfig+0x8a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800489c:	d017      	beq.n	80048ce <TIM_Base_SetConfig+0x8a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a28      	ldr	r2, [pc, #160]	@ (8004944 <TIM_Base_SetConfig+0x100>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <TIM_Base_SetConfig+0x8a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a27      	ldr	r2, [pc, #156]	@ (8004948 <TIM_Base_SetConfig+0x104>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00f      	beq.n	80048ce <TIM_Base_SetConfig+0x8a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a26      	ldr	r2, [pc, #152]	@ (800494c <TIM_Base_SetConfig+0x108>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00b      	beq.n	80048ce <TIM_Base_SetConfig+0x8a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a25      	ldr	r2, [pc, #148]	@ (8004950 <TIM_Base_SetConfig+0x10c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d007      	beq.n	80048ce <TIM_Base_SetConfig+0x8a>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a24      	ldr	r2, [pc, #144]	@ (8004954 <TIM_Base_SetConfig+0x110>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d003      	beq.n	80048ce <TIM_Base_SetConfig+0x8a>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a23      	ldr	r2, [pc, #140]	@ (8004958 <TIM_Base_SetConfig+0x114>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d108      	bne.n	80048e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a0e      	ldr	r2, [pc, #56]	@ (8004940 <TIM_Base_SetConfig+0xfc>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d103      	bne.n	8004914 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b01      	cmp	r3, #1
 8004924:	d105      	bne.n	8004932 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	691b      	ldr	r3, [r3, #16]
 800492a:	f023 0201 	bic.w	r2, r3, #1
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	611a      	str	r2, [r3, #16]
  }
}
 8004932:	bf00      	nop
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	40010000 	.word	0x40010000
 8004944:	40000400 	.word	0x40000400
 8004948:	40000800 	.word	0x40000800
 800494c:	40000c00 	.word	0x40000c00
 8004950:	40014000 	.word	0x40014000
 8004954:	40014400 	.word	0x40014400
 8004958:	40014800 	.word	0x40014800

0800495c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	f023 0201 	bic.w	r2, r3, #1
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800498a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 0303 	bic.w	r3, r3, #3
 8004992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	4313      	orrs	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f023 0302 	bic.w	r3, r3, #2
 80049a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a24 <TIM_OC1_SetConfig+0xc8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d10c      	bne.n	80049d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f023 0308 	bic.w	r3, r3, #8
 80049be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	697a      	ldr	r2, [r7, #20]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f023 0304 	bic.w	r3, r3, #4
 80049d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a13      	ldr	r2, [pc, #76]	@ (8004a24 <TIM_OC1_SetConfig+0xc8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d111      	bne.n	80049fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	693a      	ldr	r2, [r7, #16]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	697a      	ldr	r2, [r7, #20]
 8004a16:	621a      	str	r2, [r3, #32]
}
 8004a18:	bf00      	nop
 8004a1a:	371c      	adds	r7, #28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	40010000 	.word	0x40010000

08004a28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	f023 0210 	bic.w	r2, r3, #16
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	021b      	lsls	r3, r3, #8
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	f023 0320 	bic.w	r3, r3, #32
 8004a72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	011b      	lsls	r3, r3, #4
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a1e      	ldr	r2, [pc, #120]	@ (8004afc <TIM_OC2_SetConfig+0xd4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d10d      	bne.n	8004aa4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004aa2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a15      	ldr	r2, [pc, #84]	@ (8004afc <TIM_OC2_SetConfig+0xd4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d113      	bne.n	8004ad4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ab2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004aba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	621a      	str	r2, [r3, #32]
}
 8004aee:	bf00      	nop
 8004af0:	371c      	adds	r7, #28
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40010000 	.word	0x40010000

08004b00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 0303 	bic.w	r3, r3, #3
 8004b36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	021b      	lsls	r3, r3, #8
 8004b50:	697a      	ldr	r2, [r7, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a1d      	ldr	r2, [pc, #116]	@ (8004bd0 <TIM_OC3_SetConfig+0xd0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d10d      	bne.n	8004b7a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	021b      	lsls	r3, r3, #8
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a14      	ldr	r2, [pc, #80]	@ (8004bd0 <TIM_OC3_SetConfig+0xd0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d113      	bne.n	8004baa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	621a      	str	r2, [r3, #32]
}
 8004bc4:	bf00      	nop
 8004bc6:	371c      	adds	r7, #28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	40010000 	.word	0x40010000

08004bd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	021b      	lsls	r3, r3, #8
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	031b      	lsls	r3, r3, #12
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a10      	ldr	r2, [pc, #64]	@ (8004c70 <TIM_OC4_SetConfig+0x9c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d109      	bne.n	8004c48 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	019b      	lsls	r3, r3, #6
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	621a      	str	r2, [r3, #32]
}
 8004c62:	bf00      	nop
 8004c64:	371c      	adds	r7, #28
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	40010000 	.word	0x40010000

08004c74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	f023 0201 	bic.w	r2, r3, #1
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f023 030a 	bic.w	r3, r3, #10
 8004cb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	693a      	ldr	r2, [r7, #16]
 8004cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	621a      	str	r2, [r3, #32]
}
 8004cc6:	bf00      	nop
 8004cc8:	371c      	adds	r7, #28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b087      	sub	sp, #28
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	f023 0210 	bic.w	r2, r3, #16
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004cfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	031b      	lsls	r3, r3, #12
 8004d02:	693a      	ldr	r2, [r7, #16]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	621a      	str	r2, [r3, #32]
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d32:	b480      	push	{r7}
 8004d34:	b085      	sub	sp, #20
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
 8004d3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	f043 0307 	orr.w	r3, r3, #7
 8004d54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	609a      	str	r2, [r3, #8]
}
 8004d5c:	bf00      	nop
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b087      	sub	sp, #28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	021a      	lsls	r2, r3, #8
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	609a      	str	r2, [r3, #8]
}
 8004d9c:	bf00      	nop
 8004d9e:	371c      	adds	r7, #28
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f003 031f 	and.w	r3, r3, #31
 8004dba:	2201      	movs	r2, #1
 8004dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a1a      	ldr	r2, [r3, #32]
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	43db      	mvns	r3, r3
 8004dca:	401a      	ands	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a1a      	ldr	r2, [r3, #32]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f003 031f 	and.w	r3, r3, #31
 8004dda:	6879      	ldr	r1, [r7, #4]
 8004ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8004de0:	431a      	orrs	r2, r3
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	621a      	str	r2, [r3, #32]
}
 8004de6:	bf00      	nop
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
	...

08004df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e050      	b.n	8004eae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8004ebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d018      	beq.n	8004e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e58:	d013      	beq.n	8004e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a18      	ldr	r2, [pc, #96]	@ (8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00e      	beq.n	8004e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a16      	ldr	r2, [pc, #88]	@ (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d009      	beq.n	8004e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a15      	ldr	r2, [pc, #84]	@ (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d004      	beq.n	8004e82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a13      	ldr	r2, [pc, #76]	@ (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d10c      	bne.n	8004e9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	68ba      	ldr	r2, [r7, #8]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40010000 	.word	0x40010000
 8004ec0:	40000400 	.word	0x40000400
 8004ec4:	40000800 	.word	0x40000800
 8004ec8:	40000c00 	.word	0x40000c00
 8004ecc:	40014000 	.word	0x40014000

08004ed0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e042      	b.n	8004f68 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d106      	bne.n	8004efc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fc feac 	bl	8001c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2224      	movs	r2, #36	@ 0x24
 8004f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 fdbd 	bl	8005a94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	695a      	ldr	r2, [r3, #20]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08a      	sub	sp, #40	@ 0x28
 8004f74:	af02      	add	r7, sp, #8
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b20      	cmp	r3, #32
 8004f8e:	d175      	bne.n	800507c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d002      	beq.n	8004f9c <HAL_UART_Transmit+0x2c>
 8004f96:	88fb      	ldrh	r3, [r7, #6]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e06e      	b.n	800507e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2221      	movs	r2, #33	@ 0x21
 8004faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fae:	f7fd f889 	bl	80020c4 <HAL_GetTick>
 8004fb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	88fa      	ldrh	r2, [r7, #6]
 8004fb8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	88fa      	ldrh	r2, [r7, #6]
 8004fbe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fc8:	d108      	bne.n	8004fdc <HAL_UART_Transmit+0x6c>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d104      	bne.n	8004fdc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	61bb      	str	r3, [r7, #24]
 8004fda:	e003      	b.n	8004fe4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fe4:	e02e      	b.n	8005044 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2200      	movs	r2, #0
 8004fee:	2180      	movs	r1, #128	@ 0x80
 8004ff0:	68f8      	ldr	r0, [r7, #12]
 8004ff2:	f000 fb1f 	bl	8005634 <UART_WaitOnFlagUntilTimeout>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d005      	beq.n	8005008 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e03a      	b.n	800507e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10b      	bne.n	8005026 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800501c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	3302      	adds	r3, #2
 8005022:	61bb      	str	r3, [r7, #24]
 8005024:	e007      	b.n	8005036 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	781a      	ldrb	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	3301      	adds	r3, #1
 8005034:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1cb      	bne.n	8004fe6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2200      	movs	r2, #0
 8005056:	2140      	movs	r1, #64	@ 0x40
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 faeb 	bl	8005634 <UART_WaitOnFlagUntilTimeout>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d005      	beq.n	8005070 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2220      	movs	r2, #32
 8005068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e006      	b.n	800507e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005078:	2300      	movs	r3, #0
 800507a:	e000      	b.n	800507e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800507c:	2302      	movs	r3, #2
  }
}
 800507e:	4618      	mov	r0, r3
 8005080:	3720      	adds	r7, #32
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	4613      	mov	r3, r2
 8005092:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b20      	cmp	r3, #32
 800509e:	d112      	bne.n	80050c6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d002      	beq.n	80050ac <HAL_UART_Receive_IT+0x26>
 80050a6:	88fb      	ldrh	r3, [r7, #6]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e00b      	b.n	80050c8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80050b6:	88fb      	ldrh	r3, [r7, #6]
 80050b8:	461a      	mov	r2, r3
 80050ba:	68b9      	ldr	r1, [r7, #8]
 80050bc:	68f8      	ldr	r0, [r7, #12]
 80050be:	f000 fb12 	bl	80056e6 <UART_Start_Receive_IT>
 80050c2:	4603      	mov	r3, r0
 80050c4:	e000      	b.n	80050c8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80050c6:	2302      	movs	r3, #2
  }
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3710      	adds	r7, #16
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b0ba      	sub	sp, #232	@ 0xe8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80050f6:	2300      	movs	r3, #0
 80050f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80050fc:	2300      	movs	r3, #0
 80050fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800510e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10f      	bne.n	8005136 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800511a:	f003 0320 	and.w	r3, r3, #32
 800511e:	2b00      	cmp	r3, #0
 8005120:	d009      	beq.n	8005136 <HAL_UART_IRQHandler+0x66>
 8005122:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fbf2 	bl	8005918 <UART_Receive_IT>
      return;
 8005134:	e25b      	b.n	80055ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005136:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 80de 	beq.w	80052fc <HAL_UART_IRQHandler+0x22c>
 8005140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d106      	bne.n	800515a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800514c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005150:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005154:	2b00      	cmp	r3, #0
 8005156:	f000 80d1 	beq.w	80052fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800515a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00b      	beq.n	800517e <HAL_UART_IRQHandler+0xae>
 8005166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800516a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800516e:	2b00      	cmp	r3, #0
 8005170:	d005      	beq.n	800517e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005176:	f043 0201 	orr.w	r2, r3, #1
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800517e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005182:	f003 0304 	and.w	r3, r3, #4
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00b      	beq.n	80051a2 <HAL_UART_IRQHandler+0xd2>
 800518a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d005      	beq.n	80051a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800519a:	f043 0202 	orr.w	r2, r3, #2
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00b      	beq.n	80051c6 <HAL_UART_IRQHandler+0xf6>
 80051ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d005      	beq.n	80051c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051be:	f043 0204 	orr.w	r2, r3, #4
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80051c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d011      	beq.n	80051f6 <HAL_UART_IRQHandler+0x126>
 80051d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051d6:	f003 0320 	and.w	r3, r3, #32
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d105      	bne.n	80051ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80051de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d005      	beq.n	80051f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ee:	f043 0208 	orr.w	r2, r3, #8
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f000 81f2 	beq.w	80055e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005204:	f003 0320 	and.w	r3, r3, #32
 8005208:	2b00      	cmp	r3, #0
 800520a:	d008      	beq.n	800521e <HAL_UART_IRQHandler+0x14e>
 800520c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005210:	f003 0320 	and.w	r3, r3, #32
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fb7d 	bl	8005918 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005228:	2b40      	cmp	r3, #64	@ 0x40
 800522a:	bf0c      	ite	eq
 800522c:	2301      	moveq	r3, #1
 800522e:	2300      	movne	r3, #0
 8005230:	b2db      	uxtb	r3, r3
 8005232:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d103      	bne.n	800524a <HAL_UART_IRQHandler+0x17a>
 8005242:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005246:	2b00      	cmp	r3, #0
 8005248:	d04f      	beq.n	80052ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 fa85 	bl	800575a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800525a:	2b40      	cmp	r3, #64	@ 0x40
 800525c:	d141      	bne.n	80052e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3314      	adds	r3, #20
 8005264:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005268:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800526c:	e853 3f00 	ldrex	r3, [r3]
 8005270:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005274:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005278:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800527c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	3314      	adds	r3, #20
 8005286:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800528a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800528e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005296:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80052a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1d9      	bne.n	800525e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d013      	beq.n	80052da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052b6:	4a7e      	ldr	r2, [pc, #504]	@ (80054b0 <HAL_UART_IRQHandler+0x3e0>)
 80052b8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fd f8b1 	bl	8002426 <HAL_DMA_Abort_IT>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d016      	beq.n	80052f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80052d4:	4610      	mov	r0, r2
 80052d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d8:	e00e      	b.n	80052f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f994 	bl	8005608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e0:	e00a      	b.n	80052f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f990 	bl	8005608 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052e8:	e006      	b.n	80052f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f98c 	bl	8005608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80052f6:	e175      	b.n	80055e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f8:	bf00      	nop
    return;
 80052fa:	e173      	b.n	80055e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005300:	2b01      	cmp	r3, #1
 8005302:	f040 814f 	bne.w	80055a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800530a:	f003 0310 	and.w	r3, r3, #16
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 8148 	beq.w	80055a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005318:	f003 0310 	and.w	r3, r3, #16
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 8141 	beq.w	80055a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005322:	2300      	movs	r3, #0
 8005324:	60bb      	str	r3, [r7, #8]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60bb      	str	r3, [r7, #8]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	60bb      	str	r3, [r7, #8]
 8005336:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005342:	2b40      	cmp	r3, #64	@ 0x40
 8005344:	f040 80b6 	bne.w	80054b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005354:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 8145 	beq.w	80055e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005362:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005366:	429a      	cmp	r2, r3
 8005368:	f080 813e 	bcs.w	80055e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005372:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800537e:	f000 8088 	beq.w	8005492 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	330c      	adds	r3, #12
 8005388:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005390:	e853 3f00 	ldrex	r3, [r3]
 8005394:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005398:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800539c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	330c      	adds	r3, #12
 80053aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80053ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80053b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80053ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80053c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1d9      	bne.n	8005382 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	3314      	adds	r3, #20
 80053d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053d8:	e853 3f00 	ldrex	r3, [r3]
 80053dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80053de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053e0:	f023 0301 	bic.w	r3, r3, #1
 80053e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3314      	adds	r3, #20
 80053ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80053f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80053f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80053fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005404:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e1      	bne.n	80053ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3314      	adds	r3, #20
 8005410:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005412:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005414:	e853 3f00 	ldrex	r3, [r3]
 8005418:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800541a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800541c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005420:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3314      	adds	r3, #20
 800542a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800542e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005430:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005434:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005436:	e841 2300 	strex	r3, r2, [r1]
 800543a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800543c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1e3      	bne.n	800540a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2220      	movs	r2, #32
 8005446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	330c      	adds	r3, #12
 8005456:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800545a:	e853 3f00 	ldrex	r3, [r3]
 800545e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005460:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005462:	f023 0310 	bic.w	r3, r3, #16
 8005466:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	330c      	adds	r3, #12
 8005470:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005474:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005476:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005478:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800547a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800547c:	e841 2300 	strex	r3, r2, [r1]
 8005480:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005482:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e3      	bne.n	8005450 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800548c:	4618      	mov	r0, r3
 800548e:	f7fc ff5a 	bl	8002346 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2202      	movs	r2, #2
 8005496:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	4619      	mov	r1, r3
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f8b7 	bl	800561c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054ae:	e09b      	b.n	80055e8 <HAL_UART_IRQHandler+0x518>
 80054b0:	08005821 	.word	0x08005821
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054bc:	b29b      	uxth	r3, r3
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 808e 	beq.w	80055ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80054d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 8089 	beq.w	80055ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	330c      	adds	r3, #12
 80054e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e4:	e853 3f00 	ldrex	r3, [r3]
 80054e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	330c      	adds	r3, #12
 80054fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80054fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8005500:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005502:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005504:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005506:	e841 2300 	strex	r3, r2, [r1]
 800550a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800550c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1e3      	bne.n	80054da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3314      	adds	r3, #20
 8005518:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	623b      	str	r3, [r7, #32]
   return(result);
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	f023 0301 	bic.w	r3, r3, #1
 8005528:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3314      	adds	r3, #20
 8005532:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005536:	633a      	str	r2, [r7, #48]	@ 0x30
 8005538:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800553c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800553e:	e841 2300 	strex	r3, r2, [r1]
 8005542:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1e3      	bne.n	8005512 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2220      	movs	r2, #32
 800554e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	330c      	adds	r3, #12
 800555e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	e853 3f00 	ldrex	r3, [r3]
 8005566:	60fb      	str	r3, [r7, #12]
   return(result);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0310 	bic.w	r3, r3, #16
 800556e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	330c      	adds	r3, #12
 8005578:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800557c:	61fa      	str	r2, [r7, #28]
 800557e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005580:	69b9      	ldr	r1, [r7, #24]
 8005582:	69fa      	ldr	r2, [r7, #28]
 8005584:	e841 2300 	strex	r3, r2, [r1]
 8005588:	617b      	str	r3, [r7, #20]
   return(result);
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1e3      	bne.n	8005558 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005596:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800559a:	4619      	mov	r1, r3
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f83d 	bl	800561c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055a2:	e023      	b.n	80055ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d009      	beq.n	80055c4 <HAL_UART_IRQHandler+0x4f4>
 80055b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d003      	beq.n	80055c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f943 	bl	8005848 <UART_Transmit_IT>
    return;
 80055c2:	e014      	b.n	80055ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80055c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00e      	beq.n	80055ee <HAL_UART_IRQHandler+0x51e>
 80055d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d008      	beq.n	80055ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f983 	bl	80058e8 <UART_EndTransmit_IT>
    return;
 80055e2:	e004      	b.n	80055ee <HAL_UART_IRQHandler+0x51e>
    return;
 80055e4:	bf00      	nop
 80055e6:	e002      	b.n	80055ee <HAL_UART_IRQHandler+0x51e>
      return;
 80055e8:	bf00      	nop
 80055ea:	e000      	b.n	80055ee <HAL_UART_IRQHandler+0x51e>
      return;
 80055ec:	bf00      	nop
  }
}
 80055ee:	37e8      	adds	r7, #232	@ 0xe8
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	460b      	mov	r3, r1
 8005626:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	603b      	str	r3, [r7, #0]
 8005640:	4613      	mov	r3, r2
 8005642:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005644:	e03b      	b.n	80056be <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564c:	d037      	beq.n	80056be <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800564e:	f7fc fd39 	bl	80020c4 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	6a3a      	ldr	r2, [r7, #32]
 800565a:	429a      	cmp	r2, r3
 800565c:	d302      	bcc.n	8005664 <UART_WaitOnFlagUntilTimeout+0x30>
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e03a      	b.n	80056de <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	f003 0304 	and.w	r3, r3, #4
 8005672:	2b00      	cmp	r3, #0
 8005674:	d023      	beq.n	80056be <UART_WaitOnFlagUntilTimeout+0x8a>
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2b80      	cmp	r3, #128	@ 0x80
 800567a:	d020      	beq.n	80056be <UART_WaitOnFlagUntilTimeout+0x8a>
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b40      	cmp	r3, #64	@ 0x40
 8005680:	d01d      	beq.n	80056be <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0308 	and.w	r3, r3, #8
 800568c:	2b08      	cmp	r3, #8
 800568e:	d116      	bne.n	80056be <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005690:	2300      	movs	r3, #0
 8005692:	617b      	str	r3, [r7, #20]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	617b      	str	r3, [r7, #20]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	617b      	str	r3, [r7, #20]
 80056a4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056a6:	68f8      	ldr	r0, [r7, #12]
 80056a8:	f000 f857 	bl	800575a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2208      	movs	r2, #8
 80056b0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e00f      	b.n	80056de <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4013      	ands	r3, r2
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	bf0c      	ite	eq
 80056ce:	2301      	moveq	r3, #1
 80056d0:	2300      	movne	r3, #0
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	461a      	mov	r2, r3
 80056d6:	79fb      	ldrb	r3, [r7, #7]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d0b4      	beq.n	8005646 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b085      	sub	sp, #20
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	60f8      	str	r0, [r7, #12]
 80056ee:	60b9      	str	r1, [r7, #8]
 80056f0:	4613      	mov	r3, r2
 80056f2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	68ba      	ldr	r2, [r7, #8]
 80056f8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	88fa      	ldrh	r2, [r7, #6]
 80056fe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	88fa      	ldrh	r2, [r7, #6]
 8005704:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2222      	movs	r2, #34	@ 0x22
 8005710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d007      	beq.n	800572c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68da      	ldr	r2, [r3, #12]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800572a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	695a      	ldr	r2, [r3, #20]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0201 	orr.w	r2, r2, #1
 800573a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0220 	orr.w	r2, r2, #32
 800574a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr

0800575a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800575a:	b480      	push	{r7}
 800575c:	b095      	sub	sp, #84	@ 0x54
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	330c      	adds	r3, #12
 8005768:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005774:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005778:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	330c      	adds	r3, #12
 8005780:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005782:	643a      	str	r2, [r7, #64]	@ 0x40
 8005784:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005786:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005788:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e5      	bne.n	8005762 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3314      	adds	r3, #20
 800579c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	e853 3f00 	ldrex	r3, [r3]
 80057a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	f023 0301 	bic.w	r3, r3, #1
 80057ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3314      	adds	r3, #20
 80057b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e5      	bne.n	8005796 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d119      	bne.n	8005806 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	330c      	adds	r3, #12
 80057d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	e853 3f00 	ldrex	r3, [r3]
 80057e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f023 0310 	bic.w	r3, r3, #16
 80057e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	330c      	adds	r3, #12
 80057f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057f2:	61ba      	str	r2, [r7, #24]
 80057f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f6:	6979      	ldr	r1, [r7, #20]
 80057f8:	69ba      	ldr	r2, [r7, #24]
 80057fa:	e841 2300 	strex	r3, r2, [r1]
 80057fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1e5      	bne.n	80057d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2220      	movs	r2, #32
 800580a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005814:	bf00      	nop
 8005816:	3754      	adds	r7, #84	@ 0x54
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800582c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f7ff fee4 	bl	8005608 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005840:	bf00      	nop
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b21      	cmp	r3, #33	@ 0x21
 800585a:	d13e      	bne.n	80058da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005864:	d114      	bne.n	8005890 <UART_Transmit_IT+0x48>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d110      	bne.n	8005890 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	461a      	mov	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005882:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	1c9a      	adds	r2, r3, #2
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	621a      	str	r2, [r3, #32]
 800588e:	e008      	b.n	80058a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a1b      	ldr	r3, [r3, #32]
 8005894:	1c59      	adds	r1, r3, #1
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6211      	str	r1, [r2, #32]
 800589a:	781a      	ldrb	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	4619      	mov	r1, r3
 80058b0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10f      	bne.n	80058d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80058c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	e000      	b.n	80058dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80058da:	2302      	movs	r3, #2
  }
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68da      	ldr	r2, [r3, #12]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2220      	movs	r2, #32
 8005904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7ff fe73 	bl	80055f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b08c      	sub	sp, #48	@ 0x30
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b22      	cmp	r3, #34	@ 0x22
 800592a:	f040 80ae 	bne.w	8005a8a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005936:	d117      	bne.n	8005968 <UART_Receive_IT+0x50>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d113      	bne.n	8005968 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005940:	2300      	movs	r3, #0
 8005942:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005948:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	b29b      	uxth	r3, r3
 8005952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005956:	b29a      	uxth	r2, r3
 8005958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005960:	1c9a      	adds	r2, r3, #2
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	629a      	str	r2, [r3, #40]	@ 0x28
 8005966:	e026      	b.n	80059b6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800596c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800596e:	2300      	movs	r3, #0
 8005970:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800597a:	d007      	beq.n	800598c <UART_Receive_IT+0x74>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10a      	bne.n	800599a <UART_Receive_IT+0x82>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d106      	bne.n	800599a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	b2da      	uxtb	r2, r3
 8005994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005996:	701a      	strb	r2, [r3, #0]
 8005998:	e008      	b.n	80059ac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059aa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059b0:	1c5a      	adds	r2, r3, #1
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29b      	uxth	r3, r3
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	4619      	mov	r1, r3
 80059c4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d15d      	bne.n	8005a86 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68da      	ldr	r2, [r3, #12]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0220 	bic.w	r2, r2, #32
 80059d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68da      	ldr	r2, [r3, #12]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80059e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	695a      	ldr	r2, [r3, #20]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0201 	bic.w	r2, r2, #1
 80059f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2220      	movs	r2, #32
 80059fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d135      	bne.n	8005a7c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	330c      	adds	r3, #12
 8005a1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	e853 3f00 	ldrex	r3, [r3]
 8005a24:	613b      	str	r3, [r7, #16]
   return(result);
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f023 0310 	bic.w	r3, r3, #16
 8005a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	330c      	adds	r3, #12
 8005a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a36:	623a      	str	r2, [r7, #32]
 8005a38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3a:	69f9      	ldr	r1, [r7, #28]
 8005a3c:	6a3a      	ldr	r2, [r7, #32]
 8005a3e:	e841 2300 	strex	r3, r2, [r1]
 8005a42:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1e5      	bne.n	8005a16 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0310 	and.w	r3, r3, #16
 8005a54:	2b10      	cmp	r3, #16
 8005a56:	d10a      	bne.n	8005a6e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a58:	2300      	movs	r3, #0
 8005a5a:	60fb      	str	r3, [r7, #12]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005a72:	4619      	mov	r1, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff fdd1 	bl	800561c <HAL_UARTEx_RxEventCallback>
 8005a7a:	e002      	b.n	8005a82 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7fb fa13 	bl	8000ea8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	e002      	b.n	8005a8c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	e000      	b.n	8005a8c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005a8a:	2302      	movs	r3, #2
  }
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3730      	adds	r7, #48	@ 0x30
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a98:	b0c0      	sub	sp, #256	@ 0x100
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab0:	68d9      	ldr	r1, [r3, #12]
 8005ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	ea40 0301 	orr.w	r3, r0, r1
 8005abc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	431a      	orrs	r2, r3
 8005acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005aec:	f021 010c 	bic.w	r1, r1, #12
 8005af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005afa:	430b      	orrs	r3, r1
 8005afc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	695b      	ldr	r3, [r3, #20]
 8005b06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b0e:	6999      	ldr	r1, [r3, #24]
 8005b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	ea40 0301 	orr.w	r3, r0, r1
 8005b1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	4b8f      	ldr	r3, [pc, #572]	@ (8005d60 <UART_SetConfig+0x2cc>)
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d005      	beq.n	8005b34 <UART_SetConfig+0xa0>
 8005b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	4b8d      	ldr	r3, [pc, #564]	@ (8005d64 <UART_SetConfig+0x2d0>)
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d104      	bne.n	8005b3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b34:	f7fd fdbe 	bl	80036b4 <HAL_RCC_GetPCLK2Freq>
 8005b38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b3c:	e003      	b.n	8005b46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b3e:	f7fd fda5 	bl	800368c <HAL_RCC_GetPCLK1Freq>
 8005b42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b50:	f040 810c 	bne.w	8005d6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005b62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005b66:	4622      	mov	r2, r4
 8005b68:	462b      	mov	r3, r5
 8005b6a:	1891      	adds	r1, r2, r2
 8005b6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005b6e:	415b      	adcs	r3, r3
 8005b70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b76:	4621      	mov	r1, r4
 8005b78:	eb12 0801 	adds.w	r8, r2, r1
 8005b7c:	4629      	mov	r1, r5
 8005b7e:	eb43 0901 	adc.w	r9, r3, r1
 8005b82:	f04f 0200 	mov.w	r2, #0
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b96:	4690      	mov	r8, r2
 8005b98:	4699      	mov	r9, r3
 8005b9a:	4623      	mov	r3, r4
 8005b9c:	eb18 0303 	adds.w	r3, r8, r3
 8005ba0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ba4:	462b      	mov	r3, r5
 8005ba6:	eb49 0303 	adc.w	r3, r9, r3
 8005baa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005bba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005bbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	18db      	adds	r3, r3, r3
 8005bc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bc8:	4613      	mov	r3, r2
 8005bca:	eb42 0303 	adc.w	r3, r2, r3
 8005bce:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005bd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005bd8:	f7fa ffee 	bl	8000bb8 <__aeabi_uldivmod>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
 8005be0:	4b61      	ldr	r3, [pc, #388]	@ (8005d68 <UART_SetConfig+0x2d4>)
 8005be2:	fba3 2302 	umull	r2, r3, r3, r2
 8005be6:	095b      	lsrs	r3, r3, #5
 8005be8:	011c      	lsls	r4, r3, #4
 8005bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bf4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005bf8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005bfc:	4642      	mov	r2, r8
 8005bfe:	464b      	mov	r3, r9
 8005c00:	1891      	adds	r1, r2, r2
 8005c02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005c04:	415b      	adcs	r3, r3
 8005c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c0c:	4641      	mov	r1, r8
 8005c0e:	eb12 0a01 	adds.w	sl, r2, r1
 8005c12:	4649      	mov	r1, r9
 8005c14:	eb43 0b01 	adc.w	fp, r3, r1
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c2c:	4692      	mov	sl, r2
 8005c2e:	469b      	mov	fp, r3
 8005c30:	4643      	mov	r3, r8
 8005c32:	eb1a 0303 	adds.w	r3, sl, r3
 8005c36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c3a:	464b      	mov	r3, r9
 8005c3c:	eb4b 0303 	adc.w	r3, fp, r3
 8005c40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005c54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	18db      	adds	r3, r3, r3
 8005c5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c5e:	4613      	mov	r3, r2
 8005c60:	eb42 0303 	adc.w	r3, r2, r3
 8005c64:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005c6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005c6e:	f7fa ffa3 	bl	8000bb8 <__aeabi_uldivmod>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	4611      	mov	r1, r2
 8005c78:	4b3b      	ldr	r3, [pc, #236]	@ (8005d68 <UART_SetConfig+0x2d4>)
 8005c7a:	fba3 2301 	umull	r2, r3, r3, r1
 8005c7e:	095b      	lsrs	r3, r3, #5
 8005c80:	2264      	movs	r2, #100	@ 0x64
 8005c82:	fb02 f303 	mul.w	r3, r2, r3
 8005c86:	1acb      	subs	r3, r1, r3
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005c8e:	4b36      	ldr	r3, [pc, #216]	@ (8005d68 <UART_SetConfig+0x2d4>)
 8005c90:	fba3 2302 	umull	r2, r3, r3, r2
 8005c94:	095b      	lsrs	r3, r3, #5
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005c9c:	441c      	add	r4, r3
 8005c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ca8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005cac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005cb0:	4642      	mov	r2, r8
 8005cb2:	464b      	mov	r3, r9
 8005cb4:	1891      	adds	r1, r2, r2
 8005cb6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005cb8:	415b      	adcs	r3, r3
 8005cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005cc0:	4641      	mov	r1, r8
 8005cc2:	1851      	adds	r1, r2, r1
 8005cc4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005cc6:	4649      	mov	r1, r9
 8005cc8:	414b      	adcs	r3, r1
 8005cca:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ccc:	f04f 0200 	mov.w	r2, #0
 8005cd0:	f04f 0300 	mov.w	r3, #0
 8005cd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005cd8:	4659      	mov	r1, fp
 8005cda:	00cb      	lsls	r3, r1, #3
 8005cdc:	4651      	mov	r1, sl
 8005cde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ce2:	4651      	mov	r1, sl
 8005ce4:	00ca      	lsls	r2, r1, #3
 8005ce6:	4610      	mov	r0, r2
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4603      	mov	r3, r0
 8005cec:	4642      	mov	r2, r8
 8005cee:	189b      	adds	r3, r3, r2
 8005cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cf4:	464b      	mov	r3, r9
 8005cf6:	460a      	mov	r2, r1
 8005cf8:	eb42 0303 	adc.w	r3, r2, r3
 8005cfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005d10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d14:	460b      	mov	r3, r1
 8005d16:	18db      	adds	r3, r3, r3
 8005d18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	eb42 0303 	adc.w	r3, r2, r3
 8005d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d2a:	f7fa ff45 	bl	8000bb8 <__aeabi_uldivmod>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	460b      	mov	r3, r1
 8005d32:	4b0d      	ldr	r3, [pc, #52]	@ (8005d68 <UART_SetConfig+0x2d4>)
 8005d34:	fba3 1302 	umull	r1, r3, r3, r2
 8005d38:	095b      	lsrs	r3, r3, #5
 8005d3a:	2164      	movs	r1, #100	@ 0x64
 8005d3c:	fb01 f303 	mul.w	r3, r1, r3
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	3332      	adds	r3, #50	@ 0x32
 8005d46:	4a08      	ldr	r2, [pc, #32]	@ (8005d68 <UART_SetConfig+0x2d4>)
 8005d48:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4c:	095b      	lsrs	r3, r3, #5
 8005d4e:	f003 0207 	and.w	r2, r3, #7
 8005d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4422      	add	r2, r4
 8005d5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d5c:	e106      	b.n	8005f6c <UART_SetConfig+0x4d8>
 8005d5e:	bf00      	nop
 8005d60:	40011000 	.word	0x40011000
 8005d64:	40011400 	.word	0x40011400
 8005d68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d70:	2200      	movs	r2, #0
 8005d72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005d7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005d7e:	4642      	mov	r2, r8
 8005d80:	464b      	mov	r3, r9
 8005d82:	1891      	adds	r1, r2, r2
 8005d84:	6239      	str	r1, [r7, #32]
 8005d86:	415b      	adcs	r3, r3
 8005d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d8e:	4641      	mov	r1, r8
 8005d90:	1854      	adds	r4, r2, r1
 8005d92:	4649      	mov	r1, r9
 8005d94:	eb43 0501 	adc.w	r5, r3, r1
 8005d98:	f04f 0200 	mov.w	r2, #0
 8005d9c:	f04f 0300 	mov.w	r3, #0
 8005da0:	00eb      	lsls	r3, r5, #3
 8005da2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005da6:	00e2      	lsls	r2, r4, #3
 8005da8:	4614      	mov	r4, r2
 8005daa:	461d      	mov	r5, r3
 8005dac:	4643      	mov	r3, r8
 8005dae:	18e3      	adds	r3, r4, r3
 8005db0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005db4:	464b      	mov	r3, r9
 8005db6:	eb45 0303 	adc.w	r3, r5, r3
 8005dba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005dca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	f04f 0300 	mov.w	r3, #0
 8005dd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005dda:	4629      	mov	r1, r5
 8005ddc:	008b      	lsls	r3, r1, #2
 8005dde:	4621      	mov	r1, r4
 8005de0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005de4:	4621      	mov	r1, r4
 8005de6:	008a      	lsls	r2, r1, #2
 8005de8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005dec:	f7fa fee4 	bl	8000bb8 <__aeabi_uldivmod>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	4b60      	ldr	r3, [pc, #384]	@ (8005f78 <UART_SetConfig+0x4e4>)
 8005df6:	fba3 2302 	umull	r2, r3, r3, r2
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	011c      	lsls	r4, r3, #4
 8005dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e02:	2200      	movs	r2, #0
 8005e04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005e10:	4642      	mov	r2, r8
 8005e12:	464b      	mov	r3, r9
 8005e14:	1891      	adds	r1, r2, r2
 8005e16:	61b9      	str	r1, [r7, #24]
 8005e18:	415b      	adcs	r3, r3
 8005e1a:	61fb      	str	r3, [r7, #28]
 8005e1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e20:	4641      	mov	r1, r8
 8005e22:	1851      	adds	r1, r2, r1
 8005e24:	6139      	str	r1, [r7, #16]
 8005e26:	4649      	mov	r1, r9
 8005e28:	414b      	adcs	r3, r1
 8005e2a:	617b      	str	r3, [r7, #20]
 8005e2c:	f04f 0200 	mov.w	r2, #0
 8005e30:	f04f 0300 	mov.w	r3, #0
 8005e34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e38:	4659      	mov	r1, fp
 8005e3a:	00cb      	lsls	r3, r1, #3
 8005e3c:	4651      	mov	r1, sl
 8005e3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e42:	4651      	mov	r1, sl
 8005e44:	00ca      	lsls	r2, r1, #3
 8005e46:	4610      	mov	r0, r2
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	4642      	mov	r2, r8
 8005e4e:	189b      	adds	r3, r3, r2
 8005e50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e54:	464b      	mov	r3, r9
 8005e56:	460a      	mov	r2, r1
 8005e58:	eb42 0303 	adc.w	r3, r2, r3
 8005e5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005e6c:	f04f 0200 	mov.w	r2, #0
 8005e70:	f04f 0300 	mov.w	r3, #0
 8005e74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005e78:	4649      	mov	r1, r9
 8005e7a:	008b      	lsls	r3, r1, #2
 8005e7c:	4641      	mov	r1, r8
 8005e7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e82:	4641      	mov	r1, r8
 8005e84:	008a      	lsls	r2, r1, #2
 8005e86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005e8a:	f7fa fe95 	bl	8000bb8 <__aeabi_uldivmod>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	4611      	mov	r1, r2
 8005e94:	4b38      	ldr	r3, [pc, #224]	@ (8005f78 <UART_SetConfig+0x4e4>)
 8005e96:	fba3 2301 	umull	r2, r3, r3, r1
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	2264      	movs	r2, #100	@ 0x64
 8005e9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ea2:	1acb      	subs	r3, r1, r3
 8005ea4:	011b      	lsls	r3, r3, #4
 8005ea6:	3332      	adds	r3, #50	@ 0x32
 8005ea8:	4a33      	ldr	r2, [pc, #204]	@ (8005f78 <UART_SetConfig+0x4e4>)
 8005eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005eae:	095b      	lsrs	r3, r3, #5
 8005eb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005eb4:	441c      	add	r4, r3
 8005eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eba:	2200      	movs	r2, #0
 8005ebc:	673b      	str	r3, [r7, #112]	@ 0x70
 8005ebe:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ec0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ec4:	4642      	mov	r2, r8
 8005ec6:	464b      	mov	r3, r9
 8005ec8:	1891      	adds	r1, r2, r2
 8005eca:	60b9      	str	r1, [r7, #8]
 8005ecc:	415b      	adcs	r3, r3
 8005ece:	60fb      	str	r3, [r7, #12]
 8005ed0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ed4:	4641      	mov	r1, r8
 8005ed6:	1851      	adds	r1, r2, r1
 8005ed8:	6039      	str	r1, [r7, #0]
 8005eda:	4649      	mov	r1, r9
 8005edc:	414b      	adcs	r3, r1
 8005ede:	607b      	str	r3, [r7, #4]
 8005ee0:	f04f 0200 	mov.w	r2, #0
 8005ee4:	f04f 0300 	mov.w	r3, #0
 8005ee8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005eec:	4659      	mov	r1, fp
 8005eee:	00cb      	lsls	r3, r1, #3
 8005ef0:	4651      	mov	r1, sl
 8005ef2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ef6:	4651      	mov	r1, sl
 8005ef8:	00ca      	lsls	r2, r1, #3
 8005efa:	4610      	mov	r0, r2
 8005efc:	4619      	mov	r1, r3
 8005efe:	4603      	mov	r3, r0
 8005f00:	4642      	mov	r2, r8
 8005f02:	189b      	adds	r3, r3, r2
 8005f04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f06:	464b      	mov	r3, r9
 8005f08:	460a      	mov	r2, r1
 8005f0a:	eb42 0303 	adc.w	r3, r2, r3
 8005f0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f1a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	f04f 0300 	mov.w	r3, #0
 8005f24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f28:	4649      	mov	r1, r9
 8005f2a:	008b      	lsls	r3, r1, #2
 8005f2c:	4641      	mov	r1, r8
 8005f2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f32:	4641      	mov	r1, r8
 8005f34:	008a      	lsls	r2, r1, #2
 8005f36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f3a:	f7fa fe3d 	bl	8000bb8 <__aeabi_uldivmod>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	460b      	mov	r3, r1
 8005f42:	4b0d      	ldr	r3, [pc, #52]	@ (8005f78 <UART_SetConfig+0x4e4>)
 8005f44:	fba3 1302 	umull	r1, r3, r3, r2
 8005f48:	095b      	lsrs	r3, r3, #5
 8005f4a:	2164      	movs	r1, #100	@ 0x64
 8005f4c:	fb01 f303 	mul.w	r3, r1, r3
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	011b      	lsls	r3, r3, #4
 8005f54:	3332      	adds	r3, #50	@ 0x32
 8005f56:	4a08      	ldr	r2, [pc, #32]	@ (8005f78 <UART_SetConfig+0x4e4>)
 8005f58:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5c:	095b      	lsrs	r3, r3, #5
 8005f5e:	f003 020f 	and.w	r2, r3, #15
 8005f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4422      	add	r2, r4
 8005f6a:	609a      	str	r2, [r3, #8]
}
 8005f6c:	bf00      	nop
 8005f6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005f72:	46bd      	mov	sp, r7
 8005f74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f78:	51eb851f 	.word	0x51eb851f

08005f7c <calloc>:
 8005f7c:	4b02      	ldr	r3, [pc, #8]	@ (8005f88 <calloc+0xc>)
 8005f7e:	460a      	mov	r2, r1
 8005f80:	4601      	mov	r1, r0
 8005f82:	6818      	ldr	r0, [r3, #0]
 8005f84:	f000 b802 	b.w	8005f8c <_calloc_r>
 8005f88:	20001788 	.word	0x20001788

08005f8c <_calloc_r>:
 8005f8c:	b570      	push	{r4, r5, r6, lr}
 8005f8e:	fba1 5402 	umull	r5, r4, r1, r2
 8005f92:	b93c      	cbnz	r4, 8005fa4 <_calloc_r+0x18>
 8005f94:	4629      	mov	r1, r5
 8005f96:	f000 f83f 	bl	8006018 <_malloc_r>
 8005f9a:	4606      	mov	r6, r0
 8005f9c:	b928      	cbnz	r0, 8005faa <_calloc_r+0x1e>
 8005f9e:	2600      	movs	r6, #0
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	bd70      	pop	{r4, r5, r6, pc}
 8005fa4:	220c      	movs	r2, #12
 8005fa6:	6002      	str	r2, [r0, #0]
 8005fa8:	e7f9      	b.n	8005f9e <_calloc_r+0x12>
 8005faa:	462a      	mov	r2, r5
 8005fac:	4621      	mov	r1, r4
 8005fae:	f000 fe4e 	bl	8006c4e <memset>
 8005fb2:	e7f5      	b.n	8005fa0 <_calloc_r+0x14>

08005fb4 <malloc>:
 8005fb4:	4b02      	ldr	r3, [pc, #8]	@ (8005fc0 <malloc+0xc>)
 8005fb6:	4601      	mov	r1, r0
 8005fb8:	6818      	ldr	r0, [r3, #0]
 8005fba:	f000 b82d 	b.w	8006018 <_malloc_r>
 8005fbe:	bf00      	nop
 8005fc0:	20001788 	.word	0x20001788

08005fc4 <free>:
 8005fc4:	4b02      	ldr	r3, [pc, #8]	@ (8005fd0 <free+0xc>)
 8005fc6:	4601      	mov	r1, r0
 8005fc8:	6818      	ldr	r0, [r3, #0]
 8005fca:	f001 bdad 	b.w	8007b28 <_free_r>
 8005fce:	bf00      	nop
 8005fd0:	20001788 	.word	0x20001788

08005fd4 <sbrk_aligned>:
 8005fd4:	b570      	push	{r4, r5, r6, lr}
 8005fd6:	4e0f      	ldr	r6, [pc, #60]	@ (8006014 <sbrk_aligned+0x40>)
 8005fd8:	460c      	mov	r4, r1
 8005fda:	6831      	ldr	r1, [r6, #0]
 8005fdc:	4605      	mov	r5, r0
 8005fde:	b911      	cbnz	r1, 8005fe6 <sbrk_aligned+0x12>
 8005fe0:	f000 fede 	bl	8006da0 <_sbrk_r>
 8005fe4:	6030      	str	r0, [r6, #0]
 8005fe6:	4621      	mov	r1, r4
 8005fe8:	4628      	mov	r0, r5
 8005fea:	f000 fed9 	bl	8006da0 <_sbrk_r>
 8005fee:	1c43      	adds	r3, r0, #1
 8005ff0:	d103      	bne.n	8005ffa <sbrk_aligned+0x26>
 8005ff2:	f04f 34ff 	mov.w	r4, #4294967295
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	bd70      	pop	{r4, r5, r6, pc}
 8005ffa:	1cc4      	adds	r4, r0, #3
 8005ffc:	f024 0403 	bic.w	r4, r4, #3
 8006000:	42a0      	cmp	r0, r4
 8006002:	d0f8      	beq.n	8005ff6 <sbrk_aligned+0x22>
 8006004:	1a21      	subs	r1, r4, r0
 8006006:	4628      	mov	r0, r5
 8006008:	f000 feca 	bl	8006da0 <_sbrk_r>
 800600c:	3001      	adds	r0, #1
 800600e:	d1f2      	bne.n	8005ff6 <sbrk_aligned+0x22>
 8006010:	e7ef      	b.n	8005ff2 <sbrk_aligned+0x1e>
 8006012:	bf00      	nop
 8006014:	20001c44 	.word	0x20001c44

08006018 <_malloc_r>:
 8006018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800601c:	1ccd      	adds	r5, r1, #3
 800601e:	f025 0503 	bic.w	r5, r5, #3
 8006022:	3508      	adds	r5, #8
 8006024:	2d0c      	cmp	r5, #12
 8006026:	bf38      	it	cc
 8006028:	250c      	movcc	r5, #12
 800602a:	2d00      	cmp	r5, #0
 800602c:	4606      	mov	r6, r0
 800602e:	db01      	blt.n	8006034 <_malloc_r+0x1c>
 8006030:	42a9      	cmp	r1, r5
 8006032:	d904      	bls.n	800603e <_malloc_r+0x26>
 8006034:	230c      	movs	r3, #12
 8006036:	6033      	str	r3, [r6, #0]
 8006038:	2000      	movs	r0, #0
 800603a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800603e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006114 <_malloc_r+0xfc>
 8006042:	f000 f869 	bl	8006118 <__malloc_lock>
 8006046:	f8d8 3000 	ldr.w	r3, [r8]
 800604a:	461c      	mov	r4, r3
 800604c:	bb44      	cbnz	r4, 80060a0 <_malloc_r+0x88>
 800604e:	4629      	mov	r1, r5
 8006050:	4630      	mov	r0, r6
 8006052:	f7ff ffbf 	bl	8005fd4 <sbrk_aligned>
 8006056:	1c43      	adds	r3, r0, #1
 8006058:	4604      	mov	r4, r0
 800605a:	d158      	bne.n	800610e <_malloc_r+0xf6>
 800605c:	f8d8 4000 	ldr.w	r4, [r8]
 8006060:	4627      	mov	r7, r4
 8006062:	2f00      	cmp	r7, #0
 8006064:	d143      	bne.n	80060ee <_malloc_r+0xd6>
 8006066:	2c00      	cmp	r4, #0
 8006068:	d04b      	beq.n	8006102 <_malloc_r+0xea>
 800606a:	6823      	ldr	r3, [r4, #0]
 800606c:	4639      	mov	r1, r7
 800606e:	4630      	mov	r0, r6
 8006070:	eb04 0903 	add.w	r9, r4, r3
 8006074:	f000 fe94 	bl	8006da0 <_sbrk_r>
 8006078:	4581      	cmp	r9, r0
 800607a:	d142      	bne.n	8006102 <_malloc_r+0xea>
 800607c:	6821      	ldr	r1, [r4, #0]
 800607e:	1a6d      	subs	r5, r5, r1
 8006080:	4629      	mov	r1, r5
 8006082:	4630      	mov	r0, r6
 8006084:	f7ff ffa6 	bl	8005fd4 <sbrk_aligned>
 8006088:	3001      	adds	r0, #1
 800608a:	d03a      	beq.n	8006102 <_malloc_r+0xea>
 800608c:	6823      	ldr	r3, [r4, #0]
 800608e:	442b      	add	r3, r5
 8006090:	6023      	str	r3, [r4, #0]
 8006092:	f8d8 3000 	ldr.w	r3, [r8]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	bb62      	cbnz	r2, 80060f4 <_malloc_r+0xdc>
 800609a:	f8c8 7000 	str.w	r7, [r8]
 800609e:	e00f      	b.n	80060c0 <_malloc_r+0xa8>
 80060a0:	6822      	ldr	r2, [r4, #0]
 80060a2:	1b52      	subs	r2, r2, r5
 80060a4:	d420      	bmi.n	80060e8 <_malloc_r+0xd0>
 80060a6:	2a0b      	cmp	r2, #11
 80060a8:	d917      	bls.n	80060da <_malloc_r+0xc2>
 80060aa:	1961      	adds	r1, r4, r5
 80060ac:	42a3      	cmp	r3, r4
 80060ae:	6025      	str	r5, [r4, #0]
 80060b0:	bf18      	it	ne
 80060b2:	6059      	strne	r1, [r3, #4]
 80060b4:	6863      	ldr	r3, [r4, #4]
 80060b6:	bf08      	it	eq
 80060b8:	f8c8 1000 	streq.w	r1, [r8]
 80060bc:	5162      	str	r2, [r4, r5]
 80060be:	604b      	str	r3, [r1, #4]
 80060c0:	4630      	mov	r0, r6
 80060c2:	f000 f82f 	bl	8006124 <__malloc_unlock>
 80060c6:	f104 000b 	add.w	r0, r4, #11
 80060ca:	1d23      	adds	r3, r4, #4
 80060cc:	f020 0007 	bic.w	r0, r0, #7
 80060d0:	1ac2      	subs	r2, r0, r3
 80060d2:	bf1c      	itt	ne
 80060d4:	1a1b      	subne	r3, r3, r0
 80060d6:	50a3      	strne	r3, [r4, r2]
 80060d8:	e7af      	b.n	800603a <_malloc_r+0x22>
 80060da:	6862      	ldr	r2, [r4, #4]
 80060dc:	42a3      	cmp	r3, r4
 80060de:	bf0c      	ite	eq
 80060e0:	f8c8 2000 	streq.w	r2, [r8]
 80060e4:	605a      	strne	r2, [r3, #4]
 80060e6:	e7eb      	b.n	80060c0 <_malloc_r+0xa8>
 80060e8:	4623      	mov	r3, r4
 80060ea:	6864      	ldr	r4, [r4, #4]
 80060ec:	e7ae      	b.n	800604c <_malloc_r+0x34>
 80060ee:	463c      	mov	r4, r7
 80060f0:	687f      	ldr	r7, [r7, #4]
 80060f2:	e7b6      	b.n	8006062 <_malloc_r+0x4a>
 80060f4:	461a      	mov	r2, r3
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	42a3      	cmp	r3, r4
 80060fa:	d1fb      	bne.n	80060f4 <_malloc_r+0xdc>
 80060fc:	2300      	movs	r3, #0
 80060fe:	6053      	str	r3, [r2, #4]
 8006100:	e7de      	b.n	80060c0 <_malloc_r+0xa8>
 8006102:	230c      	movs	r3, #12
 8006104:	6033      	str	r3, [r6, #0]
 8006106:	4630      	mov	r0, r6
 8006108:	f000 f80c 	bl	8006124 <__malloc_unlock>
 800610c:	e794      	b.n	8006038 <_malloc_r+0x20>
 800610e:	6005      	str	r5, [r0, #0]
 8006110:	e7d6      	b.n	80060c0 <_malloc_r+0xa8>
 8006112:	bf00      	nop
 8006114:	20001c48 	.word	0x20001c48

08006118 <__malloc_lock>:
 8006118:	4801      	ldr	r0, [pc, #4]	@ (8006120 <__malloc_lock+0x8>)
 800611a:	f000 be8e 	b.w	8006e3a <__retarget_lock_acquire_recursive>
 800611e:	bf00      	nop
 8006120:	20001d8c 	.word	0x20001d8c

08006124 <__malloc_unlock>:
 8006124:	4801      	ldr	r0, [pc, #4]	@ (800612c <__malloc_unlock+0x8>)
 8006126:	f000 be89 	b.w	8006e3c <__retarget_lock_release_recursive>
 800612a:	bf00      	nop
 800612c:	20001d8c 	.word	0x20001d8c

08006130 <__cvt>:
 8006130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006134:	ec57 6b10 	vmov	r6, r7, d0
 8006138:	2f00      	cmp	r7, #0
 800613a:	460c      	mov	r4, r1
 800613c:	4619      	mov	r1, r3
 800613e:	463b      	mov	r3, r7
 8006140:	bfbb      	ittet	lt
 8006142:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006146:	461f      	movlt	r7, r3
 8006148:	2300      	movge	r3, #0
 800614a:	232d      	movlt	r3, #45	@ 0x2d
 800614c:	700b      	strb	r3, [r1, #0]
 800614e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006150:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006154:	4691      	mov	r9, r2
 8006156:	f023 0820 	bic.w	r8, r3, #32
 800615a:	bfbc      	itt	lt
 800615c:	4632      	movlt	r2, r6
 800615e:	4616      	movlt	r6, r2
 8006160:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006164:	d005      	beq.n	8006172 <__cvt+0x42>
 8006166:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800616a:	d100      	bne.n	800616e <__cvt+0x3e>
 800616c:	3401      	adds	r4, #1
 800616e:	2102      	movs	r1, #2
 8006170:	e000      	b.n	8006174 <__cvt+0x44>
 8006172:	2103      	movs	r1, #3
 8006174:	ab03      	add	r3, sp, #12
 8006176:	9301      	str	r3, [sp, #4]
 8006178:	ab02      	add	r3, sp, #8
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	ec47 6b10 	vmov	d0, r6, r7
 8006180:	4653      	mov	r3, sl
 8006182:	4622      	mov	r2, r4
 8006184:	f000 ff0c 	bl	8006fa0 <_dtoa_r>
 8006188:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800618c:	4605      	mov	r5, r0
 800618e:	d119      	bne.n	80061c4 <__cvt+0x94>
 8006190:	f019 0f01 	tst.w	r9, #1
 8006194:	d00e      	beq.n	80061b4 <__cvt+0x84>
 8006196:	eb00 0904 	add.w	r9, r0, r4
 800619a:	2200      	movs	r2, #0
 800619c:	2300      	movs	r3, #0
 800619e:	4630      	mov	r0, r6
 80061a0:	4639      	mov	r1, r7
 80061a2:	f7fa fc99 	bl	8000ad8 <__aeabi_dcmpeq>
 80061a6:	b108      	cbz	r0, 80061ac <__cvt+0x7c>
 80061a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80061ac:	2230      	movs	r2, #48	@ 0x30
 80061ae:	9b03      	ldr	r3, [sp, #12]
 80061b0:	454b      	cmp	r3, r9
 80061b2:	d31e      	bcc.n	80061f2 <__cvt+0xc2>
 80061b4:	9b03      	ldr	r3, [sp, #12]
 80061b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80061b8:	1b5b      	subs	r3, r3, r5
 80061ba:	4628      	mov	r0, r5
 80061bc:	6013      	str	r3, [r2, #0]
 80061be:	b004      	add	sp, #16
 80061c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80061c8:	eb00 0904 	add.w	r9, r0, r4
 80061cc:	d1e5      	bne.n	800619a <__cvt+0x6a>
 80061ce:	7803      	ldrb	r3, [r0, #0]
 80061d0:	2b30      	cmp	r3, #48	@ 0x30
 80061d2:	d10a      	bne.n	80061ea <__cvt+0xba>
 80061d4:	2200      	movs	r2, #0
 80061d6:	2300      	movs	r3, #0
 80061d8:	4630      	mov	r0, r6
 80061da:	4639      	mov	r1, r7
 80061dc:	f7fa fc7c 	bl	8000ad8 <__aeabi_dcmpeq>
 80061e0:	b918      	cbnz	r0, 80061ea <__cvt+0xba>
 80061e2:	f1c4 0401 	rsb	r4, r4, #1
 80061e6:	f8ca 4000 	str.w	r4, [sl]
 80061ea:	f8da 3000 	ldr.w	r3, [sl]
 80061ee:	4499      	add	r9, r3
 80061f0:	e7d3      	b.n	800619a <__cvt+0x6a>
 80061f2:	1c59      	adds	r1, r3, #1
 80061f4:	9103      	str	r1, [sp, #12]
 80061f6:	701a      	strb	r2, [r3, #0]
 80061f8:	e7d9      	b.n	80061ae <__cvt+0x7e>

080061fa <__exponent>:
 80061fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061fc:	2900      	cmp	r1, #0
 80061fe:	bfba      	itte	lt
 8006200:	4249      	neglt	r1, r1
 8006202:	232d      	movlt	r3, #45	@ 0x2d
 8006204:	232b      	movge	r3, #43	@ 0x2b
 8006206:	2909      	cmp	r1, #9
 8006208:	7002      	strb	r2, [r0, #0]
 800620a:	7043      	strb	r3, [r0, #1]
 800620c:	dd29      	ble.n	8006262 <__exponent+0x68>
 800620e:	f10d 0307 	add.w	r3, sp, #7
 8006212:	461d      	mov	r5, r3
 8006214:	270a      	movs	r7, #10
 8006216:	461a      	mov	r2, r3
 8006218:	fbb1 f6f7 	udiv	r6, r1, r7
 800621c:	fb07 1416 	mls	r4, r7, r6, r1
 8006220:	3430      	adds	r4, #48	@ 0x30
 8006222:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006226:	460c      	mov	r4, r1
 8006228:	2c63      	cmp	r4, #99	@ 0x63
 800622a:	f103 33ff 	add.w	r3, r3, #4294967295
 800622e:	4631      	mov	r1, r6
 8006230:	dcf1      	bgt.n	8006216 <__exponent+0x1c>
 8006232:	3130      	adds	r1, #48	@ 0x30
 8006234:	1e94      	subs	r4, r2, #2
 8006236:	f803 1c01 	strb.w	r1, [r3, #-1]
 800623a:	1c41      	adds	r1, r0, #1
 800623c:	4623      	mov	r3, r4
 800623e:	42ab      	cmp	r3, r5
 8006240:	d30a      	bcc.n	8006258 <__exponent+0x5e>
 8006242:	f10d 0309 	add.w	r3, sp, #9
 8006246:	1a9b      	subs	r3, r3, r2
 8006248:	42ac      	cmp	r4, r5
 800624a:	bf88      	it	hi
 800624c:	2300      	movhi	r3, #0
 800624e:	3302      	adds	r3, #2
 8006250:	4403      	add	r3, r0
 8006252:	1a18      	subs	r0, r3, r0
 8006254:	b003      	add	sp, #12
 8006256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006258:	f813 6b01 	ldrb.w	r6, [r3], #1
 800625c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006260:	e7ed      	b.n	800623e <__exponent+0x44>
 8006262:	2330      	movs	r3, #48	@ 0x30
 8006264:	3130      	adds	r1, #48	@ 0x30
 8006266:	7083      	strb	r3, [r0, #2]
 8006268:	70c1      	strb	r1, [r0, #3]
 800626a:	1d03      	adds	r3, r0, #4
 800626c:	e7f1      	b.n	8006252 <__exponent+0x58>
	...

08006270 <_printf_float>:
 8006270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006274:	b08d      	sub	sp, #52	@ 0x34
 8006276:	460c      	mov	r4, r1
 8006278:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800627c:	4616      	mov	r6, r2
 800627e:	461f      	mov	r7, r3
 8006280:	4605      	mov	r5, r0
 8006282:	f000 fd55 	bl	8006d30 <_localeconv_r>
 8006286:	6803      	ldr	r3, [r0, #0]
 8006288:	9304      	str	r3, [sp, #16]
 800628a:	4618      	mov	r0, r3
 800628c:	f7f9 fff8 	bl	8000280 <strlen>
 8006290:	2300      	movs	r3, #0
 8006292:	930a      	str	r3, [sp, #40]	@ 0x28
 8006294:	f8d8 3000 	ldr.w	r3, [r8]
 8006298:	9005      	str	r0, [sp, #20]
 800629a:	3307      	adds	r3, #7
 800629c:	f023 0307 	bic.w	r3, r3, #7
 80062a0:	f103 0208 	add.w	r2, r3, #8
 80062a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80062a8:	f8d4 b000 	ldr.w	fp, [r4]
 80062ac:	f8c8 2000 	str.w	r2, [r8]
 80062b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80062b8:	9307      	str	r3, [sp, #28]
 80062ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80062be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80062c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062c6:	4b9c      	ldr	r3, [pc, #624]	@ (8006538 <_printf_float+0x2c8>)
 80062c8:	f04f 32ff 	mov.w	r2, #4294967295
 80062cc:	f7fa fc36 	bl	8000b3c <__aeabi_dcmpun>
 80062d0:	bb70      	cbnz	r0, 8006330 <_printf_float+0xc0>
 80062d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062d6:	4b98      	ldr	r3, [pc, #608]	@ (8006538 <_printf_float+0x2c8>)
 80062d8:	f04f 32ff 	mov.w	r2, #4294967295
 80062dc:	f7fa fc10 	bl	8000b00 <__aeabi_dcmple>
 80062e0:	bb30      	cbnz	r0, 8006330 <_printf_float+0xc0>
 80062e2:	2200      	movs	r2, #0
 80062e4:	2300      	movs	r3, #0
 80062e6:	4640      	mov	r0, r8
 80062e8:	4649      	mov	r1, r9
 80062ea:	f7fa fbff 	bl	8000aec <__aeabi_dcmplt>
 80062ee:	b110      	cbz	r0, 80062f6 <_printf_float+0x86>
 80062f0:	232d      	movs	r3, #45	@ 0x2d
 80062f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062f6:	4a91      	ldr	r2, [pc, #580]	@ (800653c <_printf_float+0x2cc>)
 80062f8:	4b91      	ldr	r3, [pc, #580]	@ (8006540 <_printf_float+0x2d0>)
 80062fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80062fe:	bf94      	ite	ls
 8006300:	4690      	movls	r8, r2
 8006302:	4698      	movhi	r8, r3
 8006304:	2303      	movs	r3, #3
 8006306:	6123      	str	r3, [r4, #16]
 8006308:	f02b 0304 	bic.w	r3, fp, #4
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	f04f 0900 	mov.w	r9, #0
 8006312:	9700      	str	r7, [sp, #0]
 8006314:	4633      	mov	r3, r6
 8006316:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006318:	4621      	mov	r1, r4
 800631a:	4628      	mov	r0, r5
 800631c:	f000 f9d2 	bl	80066c4 <_printf_common>
 8006320:	3001      	adds	r0, #1
 8006322:	f040 808d 	bne.w	8006440 <_printf_float+0x1d0>
 8006326:	f04f 30ff 	mov.w	r0, #4294967295
 800632a:	b00d      	add	sp, #52	@ 0x34
 800632c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006330:	4642      	mov	r2, r8
 8006332:	464b      	mov	r3, r9
 8006334:	4640      	mov	r0, r8
 8006336:	4649      	mov	r1, r9
 8006338:	f7fa fc00 	bl	8000b3c <__aeabi_dcmpun>
 800633c:	b140      	cbz	r0, 8006350 <_printf_float+0xe0>
 800633e:	464b      	mov	r3, r9
 8006340:	2b00      	cmp	r3, #0
 8006342:	bfbc      	itt	lt
 8006344:	232d      	movlt	r3, #45	@ 0x2d
 8006346:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800634a:	4a7e      	ldr	r2, [pc, #504]	@ (8006544 <_printf_float+0x2d4>)
 800634c:	4b7e      	ldr	r3, [pc, #504]	@ (8006548 <_printf_float+0x2d8>)
 800634e:	e7d4      	b.n	80062fa <_printf_float+0x8a>
 8006350:	6863      	ldr	r3, [r4, #4]
 8006352:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006356:	9206      	str	r2, [sp, #24]
 8006358:	1c5a      	adds	r2, r3, #1
 800635a:	d13b      	bne.n	80063d4 <_printf_float+0x164>
 800635c:	2306      	movs	r3, #6
 800635e:	6063      	str	r3, [r4, #4]
 8006360:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006364:	2300      	movs	r3, #0
 8006366:	6022      	str	r2, [r4, #0]
 8006368:	9303      	str	r3, [sp, #12]
 800636a:	ab0a      	add	r3, sp, #40	@ 0x28
 800636c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006370:	ab09      	add	r3, sp, #36	@ 0x24
 8006372:	9300      	str	r3, [sp, #0]
 8006374:	6861      	ldr	r1, [r4, #4]
 8006376:	ec49 8b10 	vmov	d0, r8, r9
 800637a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800637e:	4628      	mov	r0, r5
 8006380:	f7ff fed6 	bl	8006130 <__cvt>
 8006384:	9b06      	ldr	r3, [sp, #24]
 8006386:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006388:	2b47      	cmp	r3, #71	@ 0x47
 800638a:	4680      	mov	r8, r0
 800638c:	d129      	bne.n	80063e2 <_printf_float+0x172>
 800638e:	1cc8      	adds	r0, r1, #3
 8006390:	db02      	blt.n	8006398 <_printf_float+0x128>
 8006392:	6863      	ldr	r3, [r4, #4]
 8006394:	4299      	cmp	r1, r3
 8006396:	dd41      	ble.n	800641c <_printf_float+0x1ac>
 8006398:	f1aa 0a02 	sub.w	sl, sl, #2
 800639c:	fa5f fa8a 	uxtb.w	sl, sl
 80063a0:	3901      	subs	r1, #1
 80063a2:	4652      	mov	r2, sl
 80063a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80063a8:	9109      	str	r1, [sp, #36]	@ 0x24
 80063aa:	f7ff ff26 	bl	80061fa <__exponent>
 80063ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063b0:	1813      	adds	r3, r2, r0
 80063b2:	2a01      	cmp	r2, #1
 80063b4:	4681      	mov	r9, r0
 80063b6:	6123      	str	r3, [r4, #16]
 80063b8:	dc02      	bgt.n	80063c0 <_printf_float+0x150>
 80063ba:	6822      	ldr	r2, [r4, #0]
 80063bc:	07d2      	lsls	r2, r2, #31
 80063be:	d501      	bpl.n	80063c4 <_printf_float+0x154>
 80063c0:	3301      	adds	r3, #1
 80063c2:	6123      	str	r3, [r4, #16]
 80063c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0a2      	beq.n	8006312 <_printf_float+0xa2>
 80063cc:	232d      	movs	r3, #45	@ 0x2d
 80063ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063d2:	e79e      	b.n	8006312 <_printf_float+0xa2>
 80063d4:	9a06      	ldr	r2, [sp, #24]
 80063d6:	2a47      	cmp	r2, #71	@ 0x47
 80063d8:	d1c2      	bne.n	8006360 <_printf_float+0xf0>
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1c0      	bne.n	8006360 <_printf_float+0xf0>
 80063de:	2301      	movs	r3, #1
 80063e0:	e7bd      	b.n	800635e <_printf_float+0xee>
 80063e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80063e6:	d9db      	bls.n	80063a0 <_printf_float+0x130>
 80063e8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80063ec:	d118      	bne.n	8006420 <_printf_float+0x1b0>
 80063ee:	2900      	cmp	r1, #0
 80063f0:	6863      	ldr	r3, [r4, #4]
 80063f2:	dd0b      	ble.n	800640c <_printf_float+0x19c>
 80063f4:	6121      	str	r1, [r4, #16]
 80063f6:	b913      	cbnz	r3, 80063fe <_printf_float+0x18e>
 80063f8:	6822      	ldr	r2, [r4, #0]
 80063fa:	07d0      	lsls	r0, r2, #31
 80063fc:	d502      	bpl.n	8006404 <_printf_float+0x194>
 80063fe:	3301      	adds	r3, #1
 8006400:	440b      	add	r3, r1
 8006402:	6123      	str	r3, [r4, #16]
 8006404:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006406:	f04f 0900 	mov.w	r9, #0
 800640a:	e7db      	b.n	80063c4 <_printf_float+0x154>
 800640c:	b913      	cbnz	r3, 8006414 <_printf_float+0x1a4>
 800640e:	6822      	ldr	r2, [r4, #0]
 8006410:	07d2      	lsls	r2, r2, #31
 8006412:	d501      	bpl.n	8006418 <_printf_float+0x1a8>
 8006414:	3302      	adds	r3, #2
 8006416:	e7f4      	b.n	8006402 <_printf_float+0x192>
 8006418:	2301      	movs	r3, #1
 800641a:	e7f2      	b.n	8006402 <_printf_float+0x192>
 800641c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006420:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006422:	4299      	cmp	r1, r3
 8006424:	db05      	blt.n	8006432 <_printf_float+0x1c2>
 8006426:	6823      	ldr	r3, [r4, #0]
 8006428:	6121      	str	r1, [r4, #16]
 800642a:	07d8      	lsls	r0, r3, #31
 800642c:	d5ea      	bpl.n	8006404 <_printf_float+0x194>
 800642e:	1c4b      	adds	r3, r1, #1
 8006430:	e7e7      	b.n	8006402 <_printf_float+0x192>
 8006432:	2900      	cmp	r1, #0
 8006434:	bfd4      	ite	le
 8006436:	f1c1 0202 	rsble	r2, r1, #2
 800643a:	2201      	movgt	r2, #1
 800643c:	4413      	add	r3, r2
 800643e:	e7e0      	b.n	8006402 <_printf_float+0x192>
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	055a      	lsls	r2, r3, #21
 8006444:	d407      	bmi.n	8006456 <_printf_float+0x1e6>
 8006446:	6923      	ldr	r3, [r4, #16]
 8006448:	4642      	mov	r2, r8
 800644a:	4631      	mov	r1, r6
 800644c:	4628      	mov	r0, r5
 800644e:	47b8      	blx	r7
 8006450:	3001      	adds	r0, #1
 8006452:	d12b      	bne.n	80064ac <_printf_float+0x23c>
 8006454:	e767      	b.n	8006326 <_printf_float+0xb6>
 8006456:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800645a:	f240 80dd 	bls.w	8006618 <_printf_float+0x3a8>
 800645e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006462:	2200      	movs	r2, #0
 8006464:	2300      	movs	r3, #0
 8006466:	f7fa fb37 	bl	8000ad8 <__aeabi_dcmpeq>
 800646a:	2800      	cmp	r0, #0
 800646c:	d033      	beq.n	80064d6 <_printf_float+0x266>
 800646e:	4a37      	ldr	r2, [pc, #220]	@ (800654c <_printf_float+0x2dc>)
 8006470:	2301      	movs	r3, #1
 8006472:	4631      	mov	r1, r6
 8006474:	4628      	mov	r0, r5
 8006476:	47b8      	blx	r7
 8006478:	3001      	adds	r0, #1
 800647a:	f43f af54 	beq.w	8006326 <_printf_float+0xb6>
 800647e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006482:	4543      	cmp	r3, r8
 8006484:	db02      	blt.n	800648c <_printf_float+0x21c>
 8006486:	6823      	ldr	r3, [r4, #0]
 8006488:	07d8      	lsls	r0, r3, #31
 800648a:	d50f      	bpl.n	80064ac <_printf_float+0x23c>
 800648c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006490:	4631      	mov	r1, r6
 8006492:	4628      	mov	r0, r5
 8006494:	47b8      	blx	r7
 8006496:	3001      	adds	r0, #1
 8006498:	f43f af45 	beq.w	8006326 <_printf_float+0xb6>
 800649c:	f04f 0900 	mov.w	r9, #0
 80064a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80064a4:	f104 0a1a 	add.w	sl, r4, #26
 80064a8:	45c8      	cmp	r8, r9
 80064aa:	dc09      	bgt.n	80064c0 <_printf_float+0x250>
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	079b      	lsls	r3, r3, #30
 80064b0:	f100 8103 	bmi.w	80066ba <_printf_float+0x44a>
 80064b4:	68e0      	ldr	r0, [r4, #12]
 80064b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064b8:	4298      	cmp	r0, r3
 80064ba:	bfb8      	it	lt
 80064bc:	4618      	movlt	r0, r3
 80064be:	e734      	b.n	800632a <_printf_float+0xba>
 80064c0:	2301      	movs	r3, #1
 80064c2:	4652      	mov	r2, sl
 80064c4:	4631      	mov	r1, r6
 80064c6:	4628      	mov	r0, r5
 80064c8:	47b8      	blx	r7
 80064ca:	3001      	adds	r0, #1
 80064cc:	f43f af2b 	beq.w	8006326 <_printf_float+0xb6>
 80064d0:	f109 0901 	add.w	r9, r9, #1
 80064d4:	e7e8      	b.n	80064a8 <_printf_float+0x238>
 80064d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064d8:	2b00      	cmp	r3, #0
 80064da:	dc39      	bgt.n	8006550 <_printf_float+0x2e0>
 80064dc:	4a1b      	ldr	r2, [pc, #108]	@ (800654c <_printf_float+0x2dc>)
 80064de:	2301      	movs	r3, #1
 80064e0:	4631      	mov	r1, r6
 80064e2:	4628      	mov	r0, r5
 80064e4:	47b8      	blx	r7
 80064e6:	3001      	adds	r0, #1
 80064e8:	f43f af1d 	beq.w	8006326 <_printf_float+0xb6>
 80064ec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80064f0:	ea59 0303 	orrs.w	r3, r9, r3
 80064f4:	d102      	bne.n	80064fc <_printf_float+0x28c>
 80064f6:	6823      	ldr	r3, [r4, #0]
 80064f8:	07d9      	lsls	r1, r3, #31
 80064fa:	d5d7      	bpl.n	80064ac <_printf_float+0x23c>
 80064fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006500:	4631      	mov	r1, r6
 8006502:	4628      	mov	r0, r5
 8006504:	47b8      	blx	r7
 8006506:	3001      	adds	r0, #1
 8006508:	f43f af0d 	beq.w	8006326 <_printf_float+0xb6>
 800650c:	f04f 0a00 	mov.w	sl, #0
 8006510:	f104 0b1a 	add.w	fp, r4, #26
 8006514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006516:	425b      	negs	r3, r3
 8006518:	4553      	cmp	r3, sl
 800651a:	dc01      	bgt.n	8006520 <_printf_float+0x2b0>
 800651c:	464b      	mov	r3, r9
 800651e:	e793      	b.n	8006448 <_printf_float+0x1d8>
 8006520:	2301      	movs	r3, #1
 8006522:	465a      	mov	r2, fp
 8006524:	4631      	mov	r1, r6
 8006526:	4628      	mov	r0, r5
 8006528:	47b8      	blx	r7
 800652a:	3001      	adds	r0, #1
 800652c:	f43f aefb 	beq.w	8006326 <_printf_float+0xb6>
 8006530:	f10a 0a01 	add.w	sl, sl, #1
 8006534:	e7ee      	b.n	8006514 <_printf_float+0x2a4>
 8006536:	bf00      	nop
 8006538:	7fefffff 	.word	0x7fefffff
 800653c:	08008ff4 	.word	0x08008ff4
 8006540:	08008ff8 	.word	0x08008ff8
 8006544:	08008ffc 	.word	0x08008ffc
 8006548:	08009000 	.word	0x08009000
 800654c:	08009004 	.word	0x08009004
 8006550:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006552:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006556:	4553      	cmp	r3, sl
 8006558:	bfa8      	it	ge
 800655a:	4653      	movge	r3, sl
 800655c:	2b00      	cmp	r3, #0
 800655e:	4699      	mov	r9, r3
 8006560:	dc36      	bgt.n	80065d0 <_printf_float+0x360>
 8006562:	f04f 0b00 	mov.w	fp, #0
 8006566:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800656a:	f104 021a 	add.w	r2, r4, #26
 800656e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006570:	9306      	str	r3, [sp, #24]
 8006572:	eba3 0309 	sub.w	r3, r3, r9
 8006576:	455b      	cmp	r3, fp
 8006578:	dc31      	bgt.n	80065de <_printf_float+0x36e>
 800657a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800657c:	459a      	cmp	sl, r3
 800657e:	dc3a      	bgt.n	80065f6 <_printf_float+0x386>
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	07da      	lsls	r2, r3, #31
 8006584:	d437      	bmi.n	80065f6 <_printf_float+0x386>
 8006586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006588:	ebaa 0903 	sub.w	r9, sl, r3
 800658c:	9b06      	ldr	r3, [sp, #24]
 800658e:	ebaa 0303 	sub.w	r3, sl, r3
 8006592:	4599      	cmp	r9, r3
 8006594:	bfa8      	it	ge
 8006596:	4699      	movge	r9, r3
 8006598:	f1b9 0f00 	cmp.w	r9, #0
 800659c:	dc33      	bgt.n	8006606 <_printf_float+0x396>
 800659e:	f04f 0800 	mov.w	r8, #0
 80065a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065a6:	f104 0b1a 	add.w	fp, r4, #26
 80065aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065ac:	ebaa 0303 	sub.w	r3, sl, r3
 80065b0:	eba3 0309 	sub.w	r3, r3, r9
 80065b4:	4543      	cmp	r3, r8
 80065b6:	f77f af79 	ble.w	80064ac <_printf_float+0x23c>
 80065ba:	2301      	movs	r3, #1
 80065bc:	465a      	mov	r2, fp
 80065be:	4631      	mov	r1, r6
 80065c0:	4628      	mov	r0, r5
 80065c2:	47b8      	blx	r7
 80065c4:	3001      	adds	r0, #1
 80065c6:	f43f aeae 	beq.w	8006326 <_printf_float+0xb6>
 80065ca:	f108 0801 	add.w	r8, r8, #1
 80065ce:	e7ec      	b.n	80065aa <_printf_float+0x33a>
 80065d0:	4642      	mov	r2, r8
 80065d2:	4631      	mov	r1, r6
 80065d4:	4628      	mov	r0, r5
 80065d6:	47b8      	blx	r7
 80065d8:	3001      	adds	r0, #1
 80065da:	d1c2      	bne.n	8006562 <_printf_float+0x2f2>
 80065dc:	e6a3      	b.n	8006326 <_printf_float+0xb6>
 80065de:	2301      	movs	r3, #1
 80065e0:	4631      	mov	r1, r6
 80065e2:	4628      	mov	r0, r5
 80065e4:	9206      	str	r2, [sp, #24]
 80065e6:	47b8      	blx	r7
 80065e8:	3001      	adds	r0, #1
 80065ea:	f43f ae9c 	beq.w	8006326 <_printf_float+0xb6>
 80065ee:	9a06      	ldr	r2, [sp, #24]
 80065f0:	f10b 0b01 	add.w	fp, fp, #1
 80065f4:	e7bb      	b.n	800656e <_printf_float+0x2fe>
 80065f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065fa:	4631      	mov	r1, r6
 80065fc:	4628      	mov	r0, r5
 80065fe:	47b8      	blx	r7
 8006600:	3001      	adds	r0, #1
 8006602:	d1c0      	bne.n	8006586 <_printf_float+0x316>
 8006604:	e68f      	b.n	8006326 <_printf_float+0xb6>
 8006606:	9a06      	ldr	r2, [sp, #24]
 8006608:	464b      	mov	r3, r9
 800660a:	4442      	add	r2, r8
 800660c:	4631      	mov	r1, r6
 800660e:	4628      	mov	r0, r5
 8006610:	47b8      	blx	r7
 8006612:	3001      	adds	r0, #1
 8006614:	d1c3      	bne.n	800659e <_printf_float+0x32e>
 8006616:	e686      	b.n	8006326 <_printf_float+0xb6>
 8006618:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800661c:	f1ba 0f01 	cmp.w	sl, #1
 8006620:	dc01      	bgt.n	8006626 <_printf_float+0x3b6>
 8006622:	07db      	lsls	r3, r3, #31
 8006624:	d536      	bpl.n	8006694 <_printf_float+0x424>
 8006626:	2301      	movs	r3, #1
 8006628:	4642      	mov	r2, r8
 800662a:	4631      	mov	r1, r6
 800662c:	4628      	mov	r0, r5
 800662e:	47b8      	blx	r7
 8006630:	3001      	adds	r0, #1
 8006632:	f43f ae78 	beq.w	8006326 <_printf_float+0xb6>
 8006636:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800663a:	4631      	mov	r1, r6
 800663c:	4628      	mov	r0, r5
 800663e:	47b8      	blx	r7
 8006640:	3001      	adds	r0, #1
 8006642:	f43f ae70 	beq.w	8006326 <_printf_float+0xb6>
 8006646:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800664a:	2200      	movs	r2, #0
 800664c:	2300      	movs	r3, #0
 800664e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006652:	f7fa fa41 	bl	8000ad8 <__aeabi_dcmpeq>
 8006656:	b9c0      	cbnz	r0, 800668a <_printf_float+0x41a>
 8006658:	4653      	mov	r3, sl
 800665a:	f108 0201 	add.w	r2, r8, #1
 800665e:	4631      	mov	r1, r6
 8006660:	4628      	mov	r0, r5
 8006662:	47b8      	blx	r7
 8006664:	3001      	adds	r0, #1
 8006666:	d10c      	bne.n	8006682 <_printf_float+0x412>
 8006668:	e65d      	b.n	8006326 <_printf_float+0xb6>
 800666a:	2301      	movs	r3, #1
 800666c:	465a      	mov	r2, fp
 800666e:	4631      	mov	r1, r6
 8006670:	4628      	mov	r0, r5
 8006672:	47b8      	blx	r7
 8006674:	3001      	adds	r0, #1
 8006676:	f43f ae56 	beq.w	8006326 <_printf_float+0xb6>
 800667a:	f108 0801 	add.w	r8, r8, #1
 800667e:	45d0      	cmp	r8, sl
 8006680:	dbf3      	blt.n	800666a <_printf_float+0x3fa>
 8006682:	464b      	mov	r3, r9
 8006684:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006688:	e6df      	b.n	800644a <_printf_float+0x1da>
 800668a:	f04f 0800 	mov.w	r8, #0
 800668e:	f104 0b1a 	add.w	fp, r4, #26
 8006692:	e7f4      	b.n	800667e <_printf_float+0x40e>
 8006694:	2301      	movs	r3, #1
 8006696:	4642      	mov	r2, r8
 8006698:	e7e1      	b.n	800665e <_printf_float+0x3ee>
 800669a:	2301      	movs	r3, #1
 800669c:	464a      	mov	r2, r9
 800669e:	4631      	mov	r1, r6
 80066a0:	4628      	mov	r0, r5
 80066a2:	47b8      	blx	r7
 80066a4:	3001      	adds	r0, #1
 80066a6:	f43f ae3e 	beq.w	8006326 <_printf_float+0xb6>
 80066aa:	f108 0801 	add.w	r8, r8, #1
 80066ae:	68e3      	ldr	r3, [r4, #12]
 80066b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066b2:	1a5b      	subs	r3, r3, r1
 80066b4:	4543      	cmp	r3, r8
 80066b6:	dcf0      	bgt.n	800669a <_printf_float+0x42a>
 80066b8:	e6fc      	b.n	80064b4 <_printf_float+0x244>
 80066ba:	f04f 0800 	mov.w	r8, #0
 80066be:	f104 0919 	add.w	r9, r4, #25
 80066c2:	e7f4      	b.n	80066ae <_printf_float+0x43e>

080066c4 <_printf_common>:
 80066c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066c8:	4616      	mov	r6, r2
 80066ca:	4698      	mov	r8, r3
 80066cc:	688a      	ldr	r2, [r1, #8]
 80066ce:	690b      	ldr	r3, [r1, #16]
 80066d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066d4:	4293      	cmp	r3, r2
 80066d6:	bfb8      	it	lt
 80066d8:	4613      	movlt	r3, r2
 80066da:	6033      	str	r3, [r6, #0]
 80066dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066e0:	4607      	mov	r7, r0
 80066e2:	460c      	mov	r4, r1
 80066e4:	b10a      	cbz	r2, 80066ea <_printf_common+0x26>
 80066e6:	3301      	adds	r3, #1
 80066e8:	6033      	str	r3, [r6, #0]
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	0699      	lsls	r1, r3, #26
 80066ee:	bf42      	ittt	mi
 80066f0:	6833      	ldrmi	r3, [r6, #0]
 80066f2:	3302      	addmi	r3, #2
 80066f4:	6033      	strmi	r3, [r6, #0]
 80066f6:	6825      	ldr	r5, [r4, #0]
 80066f8:	f015 0506 	ands.w	r5, r5, #6
 80066fc:	d106      	bne.n	800670c <_printf_common+0x48>
 80066fe:	f104 0a19 	add.w	sl, r4, #25
 8006702:	68e3      	ldr	r3, [r4, #12]
 8006704:	6832      	ldr	r2, [r6, #0]
 8006706:	1a9b      	subs	r3, r3, r2
 8006708:	42ab      	cmp	r3, r5
 800670a:	dc26      	bgt.n	800675a <_printf_common+0x96>
 800670c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006710:	6822      	ldr	r2, [r4, #0]
 8006712:	3b00      	subs	r3, #0
 8006714:	bf18      	it	ne
 8006716:	2301      	movne	r3, #1
 8006718:	0692      	lsls	r2, r2, #26
 800671a:	d42b      	bmi.n	8006774 <_printf_common+0xb0>
 800671c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006720:	4641      	mov	r1, r8
 8006722:	4638      	mov	r0, r7
 8006724:	47c8      	blx	r9
 8006726:	3001      	adds	r0, #1
 8006728:	d01e      	beq.n	8006768 <_printf_common+0xa4>
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	6922      	ldr	r2, [r4, #16]
 800672e:	f003 0306 	and.w	r3, r3, #6
 8006732:	2b04      	cmp	r3, #4
 8006734:	bf02      	ittt	eq
 8006736:	68e5      	ldreq	r5, [r4, #12]
 8006738:	6833      	ldreq	r3, [r6, #0]
 800673a:	1aed      	subeq	r5, r5, r3
 800673c:	68a3      	ldr	r3, [r4, #8]
 800673e:	bf0c      	ite	eq
 8006740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006744:	2500      	movne	r5, #0
 8006746:	4293      	cmp	r3, r2
 8006748:	bfc4      	itt	gt
 800674a:	1a9b      	subgt	r3, r3, r2
 800674c:	18ed      	addgt	r5, r5, r3
 800674e:	2600      	movs	r6, #0
 8006750:	341a      	adds	r4, #26
 8006752:	42b5      	cmp	r5, r6
 8006754:	d11a      	bne.n	800678c <_printf_common+0xc8>
 8006756:	2000      	movs	r0, #0
 8006758:	e008      	b.n	800676c <_printf_common+0xa8>
 800675a:	2301      	movs	r3, #1
 800675c:	4652      	mov	r2, sl
 800675e:	4641      	mov	r1, r8
 8006760:	4638      	mov	r0, r7
 8006762:	47c8      	blx	r9
 8006764:	3001      	adds	r0, #1
 8006766:	d103      	bne.n	8006770 <_printf_common+0xac>
 8006768:	f04f 30ff 	mov.w	r0, #4294967295
 800676c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006770:	3501      	adds	r5, #1
 8006772:	e7c6      	b.n	8006702 <_printf_common+0x3e>
 8006774:	18e1      	adds	r1, r4, r3
 8006776:	1c5a      	adds	r2, r3, #1
 8006778:	2030      	movs	r0, #48	@ 0x30
 800677a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800677e:	4422      	add	r2, r4
 8006780:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006784:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006788:	3302      	adds	r3, #2
 800678a:	e7c7      	b.n	800671c <_printf_common+0x58>
 800678c:	2301      	movs	r3, #1
 800678e:	4622      	mov	r2, r4
 8006790:	4641      	mov	r1, r8
 8006792:	4638      	mov	r0, r7
 8006794:	47c8      	blx	r9
 8006796:	3001      	adds	r0, #1
 8006798:	d0e6      	beq.n	8006768 <_printf_common+0xa4>
 800679a:	3601      	adds	r6, #1
 800679c:	e7d9      	b.n	8006752 <_printf_common+0x8e>
	...

080067a0 <_printf_i>:
 80067a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067a4:	7e0f      	ldrb	r7, [r1, #24]
 80067a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067a8:	2f78      	cmp	r7, #120	@ 0x78
 80067aa:	4691      	mov	r9, r2
 80067ac:	4680      	mov	r8, r0
 80067ae:	460c      	mov	r4, r1
 80067b0:	469a      	mov	sl, r3
 80067b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067b6:	d807      	bhi.n	80067c8 <_printf_i+0x28>
 80067b8:	2f62      	cmp	r7, #98	@ 0x62
 80067ba:	d80a      	bhi.n	80067d2 <_printf_i+0x32>
 80067bc:	2f00      	cmp	r7, #0
 80067be:	f000 80d2 	beq.w	8006966 <_printf_i+0x1c6>
 80067c2:	2f58      	cmp	r7, #88	@ 0x58
 80067c4:	f000 80b9 	beq.w	800693a <_printf_i+0x19a>
 80067c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067d0:	e03a      	b.n	8006848 <_printf_i+0xa8>
 80067d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067d6:	2b15      	cmp	r3, #21
 80067d8:	d8f6      	bhi.n	80067c8 <_printf_i+0x28>
 80067da:	a101      	add	r1, pc, #4	@ (adr r1, 80067e0 <_printf_i+0x40>)
 80067dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067e0:	08006839 	.word	0x08006839
 80067e4:	0800684d 	.word	0x0800684d
 80067e8:	080067c9 	.word	0x080067c9
 80067ec:	080067c9 	.word	0x080067c9
 80067f0:	080067c9 	.word	0x080067c9
 80067f4:	080067c9 	.word	0x080067c9
 80067f8:	0800684d 	.word	0x0800684d
 80067fc:	080067c9 	.word	0x080067c9
 8006800:	080067c9 	.word	0x080067c9
 8006804:	080067c9 	.word	0x080067c9
 8006808:	080067c9 	.word	0x080067c9
 800680c:	0800694d 	.word	0x0800694d
 8006810:	08006877 	.word	0x08006877
 8006814:	08006907 	.word	0x08006907
 8006818:	080067c9 	.word	0x080067c9
 800681c:	080067c9 	.word	0x080067c9
 8006820:	0800696f 	.word	0x0800696f
 8006824:	080067c9 	.word	0x080067c9
 8006828:	08006877 	.word	0x08006877
 800682c:	080067c9 	.word	0x080067c9
 8006830:	080067c9 	.word	0x080067c9
 8006834:	0800690f 	.word	0x0800690f
 8006838:	6833      	ldr	r3, [r6, #0]
 800683a:	1d1a      	adds	r2, r3, #4
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	6032      	str	r2, [r6, #0]
 8006840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006844:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006848:	2301      	movs	r3, #1
 800684a:	e09d      	b.n	8006988 <_printf_i+0x1e8>
 800684c:	6833      	ldr	r3, [r6, #0]
 800684e:	6820      	ldr	r0, [r4, #0]
 8006850:	1d19      	adds	r1, r3, #4
 8006852:	6031      	str	r1, [r6, #0]
 8006854:	0606      	lsls	r6, r0, #24
 8006856:	d501      	bpl.n	800685c <_printf_i+0xbc>
 8006858:	681d      	ldr	r5, [r3, #0]
 800685a:	e003      	b.n	8006864 <_printf_i+0xc4>
 800685c:	0645      	lsls	r5, r0, #25
 800685e:	d5fb      	bpl.n	8006858 <_printf_i+0xb8>
 8006860:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006864:	2d00      	cmp	r5, #0
 8006866:	da03      	bge.n	8006870 <_printf_i+0xd0>
 8006868:	232d      	movs	r3, #45	@ 0x2d
 800686a:	426d      	negs	r5, r5
 800686c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006870:	4859      	ldr	r0, [pc, #356]	@ (80069d8 <_printf_i+0x238>)
 8006872:	230a      	movs	r3, #10
 8006874:	e011      	b.n	800689a <_printf_i+0xfa>
 8006876:	6821      	ldr	r1, [r4, #0]
 8006878:	6833      	ldr	r3, [r6, #0]
 800687a:	0608      	lsls	r0, r1, #24
 800687c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006880:	d402      	bmi.n	8006888 <_printf_i+0xe8>
 8006882:	0649      	lsls	r1, r1, #25
 8006884:	bf48      	it	mi
 8006886:	b2ad      	uxthmi	r5, r5
 8006888:	2f6f      	cmp	r7, #111	@ 0x6f
 800688a:	4853      	ldr	r0, [pc, #332]	@ (80069d8 <_printf_i+0x238>)
 800688c:	6033      	str	r3, [r6, #0]
 800688e:	bf14      	ite	ne
 8006890:	230a      	movne	r3, #10
 8006892:	2308      	moveq	r3, #8
 8006894:	2100      	movs	r1, #0
 8006896:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800689a:	6866      	ldr	r6, [r4, #4]
 800689c:	60a6      	str	r6, [r4, #8]
 800689e:	2e00      	cmp	r6, #0
 80068a0:	bfa2      	ittt	ge
 80068a2:	6821      	ldrge	r1, [r4, #0]
 80068a4:	f021 0104 	bicge.w	r1, r1, #4
 80068a8:	6021      	strge	r1, [r4, #0]
 80068aa:	b90d      	cbnz	r5, 80068b0 <_printf_i+0x110>
 80068ac:	2e00      	cmp	r6, #0
 80068ae:	d04b      	beq.n	8006948 <_printf_i+0x1a8>
 80068b0:	4616      	mov	r6, r2
 80068b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80068b6:	fb03 5711 	mls	r7, r3, r1, r5
 80068ba:	5dc7      	ldrb	r7, [r0, r7]
 80068bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068c0:	462f      	mov	r7, r5
 80068c2:	42bb      	cmp	r3, r7
 80068c4:	460d      	mov	r5, r1
 80068c6:	d9f4      	bls.n	80068b2 <_printf_i+0x112>
 80068c8:	2b08      	cmp	r3, #8
 80068ca:	d10b      	bne.n	80068e4 <_printf_i+0x144>
 80068cc:	6823      	ldr	r3, [r4, #0]
 80068ce:	07df      	lsls	r7, r3, #31
 80068d0:	d508      	bpl.n	80068e4 <_printf_i+0x144>
 80068d2:	6923      	ldr	r3, [r4, #16]
 80068d4:	6861      	ldr	r1, [r4, #4]
 80068d6:	4299      	cmp	r1, r3
 80068d8:	bfde      	ittt	le
 80068da:	2330      	movle	r3, #48	@ 0x30
 80068dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068e4:	1b92      	subs	r2, r2, r6
 80068e6:	6122      	str	r2, [r4, #16]
 80068e8:	f8cd a000 	str.w	sl, [sp]
 80068ec:	464b      	mov	r3, r9
 80068ee:	aa03      	add	r2, sp, #12
 80068f0:	4621      	mov	r1, r4
 80068f2:	4640      	mov	r0, r8
 80068f4:	f7ff fee6 	bl	80066c4 <_printf_common>
 80068f8:	3001      	adds	r0, #1
 80068fa:	d14a      	bne.n	8006992 <_printf_i+0x1f2>
 80068fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006900:	b004      	add	sp, #16
 8006902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	f043 0320 	orr.w	r3, r3, #32
 800690c:	6023      	str	r3, [r4, #0]
 800690e:	4833      	ldr	r0, [pc, #204]	@ (80069dc <_printf_i+0x23c>)
 8006910:	2778      	movs	r7, #120	@ 0x78
 8006912:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	6831      	ldr	r1, [r6, #0]
 800691a:	061f      	lsls	r7, r3, #24
 800691c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006920:	d402      	bmi.n	8006928 <_printf_i+0x188>
 8006922:	065f      	lsls	r7, r3, #25
 8006924:	bf48      	it	mi
 8006926:	b2ad      	uxthmi	r5, r5
 8006928:	6031      	str	r1, [r6, #0]
 800692a:	07d9      	lsls	r1, r3, #31
 800692c:	bf44      	itt	mi
 800692e:	f043 0320 	orrmi.w	r3, r3, #32
 8006932:	6023      	strmi	r3, [r4, #0]
 8006934:	b11d      	cbz	r5, 800693e <_printf_i+0x19e>
 8006936:	2310      	movs	r3, #16
 8006938:	e7ac      	b.n	8006894 <_printf_i+0xf4>
 800693a:	4827      	ldr	r0, [pc, #156]	@ (80069d8 <_printf_i+0x238>)
 800693c:	e7e9      	b.n	8006912 <_printf_i+0x172>
 800693e:	6823      	ldr	r3, [r4, #0]
 8006940:	f023 0320 	bic.w	r3, r3, #32
 8006944:	6023      	str	r3, [r4, #0]
 8006946:	e7f6      	b.n	8006936 <_printf_i+0x196>
 8006948:	4616      	mov	r6, r2
 800694a:	e7bd      	b.n	80068c8 <_printf_i+0x128>
 800694c:	6833      	ldr	r3, [r6, #0]
 800694e:	6825      	ldr	r5, [r4, #0]
 8006950:	6961      	ldr	r1, [r4, #20]
 8006952:	1d18      	adds	r0, r3, #4
 8006954:	6030      	str	r0, [r6, #0]
 8006956:	062e      	lsls	r6, r5, #24
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	d501      	bpl.n	8006960 <_printf_i+0x1c0>
 800695c:	6019      	str	r1, [r3, #0]
 800695e:	e002      	b.n	8006966 <_printf_i+0x1c6>
 8006960:	0668      	lsls	r0, r5, #25
 8006962:	d5fb      	bpl.n	800695c <_printf_i+0x1bc>
 8006964:	8019      	strh	r1, [r3, #0]
 8006966:	2300      	movs	r3, #0
 8006968:	6123      	str	r3, [r4, #16]
 800696a:	4616      	mov	r6, r2
 800696c:	e7bc      	b.n	80068e8 <_printf_i+0x148>
 800696e:	6833      	ldr	r3, [r6, #0]
 8006970:	1d1a      	adds	r2, r3, #4
 8006972:	6032      	str	r2, [r6, #0]
 8006974:	681e      	ldr	r6, [r3, #0]
 8006976:	6862      	ldr	r2, [r4, #4]
 8006978:	2100      	movs	r1, #0
 800697a:	4630      	mov	r0, r6
 800697c:	f7f9 fc30 	bl	80001e0 <memchr>
 8006980:	b108      	cbz	r0, 8006986 <_printf_i+0x1e6>
 8006982:	1b80      	subs	r0, r0, r6
 8006984:	6060      	str	r0, [r4, #4]
 8006986:	6863      	ldr	r3, [r4, #4]
 8006988:	6123      	str	r3, [r4, #16]
 800698a:	2300      	movs	r3, #0
 800698c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006990:	e7aa      	b.n	80068e8 <_printf_i+0x148>
 8006992:	6923      	ldr	r3, [r4, #16]
 8006994:	4632      	mov	r2, r6
 8006996:	4649      	mov	r1, r9
 8006998:	4640      	mov	r0, r8
 800699a:	47d0      	blx	sl
 800699c:	3001      	adds	r0, #1
 800699e:	d0ad      	beq.n	80068fc <_printf_i+0x15c>
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	079b      	lsls	r3, r3, #30
 80069a4:	d413      	bmi.n	80069ce <_printf_i+0x22e>
 80069a6:	68e0      	ldr	r0, [r4, #12]
 80069a8:	9b03      	ldr	r3, [sp, #12]
 80069aa:	4298      	cmp	r0, r3
 80069ac:	bfb8      	it	lt
 80069ae:	4618      	movlt	r0, r3
 80069b0:	e7a6      	b.n	8006900 <_printf_i+0x160>
 80069b2:	2301      	movs	r3, #1
 80069b4:	4632      	mov	r2, r6
 80069b6:	4649      	mov	r1, r9
 80069b8:	4640      	mov	r0, r8
 80069ba:	47d0      	blx	sl
 80069bc:	3001      	adds	r0, #1
 80069be:	d09d      	beq.n	80068fc <_printf_i+0x15c>
 80069c0:	3501      	adds	r5, #1
 80069c2:	68e3      	ldr	r3, [r4, #12]
 80069c4:	9903      	ldr	r1, [sp, #12]
 80069c6:	1a5b      	subs	r3, r3, r1
 80069c8:	42ab      	cmp	r3, r5
 80069ca:	dcf2      	bgt.n	80069b2 <_printf_i+0x212>
 80069cc:	e7eb      	b.n	80069a6 <_printf_i+0x206>
 80069ce:	2500      	movs	r5, #0
 80069d0:	f104 0619 	add.w	r6, r4, #25
 80069d4:	e7f5      	b.n	80069c2 <_printf_i+0x222>
 80069d6:	bf00      	nop
 80069d8:	08009006 	.word	0x08009006
 80069dc:	08009017 	.word	0x08009017

080069e0 <std>:
 80069e0:	2300      	movs	r3, #0
 80069e2:	b510      	push	{r4, lr}
 80069e4:	4604      	mov	r4, r0
 80069e6:	e9c0 3300 	strd	r3, r3, [r0]
 80069ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069ee:	6083      	str	r3, [r0, #8]
 80069f0:	8181      	strh	r1, [r0, #12]
 80069f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80069f4:	81c2      	strh	r2, [r0, #14]
 80069f6:	6183      	str	r3, [r0, #24]
 80069f8:	4619      	mov	r1, r3
 80069fa:	2208      	movs	r2, #8
 80069fc:	305c      	adds	r0, #92	@ 0x5c
 80069fe:	f000 f926 	bl	8006c4e <memset>
 8006a02:	4b0d      	ldr	r3, [pc, #52]	@ (8006a38 <std+0x58>)
 8006a04:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a06:	4b0d      	ldr	r3, [pc, #52]	@ (8006a3c <std+0x5c>)
 8006a08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a40 <std+0x60>)
 8006a0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a44 <std+0x64>)
 8006a10:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a12:	4b0d      	ldr	r3, [pc, #52]	@ (8006a48 <std+0x68>)
 8006a14:	6224      	str	r4, [r4, #32]
 8006a16:	429c      	cmp	r4, r3
 8006a18:	d006      	beq.n	8006a28 <std+0x48>
 8006a1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a1e:	4294      	cmp	r4, r2
 8006a20:	d002      	beq.n	8006a28 <std+0x48>
 8006a22:	33d0      	adds	r3, #208	@ 0xd0
 8006a24:	429c      	cmp	r4, r3
 8006a26:	d105      	bne.n	8006a34 <std+0x54>
 8006a28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a30:	f000 ba02 	b.w	8006e38 <__retarget_lock_init_recursive>
 8006a34:	bd10      	pop	{r4, pc}
 8006a36:	bf00      	nop
 8006a38:	08006bc9 	.word	0x08006bc9
 8006a3c:	08006beb 	.word	0x08006beb
 8006a40:	08006c23 	.word	0x08006c23
 8006a44:	08006c47 	.word	0x08006c47
 8006a48:	20001c4c 	.word	0x20001c4c

08006a4c <stdio_exit_handler>:
 8006a4c:	4a02      	ldr	r2, [pc, #8]	@ (8006a58 <stdio_exit_handler+0xc>)
 8006a4e:	4903      	ldr	r1, [pc, #12]	@ (8006a5c <stdio_exit_handler+0x10>)
 8006a50:	4803      	ldr	r0, [pc, #12]	@ (8006a60 <stdio_exit_handler+0x14>)
 8006a52:	f000 b869 	b.w	8006b28 <_fwalk_sglue>
 8006a56:	bf00      	nop
 8006a58:	2000177c 	.word	0x2000177c
 8006a5c:	080088fd 	.word	0x080088fd
 8006a60:	2000178c 	.word	0x2000178c

08006a64 <cleanup_stdio>:
 8006a64:	6841      	ldr	r1, [r0, #4]
 8006a66:	4b0c      	ldr	r3, [pc, #48]	@ (8006a98 <cleanup_stdio+0x34>)
 8006a68:	4299      	cmp	r1, r3
 8006a6a:	b510      	push	{r4, lr}
 8006a6c:	4604      	mov	r4, r0
 8006a6e:	d001      	beq.n	8006a74 <cleanup_stdio+0x10>
 8006a70:	f001 ff44 	bl	80088fc <_fflush_r>
 8006a74:	68a1      	ldr	r1, [r4, #8]
 8006a76:	4b09      	ldr	r3, [pc, #36]	@ (8006a9c <cleanup_stdio+0x38>)
 8006a78:	4299      	cmp	r1, r3
 8006a7a:	d002      	beq.n	8006a82 <cleanup_stdio+0x1e>
 8006a7c:	4620      	mov	r0, r4
 8006a7e:	f001 ff3d 	bl	80088fc <_fflush_r>
 8006a82:	68e1      	ldr	r1, [r4, #12]
 8006a84:	4b06      	ldr	r3, [pc, #24]	@ (8006aa0 <cleanup_stdio+0x3c>)
 8006a86:	4299      	cmp	r1, r3
 8006a88:	d004      	beq.n	8006a94 <cleanup_stdio+0x30>
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a90:	f001 bf34 	b.w	80088fc <_fflush_r>
 8006a94:	bd10      	pop	{r4, pc}
 8006a96:	bf00      	nop
 8006a98:	20001c4c 	.word	0x20001c4c
 8006a9c:	20001cb4 	.word	0x20001cb4
 8006aa0:	20001d1c 	.word	0x20001d1c

08006aa4 <global_stdio_init.part.0>:
 8006aa4:	b510      	push	{r4, lr}
 8006aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8006ad4 <global_stdio_init.part.0+0x30>)
 8006aa8:	4c0b      	ldr	r4, [pc, #44]	@ (8006ad8 <global_stdio_init.part.0+0x34>)
 8006aaa:	4a0c      	ldr	r2, [pc, #48]	@ (8006adc <global_stdio_init.part.0+0x38>)
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	4620      	mov	r0, r4
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	2104      	movs	r1, #4
 8006ab4:	f7ff ff94 	bl	80069e0 <std>
 8006ab8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006abc:	2201      	movs	r2, #1
 8006abe:	2109      	movs	r1, #9
 8006ac0:	f7ff ff8e 	bl	80069e0 <std>
 8006ac4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ac8:	2202      	movs	r2, #2
 8006aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ace:	2112      	movs	r1, #18
 8006ad0:	f7ff bf86 	b.w	80069e0 <std>
 8006ad4:	20001d84 	.word	0x20001d84
 8006ad8:	20001c4c 	.word	0x20001c4c
 8006adc:	08006a4d 	.word	0x08006a4d

08006ae0 <__sfp_lock_acquire>:
 8006ae0:	4801      	ldr	r0, [pc, #4]	@ (8006ae8 <__sfp_lock_acquire+0x8>)
 8006ae2:	f000 b9aa 	b.w	8006e3a <__retarget_lock_acquire_recursive>
 8006ae6:	bf00      	nop
 8006ae8:	20001d8d 	.word	0x20001d8d

08006aec <__sfp_lock_release>:
 8006aec:	4801      	ldr	r0, [pc, #4]	@ (8006af4 <__sfp_lock_release+0x8>)
 8006aee:	f000 b9a5 	b.w	8006e3c <__retarget_lock_release_recursive>
 8006af2:	bf00      	nop
 8006af4:	20001d8d 	.word	0x20001d8d

08006af8 <__sinit>:
 8006af8:	b510      	push	{r4, lr}
 8006afa:	4604      	mov	r4, r0
 8006afc:	f7ff fff0 	bl	8006ae0 <__sfp_lock_acquire>
 8006b00:	6a23      	ldr	r3, [r4, #32]
 8006b02:	b11b      	cbz	r3, 8006b0c <__sinit+0x14>
 8006b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b08:	f7ff bff0 	b.w	8006aec <__sfp_lock_release>
 8006b0c:	4b04      	ldr	r3, [pc, #16]	@ (8006b20 <__sinit+0x28>)
 8006b0e:	6223      	str	r3, [r4, #32]
 8006b10:	4b04      	ldr	r3, [pc, #16]	@ (8006b24 <__sinit+0x2c>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1f5      	bne.n	8006b04 <__sinit+0xc>
 8006b18:	f7ff ffc4 	bl	8006aa4 <global_stdio_init.part.0>
 8006b1c:	e7f2      	b.n	8006b04 <__sinit+0xc>
 8006b1e:	bf00      	nop
 8006b20:	08006a65 	.word	0x08006a65
 8006b24:	20001d84 	.word	0x20001d84

08006b28 <_fwalk_sglue>:
 8006b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b2c:	4607      	mov	r7, r0
 8006b2e:	4688      	mov	r8, r1
 8006b30:	4614      	mov	r4, r2
 8006b32:	2600      	movs	r6, #0
 8006b34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b38:	f1b9 0901 	subs.w	r9, r9, #1
 8006b3c:	d505      	bpl.n	8006b4a <_fwalk_sglue+0x22>
 8006b3e:	6824      	ldr	r4, [r4, #0]
 8006b40:	2c00      	cmp	r4, #0
 8006b42:	d1f7      	bne.n	8006b34 <_fwalk_sglue+0xc>
 8006b44:	4630      	mov	r0, r6
 8006b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b4a:	89ab      	ldrh	r3, [r5, #12]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d907      	bls.n	8006b60 <_fwalk_sglue+0x38>
 8006b50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b54:	3301      	adds	r3, #1
 8006b56:	d003      	beq.n	8006b60 <_fwalk_sglue+0x38>
 8006b58:	4629      	mov	r1, r5
 8006b5a:	4638      	mov	r0, r7
 8006b5c:	47c0      	blx	r8
 8006b5e:	4306      	orrs	r6, r0
 8006b60:	3568      	adds	r5, #104	@ 0x68
 8006b62:	e7e9      	b.n	8006b38 <_fwalk_sglue+0x10>

08006b64 <iprintf>:
 8006b64:	b40f      	push	{r0, r1, r2, r3}
 8006b66:	b507      	push	{r0, r1, r2, lr}
 8006b68:	4906      	ldr	r1, [pc, #24]	@ (8006b84 <iprintf+0x20>)
 8006b6a:	ab04      	add	r3, sp, #16
 8006b6c:	6808      	ldr	r0, [r1, #0]
 8006b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b72:	6881      	ldr	r1, [r0, #8]
 8006b74:	9301      	str	r3, [sp, #4]
 8006b76:	f001 fd25 	bl	80085c4 <_vfiprintf_r>
 8006b7a:	b003      	add	sp, #12
 8006b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b80:	b004      	add	sp, #16
 8006b82:	4770      	bx	lr
 8006b84:	20001788 	.word	0x20001788

08006b88 <siprintf>:
 8006b88:	b40e      	push	{r1, r2, r3}
 8006b8a:	b500      	push	{lr}
 8006b8c:	b09c      	sub	sp, #112	@ 0x70
 8006b8e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006b90:	9002      	str	r0, [sp, #8]
 8006b92:	9006      	str	r0, [sp, #24]
 8006b94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b98:	4809      	ldr	r0, [pc, #36]	@ (8006bc0 <siprintf+0x38>)
 8006b9a:	9107      	str	r1, [sp, #28]
 8006b9c:	9104      	str	r1, [sp, #16]
 8006b9e:	4909      	ldr	r1, [pc, #36]	@ (8006bc4 <siprintf+0x3c>)
 8006ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ba4:	9105      	str	r1, [sp, #20]
 8006ba6:	6800      	ldr	r0, [r0, #0]
 8006ba8:	9301      	str	r3, [sp, #4]
 8006baa:	a902      	add	r1, sp, #8
 8006bac:	f001 fbe4 	bl	8008378 <_svfiprintf_r>
 8006bb0:	9b02      	ldr	r3, [sp, #8]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	701a      	strb	r2, [r3, #0]
 8006bb6:	b01c      	add	sp, #112	@ 0x70
 8006bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bbc:	b003      	add	sp, #12
 8006bbe:	4770      	bx	lr
 8006bc0:	20001788 	.word	0x20001788
 8006bc4:	ffff0208 	.word	0xffff0208

08006bc8 <__sread>:
 8006bc8:	b510      	push	{r4, lr}
 8006bca:	460c      	mov	r4, r1
 8006bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bd0:	f000 f8d4 	bl	8006d7c <_read_r>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	bfab      	itete	ge
 8006bd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006bda:	89a3      	ldrhlt	r3, [r4, #12]
 8006bdc:	181b      	addge	r3, r3, r0
 8006bde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006be2:	bfac      	ite	ge
 8006be4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006be6:	81a3      	strhlt	r3, [r4, #12]
 8006be8:	bd10      	pop	{r4, pc}

08006bea <__swrite>:
 8006bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bee:	461f      	mov	r7, r3
 8006bf0:	898b      	ldrh	r3, [r1, #12]
 8006bf2:	05db      	lsls	r3, r3, #23
 8006bf4:	4605      	mov	r5, r0
 8006bf6:	460c      	mov	r4, r1
 8006bf8:	4616      	mov	r6, r2
 8006bfa:	d505      	bpl.n	8006c08 <__swrite+0x1e>
 8006bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c00:	2302      	movs	r3, #2
 8006c02:	2200      	movs	r2, #0
 8006c04:	f000 f8a8 	bl	8006d58 <_lseek_r>
 8006c08:	89a3      	ldrh	r3, [r4, #12]
 8006c0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c12:	81a3      	strh	r3, [r4, #12]
 8006c14:	4632      	mov	r2, r6
 8006c16:	463b      	mov	r3, r7
 8006c18:	4628      	mov	r0, r5
 8006c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c1e:	f000 b8cf 	b.w	8006dc0 <_write_r>

08006c22 <__sseek>:
 8006c22:	b510      	push	{r4, lr}
 8006c24:	460c      	mov	r4, r1
 8006c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c2a:	f000 f895 	bl	8006d58 <_lseek_r>
 8006c2e:	1c43      	adds	r3, r0, #1
 8006c30:	89a3      	ldrh	r3, [r4, #12]
 8006c32:	bf15      	itete	ne
 8006c34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c3e:	81a3      	strheq	r3, [r4, #12]
 8006c40:	bf18      	it	ne
 8006c42:	81a3      	strhne	r3, [r4, #12]
 8006c44:	bd10      	pop	{r4, pc}

08006c46 <__sclose>:
 8006c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c4a:	f000 b875 	b.w	8006d38 <_close_r>

08006c4e <memset>:
 8006c4e:	4402      	add	r2, r0
 8006c50:	4603      	mov	r3, r0
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d100      	bne.n	8006c58 <memset+0xa>
 8006c56:	4770      	bx	lr
 8006c58:	f803 1b01 	strb.w	r1, [r3], #1
 8006c5c:	e7f9      	b.n	8006c52 <memset+0x4>

08006c5e <strchr>:
 8006c5e:	b2c9      	uxtb	r1, r1
 8006c60:	4603      	mov	r3, r0
 8006c62:	4618      	mov	r0, r3
 8006c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c68:	b112      	cbz	r2, 8006c70 <strchr+0x12>
 8006c6a:	428a      	cmp	r2, r1
 8006c6c:	d1f9      	bne.n	8006c62 <strchr+0x4>
 8006c6e:	4770      	bx	lr
 8006c70:	2900      	cmp	r1, #0
 8006c72:	bf18      	it	ne
 8006c74:	2000      	movne	r0, #0
 8006c76:	4770      	bx	lr

08006c78 <strtok>:
 8006c78:	4b16      	ldr	r3, [pc, #88]	@ (8006cd4 <strtok+0x5c>)
 8006c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7e:	681f      	ldr	r7, [r3, #0]
 8006c80:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8006c82:	4605      	mov	r5, r0
 8006c84:	460e      	mov	r6, r1
 8006c86:	b9ec      	cbnz	r4, 8006cc4 <strtok+0x4c>
 8006c88:	2050      	movs	r0, #80	@ 0x50
 8006c8a:	f7ff f993 	bl	8005fb4 <malloc>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	6478      	str	r0, [r7, #68]	@ 0x44
 8006c92:	b920      	cbnz	r0, 8006c9e <strtok+0x26>
 8006c94:	4b10      	ldr	r3, [pc, #64]	@ (8006cd8 <strtok+0x60>)
 8006c96:	4811      	ldr	r0, [pc, #68]	@ (8006cdc <strtok+0x64>)
 8006c98:	215b      	movs	r1, #91	@ 0x5b
 8006c9a:	f000 f8d9 	bl	8006e50 <__assert_func>
 8006c9e:	e9c0 4400 	strd	r4, r4, [r0]
 8006ca2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006ca6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006caa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8006cae:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8006cb2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006cb6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8006cba:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8006cbe:	6184      	str	r4, [r0, #24]
 8006cc0:	7704      	strb	r4, [r0, #28]
 8006cc2:	6244      	str	r4, [r0, #36]	@ 0x24
 8006cc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cc6:	4631      	mov	r1, r6
 8006cc8:	4628      	mov	r0, r5
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd0:	f000 b806 	b.w	8006ce0 <__strtok_r>
 8006cd4:	20001788 	.word	0x20001788
 8006cd8:	08009028 	.word	0x08009028
 8006cdc:	0800903f 	.word	0x0800903f

08006ce0 <__strtok_r>:
 8006ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	b908      	cbnz	r0, 8006cea <__strtok_r+0xa>
 8006ce6:	6814      	ldr	r4, [r2, #0]
 8006ce8:	b144      	cbz	r4, 8006cfc <__strtok_r+0x1c>
 8006cea:	4620      	mov	r0, r4
 8006cec:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006cf0:	460f      	mov	r7, r1
 8006cf2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006cf6:	b91e      	cbnz	r6, 8006d00 <__strtok_r+0x20>
 8006cf8:	b965      	cbnz	r5, 8006d14 <__strtok_r+0x34>
 8006cfa:	6015      	str	r5, [r2, #0]
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	e005      	b.n	8006d0c <__strtok_r+0x2c>
 8006d00:	42b5      	cmp	r5, r6
 8006d02:	d1f6      	bne.n	8006cf2 <__strtok_r+0x12>
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1f0      	bne.n	8006cea <__strtok_r+0xa>
 8006d08:	6014      	str	r4, [r2, #0]
 8006d0a:	7003      	strb	r3, [r0, #0]
 8006d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d0e:	461c      	mov	r4, r3
 8006d10:	e00c      	b.n	8006d2c <__strtok_r+0x4c>
 8006d12:	b915      	cbnz	r5, 8006d1a <__strtok_r+0x3a>
 8006d14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006d18:	460e      	mov	r6, r1
 8006d1a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006d1e:	42ab      	cmp	r3, r5
 8006d20:	d1f7      	bne.n	8006d12 <__strtok_r+0x32>
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d0f3      	beq.n	8006d0e <__strtok_r+0x2e>
 8006d26:	2300      	movs	r3, #0
 8006d28:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006d2c:	6014      	str	r4, [r2, #0]
 8006d2e:	e7ed      	b.n	8006d0c <__strtok_r+0x2c>

08006d30 <_localeconv_r>:
 8006d30:	4800      	ldr	r0, [pc, #0]	@ (8006d34 <_localeconv_r+0x4>)
 8006d32:	4770      	bx	lr
 8006d34:	200018c8 	.word	0x200018c8

08006d38 <_close_r>:
 8006d38:	b538      	push	{r3, r4, r5, lr}
 8006d3a:	4d06      	ldr	r5, [pc, #24]	@ (8006d54 <_close_r+0x1c>)
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	4604      	mov	r4, r0
 8006d40:	4608      	mov	r0, r1
 8006d42:	602b      	str	r3, [r5, #0]
 8006d44:	f7fb f8b2 	bl	8001eac <_close>
 8006d48:	1c43      	adds	r3, r0, #1
 8006d4a:	d102      	bne.n	8006d52 <_close_r+0x1a>
 8006d4c:	682b      	ldr	r3, [r5, #0]
 8006d4e:	b103      	cbz	r3, 8006d52 <_close_r+0x1a>
 8006d50:	6023      	str	r3, [r4, #0]
 8006d52:	bd38      	pop	{r3, r4, r5, pc}
 8006d54:	20001d88 	.word	0x20001d88

08006d58 <_lseek_r>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	4d07      	ldr	r5, [pc, #28]	@ (8006d78 <_lseek_r+0x20>)
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	4608      	mov	r0, r1
 8006d60:	4611      	mov	r1, r2
 8006d62:	2200      	movs	r2, #0
 8006d64:	602a      	str	r2, [r5, #0]
 8006d66:	461a      	mov	r2, r3
 8006d68:	f7fb f8c7 	bl	8001efa <_lseek>
 8006d6c:	1c43      	adds	r3, r0, #1
 8006d6e:	d102      	bne.n	8006d76 <_lseek_r+0x1e>
 8006d70:	682b      	ldr	r3, [r5, #0]
 8006d72:	b103      	cbz	r3, 8006d76 <_lseek_r+0x1e>
 8006d74:	6023      	str	r3, [r4, #0]
 8006d76:	bd38      	pop	{r3, r4, r5, pc}
 8006d78:	20001d88 	.word	0x20001d88

08006d7c <_read_r>:
 8006d7c:	b538      	push	{r3, r4, r5, lr}
 8006d7e:	4d07      	ldr	r5, [pc, #28]	@ (8006d9c <_read_r+0x20>)
 8006d80:	4604      	mov	r4, r0
 8006d82:	4608      	mov	r0, r1
 8006d84:	4611      	mov	r1, r2
 8006d86:	2200      	movs	r2, #0
 8006d88:	602a      	str	r2, [r5, #0]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	f7fb f855 	bl	8001e3a <_read>
 8006d90:	1c43      	adds	r3, r0, #1
 8006d92:	d102      	bne.n	8006d9a <_read_r+0x1e>
 8006d94:	682b      	ldr	r3, [r5, #0]
 8006d96:	b103      	cbz	r3, 8006d9a <_read_r+0x1e>
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	bd38      	pop	{r3, r4, r5, pc}
 8006d9c:	20001d88 	.word	0x20001d88

08006da0 <_sbrk_r>:
 8006da0:	b538      	push	{r3, r4, r5, lr}
 8006da2:	4d06      	ldr	r5, [pc, #24]	@ (8006dbc <_sbrk_r+0x1c>)
 8006da4:	2300      	movs	r3, #0
 8006da6:	4604      	mov	r4, r0
 8006da8:	4608      	mov	r0, r1
 8006daa:	602b      	str	r3, [r5, #0]
 8006dac:	f7fb f8b2 	bl	8001f14 <_sbrk>
 8006db0:	1c43      	adds	r3, r0, #1
 8006db2:	d102      	bne.n	8006dba <_sbrk_r+0x1a>
 8006db4:	682b      	ldr	r3, [r5, #0]
 8006db6:	b103      	cbz	r3, 8006dba <_sbrk_r+0x1a>
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	bd38      	pop	{r3, r4, r5, pc}
 8006dbc:	20001d88 	.word	0x20001d88

08006dc0 <_write_r>:
 8006dc0:	b538      	push	{r3, r4, r5, lr}
 8006dc2:	4d07      	ldr	r5, [pc, #28]	@ (8006de0 <_write_r+0x20>)
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	4608      	mov	r0, r1
 8006dc8:	4611      	mov	r1, r2
 8006dca:	2200      	movs	r2, #0
 8006dcc:	602a      	str	r2, [r5, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f7fb f850 	bl	8001e74 <_write>
 8006dd4:	1c43      	adds	r3, r0, #1
 8006dd6:	d102      	bne.n	8006dde <_write_r+0x1e>
 8006dd8:	682b      	ldr	r3, [r5, #0]
 8006dda:	b103      	cbz	r3, 8006dde <_write_r+0x1e>
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	bd38      	pop	{r3, r4, r5, pc}
 8006de0:	20001d88 	.word	0x20001d88

08006de4 <__errno>:
 8006de4:	4b01      	ldr	r3, [pc, #4]	@ (8006dec <__errno+0x8>)
 8006de6:	6818      	ldr	r0, [r3, #0]
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	20001788 	.word	0x20001788

08006df0 <__libc_init_array>:
 8006df0:	b570      	push	{r4, r5, r6, lr}
 8006df2:	4d0d      	ldr	r5, [pc, #52]	@ (8006e28 <__libc_init_array+0x38>)
 8006df4:	4c0d      	ldr	r4, [pc, #52]	@ (8006e2c <__libc_init_array+0x3c>)
 8006df6:	1b64      	subs	r4, r4, r5
 8006df8:	10a4      	asrs	r4, r4, #2
 8006dfa:	2600      	movs	r6, #0
 8006dfc:	42a6      	cmp	r6, r4
 8006dfe:	d109      	bne.n	8006e14 <__libc_init_array+0x24>
 8006e00:	4d0b      	ldr	r5, [pc, #44]	@ (8006e30 <__libc_init_array+0x40>)
 8006e02:	4c0c      	ldr	r4, [pc, #48]	@ (8006e34 <__libc_init_array+0x44>)
 8006e04:	f001 ff94 	bl	8008d30 <_init>
 8006e08:	1b64      	subs	r4, r4, r5
 8006e0a:	10a4      	asrs	r4, r4, #2
 8006e0c:	2600      	movs	r6, #0
 8006e0e:	42a6      	cmp	r6, r4
 8006e10:	d105      	bne.n	8006e1e <__libc_init_array+0x2e>
 8006e12:	bd70      	pop	{r4, r5, r6, pc}
 8006e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e18:	4798      	blx	r3
 8006e1a:	3601      	adds	r6, #1
 8006e1c:	e7ee      	b.n	8006dfc <__libc_init_array+0xc>
 8006e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e22:	4798      	blx	r3
 8006e24:	3601      	adds	r6, #1
 8006e26:	e7f2      	b.n	8006e0e <__libc_init_array+0x1e>
 8006e28:	080093c4 	.word	0x080093c4
 8006e2c:	080093c4 	.word	0x080093c4
 8006e30:	080093c4 	.word	0x080093c4
 8006e34:	080093c8 	.word	0x080093c8

08006e38 <__retarget_lock_init_recursive>:
 8006e38:	4770      	bx	lr

08006e3a <__retarget_lock_acquire_recursive>:
 8006e3a:	4770      	bx	lr

08006e3c <__retarget_lock_release_recursive>:
 8006e3c:	4770      	bx	lr

08006e3e <strcpy>:
 8006e3e:	4603      	mov	r3, r0
 8006e40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e44:	f803 2b01 	strb.w	r2, [r3], #1
 8006e48:	2a00      	cmp	r2, #0
 8006e4a:	d1f9      	bne.n	8006e40 <strcpy+0x2>
 8006e4c:	4770      	bx	lr
	...

08006e50 <__assert_func>:
 8006e50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e52:	4614      	mov	r4, r2
 8006e54:	461a      	mov	r2, r3
 8006e56:	4b09      	ldr	r3, [pc, #36]	@ (8006e7c <__assert_func+0x2c>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4605      	mov	r5, r0
 8006e5c:	68d8      	ldr	r0, [r3, #12]
 8006e5e:	b954      	cbnz	r4, 8006e76 <__assert_func+0x26>
 8006e60:	4b07      	ldr	r3, [pc, #28]	@ (8006e80 <__assert_func+0x30>)
 8006e62:	461c      	mov	r4, r3
 8006e64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e68:	9100      	str	r1, [sp, #0]
 8006e6a:	462b      	mov	r3, r5
 8006e6c:	4905      	ldr	r1, [pc, #20]	@ (8006e84 <__assert_func+0x34>)
 8006e6e:	f001 fd6d 	bl	800894c <fiprintf>
 8006e72:	f001 fe39 	bl	8008ae8 <abort>
 8006e76:	4b04      	ldr	r3, [pc, #16]	@ (8006e88 <__assert_func+0x38>)
 8006e78:	e7f4      	b.n	8006e64 <__assert_func+0x14>
 8006e7a:	bf00      	nop
 8006e7c:	20001788 	.word	0x20001788
 8006e80:	080090d4 	.word	0x080090d4
 8006e84:	080090a6 	.word	0x080090a6
 8006e88:	08009099 	.word	0x08009099

08006e8c <quorem>:
 8006e8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e90:	6903      	ldr	r3, [r0, #16]
 8006e92:	690c      	ldr	r4, [r1, #16]
 8006e94:	42a3      	cmp	r3, r4
 8006e96:	4607      	mov	r7, r0
 8006e98:	db7e      	blt.n	8006f98 <quorem+0x10c>
 8006e9a:	3c01      	subs	r4, #1
 8006e9c:	f101 0814 	add.w	r8, r1, #20
 8006ea0:	00a3      	lsls	r3, r4, #2
 8006ea2:	f100 0514 	add.w	r5, r0, #20
 8006ea6:	9300      	str	r3, [sp, #0]
 8006ea8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006eac:	9301      	str	r3, [sp, #4]
 8006eae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006eb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ebe:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ec2:	d32e      	bcc.n	8006f22 <quorem+0x96>
 8006ec4:	f04f 0a00 	mov.w	sl, #0
 8006ec8:	46c4      	mov	ip, r8
 8006eca:	46ae      	mov	lr, r5
 8006ecc:	46d3      	mov	fp, sl
 8006ece:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006ed2:	b298      	uxth	r0, r3
 8006ed4:	fb06 a000 	mla	r0, r6, r0, sl
 8006ed8:	0c02      	lsrs	r2, r0, #16
 8006eda:	0c1b      	lsrs	r3, r3, #16
 8006edc:	fb06 2303 	mla	r3, r6, r3, r2
 8006ee0:	f8de 2000 	ldr.w	r2, [lr]
 8006ee4:	b280      	uxth	r0, r0
 8006ee6:	b292      	uxth	r2, r2
 8006ee8:	1a12      	subs	r2, r2, r0
 8006eea:	445a      	add	r2, fp
 8006eec:	f8de 0000 	ldr.w	r0, [lr]
 8006ef0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006efa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006efe:	b292      	uxth	r2, r2
 8006f00:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006f04:	45e1      	cmp	r9, ip
 8006f06:	f84e 2b04 	str.w	r2, [lr], #4
 8006f0a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006f0e:	d2de      	bcs.n	8006ece <quorem+0x42>
 8006f10:	9b00      	ldr	r3, [sp, #0]
 8006f12:	58eb      	ldr	r3, [r5, r3]
 8006f14:	b92b      	cbnz	r3, 8006f22 <quorem+0x96>
 8006f16:	9b01      	ldr	r3, [sp, #4]
 8006f18:	3b04      	subs	r3, #4
 8006f1a:	429d      	cmp	r5, r3
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	d32f      	bcc.n	8006f80 <quorem+0xf4>
 8006f20:	613c      	str	r4, [r7, #16]
 8006f22:	4638      	mov	r0, r7
 8006f24:	f001 f8c4 	bl	80080b0 <__mcmp>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	db25      	blt.n	8006f78 <quorem+0xec>
 8006f2c:	4629      	mov	r1, r5
 8006f2e:	2000      	movs	r0, #0
 8006f30:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f34:	f8d1 c000 	ldr.w	ip, [r1]
 8006f38:	fa1f fe82 	uxth.w	lr, r2
 8006f3c:	fa1f f38c 	uxth.w	r3, ip
 8006f40:	eba3 030e 	sub.w	r3, r3, lr
 8006f44:	4403      	add	r3, r0
 8006f46:	0c12      	lsrs	r2, r2, #16
 8006f48:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006f4c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f56:	45c1      	cmp	r9, r8
 8006f58:	f841 3b04 	str.w	r3, [r1], #4
 8006f5c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006f60:	d2e6      	bcs.n	8006f30 <quorem+0xa4>
 8006f62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f6a:	b922      	cbnz	r2, 8006f76 <quorem+0xea>
 8006f6c:	3b04      	subs	r3, #4
 8006f6e:	429d      	cmp	r5, r3
 8006f70:	461a      	mov	r2, r3
 8006f72:	d30b      	bcc.n	8006f8c <quorem+0x100>
 8006f74:	613c      	str	r4, [r7, #16]
 8006f76:	3601      	adds	r6, #1
 8006f78:	4630      	mov	r0, r6
 8006f7a:	b003      	add	sp, #12
 8006f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f80:	6812      	ldr	r2, [r2, #0]
 8006f82:	3b04      	subs	r3, #4
 8006f84:	2a00      	cmp	r2, #0
 8006f86:	d1cb      	bne.n	8006f20 <quorem+0x94>
 8006f88:	3c01      	subs	r4, #1
 8006f8a:	e7c6      	b.n	8006f1a <quorem+0x8e>
 8006f8c:	6812      	ldr	r2, [r2, #0]
 8006f8e:	3b04      	subs	r3, #4
 8006f90:	2a00      	cmp	r2, #0
 8006f92:	d1ef      	bne.n	8006f74 <quorem+0xe8>
 8006f94:	3c01      	subs	r4, #1
 8006f96:	e7ea      	b.n	8006f6e <quorem+0xe2>
 8006f98:	2000      	movs	r0, #0
 8006f9a:	e7ee      	b.n	8006f7a <quorem+0xee>
 8006f9c:	0000      	movs	r0, r0
	...

08006fa0 <_dtoa_r>:
 8006fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa4:	69c7      	ldr	r7, [r0, #28]
 8006fa6:	b099      	sub	sp, #100	@ 0x64
 8006fa8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006fac:	ec55 4b10 	vmov	r4, r5, d0
 8006fb0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006fb2:	9109      	str	r1, [sp, #36]	@ 0x24
 8006fb4:	4683      	mov	fp, r0
 8006fb6:	920e      	str	r2, [sp, #56]	@ 0x38
 8006fb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006fba:	b97f      	cbnz	r7, 8006fdc <_dtoa_r+0x3c>
 8006fbc:	2010      	movs	r0, #16
 8006fbe:	f7fe fff9 	bl	8005fb4 <malloc>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	f8cb 001c 	str.w	r0, [fp, #28]
 8006fc8:	b920      	cbnz	r0, 8006fd4 <_dtoa_r+0x34>
 8006fca:	4ba7      	ldr	r3, [pc, #668]	@ (8007268 <_dtoa_r+0x2c8>)
 8006fcc:	21ef      	movs	r1, #239	@ 0xef
 8006fce:	48a7      	ldr	r0, [pc, #668]	@ (800726c <_dtoa_r+0x2cc>)
 8006fd0:	f7ff ff3e 	bl	8006e50 <__assert_func>
 8006fd4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006fd8:	6007      	str	r7, [r0, #0]
 8006fda:	60c7      	str	r7, [r0, #12]
 8006fdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006fe0:	6819      	ldr	r1, [r3, #0]
 8006fe2:	b159      	cbz	r1, 8006ffc <_dtoa_r+0x5c>
 8006fe4:	685a      	ldr	r2, [r3, #4]
 8006fe6:	604a      	str	r2, [r1, #4]
 8006fe8:	2301      	movs	r3, #1
 8006fea:	4093      	lsls	r3, r2
 8006fec:	608b      	str	r3, [r1, #8]
 8006fee:	4658      	mov	r0, fp
 8006ff0:	f000 fe24 	bl	8007c3c <_Bfree>
 8006ff4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	601a      	str	r2, [r3, #0]
 8006ffc:	1e2b      	subs	r3, r5, #0
 8006ffe:	bfb9      	ittee	lt
 8007000:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007004:	9303      	strlt	r3, [sp, #12]
 8007006:	2300      	movge	r3, #0
 8007008:	6033      	strge	r3, [r6, #0]
 800700a:	9f03      	ldr	r7, [sp, #12]
 800700c:	4b98      	ldr	r3, [pc, #608]	@ (8007270 <_dtoa_r+0x2d0>)
 800700e:	bfbc      	itt	lt
 8007010:	2201      	movlt	r2, #1
 8007012:	6032      	strlt	r2, [r6, #0]
 8007014:	43bb      	bics	r3, r7
 8007016:	d112      	bne.n	800703e <_dtoa_r+0x9e>
 8007018:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800701a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007024:	4323      	orrs	r3, r4
 8007026:	f000 854d 	beq.w	8007ac4 <_dtoa_r+0xb24>
 800702a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800702c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007284 <_dtoa_r+0x2e4>
 8007030:	2b00      	cmp	r3, #0
 8007032:	f000 854f 	beq.w	8007ad4 <_dtoa_r+0xb34>
 8007036:	f10a 0303 	add.w	r3, sl, #3
 800703a:	f000 bd49 	b.w	8007ad0 <_dtoa_r+0xb30>
 800703e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007042:	2200      	movs	r2, #0
 8007044:	ec51 0b17 	vmov	r0, r1, d7
 8007048:	2300      	movs	r3, #0
 800704a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800704e:	f7f9 fd43 	bl	8000ad8 <__aeabi_dcmpeq>
 8007052:	4680      	mov	r8, r0
 8007054:	b158      	cbz	r0, 800706e <_dtoa_r+0xce>
 8007056:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007058:	2301      	movs	r3, #1
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800705e:	b113      	cbz	r3, 8007066 <_dtoa_r+0xc6>
 8007060:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007062:	4b84      	ldr	r3, [pc, #528]	@ (8007274 <_dtoa_r+0x2d4>)
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007288 <_dtoa_r+0x2e8>
 800706a:	f000 bd33 	b.w	8007ad4 <_dtoa_r+0xb34>
 800706e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007072:	aa16      	add	r2, sp, #88	@ 0x58
 8007074:	a917      	add	r1, sp, #92	@ 0x5c
 8007076:	4658      	mov	r0, fp
 8007078:	f001 f8ca 	bl	8008210 <__d2b>
 800707c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007080:	4681      	mov	r9, r0
 8007082:	2e00      	cmp	r6, #0
 8007084:	d077      	beq.n	8007176 <_dtoa_r+0x1d6>
 8007086:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007088:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800708c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007090:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007094:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007098:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800709c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80070a0:	4619      	mov	r1, r3
 80070a2:	2200      	movs	r2, #0
 80070a4:	4b74      	ldr	r3, [pc, #464]	@ (8007278 <_dtoa_r+0x2d8>)
 80070a6:	f7f9 f8f7 	bl	8000298 <__aeabi_dsub>
 80070aa:	a369      	add	r3, pc, #420	@ (adr r3, 8007250 <_dtoa_r+0x2b0>)
 80070ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b0:	f7f9 faaa 	bl	8000608 <__aeabi_dmul>
 80070b4:	a368      	add	r3, pc, #416	@ (adr r3, 8007258 <_dtoa_r+0x2b8>)
 80070b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ba:	f7f9 f8ef 	bl	800029c <__adddf3>
 80070be:	4604      	mov	r4, r0
 80070c0:	4630      	mov	r0, r6
 80070c2:	460d      	mov	r5, r1
 80070c4:	f7f9 fa36 	bl	8000534 <__aeabi_i2d>
 80070c8:	a365      	add	r3, pc, #404	@ (adr r3, 8007260 <_dtoa_r+0x2c0>)
 80070ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ce:	f7f9 fa9b 	bl	8000608 <__aeabi_dmul>
 80070d2:	4602      	mov	r2, r0
 80070d4:	460b      	mov	r3, r1
 80070d6:	4620      	mov	r0, r4
 80070d8:	4629      	mov	r1, r5
 80070da:	f7f9 f8df 	bl	800029c <__adddf3>
 80070de:	4604      	mov	r4, r0
 80070e0:	460d      	mov	r5, r1
 80070e2:	f7f9 fd41 	bl	8000b68 <__aeabi_d2iz>
 80070e6:	2200      	movs	r2, #0
 80070e8:	4607      	mov	r7, r0
 80070ea:	2300      	movs	r3, #0
 80070ec:	4620      	mov	r0, r4
 80070ee:	4629      	mov	r1, r5
 80070f0:	f7f9 fcfc 	bl	8000aec <__aeabi_dcmplt>
 80070f4:	b140      	cbz	r0, 8007108 <_dtoa_r+0x168>
 80070f6:	4638      	mov	r0, r7
 80070f8:	f7f9 fa1c 	bl	8000534 <__aeabi_i2d>
 80070fc:	4622      	mov	r2, r4
 80070fe:	462b      	mov	r3, r5
 8007100:	f7f9 fcea 	bl	8000ad8 <__aeabi_dcmpeq>
 8007104:	b900      	cbnz	r0, 8007108 <_dtoa_r+0x168>
 8007106:	3f01      	subs	r7, #1
 8007108:	2f16      	cmp	r7, #22
 800710a:	d851      	bhi.n	80071b0 <_dtoa_r+0x210>
 800710c:	4b5b      	ldr	r3, [pc, #364]	@ (800727c <_dtoa_r+0x2dc>)
 800710e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007116:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800711a:	f7f9 fce7 	bl	8000aec <__aeabi_dcmplt>
 800711e:	2800      	cmp	r0, #0
 8007120:	d048      	beq.n	80071b4 <_dtoa_r+0x214>
 8007122:	3f01      	subs	r7, #1
 8007124:	2300      	movs	r3, #0
 8007126:	9312      	str	r3, [sp, #72]	@ 0x48
 8007128:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800712a:	1b9b      	subs	r3, r3, r6
 800712c:	1e5a      	subs	r2, r3, #1
 800712e:	bf44      	itt	mi
 8007130:	f1c3 0801 	rsbmi	r8, r3, #1
 8007134:	2300      	movmi	r3, #0
 8007136:	9208      	str	r2, [sp, #32]
 8007138:	bf54      	ite	pl
 800713a:	f04f 0800 	movpl.w	r8, #0
 800713e:	9308      	strmi	r3, [sp, #32]
 8007140:	2f00      	cmp	r7, #0
 8007142:	db39      	blt.n	80071b8 <_dtoa_r+0x218>
 8007144:	9b08      	ldr	r3, [sp, #32]
 8007146:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007148:	443b      	add	r3, r7
 800714a:	9308      	str	r3, [sp, #32]
 800714c:	2300      	movs	r3, #0
 800714e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007150:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007152:	2b09      	cmp	r3, #9
 8007154:	d864      	bhi.n	8007220 <_dtoa_r+0x280>
 8007156:	2b05      	cmp	r3, #5
 8007158:	bfc4      	itt	gt
 800715a:	3b04      	subgt	r3, #4
 800715c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800715e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007160:	f1a3 0302 	sub.w	r3, r3, #2
 8007164:	bfcc      	ite	gt
 8007166:	2400      	movgt	r4, #0
 8007168:	2401      	movle	r4, #1
 800716a:	2b03      	cmp	r3, #3
 800716c:	d863      	bhi.n	8007236 <_dtoa_r+0x296>
 800716e:	e8df f003 	tbb	[pc, r3]
 8007172:	372a      	.short	0x372a
 8007174:	5535      	.short	0x5535
 8007176:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800717a:	441e      	add	r6, r3
 800717c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007180:	2b20      	cmp	r3, #32
 8007182:	bfc1      	itttt	gt
 8007184:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007188:	409f      	lslgt	r7, r3
 800718a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800718e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007192:	bfd6      	itet	le
 8007194:	f1c3 0320 	rsble	r3, r3, #32
 8007198:	ea47 0003 	orrgt.w	r0, r7, r3
 800719c:	fa04 f003 	lslle.w	r0, r4, r3
 80071a0:	f7f9 f9b8 	bl	8000514 <__aeabi_ui2d>
 80071a4:	2201      	movs	r2, #1
 80071a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80071aa:	3e01      	subs	r6, #1
 80071ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80071ae:	e777      	b.n	80070a0 <_dtoa_r+0x100>
 80071b0:	2301      	movs	r3, #1
 80071b2:	e7b8      	b.n	8007126 <_dtoa_r+0x186>
 80071b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80071b6:	e7b7      	b.n	8007128 <_dtoa_r+0x188>
 80071b8:	427b      	negs	r3, r7
 80071ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80071bc:	2300      	movs	r3, #0
 80071be:	eba8 0807 	sub.w	r8, r8, r7
 80071c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80071c4:	e7c4      	b.n	8007150 <_dtoa_r+0x1b0>
 80071c6:	2300      	movs	r3, #0
 80071c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	dc35      	bgt.n	800723c <_dtoa_r+0x29c>
 80071d0:	2301      	movs	r3, #1
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	9307      	str	r3, [sp, #28]
 80071d6:	461a      	mov	r2, r3
 80071d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80071da:	e00b      	b.n	80071f4 <_dtoa_r+0x254>
 80071dc:	2301      	movs	r3, #1
 80071de:	e7f3      	b.n	80071c8 <_dtoa_r+0x228>
 80071e0:	2300      	movs	r3, #0
 80071e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071e6:	18fb      	adds	r3, r7, r3
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	3301      	adds	r3, #1
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	9307      	str	r3, [sp, #28]
 80071f0:	bfb8      	it	lt
 80071f2:	2301      	movlt	r3, #1
 80071f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80071f8:	2100      	movs	r1, #0
 80071fa:	2204      	movs	r2, #4
 80071fc:	f102 0514 	add.w	r5, r2, #20
 8007200:	429d      	cmp	r5, r3
 8007202:	d91f      	bls.n	8007244 <_dtoa_r+0x2a4>
 8007204:	6041      	str	r1, [r0, #4]
 8007206:	4658      	mov	r0, fp
 8007208:	f000 fcd8 	bl	8007bbc <_Balloc>
 800720c:	4682      	mov	sl, r0
 800720e:	2800      	cmp	r0, #0
 8007210:	d13c      	bne.n	800728c <_dtoa_r+0x2ec>
 8007212:	4b1b      	ldr	r3, [pc, #108]	@ (8007280 <_dtoa_r+0x2e0>)
 8007214:	4602      	mov	r2, r0
 8007216:	f240 11af 	movw	r1, #431	@ 0x1af
 800721a:	e6d8      	b.n	8006fce <_dtoa_r+0x2e>
 800721c:	2301      	movs	r3, #1
 800721e:	e7e0      	b.n	80071e2 <_dtoa_r+0x242>
 8007220:	2401      	movs	r4, #1
 8007222:	2300      	movs	r3, #0
 8007224:	9309      	str	r3, [sp, #36]	@ 0x24
 8007226:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007228:	f04f 33ff 	mov.w	r3, #4294967295
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	9307      	str	r3, [sp, #28]
 8007230:	2200      	movs	r2, #0
 8007232:	2312      	movs	r3, #18
 8007234:	e7d0      	b.n	80071d8 <_dtoa_r+0x238>
 8007236:	2301      	movs	r3, #1
 8007238:	930b      	str	r3, [sp, #44]	@ 0x2c
 800723a:	e7f5      	b.n	8007228 <_dtoa_r+0x288>
 800723c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	9307      	str	r3, [sp, #28]
 8007242:	e7d7      	b.n	80071f4 <_dtoa_r+0x254>
 8007244:	3101      	adds	r1, #1
 8007246:	0052      	lsls	r2, r2, #1
 8007248:	e7d8      	b.n	80071fc <_dtoa_r+0x25c>
 800724a:	bf00      	nop
 800724c:	f3af 8000 	nop.w
 8007250:	636f4361 	.word	0x636f4361
 8007254:	3fd287a7 	.word	0x3fd287a7
 8007258:	8b60c8b3 	.word	0x8b60c8b3
 800725c:	3fc68a28 	.word	0x3fc68a28
 8007260:	509f79fb 	.word	0x509f79fb
 8007264:	3fd34413 	.word	0x3fd34413
 8007268:	08009028 	.word	0x08009028
 800726c:	080090e2 	.word	0x080090e2
 8007270:	7ff00000 	.word	0x7ff00000
 8007274:	08009005 	.word	0x08009005
 8007278:	3ff80000 	.word	0x3ff80000
 800727c:	080091d8 	.word	0x080091d8
 8007280:	0800913a 	.word	0x0800913a
 8007284:	080090de 	.word	0x080090de
 8007288:	08009004 	.word	0x08009004
 800728c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007290:	6018      	str	r0, [r3, #0]
 8007292:	9b07      	ldr	r3, [sp, #28]
 8007294:	2b0e      	cmp	r3, #14
 8007296:	f200 80a4 	bhi.w	80073e2 <_dtoa_r+0x442>
 800729a:	2c00      	cmp	r4, #0
 800729c:	f000 80a1 	beq.w	80073e2 <_dtoa_r+0x442>
 80072a0:	2f00      	cmp	r7, #0
 80072a2:	dd33      	ble.n	800730c <_dtoa_r+0x36c>
 80072a4:	4bad      	ldr	r3, [pc, #692]	@ (800755c <_dtoa_r+0x5bc>)
 80072a6:	f007 020f 	and.w	r2, r7, #15
 80072aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072ae:	ed93 7b00 	vldr	d7, [r3]
 80072b2:	05f8      	lsls	r0, r7, #23
 80072b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80072b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80072bc:	d516      	bpl.n	80072ec <_dtoa_r+0x34c>
 80072be:	4ba8      	ldr	r3, [pc, #672]	@ (8007560 <_dtoa_r+0x5c0>)
 80072c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80072c8:	f7f9 fac8 	bl	800085c <__aeabi_ddiv>
 80072cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072d0:	f004 040f 	and.w	r4, r4, #15
 80072d4:	2603      	movs	r6, #3
 80072d6:	4da2      	ldr	r5, [pc, #648]	@ (8007560 <_dtoa_r+0x5c0>)
 80072d8:	b954      	cbnz	r4, 80072f0 <_dtoa_r+0x350>
 80072da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072e2:	f7f9 fabb 	bl	800085c <__aeabi_ddiv>
 80072e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072ea:	e028      	b.n	800733e <_dtoa_r+0x39e>
 80072ec:	2602      	movs	r6, #2
 80072ee:	e7f2      	b.n	80072d6 <_dtoa_r+0x336>
 80072f0:	07e1      	lsls	r1, r4, #31
 80072f2:	d508      	bpl.n	8007306 <_dtoa_r+0x366>
 80072f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80072fc:	f7f9 f984 	bl	8000608 <__aeabi_dmul>
 8007300:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007304:	3601      	adds	r6, #1
 8007306:	1064      	asrs	r4, r4, #1
 8007308:	3508      	adds	r5, #8
 800730a:	e7e5      	b.n	80072d8 <_dtoa_r+0x338>
 800730c:	f000 80d2 	beq.w	80074b4 <_dtoa_r+0x514>
 8007310:	427c      	negs	r4, r7
 8007312:	4b92      	ldr	r3, [pc, #584]	@ (800755c <_dtoa_r+0x5bc>)
 8007314:	4d92      	ldr	r5, [pc, #584]	@ (8007560 <_dtoa_r+0x5c0>)
 8007316:	f004 020f 	and.w	r2, r4, #15
 800731a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800731e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007322:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007326:	f7f9 f96f 	bl	8000608 <__aeabi_dmul>
 800732a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800732e:	1124      	asrs	r4, r4, #4
 8007330:	2300      	movs	r3, #0
 8007332:	2602      	movs	r6, #2
 8007334:	2c00      	cmp	r4, #0
 8007336:	f040 80b2 	bne.w	800749e <_dtoa_r+0x4fe>
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1d3      	bne.n	80072e6 <_dtoa_r+0x346>
 800733e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007340:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 80b7 	beq.w	80074b8 <_dtoa_r+0x518>
 800734a:	4b86      	ldr	r3, [pc, #536]	@ (8007564 <_dtoa_r+0x5c4>)
 800734c:	2200      	movs	r2, #0
 800734e:	4620      	mov	r0, r4
 8007350:	4629      	mov	r1, r5
 8007352:	f7f9 fbcb 	bl	8000aec <__aeabi_dcmplt>
 8007356:	2800      	cmp	r0, #0
 8007358:	f000 80ae 	beq.w	80074b8 <_dtoa_r+0x518>
 800735c:	9b07      	ldr	r3, [sp, #28]
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 80aa 	beq.w	80074b8 <_dtoa_r+0x518>
 8007364:	9b00      	ldr	r3, [sp, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	dd37      	ble.n	80073da <_dtoa_r+0x43a>
 800736a:	1e7b      	subs	r3, r7, #1
 800736c:	9304      	str	r3, [sp, #16]
 800736e:	4620      	mov	r0, r4
 8007370:	4b7d      	ldr	r3, [pc, #500]	@ (8007568 <_dtoa_r+0x5c8>)
 8007372:	2200      	movs	r2, #0
 8007374:	4629      	mov	r1, r5
 8007376:	f7f9 f947 	bl	8000608 <__aeabi_dmul>
 800737a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800737e:	9c00      	ldr	r4, [sp, #0]
 8007380:	3601      	adds	r6, #1
 8007382:	4630      	mov	r0, r6
 8007384:	f7f9 f8d6 	bl	8000534 <__aeabi_i2d>
 8007388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800738c:	f7f9 f93c 	bl	8000608 <__aeabi_dmul>
 8007390:	4b76      	ldr	r3, [pc, #472]	@ (800756c <_dtoa_r+0x5cc>)
 8007392:	2200      	movs	r2, #0
 8007394:	f7f8 ff82 	bl	800029c <__adddf3>
 8007398:	4605      	mov	r5, r0
 800739a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800739e:	2c00      	cmp	r4, #0
 80073a0:	f040 808d 	bne.w	80074be <_dtoa_r+0x51e>
 80073a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073a8:	4b71      	ldr	r3, [pc, #452]	@ (8007570 <_dtoa_r+0x5d0>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	f7f8 ff74 	bl	8000298 <__aeabi_dsub>
 80073b0:	4602      	mov	r2, r0
 80073b2:	460b      	mov	r3, r1
 80073b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073b8:	462a      	mov	r2, r5
 80073ba:	4633      	mov	r3, r6
 80073bc:	f7f9 fbb4 	bl	8000b28 <__aeabi_dcmpgt>
 80073c0:	2800      	cmp	r0, #0
 80073c2:	f040 828b 	bne.w	80078dc <_dtoa_r+0x93c>
 80073c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073ca:	462a      	mov	r2, r5
 80073cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80073d0:	f7f9 fb8c 	bl	8000aec <__aeabi_dcmplt>
 80073d4:	2800      	cmp	r0, #0
 80073d6:	f040 8128 	bne.w	800762a <_dtoa_r+0x68a>
 80073da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80073de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80073e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f2c0 815a 	blt.w	800769e <_dtoa_r+0x6fe>
 80073ea:	2f0e      	cmp	r7, #14
 80073ec:	f300 8157 	bgt.w	800769e <_dtoa_r+0x6fe>
 80073f0:	4b5a      	ldr	r3, [pc, #360]	@ (800755c <_dtoa_r+0x5bc>)
 80073f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80073f6:	ed93 7b00 	vldr	d7, [r3]
 80073fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	ed8d 7b00 	vstr	d7, [sp]
 8007402:	da03      	bge.n	800740c <_dtoa_r+0x46c>
 8007404:	9b07      	ldr	r3, [sp, #28]
 8007406:	2b00      	cmp	r3, #0
 8007408:	f340 8101 	ble.w	800760e <_dtoa_r+0x66e>
 800740c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007410:	4656      	mov	r6, sl
 8007412:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007416:	4620      	mov	r0, r4
 8007418:	4629      	mov	r1, r5
 800741a:	f7f9 fa1f 	bl	800085c <__aeabi_ddiv>
 800741e:	f7f9 fba3 	bl	8000b68 <__aeabi_d2iz>
 8007422:	4680      	mov	r8, r0
 8007424:	f7f9 f886 	bl	8000534 <__aeabi_i2d>
 8007428:	e9dd 2300 	ldrd	r2, r3, [sp]
 800742c:	f7f9 f8ec 	bl	8000608 <__aeabi_dmul>
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	4620      	mov	r0, r4
 8007436:	4629      	mov	r1, r5
 8007438:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800743c:	f7f8 ff2c 	bl	8000298 <__aeabi_dsub>
 8007440:	f806 4b01 	strb.w	r4, [r6], #1
 8007444:	9d07      	ldr	r5, [sp, #28]
 8007446:	eba6 040a 	sub.w	r4, r6, sl
 800744a:	42a5      	cmp	r5, r4
 800744c:	4602      	mov	r2, r0
 800744e:	460b      	mov	r3, r1
 8007450:	f040 8117 	bne.w	8007682 <_dtoa_r+0x6e2>
 8007454:	f7f8 ff22 	bl	800029c <__adddf3>
 8007458:	e9dd 2300 	ldrd	r2, r3, [sp]
 800745c:	4604      	mov	r4, r0
 800745e:	460d      	mov	r5, r1
 8007460:	f7f9 fb62 	bl	8000b28 <__aeabi_dcmpgt>
 8007464:	2800      	cmp	r0, #0
 8007466:	f040 80f9 	bne.w	800765c <_dtoa_r+0x6bc>
 800746a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800746e:	4620      	mov	r0, r4
 8007470:	4629      	mov	r1, r5
 8007472:	f7f9 fb31 	bl	8000ad8 <__aeabi_dcmpeq>
 8007476:	b118      	cbz	r0, 8007480 <_dtoa_r+0x4e0>
 8007478:	f018 0f01 	tst.w	r8, #1
 800747c:	f040 80ee 	bne.w	800765c <_dtoa_r+0x6bc>
 8007480:	4649      	mov	r1, r9
 8007482:	4658      	mov	r0, fp
 8007484:	f000 fbda 	bl	8007c3c <_Bfree>
 8007488:	2300      	movs	r3, #0
 800748a:	7033      	strb	r3, [r6, #0]
 800748c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800748e:	3701      	adds	r7, #1
 8007490:	601f      	str	r7, [r3, #0]
 8007492:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 831d 	beq.w	8007ad4 <_dtoa_r+0xb34>
 800749a:	601e      	str	r6, [r3, #0]
 800749c:	e31a      	b.n	8007ad4 <_dtoa_r+0xb34>
 800749e:	07e2      	lsls	r2, r4, #31
 80074a0:	d505      	bpl.n	80074ae <_dtoa_r+0x50e>
 80074a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80074a6:	f7f9 f8af 	bl	8000608 <__aeabi_dmul>
 80074aa:	3601      	adds	r6, #1
 80074ac:	2301      	movs	r3, #1
 80074ae:	1064      	asrs	r4, r4, #1
 80074b0:	3508      	adds	r5, #8
 80074b2:	e73f      	b.n	8007334 <_dtoa_r+0x394>
 80074b4:	2602      	movs	r6, #2
 80074b6:	e742      	b.n	800733e <_dtoa_r+0x39e>
 80074b8:	9c07      	ldr	r4, [sp, #28]
 80074ba:	9704      	str	r7, [sp, #16]
 80074bc:	e761      	b.n	8007382 <_dtoa_r+0x3e2>
 80074be:	4b27      	ldr	r3, [pc, #156]	@ (800755c <_dtoa_r+0x5bc>)
 80074c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80074c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80074c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074ca:	4454      	add	r4, sl
 80074cc:	2900      	cmp	r1, #0
 80074ce:	d053      	beq.n	8007578 <_dtoa_r+0x5d8>
 80074d0:	4928      	ldr	r1, [pc, #160]	@ (8007574 <_dtoa_r+0x5d4>)
 80074d2:	2000      	movs	r0, #0
 80074d4:	f7f9 f9c2 	bl	800085c <__aeabi_ddiv>
 80074d8:	4633      	mov	r3, r6
 80074da:	462a      	mov	r2, r5
 80074dc:	f7f8 fedc 	bl	8000298 <__aeabi_dsub>
 80074e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80074e4:	4656      	mov	r6, sl
 80074e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074ea:	f7f9 fb3d 	bl	8000b68 <__aeabi_d2iz>
 80074ee:	4605      	mov	r5, r0
 80074f0:	f7f9 f820 	bl	8000534 <__aeabi_i2d>
 80074f4:	4602      	mov	r2, r0
 80074f6:	460b      	mov	r3, r1
 80074f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074fc:	f7f8 fecc 	bl	8000298 <__aeabi_dsub>
 8007500:	3530      	adds	r5, #48	@ 0x30
 8007502:	4602      	mov	r2, r0
 8007504:	460b      	mov	r3, r1
 8007506:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800750a:	f806 5b01 	strb.w	r5, [r6], #1
 800750e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007512:	f7f9 faeb 	bl	8000aec <__aeabi_dcmplt>
 8007516:	2800      	cmp	r0, #0
 8007518:	d171      	bne.n	80075fe <_dtoa_r+0x65e>
 800751a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800751e:	4911      	ldr	r1, [pc, #68]	@ (8007564 <_dtoa_r+0x5c4>)
 8007520:	2000      	movs	r0, #0
 8007522:	f7f8 feb9 	bl	8000298 <__aeabi_dsub>
 8007526:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800752a:	f7f9 fadf 	bl	8000aec <__aeabi_dcmplt>
 800752e:	2800      	cmp	r0, #0
 8007530:	f040 8095 	bne.w	800765e <_dtoa_r+0x6be>
 8007534:	42a6      	cmp	r6, r4
 8007536:	f43f af50 	beq.w	80073da <_dtoa_r+0x43a>
 800753a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800753e:	4b0a      	ldr	r3, [pc, #40]	@ (8007568 <_dtoa_r+0x5c8>)
 8007540:	2200      	movs	r2, #0
 8007542:	f7f9 f861 	bl	8000608 <__aeabi_dmul>
 8007546:	4b08      	ldr	r3, [pc, #32]	@ (8007568 <_dtoa_r+0x5c8>)
 8007548:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800754c:	2200      	movs	r2, #0
 800754e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007552:	f7f9 f859 	bl	8000608 <__aeabi_dmul>
 8007556:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800755a:	e7c4      	b.n	80074e6 <_dtoa_r+0x546>
 800755c:	080091d8 	.word	0x080091d8
 8007560:	080091b0 	.word	0x080091b0
 8007564:	3ff00000 	.word	0x3ff00000
 8007568:	40240000 	.word	0x40240000
 800756c:	401c0000 	.word	0x401c0000
 8007570:	40140000 	.word	0x40140000
 8007574:	3fe00000 	.word	0x3fe00000
 8007578:	4631      	mov	r1, r6
 800757a:	4628      	mov	r0, r5
 800757c:	f7f9 f844 	bl	8000608 <__aeabi_dmul>
 8007580:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007584:	9415      	str	r4, [sp, #84]	@ 0x54
 8007586:	4656      	mov	r6, sl
 8007588:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800758c:	f7f9 faec 	bl	8000b68 <__aeabi_d2iz>
 8007590:	4605      	mov	r5, r0
 8007592:	f7f8 ffcf 	bl	8000534 <__aeabi_i2d>
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800759e:	f7f8 fe7b 	bl	8000298 <__aeabi_dsub>
 80075a2:	3530      	adds	r5, #48	@ 0x30
 80075a4:	f806 5b01 	strb.w	r5, [r6], #1
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	42a6      	cmp	r6, r4
 80075ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075b2:	f04f 0200 	mov.w	r2, #0
 80075b6:	d124      	bne.n	8007602 <_dtoa_r+0x662>
 80075b8:	4bac      	ldr	r3, [pc, #688]	@ (800786c <_dtoa_r+0x8cc>)
 80075ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80075be:	f7f8 fe6d 	bl	800029c <__adddf3>
 80075c2:	4602      	mov	r2, r0
 80075c4:	460b      	mov	r3, r1
 80075c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075ca:	f7f9 faad 	bl	8000b28 <__aeabi_dcmpgt>
 80075ce:	2800      	cmp	r0, #0
 80075d0:	d145      	bne.n	800765e <_dtoa_r+0x6be>
 80075d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80075d6:	49a5      	ldr	r1, [pc, #660]	@ (800786c <_dtoa_r+0x8cc>)
 80075d8:	2000      	movs	r0, #0
 80075da:	f7f8 fe5d 	bl	8000298 <__aeabi_dsub>
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075e6:	f7f9 fa81 	bl	8000aec <__aeabi_dcmplt>
 80075ea:	2800      	cmp	r0, #0
 80075ec:	f43f aef5 	beq.w	80073da <_dtoa_r+0x43a>
 80075f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80075f2:	1e73      	subs	r3, r6, #1
 80075f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80075f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80075fa:	2b30      	cmp	r3, #48	@ 0x30
 80075fc:	d0f8      	beq.n	80075f0 <_dtoa_r+0x650>
 80075fe:	9f04      	ldr	r7, [sp, #16]
 8007600:	e73e      	b.n	8007480 <_dtoa_r+0x4e0>
 8007602:	4b9b      	ldr	r3, [pc, #620]	@ (8007870 <_dtoa_r+0x8d0>)
 8007604:	f7f9 f800 	bl	8000608 <__aeabi_dmul>
 8007608:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800760c:	e7bc      	b.n	8007588 <_dtoa_r+0x5e8>
 800760e:	d10c      	bne.n	800762a <_dtoa_r+0x68a>
 8007610:	4b98      	ldr	r3, [pc, #608]	@ (8007874 <_dtoa_r+0x8d4>)
 8007612:	2200      	movs	r2, #0
 8007614:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007618:	f7f8 fff6 	bl	8000608 <__aeabi_dmul>
 800761c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007620:	f7f9 fa78 	bl	8000b14 <__aeabi_dcmpge>
 8007624:	2800      	cmp	r0, #0
 8007626:	f000 8157 	beq.w	80078d8 <_dtoa_r+0x938>
 800762a:	2400      	movs	r4, #0
 800762c:	4625      	mov	r5, r4
 800762e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007630:	43db      	mvns	r3, r3
 8007632:	9304      	str	r3, [sp, #16]
 8007634:	4656      	mov	r6, sl
 8007636:	2700      	movs	r7, #0
 8007638:	4621      	mov	r1, r4
 800763a:	4658      	mov	r0, fp
 800763c:	f000 fafe 	bl	8007c3c <_Bfree>
 8007640:	2d00      	cmp	r5, #0
 8007642:	d0dc      	beq.n	80075fe <_dtoa_r+0x65e>
 8007644:	b12f      	cbz	r7, 8007652 <_dtoa_r+0x6b2>
 8007646:	42af      	cmp	r7, r5
 8007648:	d003      	beq.n	8007652 <_dtoa_r+0x6b2>
 800764a:	4639      	mov	r1, r7
 800764c:	4658      	mov	r0, fp
 800764e:	f000 faf5 	bl	8007c3c <_Bfree>
 8007652:	4629      	mov	r1, r5
 8007654:	4658      	mov	r0, fp
 8007656:	f000 faf1 	bl	8007c3c <_Bfree>
 800765a:	e7d0      	b.n	80075fe <_dtoa_r+0x65e>
 800765c:	9704      	str	r7, [sp, #16]
 800765e:	4633      	mov	r3, r6
 8007660:	461e      	mov	r6, r3
 8007662:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007666:	2a39      	cmp	r2, #57	@ 0x39
 8007668:	d107      	bne.n	800767a <_dtoa_r+0x6da>
 800766a:	459a      	cmp	sl, r3
 800766c:	d1f8      	bne.n	8007660 <_dtoa_r+0x6c0>
 800766e:	9a04      	ldr	r2, [sp, #16]
 8007670:	3201      	adds	r2, #1
 8007672:	9204      	str	r2, [sp, #16]
 8007674:	2230      	movs	r2, #48	@ 0x30
 8007676:	f88a 2000 	strb.w	r2, [sl]
 800767a:	781a      	ldrb	r2, [r3, #0]
 800767c:	3201      	adds	r2, #1
 800767e:	701a      	strb	r2, [r3, #0]
 8007680:	e7bd      	b.n	80075fe <_dtoa_r+0x65e>
 8007682:	4b7b      	ldr	r3, [pc, #492]	@ (8007870 <_dtoa_r+0x8d0>)
 8007684:	2200      	movs	r2, #0
 8007686:	f7f8 ffbf 	bl	8000608 <__aeabi_dmul>
 800768a:	2200      	movs	r2, #0
 800768c:	2300      	movs	r3, #0
 800768e:	4604      	mov	r4, r0
 8007690:	460d      	mov	r5, r1
 8007692:	f7f9 fa21 	bl	8000ad8 <__aeabi_dcmpeq>
 8007696:	2800      	cmp	r0, #0
 8007698:	f43f aebb 	beq.w	8007412 <_dtoa_r+0x472>
 800769c:	e6f0      	b.n	8007480 <_dtoa_r+0x4e0>
 800769e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80076a0:	2a00      	cmp	r2, #0
 80076a2:	f000 80db 	beq.w	800785c <_dtoa_r+0x8bc>
 80076a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076a8:	2a01      	cmp	r2, #1
 80076aa:	f300 80bf 	bgt.w	800782c <_dtoa_r+0x88c>
 80076ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80076b0:	2a00      	cmp	r2, #0
 80076b2:	f000 80b7 	beq.w	8007824 <_dtoa_r+0x884>
 80076b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80076ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80076bc:	4646      	mov	r6, r8
 80076be:	9a08      	ldr	r2, [sp, #32]
 80076c0:	2101      	movs	r1, #1
 80076c2:	441a      	add	r2, r3
 80076c4:	4658      	mov	r0, fp
 80076c6:	4498      	add	r8, r3
 80076c8:	9208      	str	r2, [sp, #32]
 80076ca:	f000 fb6b 	bl	8007da4 <__i2b>
 80076ce:	4605      	mov	r5, r0
 80076d0:	b15e      	cbz	r6, 80076ea <_dtoa_r+0x74a>
 80076d2:	9b08      	ldr	r3, [sp, #32]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	dd08      	ble.n	80076ea <_dtoa_r+0x74a>
 80076d8:	42b3      	cmp	r3, r6
 80076da:	9a08      	ldr	r2, [sp, #32]
 80076dc:	bfa8      	it	ge
 80076de:	4633      	movge	r3, r6
 80076e0:	eba8 0803 	sub.w	r8, r8, r3
 80076e4:	1af6      	subs	r6, r6, r3
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	9308      	str	r3, [sp, #32]
 80076ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076ec:	b1f3      	cbz	r3, 800772c <_dtoa_r+0x78c>
 80076ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 80b7 	beq.w	8007864 <_dtoa_r+0x8c4>
 80076f6:	b18c      	cbz	r4, 800771c <_dtoa_r+0x77c>
 80076f8:	4629      	mov	r1, r5
 80076fa:	4622      	mov	r2, r4
 80076fc:	4658      	mov	r0, fp
 80076fe:	f000 fc11 	bl	8007f24 <__pow5mult>
 8007702:	464a      	mov	r2, r9
 8007704:	4601      	mov	r1, r0
 8007706:	4605      	mov	r5, r0
 8007708:	4658      	mov	r0, fp
 800770a:	f000 fb61 	bl	8007dd0 <__multiply>
 800770e:	4649      	mov	r1, r9
 8007710:	9004      	str	r0, [sp, #16]
 8007712:	4658      	mov	r0, fp
 8007714:	f000 fa92 	bl	8007c3c <_Bfree>
 8007718:	9b04      	ldr	r3, [sp, #16]
 800771a:	4699      	mov	r9, r3
 800771c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800771e:	1b1a      	subs	r2, r3, r4
 8007720:	d004      	beq.n	800772c <_dtoa_r+0x78c>
 8007722:	4649      	mov	r1, r9
 8007724:	4658      	mov	r0, fp
 8007726:	f000 fbfd 	bl	8007f24 <__pow5mult>
 800772a:	4681      	mov	r9, r0
 800772c:	2101      	movs	r1, #1
 800772e:	4658      	mov	r0, fp
 8007730:	f000 fb38 	bl	8007da4 <__i2b>
 8007734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007736:	4604      	mov	r4, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	f000 81cf 	beq.w	8007adc <_dtoa_r+0xb3c>
 800773e:	461a      	mov	r2, r3
 8007740:	4601      	mov	r1, r0
 8007742:	4658      	mov	r0, fp
 8007744:	f000 fbee 	bl	8007f24 <__pow5mult>
 8007748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800774a:	2b01      	cmp	r3, #1
 800774c:	4604      	mov	r4, r0
 800774e:	f300 8095 	bgt.w	800787c <_dtoa_r+0x8dc>
 8007752:	9b02      	ldr	r3, [sp, #8]
 8007754:	2b00      	cmp	r3, #0
 8007756:	f040 8087 	bne.w	8007868 <_dtoa_r+0x8c8>
 800775a:	9b03      	ldr	r3, [sp, #12]
 800775c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007760:	2b00      	cmp	r3, #0
 8007762:	f040 8089 	bne.w	8007878 <_dtoa_r+0x8d8>
 8007766:	9b03      	ldr	r3, [sp, #12]
 8007768:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800776c:	0d1b      	lsrs	r3, r3, #20
 800776e:	051b      	lsls	r3, r3, #20
 8007770:	b12b      	cbz	r3, 800777e <_dtoa_r+0x7de>
 8007772:	9b08      	ldr	r3, [sp, #32]
 8007774:	3301      	adds	r3, #1
 8007776:	9308      	str	r3, [sp, #32]
 8007778:	f108 0801 	add.w	r8, r8, #1
 800777c:	2301      	movs	r3, #1
 800777e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007780:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007782:	2b00      	cmp	r3, #0
 8007784:	f000 81b0 	beq.w	8007ae8 <_dtoa_r+0xb48>
 8007788:	6923      	ldr	r3, [r4, #16]
 800778a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800778e:	6918      	ldr	r0, [r3, #16]
 8007790:	f000 fabc 	bl	8007d0c <__hi0bits>
 8007794:	f1c0 0020 	rsb	r0, r0, #32
 8007798:	9b08      	ldr	r3, [sp, #32]
 800779a:	4418      	add	r0, r3
 800779c:	f010 001f 	ands.w	r0, r0, #31
 80077a0:	d077      	beq.n	8007892 <_dtoa_r+0x8f2>
 80077a2:	f1c0 0320 	rsb	r3, r0, #32
 80077a6:	2b04      	cmp	r3, #4
 80077a8:	dd6b      	ble.n	8007882 <_dtoa_r+0x8e2>
 80077aa:	9b08      	ldr	r3, [sp, #32]
 80077ac:	f1c0 001c 	rsb	r0, r0, #28
 80077b0:	4403      	add	r3, r0
 80077b2:	4480      	add	r8, r0
 80077b4:	4406      	add	r6, r0
 80077b6:	9308      	str	r3, [sp, #32]
 80077b8:	f1b8 0f00 	cmp.w	r8, #0
 80077bc:	dd05      	ble.n	80077ca <_dtoa_r+0x82a>
 80077be:	4649      	mov	r1, r9
 80077c0:	4642      	mov	r2, r8
 80077c2:	4658      	mov	r0, fp
 80077c4:	f000 fc08 	bl	8007fd8 <__lshift>
 80077c8:	4681      	mov	r9, r0
 80077ca:	9b08      	ldr	r3, [sp, #32]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	dd05      	ble.n	80077dc <_dtoa_r+0x83c>
 80077d0:	4621      	mov	r1, r4
 80077d2:	461a      	mov	r2, r3
 80077d4:	4658      	mov	r0, fp
 80077d6:	f000 fbff 	bl	8007fd8 <__lshift>
 80077da:	4604      	mov	r4, r0
 80077dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d059      	beq.n	8007896 <_dtoa_r+0x8f6>
 80077e2:	4621      	mov	r1, r4
 80077e4:	4648      	mov	r0, r9
 80077e6:	f000 fc63 	bl	80080b0 <__mcmp>
 80077ea:	2800      	cmp	r0, #0
 80077ec:	da53      	bge.n	8007896 <_dtoa_r+0x8f6>
 80077ee:	1e7b      	subs	r3, r7, #1
 80077f0:	9304      	str	r3, [sp, #16]
 80077f2:	4649      	mov	r1, r9
 80077f4:	2300      	movs	r3, #0
 80077f6:	220a      	movs	r2, #10
 80077f8:	4658      	mov	r0, fp
 80077fa:	f000 fa41 	bl	8007c80 <__multadd>
 80077fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007800:	4681      	mov	r9, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	f000 8172 	beq.w	8007aec <_dtoa_r+0xb4c>
 8007808:	2300      	movs	r3, #0
 800780a:	4629      	mov	r1, r5
 800780c:	220a      	movs	r2, #10
 800780e:	4658      	mov	r0, fp
 8007810:	f000 fa36 	bl	8007c80 <__multadd>
 8007814:	9b00      	ldr	r3, [sp, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	4605      	mov	r5, r0
 800781a:	dc67      	bgt.n	80078ec <_dtoa_r+0x94c>
 800781c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800781e:	2b02      	cmp	r3, #2
 8007820:	dc41      	bgt.n	80078a6 <_dtoa_r+0x906>
 8007822:	e063      	b.n	80078ec <_dtoa_r+0x94c>
 8007824:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007826:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800782a:	e746      	b.n	80076ba <_dtoa_r+0x71a>
 800782c:	9b07      	ldr	r3, [sp, #28]
 800782e:	1e5c      	subs	r4, r3, #1
 8007830:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007832:	42a3      	cmp	r3, r4
 8007834:	bfbf      	itttt	lt
 8007836:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007838:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800783a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800783c:	1ae3      	sublt	r3, r4, r3
 800783e:	bfb4      	ite	lt
 8007840:	18d2      	addlt	r2, r2, r3
 8007842:	1b1c      	subge	r4, r3, r4
 8007844:	9b07      	ldr	r3, [sp, #28]
 8007846:	bfbc      	itt	lt
 8007848:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800784a:	2400      	movlt	r4, #0
 800784c:	2b00      	cmp	r3, #0
 800784e:	bfb5      	itete	lt
 8007850:	eba8 0603 	sublt.w	r6, r8, r3
 8007854:	9b07      	ldrge	r3, [sp, #28]
 8007856:	2300      	movlt	r3, #0
 8007858:	4646      	movge	r6, r8
 800785a:	e730      	b.n	80076be <_dtoa_r+0x71e>
 800785c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800785e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007860:	4646      	mov	r6, r8
 8007862:	e735      	b.n	80076d0 <_dtoa_r+0x730>
 8007864:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007866:	e75c      	b.n	8007722 <_dtoa_r+0x782>
 8007868:	2300      	movs	r3, #0
 800786a:	e788      	b.n	800777e <_dtoa_r+0x7de>
 800786c:	3fe00000 	.word	0x3fe00000
 8007870:	40240000 	.word	0x40240000
 8007874:	40140000 	.word	0x40140000
 8007878:	9b02      	ldr	r3, [sp, #8]
 800787a:	e780      	b.n	800777e <_dtoa_r+0x7de>
 800787c:	2300      	movs	r3, #0
 800787e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007880:	e782      	b.n	8007788 <_dtoa_r+0x7e8>
 8007882:	d099      	beq.n	80077b8 <_dtoa_r+0x818>
 8007884:	9a08      	ldr	r2, [sp, #32]
 8007886:	331c      	adds	r3, #28
 8007888:	441a      	add	r2, r3
 800788a:	4498      	add	r8, r3
 800788c:	441e      	add	r6, r3
 800788e:	9208      	str	r2, [sp, #32]
 8007890:	e792      	b.n	80077b8 <_dtoa_r+0x818>
 8007892:	4603      	mov	r3, r0
 8007894:	e7f6      	b.n	8007884 <_dtoa_r+0x8e4>
 8007896:	9b07      	ldr	r3, [sp, #28]
 8007898:	9704      	str	r7, [sp, #16]
 800789a:	2b00      	cmp	r3, #0
 800789c:	dc20      	bgt.n	80078e0 <_dtoa_r+0x940>
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	dd1e      	ble.n	80078e4 <_dtoa_r+0x944>
 80078a6:	9b00      	ldr	r3, [sp, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f47f aec0 	bne.w	800762e <_dtoa_r+0x68e>
 80078ae:	4621      	mov	r1, r4
 80078b0:	2205      	movs	r2, #5
 80078b2:	4658      	mov	r0, fp
 80078b4:	f000 f9e4 	bl	8007c80 <__multadd>
 80078b8:	4601      	mov	r1, r0
 80078ba:	4604      	mov	r4, r0
 80078bc:	4648      	mov	r0, r9
 80078be:	f000 fbf7 	bl	80080b0 <__mcmp>
 80078c2:	2800      	cmp	r0, #0
 80078c4:	f77f aeb3 	ble.w	800762e <_dtoa_r+0x68e>
 80078c8:	4656      	mov	r6, sl
 80078ca:	2331      	movs	r3, #49	@ 0x31
 80078cc:	f806 3b01 	strb.w	r3, [r6], #1
 80078d0:	9b04      	ldr	r3, [sp, #16]
 80078d2:	3301      	adds	r3, #1
 80078d4:	9304      	str	r3, [sp, #16]
 80078d6:	e6ae      	b.n	8007636 <_dtoa_r+0x696>
 80078d8:	9c07      	ldr	r4, [sp, #28]
 80078da:	9704      	str	r7, [sp, #16]
 80078dc:	4625      	mov	r5, r4
 80078de:	e7f3      	b.n	80078c8 <_dtoa_r+0x928>
 80078e0:	9b07      	ldr	r3, [sp, #28]
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 8104 	beq.w	8007af4 <_dtoa_r+0xb54>
 80078ec:	2e00      	cmp	r6, #0
 80078ee:	dd05      	ble.n	80078fc <_dtoa_r+0x95c>
 80078f0:	4629      	mov	r1, r5
 80078f2:	4632      	mov	r2, r6
 80078f4:	4658      	mov	r0, fp
 80078f6:	f000 fb6f 	bl	8007fd8 <__lshift>
 80078fa:	4605      	mov	r5, r0
 80078fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d05a      	beq.n	80079b8 <_dtoa_r+0xa18>
 8007902:	6869      	ldr	r1, [r5, #4]
 8007904:	4658      	mov	r0, fp
 8007906:	f000 f959 	bl	8007bbc <_Balloc>
 800790a:	4606      	mov	r6, r0
 800790c:	b928      	cbnz	r0, 800791a <_dtoa_r+0x97a>
 800790e:	4b84      	ldr	r3, [pc, #528]	@ (8007b20 <_dtoa_r+0xb80>)
 8007910:	4602      	mov	r2, r0
 8007912:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007916:	f7ff bb5a 	b.w	8006fce <_dtoa_r+0x2e>
 800791a:	692a      	ldr	r2, [r5, #16]
 800791c:	3202      	adds	r2, #2
 800791e:	0092      	lsls	r2, r2, #2
 8007920:	f105 010c 	add.w	r1, r5, #12
 8007924:	300c      	adds	r0, #12
 8007926:	f001 f8d1 	bl	8008acc <memcpy>
 800792a:	2201      	movs	r2, #1
 800792c:	4631      	mov	r1, r6
 800792e:	4658      	mov	r0, fp
 8007930:	f000 fb52 	bl	8007fd8 <__lshift>
 8007934:	f10a 0301 	add.w	r3, sl, #1
 8007938:	9307      	str	r3, [sp, #28]
 800793a:	9b00      	ldr	r3, [sp, #0]
 800793c:	4453      	add	r3, sl
 800793e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007940:	9b02      	ldr	r3, [sp, #8]
 8007942:	f003 0301 	and.w	r3, r3, #1
 8007946:	462f      	mov	r7, r5
 8007948:	930a      	str	r3, [sp, #40]	@ 0x28
 800794a:	4605      	mov	r5, r0
 800794c:	9b07      	ldr	r3, [sp, #28]
 800794e:	4621      	mov	r1, r4
 8007950:	3b01      	subs	r3, #1
 8007952:	4648      	mov	r0, r9
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	f7ff fa99 	bl	8006e8c <quorem>
 800795a:	4639      	mov	r1, r7
 800795c:	9002      	str	r0, [sp, #8]
 800795e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007962:	4648      	mov	r0, r9
 8007964:	f000 fba4 	bl	80080b0 <__mcmp>
 8007968:	462a      	mov	r2, r5
 800796a:	9008      	str	r0, [sp, #32]
 800796c:	4621      	mov	r1, r4
 800796e:	4658      	mov	r0, fp
 8007970:	f000 fbba 	bl	80080e8 <__mdiff>
 8007974:	68c2      	ldr	r2, [r0, #12]
 8007976:	4606      	mov	r6, r0
 8007978:	bb02      	cbnz	r2, 80079bc <_dtoa_r+0xa1c>
 800797a:	4601      	mov	r1, r0
 800797c:	4648      	mov	r0, r9
 800797e:	f000 fb97 	bl	80080b0 <__mcmp>
 8007982:	4602      	mov	r2, r0
 8007984:	4631      	mov	r1, r6
 8007986:	4658      	mov	r0, fp
 8007988:	920e      	str	r2, [sp, #56]	@ 0x38
 800798a:	f000 f957 	bl	8007c3c <_Bfree>
 800798e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007990:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007992:	9e07      	ldr	r6, [sp, #28]
 8007994:	ea43 0102 	orr.w	r1, r3, r2
 8007998:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800799a:	4319      	orrs	r1, r3
 800799c:	d110      	bne.n	80079c0 <_dtoa_r+0xa20>
 800799e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80079a2:	d029      	beq.n	80079f8 <_dtoa_r+0xa58>
 80079a4:	9b08      	ldr	r3, [sp, #32]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	dd02      	ble.n	80079b0 <_dtoa_r+0xa10>
 80079aa:	9b02      	ldr	r3, [sp, #8]
 80079ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80079b0:	9b00      	ldr	r3, [sp, #0]
 80079b2:	f883 8000 	strb.w	r8, [r3]
 80079b6:	e63f      	b.n	8007638 <_dtoa_r+0x698>
 80079b8:	4628      	mov	r0, r5
 80079ba:	e7bb      	b.n	8007934 <_dtoa_r+0x994>
 80079bc:	2201      	movs	r2, #1
 80079be:	e7e1      	b.n	8007984 <_dtoa_r+0x9e4>
 80079c0:	9b08      	ldr	r3, [sp, #32]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	db04      	blt.n	80079d0 <_dtoa_r+0xa30>
 80079c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80079c8:	430b      	orrs	r3, r1
 80079ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80079cc:	430b      	orrs	r3, r1
 80079ce:	d120      	bne.n	8007a12 <_dtoa_r+0xa72>
 80079d0:	2a00      	cmp	r2, #0
 80079d2:	dded      	ble.n	80079b0 <_dtoa_r+0xa10>
 80079d4:	4649      	mov	r1, r9
 80079d6:	2201      	movs	r2, #1
 80079d8:	4658      	mov	r0, fp
 80079da:	f000 fafd 	bl	8007fd8 <__lshift>
 80079de:	4621      	mov	r1, r4
 80079e0:	4681      	mov	r9, r0
 80079e2:	f000 fb65 	bl	80080b0 <__mcmp>
 80079e6:	2800      	cmp	r0, #0
 80079e8:	dc03      	bgt.n	80079f2 <_dtoa_r+0xa52>
 80079ea:	d1e1      	bne.n	80079b0 <_dtoa_r+0xa10>
 80079ec:	f018 0f01 	tst.w	r8, #1
 80079f0:	d0de      	beq.n	80079b0 <_dtoa_r+0xa10>
 80079f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80079f6:	d1d8      	bne.n	80079aa <_dtoa_r+0xa0a>
 80079f8:	9a00      	ldr	r2, [sp, #0]
 80079fa:	2339      	movs	r3, #57	@ 0x39
 80079fc:	7013      	strb	r3, [r2, #0]
 80079fe:	4633      	mov	r3, r6
 8007a00:	461e      	mov	r6, r3
 8007a02:	3b01      	subs	r3, #1
 8007a04:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007a08:	2a39      	cmp	r2, #57	@ 0x39
 8007a0a:	d052      	beq.n	8007ab2 <_dtoa_r+0xb12>
 8007a0c:	3201      	adds	r2, #1
 8007a0e:	701a      	strb	r2, [r3, #0]
 8007a10:	e612      	b.n	8007638 <_dtoa_r+0x698>
 8007a12:	2a00      	cmp	r2, #0
 8007a14:	dd07      	ble.n	8007a26 <_dtoa_r+0xa86>
 8007a16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a1a:	d0ed      	beq.n	80079f8 <_dtoa_r+0xa58>
 8007a1c:	9a00      	ldr	r2, [sp, #0]
 8007a1e:	f108 0301 	add.w	r3, r8, #1
 8007a22:	7013      	strb	r3, [r2, #0]
 8007a24:	e608      	b.n	8007638 <_dtoa_r+0x698>
 8007a26:	9b07      	ldr	r3, [sp, #28]
 8007a28:	9a07      	ldr	r2, [sp, #28]
 8007a2a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007a2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d028      	beq.n	8007a86 <_dtoa_r+0xae6>
 8007a34:	4649      	mov	r1, r9
 8007a36:	2300      	movs	r3, #0
 8007a38:	220a      	movs	r2, #10
 8007a3a:	4658      	mov	r0, fp
 8007a3c:	f000 f920 	bl	8007c80 <__multadd>
 8007a40:	42af      	cmp	r7, r5
 8007a42:	4681      	mov	r9, r0
 8007a44:	f04f 0300 	mov.w	r3, #0
 8007a48:	f04f 020a 	mov.w	r2, #10
 8007a4c:	4639      	mov	r1, r7
 8007a4e:	4658      	mov	r0, fp
 8007a50:	d107      	bne.n	8007a62 <_dtoa_r+0xac2>
 8007a52:	f000 f915 	bl	8007c80 <__multadd>
 8007a56:	4607      	mov	r7, r0
 8007a58:	4605      	mov	r5, r0
 8007a5a:	9b07      	ldr	r3, [sp, #28]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	9307      	str	r3, [sp, #28]
 8007a60:	e774      	b.n	800794c <_dtoa_r+0x9ac>
 8007a62:	f000 f90d 	bl	8007c80 <__multadd>
 8007a66:	4629      	mov	r1, r5
 8007a68:	4607      	mov	r7, r0
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	220a      	movs	r2, #10
 8007a6e:	4658      	mov	r0, fp
 8007a70:	f000 f906 	bl	8007c80 <__multadd>
 8007a74:	4605      	mov	r5, r0
 8007a76:	e7f0      	b.n	8007a5a <_dtoa_r+0xaba>
 8007a78:	9b00      	ldr	r3, [sp, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	bfcc      	ite	gt
 8007a7e:	461e      	movgt	r6, r3
 8007a80:	2601      	movle	r6, #1
 8007a82:	4456      	add	r6, sl
 8007a84:	2700      	movs	r7, #0
 8007a86:	4649      	mov	r1, r9
 8007a88:	2201      	movs	r2, #1
 8007a8a:	4658      	mov	r0, fp
 8007a8c:	f000 faa4 	bl	8007fd8 <__lshift>
 8007a90:	4621      	mov	r1, r4
 8007a92:	4681      	mov	r9, r0
 8007a94:	f000 fb0c 	bl	80080b0 <__mcmp>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	dcb0      	bgt.n	80079fe <_dtoa_r+0xa5e>
 8007a9c:	d102      	bne.n	8007aa4 <_dtoa_r+0xb04>
 8007a9e:	f018 0f01 	tst.w	r8, #1
 8007aa2:	d1ac      	bne.n	80079fe <_dtoa_r+0xa5e>
 8007aa4:	4633      	mov	r3, r6
 8007aa6:	461e      	mov	r6, r3
 8007aa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007aac:	2a30      	cmp	r2, #48	@ 0x30
 8007aae:	d0fa      	beq.n	8007aa6 <_dtoa_r+0xb06>
 8007ab0:	e5c2      	b.n	8007638 <_dtoa_r+0x698>
 8007ab2:	459a      	cmp	sl, r3
 8007ab4:	d1a4      	bne.n	8007a00 <_dtoa_r+0xa60>
 8007ab6:	9b04      	ldr	r3, [sp, #16]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	9304      	str	r3, [sp, #16]
 8007abc:	2331      	movs	r3, #49	@ 0x31
 8007abe:	f88a 3000 	strb.w	r3, [sl]
 8007ac2:	e5b9      	b.n	8007638 <_dtoa_r+0x698>
 8007ac4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007ac6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007b24 <_dtoa_r+0xb84>
 8007aca:	b11b      	cbz	r3, 8007ad4 <_dtoa_r+0xb34>
 8007acc:	f10a 0308 	add.w	r3, sl, #8
 8007ad0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007ad2:	6013      	str	r3, [r2, #0]
 8007ad4:	4650      	mov	r0, sl
 8007ad6:	b019      	add	sp, #100	@ 0x64
 8007ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007adc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	f77f ae37 	ble.w	8007752 <_dtoa_r+0x7b2>
 8007ae4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ae6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ae8:	2001      	movs	r0, #1
 8007aea:	e655      	b.n	8007798 <_dtoa_r+0x7f8>
 8007aec:	9b00      	ldr	r3, [sp, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f77f aed6 	ble.w	80078a0 <_dtoa_r+0x900>
 8007af4:	4656      	mov	r6, sl
 8007af6:	4621      	mov	r1, r4
 8007af8:	4648      	mov	r0, r9
 8007afa:	f7ff f9c7 	bl	8006e8c <quorem>
 8007afe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007b02:	f806 8b01 	strb.w	r8, [r6], #1
 8007b06:	9b00      	ldr	r3, [sp, #0]
 8007b08:	eba6 020a 	sub.w	r2, r6, sl
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	ddb3      	ble.n	8007a78 <_dtoa_r+0xad8>
 8007b10:	4649      	mov	r1, r9
 8007b12:	2300      	movs	r3, #0
 8007b14:	220a      	movs	r2, #10
 8007b16:	4658      	mov	r0, fp
 8007b18:	f000 f8b2 	bl	8007c80 <__multadd>
 8007b1c:	4681      	mov	r9, r0
 8007b1e:	e7ea      	b.n	8007af6 <_dtoa_r+0xb56>
 8007b20:	0800913a 	.word	0x0800913a
 8007b24:	080090d5 	.word	0x080090d5

08007b28 <_free_r>:
 8007b28:	b538      	push	{r3, r4, r5, lr}
 8007b2a:	4605      	mov	r5, r0
 8007b2c:	2900      	cmp	r1, #0
 8007b2e:	d041      	beq.n	8007bb4 <_free_r+0x8c>
 8007b30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b34:	1f0c      	subs	r4, r1, #4
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	bfb8      	it	lt
 8007b3a:	18e4      	addlt	r4, r4, r3
 8007b3c:	f7fe faec 	bl	8006118 <__malloc_lock>
 8007b40:	4a1d      	ldr	r2, [pc, #116]	@ (8007bb8 <_free_r+0x90>)
 8007b42:	6813      	ldr	r3, [r2, #0]
 8007b44:	b933      	cbnz	r3, 8007b54 <_free_r+0x2c>
 8007b46:	6063      	str	r3, [r4, #4]
 8007b48:	6014      	str	r4, [r2, #0]
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b50:	f7fe bae8 	b.w	8006124 <__malloc_unlock>
 8007b54:	42a3      	cmp	r3, r4
 8007b56:	d908      	bls.n	8007b6a <_free_r+0x42>
 8007b58:	6820      	ldr	r0, [r4, #0]
 8007b5a:	1821      	adds	r1, r4, r0
 8007b5c:	428b      	cmp	r3, r1
 8007b5e:	bf01      	itttt	eq
 8007b60:	6819      	ldreq	r1, [r3, #0]
 8007b62:	685b      	ldreq	r3, [r3, #4]
 8007b64:	1809      	addeq	r1, r1, r0
 8007b66:	6021      	streq	r1, [r4, #0]
 8007b68:	e7ed      	b.n	8007b46 <_free_r+0x1e>
 8007b6a:	461a      	mov	r2, r3
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	b10b      	cbz	r3, 8007b74 <_free_r+0x4c>
 8007b70:	42a3      	cmp	r3, r4
 8007b72:	d9fa      	bls.n	8007b6a <_free_r+0x42>
 8007b74:	6811      	ldr	r1, [r2, #0]
 8007b76:	1850      	adds	r0, r2, r1
 8007b78:	42a0      	cmp	r0, r4
 8007b7a:	d10b      	bne.n	8007b94 <_free_r+0x6c>
 8007b7c:	6820      	ldr	r0, [r4, #0]
 8007b7e:	4401      	add	r1, r0
 8007b80:	1850      	adds	r0, r2, r1
 8007b82:	4283      	cmp	r3, r0
 8007b84:	6011      	str	r1, [r2, #0]
 8007b86:	d1e0      	bne.n	8007b4a <_free_r+0x22>
 8007b88:	6818      	ldr	r0, [r3, #0]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	6053      	str	r3, [r2, #4]
 8007b8e:	4408      	add	r0, r1
 8007b90:	6010      	str	r0, [r2, #0]
 8007b92:	e7da      	b.n	8007b4a <_free_r+0x22>
 8007b94:	d902      	bls.n	8007b9c <_free_r+0x74>
 8007b96:	230c      	movs	r3, #12
 8007b98:	602b      	str	r3, [r5, #0]
 8007b9a:	e7d6      	b.n	8007b4a <_free_r+0x22>
 8007b9c:	6820      	ldr	r0, [r4, #0]
 8007b9e:	1821      	adds	r1, r4, r0
 8007ba0:	428b      	cmp	r3, r1
 8007ba2:	bf04      	itt	eq
 8007ba4:	6819      	ldreq	r1, [r3, #0]
 8007ba6:	685b      	ldreq	r3, [r3, #4]
 8007ba8:	6063      	str	r3, [r4, #4]
 8007baa:	bf04      	itt	eq
 8007bac:	1809      	addeq	r1, r1, r0
 8007bae:	6021      	streq	r1, [r4, #0]
 8007bb0:	6054      	str	r4, [r2, #4]
 8007bb2:	e7ca      	b.n	8007b4a <_free_r+0x22>
 8007bb4:	bd38      	pop	{r3, r4, r5, pc}
 8007bb6:	bf00      	nop
 8007bb8:	20001c48 	.word	0x20001c48

08007bbc <_Balloc>:
 8007bbc:	b570      	push	{r4, r5, r6, lr}
 8007bbe:	69c6      	ldr	r6, [r0, #28]
 8007bc0:	4604      	mov	r4, r0
 8007bc2:	460d      	mov	r5, r1
 8007bc4:	b976      	cbnz	r6, 8007be4 <_Balloc+0x28>
 8007bc6:	2010      	movs	r0, #16
 8007bc8:	f7fe f9f4 	bl	8005fb4 <malloc>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	61e0      	str	r0, [r4, #28]
 8007bd0:	b920      	cbnz	r0, 8007bdc <_Balloc+0x20>
 8007bd2:	4b18      	ldr	r3, [pc, #96]	@ (8007c34 <_Balloc+0x78>)
 8007bd4:	4818      	ldr	r0, [pc, #96]	@ (8007c38 <_Balloc+0x7c>)
 8007bd6:	216b      	movs	r1, #107	@ 0x6b
 8007bd8:	f7ff f93a 	bl	8006e50 <__assert_func>
 8007bdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007be0:	6006      	str	r6, [r0, #0]
 8007be2:	60c6      	str	r6, [r0, #12]
 8007be4:	69e6      	ldr	r6, [r4, #28]
 8007be6:	68f3      	ldr	r3, [r6, #12]
 8007be8:	b183      	cbz	r3, 8007c0c <_Balloc+0x50>
 8007bea:	69e3      	ldr	r3, [r4, #28]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007bf2:	b9b8      	cbnz	r0, 8007c24 <_Balloc+0x68>
 8007bf4:	2101      	movs	r1, #1
 8007bf6:	fa01 f605 	lsl.w	r6, r1, r5
 8007bfa:	1d72      	adds	r2, r6, #5
 8007bfc:	0092      	lsls	r2, r2, #2
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f7fe f9c4 	bl	8005f8c <_calloc_r>
 8007c04:	b160      	cbz	r0, 8007c20 <_Balloc+0x64>
 8007c06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c0a:	e00e      	b.n	8007c2a <_Balloc+0x6e>
 8007c0c:	2221      	movs	r2, #33	@ 0x21
 8007c0e:	2104      	movs	r1, #4
 8007c10:	4620      	mov	r0, r4
 8007c12:	f7fe f9bb 	bl	8005f8c <_calloc_r>
 8007c16:	69e3      	ldr	r3, [r4, #28]
 8007c18:	60f0      	str	r0, [r6, #12]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1e4      	bne.n	8007bea <_Balloc+0x2e>
 8007c20:	2000      	movs	r0, #0
 8007c22:	bd70      	pop	{r4, r5, r6, pc}
 8007c24:	6802      	ldr	r2, [r0, #0]
 8007c26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c30:	e7f7      	b.n	8007c22 <_Balloc+0x66>
 8007c32:	bf00      	nop
 8007c34:	08009028 	.word	0x08009028
 8007c38:	0800914b 	.word	0x0800914b

08007c3c <_Bfree>:
 8007c3c:	b570      	push	{r4, r5, r6, lr}
 8007c3e:	69c6      	ldr	r6, [r0, #28]
 8007c40:	4605      	mov	r5, r0
 8007c42:	460c      	mov	r4, r1
 8007c44:	b976      	cbnz	r6, 8007c64 <_Bfree+0x28>
 8007c46:	2010      	movs	r0, #16
 8007c48:	f7fe f9b4 	bl	8005fb4 <malloc>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	61e8      	str	r0, [r5, #28]
 8007c50:	b920      	cbnz	r0, 8007c5c <_Bfree+0x20>
 8007c52:	4b09      	ldr	r3, [pc, #36]	@ (8007c78 <_Bfree+0x3c>)
 8007c54:	4809      	ldr	r0, [pc, #36]	@ (8007c7c <_Bfree+0x40>)
 8007c56:	218f      	movs	r1, #143	@ 0x8f
 8007c58:	f7ff f8fa 	bl	8006e50 <__assert_func>
 8007c5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c60:	6006      	str	r6, [r0, #0]
 8007c62:	60c6      	str	r6, [r0, #12]
 8007c64:	b13c      	cbz	r4, 8007c76 <_Bfree+0x3a>
 8007c66:	69eb      	ldr	r3, [r5, #28]
 8007c68:	6862      	ldr	r2, [r4, #4]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c70:	6021      	str	r1, [r4, #0]
 8007c72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c76:	bd70      	pop	{r4, r5, r6, pc}
 8007c78:	08009028 	.word	0x08009028
 8007c7c:	0800914b 	.word	0x0800914b

08007c80 <__multadd>:
 8007c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c84:	690d      	ldr	r5, [r1, #16]
 8007c86:	4607      	mov	r7, r0
 8007c88:	460c      	mov	r4, r1
 8007c8a:	461e      	mov	r6, r3
 8007c8c:	f101 0c14 	add.w	ip, r1, #20
 8007c90:	2000      	movs	r0, #0
 8007c92:	f8dc 3000 	ldr.w	r3, [ip]
 8007c96:	b299      	uxth	r1, r3
 8007c98:	fb02 6101 	mla	r1, r2, r1, r6
 8007c9c:	0c1e      	lsrs	r6, r3, #16
 8007c9e:	0c0b      	lsrs	r3, r1, #16
 8007ca0:	fb02 3306 	mla	r3, r2, r6, r3
 8007ca4:	b289      	uxth	r1, r1
 8007ca6:	3001      	adds	r0, #1
 8007ca8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007cac:	4285      	cmp	r5, r0
 8007cae:	f84c 1b04 	str.w	r1, [ip], #4
 8007cb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007cb6:	dcec      	bgt.n	8007c92 <__multadd+0x12>
 8007cb8:	b30e      	cbz	r6, 8007cfe <__multadd+0x7e>
 8007cba:	68a3      	ldr	r3, [r4, #8]
 8007cbc:	42ab      	cmp	r3, r5
 8007cbe:	dc19      	bgt.n	8007cf4 <__multadd+0x74>
 8007cc0:	6861      	ldr	r1, [r4, #4]
 8007cc2:	4638      	mov	r0, r7
 8007cc4:	3101      	adds	r1, #1
 8007cc6:	f7ff ff79 	bl	8007bbc <_Balloc>
 8007cca:	4680      	mov	r8, r0
 8007ccc:	b928      	cbnz	r0, 8007cda <__multadd+0x5a>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8007d04 <__multadd+0x84>)
 8007cd2:	480d      	ldr	r0, [pc, #52]	@ (8007d08 <__multadd+0x88>)
 8007cd4:	21ba      	movs	r1, #186	@ 0xba
 8007cd6:	f7ff f8bb 	bl	8006e50 <__assert_func>
 8007cda:	6922      	ldr	r2, [r4, #16]
 8007cdc:	3202      	adds	r2, #2
 8007cde:	f104 010c 	add.w	r1, r4, #12
 8007ce2:	0092      	lsls	r2, r2, #2
 8007ce4:	300c      	adds	r0, #12
 8007ce6:	f000 fef1 	bl	8008acc <memcpy>
 8007cea:	4621      	mov	r1, r4
 8007cec:	4638      	mov	r0, r7
 8007cee:	f7ff ffa5 	bl	8007c3c <_Bfree>
 8007cf2:	4644      	mov	r4, r8
 8007cf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007cf8:	3501      	adds	r5, #1
 8007cfa:	615e      	str	r6, [r3, #20]
 8007cfc:	6125      	str	r5, [r4, #16]
 8007cfe:	4620      	mov	r0, r4
 8007d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d04:	0800913a 	.word	0x0800913a
 8007d08:	0800914b 	.word	0x0800914b

08007d0c <__hi0bits>:
 8007d0c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007d10:	4603      	mov	r3, r0
 8007d12:	bf36      	itet	cc
 8007d14:	0403      	lslcc	r3, r0, #16
 8007d16:	2000      	movcs	r0, #0
 8007d18:	2010      	movcc	r0, #16
 8007d1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d1e:	bf3c      	itt	cc
 8007d20:	021b      	lslcc	r3, r3, #8
 8007d22:	3008      	addcc	r0, #8
 8007d24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007d28:	bf3c      	itt	cc
 8007d2a:	011b      	lslcc	r3, r3, #4
 8007d2c:	3004      	addcc	r0, #4
 8007d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d32:	bf3c      	itt	cc
 8007d34:	009b      	lslcc	r3, r3, #2
 8007d36:	3002      	addcc	r0, #2
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	db05      	blt.n	8007d48 <__hi0bits+0x3c>
 8007d3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007d40:	f100 0001 	add.w	r0, r0, #1
 8007d44:	bf08      	it	eq
 8007d46:	2020      	moveq	r0, #32
 8007d48:	4770      	bx	lr

08007d4a <__lo0bits>:
 8007d4a:	6803      	ldr	r3, [r0, #0]
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	f013 0007 	ands.w	r0, r3, #7
 8007d52:	d00b      	beq.n	8007d6c <__lo0bits+0x22>
 8007d54:	07d9      	lsls	r1, r3, #31
 8007d56:	d421      	bmi.n	8007d9c <__lo0bits+0x52>
 8007d58:	0798      	lsls	r0, r3, #30
 8007d5a:	bf49      	itett	mi
 8007d5c:	085b      	lsrmi	r3, r3, #1
 8007d5e:	089b      	lsrpl	r3, r3, #2
 8007d60:	2001      	movmi	r0, #1
 8007d62:	6013      	strmi	r3, [r2, #0]
 8007d64:	bf5c      	itt	pl
 8007d66:	6013      	strpl	r3, [r2, #0]
 8007d68:	2002      	movpl	r0, #2
 8007d6a:	4770      	bx	lr
 8007d6c:	b299      	uxth	r1, r3
 8007d6e:	b909      	cbnz	r1, 8007d74 <__lo0bits+0x2a>
 8007d70:	0c1b      	lsrs	r3, r3, #16
 8007d72:	2010      	movs	r0, #16
 8007d74:	b2d9      	uxtb	r1, r3
 8007d76:	b909      	cbnz	r1, 8007d7c <__lo0bits+0x32>
 8007d78:	3008      	adds	r0, #8
 8007d7a:	0a1b      	lsrs	r3, r3, #8
 8007d7c:	0719      	lsls	r1, r3, #28
 8007d7e:	bf04      	itt	eq
 8007d80:	091b      	lsreq	r3, r3, #4
 8007d82:	3004      	addeq	r0, #4
 8007d84:	0799      	lsls	r1, r3, #30
 8007d86:	bf04      	itt	eq
 8007d88:	089b      	lsreq	r3, r3, #2
 8007d8a:	3002      	addeq	r0, #2
 8007d8c:	07d9      	lsls	r1, r3, #31
 8007d8e:	d403      	bmi.n	8007d98 <__lo0bits+0x4e>
 8007d90:	085b      	lsrs	r3, r3, #1
 8007d92:	f100 0001 	add.w	r0, r0, #1
 8007d96:	d003      	beq.n	8007da0 <__lo0bits+0x56>
 8007d98:	6013      	str	r3, [r2, #0]
 8007d9a:	4770      	bx	lr
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	4770      	bx	lr
 8007da0:	2020      	movs	r0, #32
 8007da2:	4770      	bx	lr

08007da4 <__i2b>:
 8007da4:	b510      	push	{r4, lr}
 8007da6:	460c      	mov	r4, r1
 8007da8:	2101      	movs	r1, #1
 8007daa:	f7ff ff07 	bl	8007bbc <_Balloc>
 8007dae:	4602      	mov	r2, r0
 8007db0:	b928      	cbnz	r0, 8007dbe <__i2b+0x1a>
 8007db2:	4b05      	ldr	r3, [pc, #20]	@ (8007dc8 <__i2b+0x24>)
 8007db4:	4805      	ldr	r0, [pc, #20]	@ (8007dcc <__i2b+0x28>)
 8007db6:	f240 1145 	movw	r1, #325	@ 0x145
 8007dba:	f7ff f849 	bl	8006e50 <__assert_func>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	6144      	str	r4, [r0, #20]
 8007dc2:	6103      	str	r3, [r0, #16]
 8007dc4:	bd10      	pop	{r4, pc}
 8007dc6:	bf00      	nop
 8007dc8:	0800913a 	.word	0x0800913a
 8007dcc:	0800914b 	.word	0x0800914b

08007dd0 <__multiply>:
 8007dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd4:	4614      	mov	r4, r2
 8007dd6:	690a      	ldr	r2, [r1, #16]
 8007dd8:	6923      	ldr	r3, [r4, #16]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	bfa8      	it	ge
 8007dde:	4623      	movge	r3, r4
 8007de0:	460f      	mov	r7, r1
 8007de2:	bfa4      	itt	ge
 8007de4:	460c      	movge	r4, r1
 8007de6:	461f      	movge	r7, r3
 8007de8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007dec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007df0:	68a3      	ldr	r3, [r4, #8]
 8007df2:	6861      	ldr	r1, [r4, #4]
 8007df4:	eb0a 0609 	add.w	r6, sl, r9
 8007df8:	42b3      	cmp	r3, r6
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	bfb8      	it	lt
 8007dfe:	3101      	addlt	r1, #1
 8007e00:	f7ff fedc 	bl	8007bbc <_Balloc>
 8007e04:	b930      	cbnz	r0, 8007e14 <__multiply+0x44>
 8007e06:	4602      	mov	r2, r0
 8007e08:	4b44      	ldr	r3, [pc, #272]	@ (8007f1c <__multiply+0x14c>)
 8007e0a:	4845      	ldr	r0, [pc, #276]	@ (8007f20 <__multiply+0x150>)
 8007e0c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007e10:	f7ff f81e 	bl	8006e50 <__assert_func>
 8007e14:	f100 0514 	add.w	r5, r0, #20
 8007e18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e1c:	462b      	mov	r3, r5
 8007e1e:	2200      	movs	r2, #0
 8007e20:	4543      	cmp	r3, r8
 8007e22:	d321      	bcc.n	8007e68 <__multiply+0x98>
 8007e24:	f107 0114 	add.w	r1, r7, #20
 8007e28:	f104 0214 	add.w	r2, r4, #20
 8007e2c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007e30:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007e34:	9302      	str	r3, [sp, #8]
 8007e36:	1b13      	subs	r3, r2, r4
 8007e38:	3b15      	subs	r3, #21
 8007e3a:	f023 0303 	bic.w	r3, r3, #3
 8007e3e:	3304      	adds	r3, #4
 8007e40:	f104 0715 	add.w	r7, r4, #21
 8007e44:	42ba      	cmp	r2, r7
 8007e46:	bf38      	it	cc
 8007e48:	2304      	movcc	r3, #4
 8007e4a:	9301      	str	r3, [sp, #4]
 8007e4c:	9b02      	ldr	r3, [sp, #8]
 8007e4e:	9103      	str	r1, [sp, #12]
 8007e50:	428b      	cmp	r3, r1
 8007e52:	d80c      	bhi.n	8007e6e <__multiply+0x9e>
 8007e54:	2e00      	cmp	r6, #0
 8007e56:	dd03      	ble.n	8007e60 <__multiply+0x90>
 8007e58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d05b      	beq.n	8007f18 <__multiply+0x148>
 8007e60:	6106      	str	r6, [r0, #16]
 8007e62:	b005      	add	sp, #20
 8007e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e68:	f843 2b04 	str.w	r2, [r3], #4
 8007e6c:	e7d8      	b.n	8007e20 <__multiply+0x50>
 8007e6e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007e72:	f1ba 0f00 	cmp.w	sl, #0
 8007e76:	d024      	beq.n	8007ec2 <__multiply+0xf2>
 8007e78:	f104 0e14 	add.w	lr, r4, #20
 8007e7c:	46a9      	mov	r9, r5
 8007e7e:	f04f 0c00 	mov.w	ip, #0
 8007e82:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e86:	f8d9 3000 	ldr.w	r3, [r9]
 8007e8a:	fa1f fb87 	uxth.w	fp, r7
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	fb0a 330b 	mla	r3, sl, fp, r3
 8007e94:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007e98:	f8d9 7000 	ldr.w	r7, [r9]
 8007e9c:	4463      	add	r3, ip
 8007e9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ea2:	fb0a c70b 	mla	r7, sl, fp, ip
 8007ea6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007eb0:	4572      	cmp	r2, lr
 8007eb2:	f849 3b04 	str.w	r3, [r9], #4
 8007eb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007eba:	d8e2      	bhi.n	8007e82 <__multiply+0xb2>
 8007ebc:	9b01      	ldr	r3, [sp, #4]
 8007ebe:	f845 c003 	str.w	ip, [r5, r3]
 8007ec2:	9b03      	ldr	r3, [sp, #12]
 8007ec4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007ec8:	3104      	adds	r1, #4
 8007eca:	f1b9 0f00 	cmp.w	r9, #0
 8007ece:	d021      	beq.n	8007f14 <__multiply+0x144>
 8007ed0:	682b      	ldr	r3, [r5, #0]
 8007ed2:	f104 0c14 	add.w	ip, r4, #20
 8007ed6:	46ae      	mov	lr, r5
 8007ed8:	f04f 0a00 	mov.w	sl, #0
 8007edc:	f8bc b000 	ldrh.w	fp, [ip]
 8007ee0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007ee4:	fb09 770b 	mla	r7, r9, fp, r7
 8007ee8:	4457      	add	r7, sl
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ef0:	f84e 3b04 	str.w	r3, [lr], #4
 8007ef4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ef8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007efc:	f8be 3000 	ldrh.w	r3, [lr]
 8007f00:	fb09 330a 	mla	r3, r9, sl, r3
 8007f04:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007f08:	4562      	cmp	r2, ip
 8007f0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f0e:	d8e5      	bhi.n	8007edc <__multiply+0x10c>
 8007f10:	9f01      	ldr	r7, [sp, #4]
 8007f12:	51eb      	str	r3, [r5, r7]
 8007f14:	3504      	adds	r5, #4
 8007f16:	e799      	b.n	8007e4c <__multiply+0x7c>
 8007f18:	3e01      	subs	r6, #1
 8007f1a:	e79b      	b.n	8007e54 <__multiply+0x84>
 8007f1c:	0800913a 	.word	0x0800913a
 8007f20:	0800914b 	.word	0x0800914b

08007f24 <__pow5mult>:
 8007f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f28:	4615      	mov	r5, r2
 8007f2a:	f012 0203 	ands.w	r2, r2, #3
 8007f2e:	4607      	mov	r7, r0
 8007f30:	460e      	mov	r6, r1
 8007f32:	d007      	beq.n	8007f44 <__pow5mult+0x20>
 8007f34:	4c25      	ldr	r4, [pc, #148]	@ (8007fcc <__pow5mult+0xa8>)
 8007f36:	3a01      	subs	r2, #1
 8007f38:	2300      	movs	r3, #0
 8007f3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f3e:	f7ff fe9f 	bl	8007c80 <__multadd>
 8007f42:	4606      	mov	r6, r0
 8007f44:	10ad      	asrs	r5, r5, #2
 8007f46:	d03d      	beq.n	8007fc4 <__pow5mult+0xa0>
 8007f48:	69fc      	ldr	r4, [r7, #28]
 8007f4a:	b97c      	cbnz	r4, 8007f6c <__pow5mult+0x48>
 8007f4c:	2010      	movs	r0, #16
 8007f4e:	f7fe f831 	bl	8005fb4 <malloc>
 8007f52:	4602      	mov	r2, r0
 8007f54:	61f8      	str	r0, [r7, #28]
 8007f56:	b928      	cbnz	r0, 8007f64 <__pow5mult+0x40>
 8007f58:	4b1d      	ldr	r3, [pc, #116]	@ (8007fd0 <__pow5mult+0xac>)
 8007f5a:	481e      	ldr	r0, [pc, #120]	@ (8007fd4 <__pow5mult+0xb0>)
 8007f5c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007f60:	f7fe ff76 	bl	8006e50 <__assert_func>
 8007f64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f68:	6004      	str	r4, [r0, #0]
 8007f6a:	60c4      	str	r4, [r0, #12]
 8007f6c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007f70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f74:	b94c      	cbnz	r4, 8007f8a <__pow5mult+0x66>
 8007f76:	f240 2171 	movw	r1, #625	@ 0x271
 8007f7a:	4638      	mov	r0, r7
 8007f7c:	f7ff ff12 	bl	8007da4 <__i2b>
 8007f80:	2300      	movs	r3, #0
 8007f82:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f86:	4604      	mov	r4, r0
 8007f88:	6003      	str	r3, [r0, #0]
 8007f8a:	f04f 0900 	mov.w	r9, #0
 8007f8e:	07eb      	lsls	r3, r5, #31
 8007f90:	d50a      	bpl.n	8007fa8 <__pow5mult+0x84>
 8007f92:	4631      	mov	r1, r6
 8007f94:	4622      	mov	r2, r4
 8007f96:	4638      	mov	r0, r7
 8007f98:	f7ff ff1a 	bl	8007dd0 <__multiply>
 8007f9c:	4631      	mov	r1, r6
 8007f9e:	4680      	mov	r8, r0
 8007fa0:	4638      	mov	r0, r7
 8007fa2:	f7ff fe4b 	bl	8007c3c <_Bfree>
 8007fa6:	4646      	mov	r6, r8
 8007fa8:	106d      	asrs	r5, r5, #1
 8007faa:	d00b      	beq.n	8007fc4 <__pow5mult+0xa0>
 8007fac:	6820      	ldr	r0, [r4, #0]
 8007fae:	b938      	cbnz	r0, 8007fc0 <__pow5mult+0x9c>
 8007fb0:	4622      	mov	r2, r4
 8007fb2:	4621      	mov	r1, r4
 8007fb4:	4638      	mov	r0, r7
 8007fb6:	f7ff ff0b 	bl	8007dd0 <__multiply>
 8007fba:	6020      	str	r0, [r4, #0]
 8007fbc:	f8c0 9000 	str.w	r9, [r0]
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	e7e4      	b.n	8007f8e <__pow5mult+0x6a>
 8007fc4:	4630      	mov	r0, r6
 8007fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fca:	bf00      	nop
 8007fcc:	080091a4 	.word	0x080091a4
 8007fd0:	08009028 	.word	0x08009028
 8007fd4:	0800914b 	.word	0x0800914b

08007fd8 <__lshift>:
 8007fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fdc:	460c      	mov	r4, r1
 8007fde:	6849      	ldr	r1, [r1, #4]
 8007fe0:	6923      	ldr	r3, [r4, #16]
 8007fe2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007fe6:	68a3      	ldr	r3, [r4, #8]
 8007fe8:	4607      	mov	r7, r0
 8007fea:	4691      	mov	r9, r2
 8007fec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ff0:	f108 0601 	add.w	r6, r8, #1
 8007ff4:	42b3      	cmp	r3, r6
 8007ff6:	db0b      	blt.n	8008010 <__lshift+0x38>
 8007ff8:	4638      	mov	r0, r7
 8007ffa:	f7ff fddf 	bl	8007bbc <_Balloc>
 8007ffe:	4605      	mov	r5, r0
 8008000:	b948      	cbnz	r0, 8008016 <__lshift+0x3e>
 8008002:	4602      	mov	r2, r0
 8008004:	4b28      	ldr	r3, [pc, #160]	@ (80080a8 <__lshift+0xd0>)
 8008006:	4829      	ldr	r0, [pc, #164]	@ (80080ac <__lshift+0xd4>)
 8008008:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800800c:	f7fe ff20 	bl	8006e50 <__assert_func>
 8008010:	3101      	adds	r1, #1
 8008012:	005b      	lsls	r3, r3, #1
 8008014:	e7ee      	b.n	8007ff4 <__lshift+0x1c>
 8008016:	2300      	movs	r3, #0
 8008018:	f100 0114 	add.w	r1, r0, #20
 800801c:	f100 0210 	add.w	r2, r0, #16
 8008020:	4618      	mov	r0, r3
 8008022:	4553      	cmp	r3, sl
 8008024:	db33      	blt.n	800808e <__lshift+0xb6>
 8008026:	6920      	ldr	r0, [r4, #16]
 8008028:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800802c:	f104 0314 	add.w	r3, r4, #20
 8008030:	f019 091f 	ands.w	r9, r9, #31
 8008034:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008038:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800803c:	d02b      	beq.n	8008096 <__lshift+0xbe>
 800803e:	f1c9 0e20 	rsb	lr, r9, #32
 8008042:	468a      	mov	sl, r1
 8008044:	2200      	movs	r2, #0
 8008046:	6818      	ldr	r0, [r3, #0]
 8008048:	fa00 f009 	lsl.w	r0, r0, r9
 800804c:	4310      	orrs	r0, r2
 800804e:	f84a 0b04 	str.w	r0, [sl], #4
 8008052:	f853 2b04 	ldr.w	r2, [r3], #4
 8008056:	459c      	cmp	ip, r3
 8008058:	fa22 f20e 	lsr.w	r2, r2, lr
 800805c:	d8f3      	bhi.n	8008046 <__lshift+0x6e>
 800805e:	ebac 0304 	sub.w	r3, ip, r4
 8008062:	3b15      	subs	r3, #21
 8008064:	f023 0303 	bic.w	r3, r3, #3
 8008068:	3304      	adds	r3, #4
 800806a:	f104 0015 	add.w	r0, r4, #21
 800806e:	4584      	cmp	ip, r0
 8008070:	bf38      	it	cc
 8008072:	2304      	movcc	r3, #4
 8008074:	50ca      	str	r2, [r1, r3]
 8008076:	b10a      	cbz	r2, 800807c <__lshift+0xa4>
 8008078:	f108 0602 	add.w	r6, r8, #2
 800807c:	3e01      	subs	r6, #1
 800807e:	4638      	mov	r0, r7
 8008080:	612e      	str	r6, [r5, #16]
 8008082:	4621      	mov	r1, r4
 8008084:	f7ff fdda 	bl	8007c3c <_Bfree>
 8008088:	4628      	mov	r0, r5
 800808a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800808e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008092:	3301      	adds	r3, #1
 8008094:	e7c5      	b.n	8008022 <__lshift+0x4a>
 8008096:	3904      	subs	r1, #4
 8008098:	f853 2b04 	ldr.w	r2, [r3], #4
 800809c:	f841 2f04 	str.w	r2, [r1, #4]!
 80080a0:	459c      	cmp	ip, r3
 80080a2:	d8f9      	bhi.n	8008098 <__lshift+0xc0>
 80080a4:	e7ea      	b.n	800807c <__lshift+0xa4>
 80080a6:	bf00      	nop
 80080a8:	0800913a 	.word	0x0800913a
 80080ac:	0800914b 	.word	0x0800914b

080080b0 <__mcmp>:
 80080b0:	690a      	ldr	r2, [r1, #16]
 80080b2:	4603      	mov	r3, r0
 80080b4:	6900      	ldr	r0, [r0, #16]
 80080b6:	1a80      	subs	r0, r0, r2
 80080b8:	b530      	push	{r4, r5, lr}
 80080ba:	d10e      	bne.n	80080da <__mcmp+0x2a>
 80080bc:	3314      	adds	r3, #20
 80080be:	3114      	adds	r1, #20
 80080c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80080c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80080c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80080cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80080d0:	4295      	cmp	r5, r2
 80080d2:	d003      	beq.n	80080dc <__mcmp+0x2c>
 80080d4:	d205      	bcs.n	80080e2 <__mcmp+0x32>
 80080d6:	f04f 30ff 	mov.w	r0, #4294967295
 80080da:	bd30      	pop	{r4, r5, pc}
 80080dc:	42a3      	cmp	r3, r4
 80080de:	d3f3      	bcc.n	80080c8 <__mcmp+0x18>
 80080e0:	e7fb      	b.n	80080da <__mcmp+0x2a>
 80080e2:	2001      	movs	r0, #1
 80080e4:	e7f9      	b.n	80080da <__mcmp+0x2a>
	...

080080e8 <__mdiff>:
 80080e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ec:	4689      	mov	r9, r1
 80080ee:	4606      	mov	r6, r0
 80080f0:	4611      	mov	r1, r2
 80080f2:	4648      	mov	r0, r9
 80080f4:	4614      	mov	r4, r2
 80080f6:	f7ff ffdb 	bl	80080b0 <__mcmp>
 80080fa:	1e05      	subs	r5, r0, #0
 80080fc:	d112      	bne.n	8008124 <__mdiff+0x3c>
 80080fe:	4629      	mov	r1, r5
 8008100:	4630      	mov	r0, r6
 8008102:	f7ff fd5b 	bl	8007bbc <_Balloc>
 8008106:	4602      	mov	r2, r0
 8008108:	b928      	cbnz	r0, 8008116 <__mdiff+0x2e>
 800810a:	4b3f      	ldr	r3, [pc, #252]	@ (8008208 <__mdiff+0x120>)
 800810c:	f240 2137 	movw	r1, #567	@ 0x237
 8008110:	483e      	ldr	r0, [pc, #248]	@ (800820c <__mdiff+0x124>)
 8008112:	f7fe fe9d 	bl	8006e50 <__assert_func>
 8008116:	2301      	movs	r3, #1
 8008118:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800811c:	4610      	mov	r0, r2
 800811e:	b003      	add	sp, #12
 8008120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008124:	bfbc      	itt	lt
 8008126:	464b      	movlt	r3, r9
 8008128:	46a1      	movlt	r9, r4
 800812a:	4630      	mov	r0, r6
 800812c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008130:	bfba      	itte	lt
 8008132:	461c      	movlt	r4, r3
 8008134:	2501      	movlt	r5, #1
 8008136:	2500      	movge	r5, #0
 8008138:	f7ff fd40 	bl	8007bbc <_Balloc>
 800813c:	4602      	mov	r2, r0
 800813e:	b918      	cbnz	r0, 8008148 <__mdiff+0x60>
 8008140:	4b31      	ldr	r3, [pc, #196]	@ (8008208 <__mdiff+0x120>)
 8008142:	f240 2145 	movw	r1, #581	@ 0x245
 8008146:	e7e3      	b.n	8008110 <__mdiff+0x28>
 8008148:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800814c:	6926      	ldr	r6, [r4, #16]
 800814e:	60c5      	str	r5, [r0, #12]
 8008150:	f109 0310 	add.w	r3, r9, #16
 8008154:	f109 0514 	add.w	r5, r9, #20
 8008158:	f104 0e14 	add.w	lr, r4, #20
 800815c:	f100 0b14 	add.w	fp, r0, #20
 8008160:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008164:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008168:	9301      	str	r3, [sp, #4]
 800816a:	46d9      	mov	r9, fp
 800816c:	f04f 0c00 	mov.w	ip, #0
 8008170:	9b01      	ldr	r3, [sp, #4]
 8008172:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008176:	f853 af04 	ldr.w	sl, [r3, #4]!
 800817a:	9301      	str	r3, [sp, #4]
 800817c:	fa1f f38a 	uxth.w	r3, sl
 8008180:	4619      	mov	r1, r3
 8008182:	b283      	uxth	r3, r0
 8008184:	1acb      	subs	r3, r1, r3
 8008186:	0c00      	lsrs	r0, r0, #16
 8008188:	4463      	add	r3, ip
 800818a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800818e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008192:	b29b      	uxth	r3, r3
 8008194:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008198:	4576      	cmp	r6, lr
 800819a:	f849 3b04 	str.w	r3, [r9], #4
 800819e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80081a2:	d8e5      	bhi.n	8008170 <__mdiff+0x88>
 80081a4:	1b33      	subs	r3, r6, r4
 80081a6:	3b15      	subs	r3, #21
 80081a8:	f023 0303 	bic.w	r3, r3, #3
 80081ac:	3415      	adds	r4, #21
 80081ae:	3304      	adds	r3, #4
 80081b0:	42a6      	cmp	r6, r4
 80081b2:	bf38      	it	cc
 80081b4:	2304      	movcc	r3, #4
 80081b6:	441d      	add	r5, r3
 80081b8:	445b      	add	r3, fp
 80081ba:	461e      	mov	r6, r3
 80081bc:	462c      	mov	r4, r5
 80081be:	4544      	cmp	r4, r8
 80081c0:	d30e      	bcc.n	80081e0 <__mdiff+0xf8>
 80081c2:	f108 0103 	add.w	r1, r8, #3
 80081c6:	1b49      	subs	r1, r1, r5
 80081c8:	f021 0103 	bic.w	r1, r1, #3
 80081cc:	3d03      	subs	r5, #3
 80081ce:	45a8      	cmp	r8, r5
 80081d0:	bf38      	it	cc
 80081d2:	2100      	movcc	r1, #0
 80081d4:	440b      	add	r3, r1
 80081d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80081da:	b191      	cbz	r1, 8008202 <__mdiff+0x11a>
 80081dc:	6117      	str	r7, [r2, #16]
 80081de:	e79d      	b.n	800811c <__mdiff+0x34>
 80081e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80081e4:	46e6      	mov	lr, ip
 80081e6:	0c08      	lsrs	r0, r1, #16
 80081e8:	fa1c fc81 	uxtah	ip, ip, r1
 80081ec:	4471      	add	r1, lr
 80081ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80081f2:	b289      	uxth	r1, r1
 80081f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80081f8:	f846 1b04 	str.w	r1, [r6], #4
 80081fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008200:	e7dd      	b.n	80081be <__mdiff+0xd6>
 8008202:	3f01      	subs	r7, #1
 8008204:	e7e7      	b.n	80081d6 <__mdiff+0xee>
 8008206:	bf00      	nop
 8008208:	0800913a 	.word	0x0800913a
 800820c:	0800914b 	.word	0x0800914b

08008210 <__d2b>:
 8008210:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008214:	460f      	mov	r7, r1
 8008216:	2101      	movs	r1, #1
 8008218:	ec59 8b10 	vmov	r8, r9, d0
 800821c:	4616      	mov	r6, r2
 800821e:	f7ff fccd 	bl	8007bbc <_Balloc>
 8008222:	4604      	mov	r4, r0
 8008224:	b930      	cbnz	r0, 8008234 <__d2b+0x24>
 8008226:	4602      	mov	r2, r0
 8008228:	4b23      	ldr	r3, [pc, #140]	@ (80082b8 <__d2b+0xa8>)
 800822a:	4824      	ldr	r0, [pc, #144]	@ (80082bc <__d2b+0xac>)
 800822c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008230:	f7fe fe0e 	bl	8006e50 <__assert_func>
 8008234:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008238:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800823c:	b10d      	cbz	r5, 8008242 <__d2b+0x32>
 800823e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008242:	9301      	str	r3, [sp, #4]
 8008244:	f1b8 0300 	subs.w	r3, r8, #0
 8008248:	d023      	beq.n	8008292 <__d2b+0x82>
 800824a:	4668      	mov	r0, sp
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	f7ff fd7c 	bl	8007d4a <__lo0bits>
 8008252:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008256:	b1d0      	cbz	r0, 800828e <__d2b+0x7e>
 8008258:	f1c0 0320 	rsb	r3, r0, #32
 800825c:	fa02 f303 	lsl.w	r3, r2, r3
 8008260:	430b      	orrs	r3, r1
 8008262:	40c2      	lsrs	r2, r0
 8008264:	6163      	str	r3, [r4, #20]
 8008266:	9201      	str	r2, [sp, #4]
 8008268:	9b01      	ldr	r3, [sp, #4]
 800826a:	61a3      	str	r3, [r4, #24]
 800826c:	2b00      	cmp	r3, #0
 800826e:	bf0c      	ite	eq
 8008270:	2201      	moveq	r2, #1
 8008272:	2202      	movne	r2, #2
 8008274:	6122      	str	r2, [r4, #16]
 8008276:	b1a5      	cbz	r5, 80082a2 <__d2b+0x92>
 8008278:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800827c:	4405      	add	r5, r0
 800827e:	603d      	str	r5, [r7, #0]
 8008280:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008284:	6030      	str	r0, [r6, #0]
 8008286:	4620      	mov	r0, r4
 8008288:	b003      	add	sp, #12
 800828a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800828e:	6161      	str	r1, [r4, #20]
 8008290:	e7ea      	b.n	8008268 <__d2b+0x58>
 8008292:	a801      	add	r0, sp, #4
 8008294:	f7ff fd59 	bl	8007d4a <__lo0bits>
 8008298:	9b01      	ldr	r3, [sp, #4]
 800829a:	6163      	str	r3, [r4, #20]
 800829c:	3020      	adds	r0, #32
 800829e:	2201      	movs	r2, #1
 80082a0:	e7e8      	b.n	8008274 <__d2b+0x64>
 80082a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80082a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80082aa:	6038      	str	r0, [r7, #0]
 80082ac:	6918      	ldr	r0, [r3, #16]
 80082ae:	f7ff fd2d 	bl	8007d0c <__hi0bits>
 80082b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80082b6:	e7e5      	b.n	8008284 <__d2b+0x74>
 80082b8:	0800913a 	.word	0x0800913a
 80082bc:	0800914b 	.word	0x0800914b

080082c0 <__ssputs_r>:
 80082c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082c4:	688e      	ldr	r6, [r1, #8]
 80082c6:	461f      	mov	r7, r3
 80082c8:	42be      	cmp	r6, r7
 80082ca:	680b      	ldr	r3, [r1, #0]
 80082cc:	4682      	mov	sl, r0
 80082ce:	460c      	mov	r4, r1
 80082d0:	4690      	mov	r8, r2
 80082d2:	d82d      	bhi.n	8008330 <__ssputs_r+0x70>
 80082d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80082dc:	d026      	beq.n	800832c <__ssputs_r+0x6c>
 80082de:	6965      	ldr	r5, [r4, #20]
 80082e0:	6909      	ldr	r1, [r1, #16]
 80082e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082e6:	eba3 0901 	sub.w	r9, r3, r1
 80082ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082ee:	1c7b      	adds	r3, r7, #1
 80082f0:	444b      	add	r3, r9
 80082f2:	106d      	asrs	r5, r5, #1
 80082f4:	429d      	cmp	r5, r3
 80082f6:	bf38      	it	cc
 80082f8:	461d      	movcc	r5, r3
 80082fa:	0553      	lsls	r3, r2, #21
 80082fc:	d527      	bpl.n	800834e <__ssputs_r+0x8e>
 80082fe:	4629      	mov	r1, r5
 8008300:	f7fd fe8a 	bl	8006018 <_malloc_r>
 8008304:	4606      	mov	r6, r0
 8008306:	b360      	cbz	r0, 8008362 <__ssputs_r+0xa2>
 8008308:	6921      	ldr	r1, [r4, #16]
 800830a:	464a      	mov	r2, r9
 800830c:	f000 fbde 	bl	8008acc <memcpy>
 8008310:	89a3      	ldrh	r3, [r4, #12]
 8008312:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800831a:	81a3      	strh	r3, [r4, #12]
 800831c:	6126      	str	r6, [r4, #16]
 800831e:	6165      	str	r5, [r4, #20]
 8008320:	444e      	add	r6, r9
 8008322:	eba5 0509 	sub.w	r5, r5, r9
 8008326:	6026      	str	r6, [r4, #0]
 8008328:	60a5      	str	r5, [r4, #8]
 800832a:	463e      	mov	r6, r7
 800832c:	42be      	cmp	r6, r7
 800832e:	d900      	bls.n	8008332 <__ssputs_r+0x72>
 8008330:	463e      	mov	r6, r7
 8008332:	6820      	ldr	r0, [r4, #0]
 8008334:	4632      	mov	r2, r6
 8008336:	4641      	mov	r1, r8
 8008338:	f000 fbae 	bl	8008a98 <memmove>
 800833c:	68a3      	ldr	r3, [r4, #8]
 800833e:	1b9b      	subs	r3, r3, r6
 8008340:	60a3      	str	r3, [r4, #8]
 8008342:	6823      	ldr	r3, [r4, #0]
 8008344:	4433      	add	r3, r6
 8008346:	6023      	str	r3, [r4, #0]
 8008348:	2000      	movs	r0, #0
 800834a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800834e:	462a      	mov	r2, r5
 8008350:	f000 fbe3 	bl	8008b1a <_realloc_r>
 8008354:	4606      	mov	r6, r0
 8008356:	2800      	cmp	r0, #0
 8008358:	d1e0      	bne.n	800831c <__ssputs_r+0x5c>
 800835a:	6921      	ldr	r1, [r4, #16]
 800835c:	4650      	mov	r0, sl
 800835e:	f7ff fbe3 	bl	8007b28 <_free_r>
 8008362:	230c      	movs	r3, #12
 8008364:	f8ca 3000 	str.w	r3, [sl]
 8008368:	89a3      	ldrh	r3, [r4, #12]
 800836a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800836e:	81a3      	strh	r3, [r4, #12]
 8008370:	f04f 30ff 	mov.w	r0, #4294967295
 8008374:	e7e9      	b.n	800834a <__ssputs_r+0x8a>
	...

08008378 <_svfiprintf_r>:
 8008378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800837c:	4698      	mov	r8, r3
 800837e:	898b      	ldrh	r3, [r1, #12]
 8008380:	061b      	lsls	r3, r3, #24
 8008382:	b09d      	sub	sp, #116	@ 0x74
 8008384:	4607      	mov	r7, r0
 8008386:	460d      	mov	r5, r1
 8008388:	4614      	mov	r4, r2
 800838a:	d510      	bpl.n	80083ae <_svfiprintf_r+0x36>
 800838c:	690b      	ldr	r3, [r1, #16]
 800838e:	b973      	cbnz	r3, 80083ae <_svfiprintf_r+0x36>
 8008390:	2140      	movs	r1, #64	@ 0x40
 8008392:	f7fd fe41 	bl	8006018 <_malloc_r>
 8008396:	6028      	str	r0, [r5, #0]
 8008398:	6128      	str	r0, [r5, #16]
 800839a:	b930      	cbnz	r0, 80083aa <_svfiprintf_r+0x32>
 800839c:	230c      	movs	r3, #12
 800839e:	603b      	str	r3, [r7, #0]
 80083a0:	f04f 30ff 	mov.w	r0, #4294967295
 80083a4:	b01d      	add	sp, #116	@ 0x74
 80083a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083aa:	2340      	movs	r3, #64	@ 0x40
 80083ac:	616b      	str	r3, [r5, #20]
 80083ae:	2300      	movs	r3, #0
 80083b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80083b2:	2320      	movs	r3, #32
 80083b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80083bc:	2330      	movs	r3, #48	@ 0x30
 80083be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800855c <_svfiprintf_r+0x1e4>
 80083c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083c6:	f04f 0901 	mov.w	r9, #1
 80083ca:	4623      	mov	r3, r4
 80083cc:	469a      	mov	sl, r3
 80083ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083d2:	b10a      	cbz	r2, 80083d8 <_svfiprintf_r+0x60>
 80083d4:	2a25      	cmp	r2, #37	@ 0x25
 80083d6:	d1f9      	bne.n	80083cc <_svfiprintf_r+0x54>
 80083d8:	ebba 0b04 	subs.w	fp, sl, r4
 80083dc:	d00b      	beq.n	80083f6 <_svfiprintf_r+0x7e>
 80083de:	465b      	mov	r3, fp
 80083e0:	4622      	mov	r2, r4
 80083e2:	4629      	mov	r1, r5
 80083e4:	4638      	mov	r0, r7
 80083e6:	f7ff ff6b 	bl	80082c0 <__ssputs_r>
 80083ea:	3001      	adds	r0, #1
 80083ec:	f000 80a7 	beq.w	800853e <_svfiprintf_r+0x1c6>
 80083f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083f2:	445a      	add	r2, fp
 80083f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80083f6:	f89a 3000 	ldrb.w	r3, [sl]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f000 809f 	beq.w	800853e <_svfiprintf_r+0x1c6>
 8008400:	2300      	movs	r3, #0
 8008402:	f04f 32ff 	mov.w	r2, #4294967295
 8008406:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800840a:	f10a 0a01 	add.w	sl, sl, #1
 800840e:	9304      	str	r3, [sp, #16]
 8008410:	9307      	str	r3, [sp, #28]
 8008412:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008416:	931a      	str	r3, [sp, #104]	@ 0x68
 8008418:	4654      	mov	r4, sl
 800841a:	2205      	movs	r2, #5
 800841c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008420:	484e      	ldr	r0, [pc, #312]	@ (800855c <_svfiprintf_r+0x1e4>)
 8008422:	f7f7 fedd 	bl	80001e0 <memchr>
 8008426:	9a04      	ldr	r2, [sp, #16]
 8008428:	b9d8      	cbnz	r0, 8008462 <_svfiprintf_r+0xea>
 800842a:	06d0      	lsls	r0, r2, #27
 800842c:	bf44      	itt	mi
 800842e:	2320      	movmi	r3, #32
 8008430:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008434:	0711      	lsls	r1, r2, #28
 8008436:	bf44      	itt	mi
 8008438:	232b      	movmi	r3, #43	@ 0x2b
 800843a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800843e:	f89a 3000 	ldrb.w	r3, [sl]
 8008442:	2b2a      	cmp	r3, #42	@ 0x2a
 8008444:	d015      	beq.n	8008472 <_svfiprintf_r+0xfa>
 8008446:	9a07      	ldr	r2, [sp, #28]
 8008448:	4654      	mov	r4, sl
 800844a:	2000      	movs	r0, #0
 800844c:	f04f 0c0a 	mov.w	ip, #10
 8008450:	4621      	mov	r1, r4
 8008452:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008456:	3b30      	subs	r3, #48	@ 0x30
 8008458:	2b09      	cmp	r3, #9
 800845a:	d94b      	bls.n	80084f4 <_svfiprintf_r+0x17c>
 800845c:	b1b0      	cbz	r0, 800848c <_svfiprintf_r+0x114>
 800845e:	9207      	str	r2, [sp, #28]
 8008460:	e014      	b.n	800848c <_svfiprintf_r+0x114>
 8008462:	eba0 0308 	sub.w	r3, r0, r8
 8008466:	fa09 f303 	lsl.w	r3, r9, r3
 800846a:	4313      	orrs	r3, r2
 800846c:	9304      	str	r3, [sp, #16]
 800846e:	46a2      	mov	sl, r4
 8008470:	e7d2      	b.n	8008418 <_svfiprintf_r+0xa0>
 8008472:	9b03      	ldr	r3, [sp, #12]
 8008474:	1d19      	adds	r1, r3, #4
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	9103      	str	r1, [sp, #12]
 800847a:	2b00      	cmp	r3, #0
 800847c:	bfbb      	ittet	lt
 800847e:	425b      	neglt	r3, r3
 8008480:	f042 0202 	orrlt.w	r2, r2, #2
 8008484:	9307      	strge	r3, [sp, #28]
 8008486:	9307      	strlt	r3, [sp, #28]
 8008488:	bfb8      	it	lt
 800848a:	9204      	strlt	r2, [sp, #16]
 800848c:	7823      	ldrb	r3, [r4, #0]
 800848e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008490:	d10a      	bne.n	80084a8 <_svfiprintf_r+0x130>
 8008492:	7863      	ldrb	r3, [r4, #1]
 8008494:	2b2a      	cmp	r3, #42	@ 0x2a
 8008496:	d132      	bne.n	80084fe <_svfiprintf_r+0x186>
 8008498:	9b03      	ldr	r3, [sp, #12]
 800849a:	1d1a      	adds	r2, r3, #4
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	9203      	str	r2, [sp, #12]
 80084a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084a4:	3402      	adds	r4, #2
 80084a6:	9305      	str	r3, [sp, #20]
 80084a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800856c <_svfiprintf_r+0x1f4>
 80084ac:	7821      	ldrb	r1, [r4, #0]
 80084ae:	2203      	movs	r2, #3
 80084b0:	4650      	mov	r0, sl
 80084b2:	f7f7 fe95 	bl	80001e0 <memchr>
 80084b6:	b138      	cbz	r0, 80084c8 <_svfiprintf_r+0x150>
 80084b8:	9b04      	ldr	r3, [sp, #16]
 80084ba:	eba0 000a 	sub.w	r0, r0, sl
 80084be:	2240      	movs	r2, #64	@ 0x40
 80084c0:	4082      	lsls	r2, r0
 80084c2:	4313      	orrs	r3, r2
 80084c4:	3401      	adds	r4, #1
 80084c6:	9304      	str	r3, [sp, #16]
 80084c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084cc:	4824      	ldr	r0, [pc, #144]	@ (8008560 <_svfiprintf_r+0x1e8>)
 80084ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084d2:	2206      	movs	r2, #6
 80084d4:	f7f7 fe84 	bl	80001e0 <memchr>
 80084d8:	2800      	cmp	r0, #0
 80084da:	d036      	beq.n	800854a <_svfiprintf_r+0x1d2>
 80084dc:	4b21      	ldr	r3, [pc, #132]	@ (8008564 <_svfiprintf_r+0x1ec>)
 80084de:	bb1b      	cbnz	r3, 8008528 <_svfiprintf_r+0x1b0>
 80084e0:	9b03      	ldr	r3, [sp, #12]
 80084e2:	3307      	adds	r3, #7
 80084e4:	f023 0307 	bic.w	r3, r3, #7
 80084e8:	3308      	adds	r3, #8
 80084ea:	9303      	str	r3, [sp, #12]
 80084ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ee:	4433      	add	r3, r6
 80084f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80084f2:	e76a      	b.n	80083ca <_svfiprintf_r+0x52>
 80084f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80084f8:	460c      	mov	r4, r1
 80084fa:	2001      	movs	r0, #1
 80084fc:	e7a8      	b.n	8008450 <_svfiprintf_r+0xd8>
 80084fe:	2300      	movs	r3, #0
 8008500:	3401      	adds	r4, #1
 8008502:	9305      	str	r3, [sp, #20]
 8008504:	4619      	mov	r1, r3
 8008506:	f04f 0c0a 	mov.w	ip, #10
 800850a:	4620      	mov	r0, r4
 800850c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008510:	3a30      	subs	r2, #48	@ 0x30
 8008512:	2a09      	cmp	r2, #9
 8008514:	d903      	bls.n	800851e <_svfiprintf_r+0x1a6>
 8008516:	2b00      	cmp	r3, #0
 8008518:	d0c6      	beq.n	80084a8 <_svfiprintf_r+0x130>
 800851a:	9105      	str	r1, [sp, #20]
 800851c:	e7c4      	b.n	80084a8 <_svfiprintf_r+0x130>
 800851e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008522:	4604      	mov	r4, r0
 8008524:	2301      	movs	r3, #1
 8008526:	e7f0      	b.n	800850a <_svfiprintf_r+0x192>
 8008528:	ab03      	add	r3, sp, #12
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	462a      	mov	r2, r5
 800852e:	4b0e      	ldr	r3, [pc, #56]	@ (8008568 <_svfiprintf_r+0x1f0>)
 8008530:	a904      	add	r1, sp, #16
 8008532:	4638      	mov	r0, r7
 8008534:	f7fd fe9c 	bl	8006270 <_printf_float>
 8008538:	1c42      	adds	r2, r0, #1
 800853a:	4606      	mov	r6, r0
 800853c:	d1d6      	bne.n	80084ec <_svfiprintf_r+0x174>
 800853e:	89ab      	ldrh	r3, [r5, #12]
 8008540:	065b      	lsls	r3, r3, #25
 8008542:	f53f af2d 	bmi.w	80083a0 <_svfiprintf_r+0x28>
 8008546:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008548:	e72c      	b.n	80083a4 <_svfiprintf_r+0x2c>
 800854a:	ab03      	add	r3, sp, #12
 800854c:	9300      	str	r3, [sp, #0]
 800854e:	462a      	mov	r2, r5
 8008550:	4b05      	ldr	r3, [pc, #20]	@ (8008568 <_svfiprintf_r+0x1f0>)
 8008552:	a904      	add	r1, sp, #16
 8008554:	4638      	mov	r0, r7
 8008556:	f7fe f923 	bl	80067a0 <_printf_i>
 800855a:	e7ed      	b.n	8008538 <_svfiprintf_r+0x1c0>
 800855c:	080092a0 	.word	0x080092a0
 8008560:	080092aa 	.word	0x080092aa
 8008564:	08006271 	.word	0x08006271
 8008568:	080082c1 	.word	0x080082c1
 800856c:	080092a6 	.word	0x080092a6

08008570 <__sfputc_r>:
 8008570:	6893      	ldr	r3, [r2, #8]
 8008572:	3b01      	subs	r3, #1
 8008574:	2b00      	cmp	r3, #0
 8008576:	b410      	push	{r4}
 8008578:	6093      	str	r3, [r2, #8]
 800857a:	da08      	bge.n	800858e <__sfputc_r+0x1e>
 800857c:	6994      	ldr	r4, [r2, #24]
 800857e:	42a3      	cmp	r3, r4
 8008580:	db01      	blt.n	8008586 <__sfputc_r+0x16>
 8008582:	290a      	cmp	r1, #10
 8008584:	d103      	bne.n	800858e <__sfputc_r+0x1e>
 8008586:	f85d 4b04 	ldr.w	r4, [sp], #4
 800858a:	f000 b9f1 	b.w	8008970 <__swbuf_r>
 800858e:	6813      	ldr	r3, [r2, #0]
 8008590:	1c58      	adds	r0, r3, #1
 8008592:	6010      	str	r0, [r2, #0]
 8008594:	7019      	strb	r1, [r3, #0]
 8008596:	4608      	mov	r0, r1
 8008598:	f85d 4b04 	ldr.w	r4, [sp], #4
 800859c:	4770      	bx	lr

0800859e <__sfputs_r>:
 800859e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a0:	4606      	mov	r6, r0
 80085a2:	460f      	mov	r7, r1
 80085a4:	4614      	mov	r4, r2
 80085a6:	18d5      	adds	r5, r2, r3
 80085a8:	42ac      	cmp	r4, r5
 80085aa:	d101      	bne.n	80085b0 <__sfputs_r+0x12>
 80085ac:	2000      	movs	r0, #0
 80085ae:	e007      	b.n	80085c0 <__sfputs_r+0x22>
 80085b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085b4:	463a      	mov	r2, r7
 80085b6:	4630      	mov	r0, r6
 80085b8:	f7ff ffda 	bl	8008570 <__sfputc_r>
 80085bc:	1c43      	adds	r3, r0, #1
 80085be:	d1f3      	bne.n	80085a8 <__sfputs_r+0xa>
 80085c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080085c4 <_vfiprintf_r>:
 80085c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c8:	460d      	mov	r5, r1
 80085ca:	b09d      	sub	sp, #116	@ 0x74
 80085cc:	4614      	mov	r4, r2
 80085ce:	4698      	mov	r8, r3
 80085d0:	4606      	mov	r6, r0
 80085d2:	b118      	cbz	r0, 80085dc <_vfiprintf_r+0x18>
 80085d4:	6a03      	ldr	r3, [r0, #32]
 80085d6:	b90b      	cbnz	r3, 80085dc <_vfiprintf_r+0x18>
 80085d8:	f7fe fa8e 	bl	8006af8 <__sinit>
 80085dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085de:	07d9      	lsls	r1, r3, #31
 80085e0:	d405      	bmi.n	80085ee <_vfiprintf_r+0x2a>
 80085e2:	89ab      	ldrh	r3, [r5, #12]
 80085e4:	059a      	lsls	r2, r3, #22
 80085e6:	d402      	bmi.n	80085ee <_vfiprintf_r+0x2a>
 80085e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085ea:	f7fe fc26 	bl	8006e3a <__retarget_lock_acquire_recursive>
 80085ee:	89ab      	ldrh	r3, [r5, #12]
 80085f0:	071b      	lsls	r3, r3, #28
 80085f2:	d501      	bpl.n	80085f8 <_vfiprintf_r+0x34>
 80085f4:	692b      	ldr	r3, [r5, #16]
 80085f6:	b99b      	cbnz	r3, 8008620 <_vfiprintf_r+0x5c>
 80085f8:	4629      	mov	r1, r5
 80085fa:	4630      	mov	r0, r6
 80085fc:	f000 f9f6 	bl	80089ec <__swsetup_r>
 8008600:	b170      	cbz	r0, 8008620 <_vfiprintf_r+0x5c>
 8008602:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008604:	07dc      	lsls	r4, r3, #31
 8008606:	d504      	bpl.n	8008612 <_vfiprintf_r+0x4e>
 8008608:	f04f 30ff 	mov.w	r0, #4294967295
 800860c:	b01d      	add	sp, #116	@ 0x74
 800860e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008612:	89ab      	ldrh	r3, [r5, #12]
 8008614:	0598      	lsls	r0, r3, #22
 8008616:	d4f7      	bmi.n	8008608 <_vfiprintf_r+0x44>
 8008618:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800861a:	f7fe fc0f 	bl	8006e3c <__retarget_lock_release_recursive>
 800861e:	e7f3      	b.n	8008608 <_vfiprintf_r+0x44>
 8008620:	2300      	movs	r3, #0
 8008622:	9309      	str	r3, [sp, #36]	@ 0x24
 8008624:	2320      	movs	r3, #32
 8008626:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800862a:	f8cd 800c 	str.w	r8, [sp, #12]
 800862e:	2330      	movs	r3, #48	@ 0x30
 8008630:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80087e0 <_vfiprintf_r+0x21c>
 8008634:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008638:	f04f 0901 	mov.w	r9, #1
 800863c:	4623      	mov	r3, r4
 800863e:	469a      	mov	sl, r3
 8008640:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008644:	b10a      	cbz	r2, 800864a <_vfiprintf_r+0x86>
 8008646:	2a25      	cmp	r2, #37	@ 0x25
 8008648:	d1f9      	bne.n	800863e <_vfiprintf_r+0x7a>
 800864a:	ebba 0b04 	subs.w	fp, sl, r4
 800864e:	d00b      	beq.n	8008668 <_vfiprintf_r+0xa4>
 8008650:	465b      	mov	r3, fp
 8008652:	4622      	mov	r2, r4
 8008654:	4629      	mov	r1, r5
 8008656:	4630      	mov	r0, r6
 8008658:	f7ff ffa1 	bl	800859e <__sfputs_r>
 800865c:	3001      	adds	r0, #1
 800865e:	f000 80a7 	beq.w	80087b0 <_vfiprintf_r+0x1ec>
 8008662:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008664:	445a      	add	r2, fp
 8008666:	9209      	str	r2, [sp, #36]	@ 0x24
 8008668:	f89a 3000 	ldrb.w	r3, [sl]
 800866c:	2b00      	cmp	r3, #0
 800866e:	f000 809f 	beq.w	80087b0 <_vfiprintf_r+0x1ec>
 8008672:	2300      	movs	r3, #0
 8008674:	f04f 32ff 	mov.w	r2, #4294967295
 8008678:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800867c:	f10a 0a01 	add.w	sl, sl, #1
 8008680:	9304      	str	r3, [sp, #16]
 8008682:	9307      	str	r3, [sp, #28]
 8008684:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008688:	931a      	str	r3, [sp, #104]	@ 0x68
 800868a:	4654      	mov	r4, sl
 800868c:	2205      	movs	r2, #5
 800868e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008692:	4853      	ldr	r0, [pc, #332]	@ (80087e0 <_vfiprintf_r+0x21c>)
 8008694:	f7f7 fda4 	bl	80001e0 <memchr>
 8008698:	9a04      	ldr	r2, [sp, #16]
 800869a:	b9d8      	cbnz	r0, 80086d4 <_vfiprintf_r+0x110>
 800869c:	06d1      	lsls	r1, r2, #27
 800869e:	bf44      	itt	mi
 80086a0:	2320      	movmi	r3, #32
 80086a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086a6:	0713      	lsls	r3, r2, #28
 80086a8:	bf44      	itt	mi
 80086aa:	232b      	movmi	r3, #43	@ 0x2b
 80086ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086b0:	f89a 3000 	ldrb.w	r3, [sl]
 80086b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80086b6:	d015      	beq.n	80086e4 <_vfiprintf_r+0x120>
 80086b8:	9a07      	ldr	r2, [sp, #28]
 80086ba:	4654      	mov	r4, sl
 80086bc:	2000      	movs	r0, #0
 80086be:	f04f 0c0a 	mov.w	ip, #10
 80086c2:	4621      	mov	r1, r4
 80086c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086c8:	3b30      	subs	r3, #48	@ 0x30
 80086ca:	2b09      	cmp	r3, #9
 80086cc:	d94b      	bls.n	8008766 <_vfiprintf_r+0x1a2>
 80086ce:	b1b0      	cbz	r0, 80086fe <_vfiprintf_r+0x13a>
 80086d0:	9207      	str	r2, [sp, #28]
 80086d2:	e014      	b.n	80086fe <_vfiprintf_r+0x13a>
 80086d4:	eba0 0308 	sub.w	r3, r0, r8
 80086d8:	fa09 f303 	lsl.w	r3, r9, r3
 80086dc:	4313      	orrs	r3, r2
 80086de:	9304      	str	r3, [sp, #16]
 80086e0:	46a2      	mov	sl, r4
 80086e2:	e7d2      	b.n	800868a <_vfiprintf_r+0xc6>
 80086e4:	9b03      	ldr	r3, [sp, #12]
 80086e6:	1d19      	adds	r1, r3, #4
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	9103      	str	r1, [sp, #12]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	bfbb      	ittet	lt
 80086f0:	425b      	neglt	r3, r3
 80086f2:	f042 0202 	orrlt.w	r2, r2, #2
 80086f6:	9307      	strge	r3, [sp, #28]
 80086f8:	9307      	strlt	r3, [sp, #28]
 80086fa:	bfb8      	it	lt
 80086fc:	9204      	strlt	r2, [sp, #16]
 80086fe:	7823      	ldrb	r3, [r4, #0]
 8008700:	2b2e      	cmp	r3, #46	@ 0x2e
 8008702:	d10a      	bne.n	800871a <_vfiprintf_r+0x156>
 8008704:	7863      	ldrb	r3, [r4, #1]
 8008706:	2b2a      	cmp	r3, #42	@ 0x2a
 8008708:	d132      	bne.n	8008770 <_vfiprintf_r+0x1ac>
 800870a:	9b03      	ldr	r3, [sp, #12]
 800870c:	1d1a      	adds	r2, r3, #4
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	9203      	str	r2, [sp, #12]
 8008712:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008716:	3402      	adds	r4, #2
 8008718:	9305      	str	r3, [sp, #20]
 800871a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80087f0 <_vfiprintf_r+0x22c>
 800871e:	7821      	ldrb	r1, [r4, #0]
 8008720:	2203      	movs	r2, #3
 8008722:	4650      	mov	r0, sl
 8008724:	f7f7 fd5c 	bl	80001e0 <memchr>
 8008728:	b138      	cbz	r0, 800873a <_vfiprintf_r+0x176>
 800872a:	9b04      	ldr	r3, [sp, #16]
 800872c:	eba0 000a 	sub.w	r0, r0, sl
 8008730:	2240      	movs	r2, #64	@ 0x40
 8008732:	4082      	lsls	r2, r0
 8008734:	4313      	orrs	r3, r2
 8008736:	3401      	adds	r4, #1
 8008738:	9304      	str	r3, [sp, #16]
 800873a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800873e:	4829      	ldr	r0, [pc, #164]	@ (80087e4 <_vfiprintf_r+0x220>)
 8008740:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008744:	2206      	movs	r2, #6
 8008746:	f7f7 fd4b 	bl	80001e0 <memchr>
 800874a:	2800      	cmp	r0, #0
 800874c:	d03f      	beq.n	80087ce <_vfiprintf_r+0x20a>
 800874e:	4b26      	ldr	r3, [pc, #152]	@ (80087e8 <_vfiprintf_r+0x224>)
 8008750:	bb1b      	cbnz	r3, 800879a <_vfiprintf_r+0x1d6>
 8008752:	9b03      	ldr	r3, [sp, #12]
 8008754:	3307      	adds	r3, #7
 8008756:	f023 0307 	bic.w	r3, r3, #7
 800875a:	3308      	adds	r3, #8
 800875c:	9303      	str	r3, [sp, #12]
 800875e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008760:	443b      	add	r3, r7
 8008762:	9309      	str	r3, [sp, #36]	@ 0x24
 8008764:	e76a      	b.n	800863c <_vfiprintf_r+0x78>
 8008766:	fb0c 3202 	mla	r2, ip, r2, r3
 800876a:	460c      	mov	r4, r1
 800876c:	2001      	movs	r0, #1
 800876e:	e7a8      	b.n	80086c2 <_vfiprintf_r+0xfe>
 8008770:	2300      	movs	r3, #0
 8008772:	3401      	adds	r4, #1
 8008774:	9305      	str	r3, [sp, #20]
 8008776:	4619      	mov	r1, r3
 8008778:	f04f 0c0a 	mov.w	ip, #10
 800877c:	4620      	mov	r0, r4
 800877e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008782:	3a30      	subs	r2, #48	@ 0x30
 8008784:	2a09      	cmp	r2, #9
 8008786:	d903      	bls.n	8008790 <_vfiprintf_r+0x1cc>
 8008788:	2b00      	cmp	r3, #0
 800878a:	d0c6      	beq.n	800871a <_vfiprintf_r+0x156>
 800878c:	9105      	str	r1, [sp, #20]
 800878e:	e7c4      	b.n	800871a <_vfiprintf_r+0x156>
 8008790:	fb0c 2101 	mla	r1, ip, r1, r2
 8008794:	4604      	mov	r4, r0
 8008796:	2301      	movs	r3, #1
 8008798:	e7f0      	b.n	800877c <_vfiprintf_r+0x1b8>
 800879a:	ab03      	add	r3, sp, #12
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	462a      	mov	r2, r5
 80087a0:	4b12      	ldr	r3, [pc, #72]	@ (80087ec <_vfiprintf_r+0x228>)
 80087a2:	a904      	add	r1, sp, #16
 80087a4:	4630      	mov	r0, r6
 80087a6:	f7fd fd63 	bl	8006270 <_printf_float>
 80087aa:	4607      	mov	r7, r0
 80087ac:	1c78      	adds	r0, r7, #1
 80087ae:	d1d6      	bne.n	800875e <_vfiprintf_r+0x19a>
 80087b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087b2:	07d9      	lsls	r1, r3, #31
 80087b4:	d405      	bmi.n	80087c2 <_vfiprintf_r+0x1fe>
 80087b6:	89ab      	ldrh	r3, [r5, #12]
 80087b8:	059a      	lsls	r2, r3, #22
 80087ba:	d402      	bmi.n	80087c2 <_vfiprintf_r+0x1fe>
 80087bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087be:	f7fe fb3d 	bl	8006e3c <__retarget_lock_release_recursive>
 80087c2:	89ab      	ldrh	r3, [r5, #12]
 80087c4:	065b      	lsls	r3, r3, #25
 80087c6:	f53f af1f 	bmi.w	8008608 <_vfiprintf_r+0x44>
 80087ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087cc:	e71e      	b.n	800860c <_vfiprintf_r+0x48>
 80087ce:	ab03      	add	r3, sp, #12
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	462a      	mov	r2, r5
 80087d4:	4b05      	ldr	r3, [pc, #20]	@ (80087ec <_vfiprintf_r+0x228>)
 80087d6:	a904      	add	r1, sp, #16
 80087d8:	4630      	mov	r0, r6
 80087da:	f7fd ffe1 	bl	80067a0 <_printf_i>
 80087de:	e7e4      	b.n	80087aa <_vfiprintf_r+0x1e6>
 80087e0:	080092a0 	.word	0x080092a0
 80087e4:	080092aa 	.word	0x080092aa
 80087e8:	08006271 	.word	0x08006271
 80087ec:	0800859f 	.word	0x0800859f
 80087f0:	080092a6 	.word	0x080092a6

080087f4 <__sflush_r>:
 80087f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087fc:	0716      	lsls	r6, r2, #28
 80087fe:	4605      	mov	r5, r0
 8008800:	460c      	mov	r4, r1
 8008802:	d454      	bmi.n	80088ae <__sflush_r+0xba>
 8008804:	684b      	ldr	r3, [r1, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	dc02      	bgt.n	8008810 <__sflush_r+0x1c>
 800880a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800880c:	2b00      	cmp	r3, #0
 800880e:	dd48      	ble.n	80088a2 <__sflush_r+0xae>
 8008810:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008812:	2e00      	cmp	r6, #0
 8008814:	d045      	beq.n	80088a2 <__sflush_r+0xae>
 8008816:	2300      	movs	r3, #0
 8008818:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800881c:	682f      	ldr	r7, [r5, #0]
 800881e:	6a21      	ldr	r1, [r4, #32]
 8008820:	602b      	str	r3, [r5, #0]
 8008822:	d030      	beq.n	8008886 <__sflush_r+0x92>
 8008824:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008826:	89a3      	ldrh	r3, [r4, #12]
 8008828:	0759      	lsls	r1, r3, #29
 800882a:	d505      	bpl.n	8008838 <__sflush_r+0x44>
 800882c:	6863      	ldr	r3, [r4, #4]
 800882e:	1ad2      	subs	r2, r2, r3
 8008830:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008832:	b10b      	cbz	r3, 8008838 <__sflush_r+0x44>
 8008834:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008836:	1ad2      	subs	r2, r2, r3
 8008838:	2300      	movs	r3, #0
 800883a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800883c:	6a21      	ldr	r1, [r4, #32]
 800883e:	4628      	mov	r0, r5
 8008840:	47b0      	blx	r6
 8008842:	1c43      	adds	r3, r0, #1
 8008844:	89a3      	ldrh	r3, [r4, #12]
 8008846:	d106      	bne.n	8008856 <__sflush_r+0x62>
 8008848:	6829      	ldr	r1, [r5, #0]
 800884a:	291d      	cmp	r1, #29
 800884c:	d82b      	bhi.n	80088a6 <__sflush_r+0xb2>
 800884e:	4a2a      	ldr	r2, [pc, #168]	@ (80088f8 <__sflush_r+0x104>)
 8008850:	410a      	asrs	r2, r1
 8008852:	07d6      	lsls	r6, r2, #31
 8008854:	d427      	bmi.n	80088a6 <__sflush_r+0xb2>
 8008856:	2200      	movs	r2, #0
 8008858:	6062      	str	r2, [r4, #4]
 800885a:	04d9      	lsls	r1, r3, #19
 800885c:	6922      	ldr	r2, [r4, #16]
 800885e:	6022      	str	r2, [r4, #0]
 8008860:	d504      	bpl.n	800886c <__sflush_r+0x78>
 8008862:	1c42      	adds	r2, r0, #1
 8008864:	d101      	bne.n	800886a <__sflush_r+0x76>
 8008866:	682b      	ldr	r3, [r5, #0]
 8008868:	b903      	cbnz	r3, 800886c <__sflush_r+0x78>
 800886a:	6560      	str	r0, [r4, #84]	@ 0x54
 800886c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800886e:	602f      	str	r7, [r5, #0]
 8008870:	b1b9      	cbz	r1, 80088a2 <__sflush_r+0xae>
 8008872:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008876:	4299      	cmp	r1, r3
 8008878:	d002      	beq.n	8008880 <__sflush_r+0x8c>
 800887a:	4628      	mov	r0, r5
 800887c:	f7ff f954 	bl	8007b28 <_free_r>
 8008880:	2300      	movs	r3, #0
 8008882:	6363      	str	r3, [r4, #52]	@ 0x34
 8008884:	e00d      	b.n	80088a2 <__sflush_r+0xae>
 8008886:	2301      	movs	r3, #1
 8008888:	4628      	mov	r0, r5
 800888a:	47b0      	blx	r6
 800888c:	4602      	mov	r2, r0
 800888e:	1c50      	adds	r0, r2, #1
 8008890:	d1c9      	bne.n	8008826 <__sflush_r+0x32>
 8008892:	682b      	ldr	r3, [r5, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d0c6      	beq.n	8008826 <__sflush_r+0x32>
 8008898:	2b1d      	cmp	r3, #29
 800889a:	d001      	beq.n	80088a0 <__sflush_r+0xac>
 800889c:	2b16      	cmp	r3, #22
 800889e:	d11e      	bne.n	80088de <__sflush_r+0xea>
 80088a0:	602f      	str	r7, [r5, #0]
 80088a2:	2000      	movs	r0, #0
 80088a4:	e022      	b.n	80088ec <__sflush_r+0xf8>
 80088a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088aa:	b21b      	sxth	r3, r3
 80088ac:	e01b      	b.n	80088e6 <__sflush_r+0xf2>
 80088ae:	690f      	ldr	r7, [r1, #16]
 80088b0:	2f00      	cmp	r7, #0
 80088b2:	d0f6      	beq.n	80088a2 <__sflush_r+0xae>
 80088b4:	0793      	lsls	r3, r2, #30
 80088b6:	680e      	ldr	r6, [r1, #0]
 80088b8:	bf08      	it	eq
 80088ba:	694b      	ldreq	r3, [r1, #20]
 80088bc:	600f      	str	r7, [r1, #0]
 80088be:	bf18      	it	ne
 80088c0:	2300      	movne	r3, #0
 80088c2:	eba6 0807 	sub.w	r8, r6, r7
 80088c6:	608b      	str	r3, [r1, #8]
 80088c8:	f1b8 0f00 	cmp.w	r8, #0
 80088cc:	dde9      	ble.n	80088a2 <__sflush_r+0xae>
 80088ce:	6a21      	ldr	r1, [r4, #32]
 80088d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80088d2:	4643      	mov	r3, r8
 80088d4:	463a      	mov	r2, r7
 80088d6:	4628      	mov	r0, r5
 80088d8:	47b0      	blx	r6
 80088da:	2800      	cmp	r0, #0
 80088dc:	dc08      	bgt.n	80088f0 <__sflush_r+0xfc>
 80088de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088e6:	81a3      	strh	r3, [r4, #12]
 80088e8:	f04f 30ff 	mov.w	r0, #4294967295
 80088ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088f0:	4407      	add	r7, r0
 80088f2:	eba8 0800 	sub.w	r8, r8, r0
 80088f6:	e7e7      	b.n	80088c8 <__sflush_r+0xd4>
 80088f8:	dfbffffe 	.word	0xdfbffffe

080088fc <_fflush_r>:
 80088fc:	b538      	push	{r3, r4, r5, lr}
 80088fe:	690b      	ldr	r3, [r1, #16]
 8008900:	4605      	mov	r5, r0
 8008902:	460c      	mov	r4, r1
 8008904:	b913      	cbnz	r3, 800890c <_fflush_r+0x10>
 8008906:	2500      	movs	r5, #0
 8008908:	4628      	mov	r0, r5
 800890a:	bd38      	pop	{r3, r4, r5, pc}
 800890c:	b118      	cbz	r0, 8008916 <_fflush_r+0x1a>
 800890e:	6a03      	ldr	r3, [r0, #32]
 8008910:	b90b      	cbnz	r3, 8008916 <_fflush_r+0x1a>
 8008912:	f7fe f8f1 	bl	8006af8 <__sinit>
 8008916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d0f3      	beq.n	8008906 <_fflush_r+0xa>
 800891e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008920:	07d0      	lsls	r0, r2, #31
 8008922:	d404      	bmi.n	800892e <_fflush_r+0x32>
 8008924:	0599      	lsls	r1, r3, #22
 8008926:	d402      	bmi.n	800892e <_fflush_r+0x32>
 8008928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800892a:	f7fe fa86 	bl	8006e3a <__retarget_lock_acquire_recursive>
 800892e:	4628      	mov	r0, r5
 8008930:	4621      	mov	r1, r4
 8008932:	f7ff ff5f 	bl	80087f4 <__sflush_r>
 8008936:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008938:	07da      	lsls	r2, r3, #31
 800893a:	4605      	mov	r5, r0
 800893c:	d4e4      	bmi.n	8008908 <_fflush_r+0xc>
 800893e:	89a3      	ldrh	r3, [r4, #12]
 8008940:	059b      	lsls	r3, r3, #22
 8008942:	d4e1      	bmi.n	8008908 <_fflush_r+0xc>
 8008944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008946:	f7fe fa79 	bl	8006e3c <__retarget_lock_release_recursive>
 800894a:	e7dd      	b.n	8008908 <_fflush_r+0xc>

0800894c <fiprintf>:
 800894c:	b40e      	push	{r1, r2, r3}
 800894e:	b503      	push	{r0, r1, lr}
 8008950:	4601      	mov	r1, r0
 8008952:	ab03      	add	r3, sp, #12
 8008954:	4805      	ldr	r0, [pc, #20]	@ (800896c <fiprintf+0x20>)
 8008956:	f853 2b04 	ldr.w	r2, [r3], #4
 800895a:	6800      	ldr	r0, [r0, #0]
 800895c:	9301      	str	r3, [sp, #4]
 800895e:	f7ff fe31 	bl	80085c4 <_vfiprintf_r>
 8008962:	b002      	add	sp, #8
 8008964:	f85d eb04 	ldr.w	lr, [sp], #4
 8008968:	b003      	add	sp, #12
 800896a:	4770      	bx	lr
 800896c:	20001788 	.word	0x20001788

08008970 <__swbuf_r>:
 8008970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008972:	460e      	mov	r6, r1
 8008974:	4614      	mov	r4, r2
 8008976:	4605      	mov	r5, r0
 8008978:	b118      	cbz	r0, 8008982 <__swbuf_r+0x12>
 800897a:	6a03      	ldr	r3, [r0, #32]
 800897c:	b90b      	cbnz	r3, 8008982 <__swbuf_r+0x12>
 800897e:	f7fe f8bb 	bl	8006af8 <__sinit>
 8008982:	69a3      	ldr	r3, [r4, #24]
 8008984:	60a3      	str	r3, [r4, #8]
 8008986:	89a3      	ldrh	r3, [r4, #12]
 8008988:	071a      	lsls	r2, r3, #28
 800898a:	d501      	bpl.n	8008990 <__swbuf_r+0x20>
 800898c:	6923      	ldr	r3, [r4, #16]
 800898e:	b943      	cbnz	r3, 80089a2 <__swbuf_r+0x32>
 8008990:	4621      	mov	r1, r4
 8008992:	4628      	mov	r0, r5
 8008994:	f000 f82a 	bl	80089ec <__swsetup_r>
 8008998:	b118      	cbz	r0, 80089a2 <__swbuf_r+0x32>
 800899a:	f04f 37ff 	mov.w	r7, #4294967295
 800899e:	4638      	mov	r0, r7
 80089a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089a2:	6823      	ldr	r3, [r4, #0]
 80089a4:	6922      	ldr	r2, [r4, #16]
 80089a6:	1a98      	subs	r0, r3, r2
 80089a8:	6963      	ldr	r3, [r4, #20]
 80089aa:	b2f6      	uxtb	r6, r6
 80089ac:	4283      	cmp	r3, r0
 80089ae:	4637      	mov	r7, r6
 80089b0:	dc05      	bgt.n	80089be <__swbuf_r+0x4e>
 80089b2:	4621      	mov	r1, r4
 80089b4:	4628      	mov	r0, r5
 80089b6:	f7ff ffa1 	bl	80088fc <_fflush_r>
 80089ba:	2800      	cmp	r0, #0
 80089bc:	d1ed      	bne.n	800899a <__swbuf_r+0x2a>
 80089be:	68a3      	ldr	r3, [r4, #8]
 80089c0:	3b01      	subs	r3, #1
 80089c2:	60a3      	str	r3, [r4, #8]
 80089c4:	6823      	ldr	r3, [r4, #0]
 80089c6:	1c5a      	adds	r2, r3, #1
 80089c8:	6022      	str	r2, [r4, #0]
 80089ca:	701e      	strb	r6, [r3, #0]
 80089cc:	6962      	ldr	r2, [r4, #20]
 80089ce:	1c43      	adds	r3, r0, #1
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d004      	beq.n	80089de <__swbuf_r+0x6e>
 80089d4:	89a3      	ldrh	r3, [r4, #12]
 80089d6:	07db      	lsls	r3, r3, #31
 80089d8:	d5e1      	bpl.n	800899e <__swbuf_r+0x2e>
 80089da:	2e0a      	cmp	r6, #10
 80089dc:	d1df      	bne.n	800899e <__swbuf_r+0x2e>
 80089de:	4621      	mov	r1, r4
 80089e0:	4628      	mov	r0, r5
 80089e2:	f7ff ff8b 	bl	80088fc <_fflush_r>
 80089e6:	2800      	cmp	r0, #0
 80089e8:	d0d9      	beq.n	800899e <__swbuf_r+0x2e>
 80089ea:	e7d6      	b.n	800899a <__swbuf_r+0x2a>

080089ec <__swsetup_r>:
 80089ec:	b538      	push	{r3, r4, r5, lr}
 80089ee:	4b29      	ldr	r3, [pc, #164]	@ (8008a94 <__swsetup_r+0xa8>)
 80089f0:	4605      	mov	r5, r0
 80089f2:	6818      	ldr	r0, [r3, #0]
 80089f4:	460c      	mov	r4, r1
 80089f6:	b118      	cbz	r0, 8008a00 <__swsetup_r+0x14>
 80089f8:	6a03      	ldr	r3, [r0, #32]
 80089fa:	b90b      	cbnz	r3, 8008a00 <__swsetup_r+0x14>
 80089fc:	f7fe f87c 	bl	8006af8 <__sinit>
 8008a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a04:	0719      	lsls	r1, r3, #28
 8008a06:	d422      	bmi.n	8008a4e <__swsetup_r+0x62>
 8008a08:	06da      	lsls	r2, r3, #27
 8008a0a:	d407      	bmi.n	8008a1c <__swsetup_r+0x30>
 8008a0c:	2209      	movs	r2, #9
 8008a0e:	602a      	str	r2, [r5, #0]
 8008a10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a14:	81a3      	strh	r3, [r4, #12]
 8008a16:	f04f 30ff 	mov.w	r0, #4294967295
 8008a1a:	e033      	b.n	8008a84 <__swsetup_r+0x98>
 8008a1c:	0758      	lsls	r0, r3, #29
 8008a1e:	d512      	bpl.n	8008a46 <__swsetup_r+0x5a>
 8008a20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a22:	b141      	cbz	r1, 8008a36 <__swsetup_r+0x4a>
 8008a24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a28:	4299      	cmp	r1, r3
 8008a2a:	d002      	beq.n	8008a32 <__swsetup_r+0x46>
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	f7ff f87b 	bl	8007b28 <_free_r>
 8008a32:	2300      	movs	r3, #0
 8008a34:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a36:	89a3      	ldrh	r3, [r4, #12]
 8008a38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a3c:	81a3      	strh	r3, [r4, #12]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	6063      	str	r3, [r4, #4]
 8008a42:	6923      	ldr	r3, [r4, #16]
 8008a44:	6023      	str	r3, [r4, #0]
 8008a46:	89a3      	ldrh	r3, [r4, #12]
 8008a48:	f043 0308 	orr.w	r3, r3, #8
 8008a4c:	81a3      	strh	r3, [r4, #12]
 8008a4e:	6923      	ldr	r3, [r4, #16]
 8008a50:	b94b      	cbnz	r3, 8008a66 <__swsetup_r+0x7a>
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a5c:	d003      	beq.n	8008a66 <__swsetup_r+0x7a>
 8008a5e:	4621      	mov	r1, r4
 8008a60:	4628      	mov	r0, r5
 8008a62:	f000 f8bb 	bl	8008bdc <__smakebuf_r>
 8008a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a6a:	f013 0201 	ands.w	r2, r3, #1
 8008a6e:	d00a      	beq.n	8008a86 <__swsetup_r+0x9a>
 8008a70:	2200      	movs	r2, #0
 8008a72:	60a2      	str	r2, [r4, #8]
 8008a74:	6962      	ldr	r2, [r4, #20]
 8008a76:	4252      	negs	r2, r2
 8008a78:	61a2      	str	r2, [r4, #24]
 8008a7a:	6922      	ldr	r2, [r4, #16]
 8008a7c:	b942      	cbnz	r2, 8008a90 <__swsetup_r+0xa4>
 8008a7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a82:	d1c5      	bne.n	8008a10 <__swsetup_r+0x24>
 8008a84:	bd38      	pop	{r3, r4, r5, pc}
 8008a86:	0799      	lsls	r1, r3, #30
 8008a88:	bf58      	it	pl
 8008a8a:	6962      	ldrpl	r2, [r4, #20]
 8008a8c:	60a2      	str	r2, [r4, #8]
 8008a8e:	e7f4      	b.n	8008a7a <__swsetup_r+0x8e>
 8008a90:	2000      	movs	r0, #0
 8008a92:	e7f7      	b.n	8008a84 <__swsetup_r+0x98>
 8008a94:	20001788 	.word	0x20001788

08008a98 <memmove>:
 8008a98:	4288      	cmp	r0, r1
 8008a9a:	b510      	push	{r4, lr}
 8008a9c:	eb01 0402 	add.w	r4, r1, r2
 8008aa0:	d902      	bls.n	8008aa8 <memmove+0x10>
 8008aa2:	4284      	cmp	r4, r0
 8008aa4:	4623      	mov	r3, r4
 8008aa6:	d807      	bhi.n	8008ab8 <memmove+0x20>
 8008aa8:	1e43      	subs	r3, r0, #1
 8008aaa:	42a1      	cmp	r1, r4
 8008aac:	d008      	beq.n	8008ac0 <memmove+0x28>
 8008aae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ab2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ab6:	e7f8      	b.n	8008aaa <memmove+0x12>
 8008ab8:	4402      	add	r2, r0
 8008aba:	4601      	mov	r1, r0
 8008abc:	428a      	cmp	r2, r1
 8008abe:	d100      	bne.n	8008ac2 <memmove+0x2a>
 8008ac0:	bd10      	pop	{r4, pc}
 8008ac2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ac6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008aca:	e7f7      	b.n	8008abc <memmove+0x24>

08008acc <memcpy>:
 8008acc:	440a      	add	r2, r1
 8008ace:	4291      	cmp	r1, r2
 8008ad0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ad4:	d100      	bne.n	8008ad8 <memcpy+0xc>
 8008ad6:	4770      	bx	lr
 8008ad8:	b510      	push	{r4, lr}
 8008ada:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ade:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ae2:	4291      	cmp	r1, r2
 8008ae4:	d1f9      	bne.n	8008ada <memcpy+0xe>
 8008ae6:	bd10      	pop	{r4, pc}

08008ae8 <abort>:
 8008ae8:	b508      	push	{r3, lr}
 8008aea:	2006      	movs	r0, #6
 8008aec:	f000 f8da 	bl	8008ca4 <raise>
 8008af0:	2001      	movs	r0, #1
 8008af2:	f7f9 f997 	bl	8001e24 <_exit>

08008af6 <__ascii_mbtowc>:
 8008af6:	b082      	sub	sp, #8
 8008af8:	b901      	cbnz	r1, 8008afc <__ascii_mbtowc+0x6>
 8008afa:	a901      	add	r1, sp, #4
 8008afc:	b142      	cbz	r2, 8008b10 <__ascii_mbtowc+0x1a>
 8008afe:	b14b      	cbz	r3, 8008b14 <__ascii_mbtowc+0x1e>
 8008b00:	7813      	ldrb	r3, [r2, #0]
 8008b02:	600b      	str	r3, [r1, #0]
 8008b04:	7812      	ldrb	r2, [r2, #0]
 8008b06:	1e10      	subs	r0, r2, #0
 8008b08:	bf18      	it	ne
 8008b0a:	2001      	movne	r0, #1
 8008b0c:	b002      	add	sp, #8
 8008b0e:	4770      	bx	lr
 8008b10:	4610      	mov	r0, r2
 8008b12:	e7fb      	b.n	8008b0c <__ascii_mbtowc+0x16>
 8008b14:	f06f 0001 	mvn.w	r0, #1
 8008b18:	e7f8      	b.n	8008b0c <__ascii_mbtowc+0x16>

08008b1a <_realloc_r>:
 8008b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b1e:	4680      	mov	r8, r0
 8008b20:	4615      	mov	r5, r2
 8008b22:	460c      	mov	r4, r1
 8008b24:	b921      	cbnz	r1, 8008b30 <_realloc_r+0x16>
 8008b26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b2a:	4611      	mov	r1, r2
 8008b2c:	f7fd ba74 	b.w	8006018 <_malloc_r>
 8008b30:	b92a      	cbnz	r2, 8008b3e <_realloc_r+0x24>
 8008b32:	f7fe fff9 	bl	8007b28 <_free_r>
 8008b36:	2400      	movs	r4, #0
 8008b38:	4620      	mov	r0, r4
 8008b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b3e:	f000 f8ef 	bl	8008d20 <_malloc_usable_size_r>
 8008b42:	4285      	cmp	r5, r0
 8008b44:	4606      	mov	r6, r0
 8008b46:	d802      	bhi.n	8008b4e <_realloc_r+0x34>
 8008b48:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b4c:	d8f4      	bhi.n	8008b38 <_realloc_r+0x1e>
 8008b4e:	4629      	mov	r1, r5
 8008b50:	4640      	mov	r0, r8
 8008b52:	f7fd fa61 	bl	8006018 <_malloc_r>
 8008b56:	4607      	mov	r7, r0
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	d0ec      	beq.n	8008b36 <_realloc_r+0x1c>
 8008b5c:	42b5      	cmp	r5, r6
 8008b5e:	462a      	mov	r2, r5
 8008b60:	4621      	mov	r1, r4
 8008b62:	bf28      	it	cs
 8008b64:	4632      	movcs	r2, r6
 8008b66:	f7ff ffb1 	bl	8008acc <memcpy>
 8008b6a:	4621      	mov	r1, r4
 8008b6c:	4640      	mov	r0, r8
 8008b6e:	f7fe ffdb 	bl	8007b28 <_free_r>
 8008b72:	463c      	mov	r4, r7
 8008b74:	e7e0      	b.n	8008b38 <_realloc_r+0x1e>

08008b76 <__ascii_wctomb>:
 8008b76:	4603      	mov	r3, r0
 8008b78:	4608      	mov	r0, r1
 8008b7a:	b141      	cbz	r1, 8008b8e <__ascii_wctomb+0x18>
 8008b7c:	2aff      	cmp	r2, #255	@ 0xff
 8008b7e:	d904      	bls.n	8008b8a <__ascii_wctomb+0x14>
 8008b80:	228a      	movs	r2, #138	@ 0x8a
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	f04f 30ff 	mov.w	r0, #4294967295
 8008b88:	4770      	bx	lr
 8008b8a:	700a      	strb	r2, [r1, #0]
 8008b8c:	2001      	movs	r0, #1
 8008b8e:	4770      	bx	lr

08008b90 <__swhatbuf_r>:
 8008b90:	b570      	push	{r4, r5, r6, lr}
 8008b92:	460c      	mov	r4, r1
 8008b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b98:	2900      	cmp	r1, #0
 8008b9a:	b096      	sub	sp, #88	@ 0x58
 8008b9c:	4615      	mov	r5, r2
 8008b9e:	461e      	mov	r6, r3
 8008ba0:	da0d      	bge.n	8008bbe <__swhatbuf_r+0x2e>
 8008ba2:	89a3      	ldrh	r3, [r4, #12]
 8008ba4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ba8:	f04f 0100 	mov.w	r1, #0
 8008bac:	bf14      	ite	ne
 8008bae:	2340      	movne	r3, #64	@ 0x40
 8008bb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	6031      	str	r1, [r6, #0]
 8008bb8:	602b      	str	r3, [r5, #0]
 8008bba:	b016      	add	sp, #88	@ 0x58
 8008bbc:	bd70      	pop	{r4, r5, r6, pc}
 8008bbe:	466a      	mov	r2, sp
 8008bc0:	f000 f878 	bl	8008cb4 <_fstat_r>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	dbec      	blt.n	8008ba2 <__swhatbuf_r+0x12>
 8008bc8:	9901      	ldr	r1, [sp, #4]
 8008bca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008bce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008bd2:	4259      	negs	r1, r3
 8008bd4:	4159      	adcs	r1, r3
 8008bd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bda:	e7eb      	b.n	8008bb4 <__swhatbuf_r+0x24>

08008bdc <__smakebuf_r>:
 8008bdc:	898b      	ldrh	r3, [r1, #12]
 8008bde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008be0:	079d      	lsls	r5, r3, #30
 8008be2:	4606      	mov	r6, r0
 8008be4:	460c      	mov	r4, r1
 8008be6:	d507      	bpl.n	8008bf8 <__smakebuf_r+0x1c>
 8008be8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008bec:	6023      	str	r3, [r4, #0]
 8008bee:	6123      	str	r3, [r4, #16]
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	6163      	str	r3, [r4, #20]
 8008bf4:	b003      	add	sp, #12
 8008bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bf8:	ab01      	add	r3, sp, #4
 8008bfa:	466a      	mov	r2, sp
 8008bfc:	f7ff ffc8 	bl	8008b90 <__swhatbuf_r>
 8008c00:	9f00      	ldr	r7, [sp, #0]
 8008c02:	4605      	mov	r5, r0
 8008c04:	4639      	mov	r1, r7
 8008c06:	4630      	mov	r0, r6
 8008c08:	f7fd fa06 	bl	8006018 <_malloc_r>
 8008c0c:	b948      	cbnz	r0, 8008c22 <__smakebuf_r+0x46>
 8008c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c12:	059a      	lsls	r2, r3, #22
 8008c14:	d4ee      	bmi.n	8008bf4 <__smakebuf_r+0x18>
 8008c16:	f023 0303 	bic.w	r3, r3, #3
 8008c1a:	f043 0302 	orr.w	r3, r3, #2
 8008c1e:	81a3      	strh	r3, [r4, #12]
 8008c20:	e7e2      	b.n	8008be8 <__smakebuf_r+0xc>
 8008c22:	89a3      	ldrh	r3, [r4, #12]
 8008c24:	6020      	str	r0, [r4, #0]
 8008c26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c2a:	81a3      	strh	r3, [r4, #12]
 8008c2c:	9b01      	ldr	r3, [sp, #4]
 8008c2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008c32:	b15b      	cbz	r3, 8008c4c <__smakebuf_r+0x70>
 8008c34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c38:	4630      	mov	r0, r6
 8008c3a:	f000 f84d 	bl	8008cd8 <_isatty_r>
 8008c3e:	b128      	cbz	r0, 8008c4c <__smakebuf_r+0x70>
 8008c40:	89a3      	ldrh	r3, [r4, #12]
 8008c42:	f023 0303 	bic.w	r3, r3, #3
 8008c46:	f043 0301 	orr.w	r3, r3, #1
 8008c4a:	81a3      	strh	r3, [r4, #12]
 8008c4c:	89a3      	ldrh	r3, [r4, #12]
 8008c4e:	431d      	orrs	r5, r3
 8008c50:	81a5      	strh	r5, [r4, #12]
 8008c52:	e7cf      	b.n	8008bf4 <__smakebuf_r+0x18>

08008c54 <_raise_r>:
 8008c54:	291f      	cmp	r1, #31
 8008c56:	b538      	push	{r3, r4, r5, lr}
 8008c58:	4605      	mov	r5, r0
 8008c5a:	460c      	mov	r4, r1
 8008c5c:	d904      	bls.n	8008c68 <_raise_r+0x14>
 8008c5e:	2316      	movs	r3, #22
 8008c60:	6003      	str	r3, [r0, #0]
 8008c62:	f04f 30ff 	mov.w	r0, #4294967295
 8008c66:	bd38      	pop	{r3, r4, r5, pc}
 8008c68:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008c6a:	b112      	cbz	r2, 8008c72 <_raise_r+0x1e>
 8008c6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c70:	b94b      	cbnz	r3, 8008c86 <_raise_r+0x32>
 8008c72:	4628      	mov	r0, r5
 8008c74:	f000 f852 	bl	8008d1c <_getpid_r>
 8008c78:	4622      	mov	r2, r4
 8008c7a:	4601      	mov	r1, r0
 8008c7c:	4628      	mov	r0, r5
 8008c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c82:	f000 b839 	b.w	8008cf8 <_kill_r>
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d00a      	beq.n	8008ca0 <_raise_r+0x4c>
 8008c8a:	1c59      	adds	r1, r3, #1
 8008c8c:	d103      	bne.n	8008c96 <_raise_r+0x42>
 8008c8e:	2316      	movs	r3, #22
 8008c90:	6003      	str	r3, [r0, #0]
 8008c92:	2001      	movs	r0, #1
 8008c94:	e7e7      	b.n	8008c66 <_raise_r+0x12>
 8008c96:	2100      	movs	r1, #0
 8008c98:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	4798      	blx	r3
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	e7e0      	b.n	8008c66 <_raise_r+0x12>

08008ca4 <raise>:
 8008ca4:	4b02      	ldr	r3, [pc, #8]	@ (8008cb0 <raise+0xc>)
 8008ca6:	4601      	mov	r1, r0
 8008ca8:	6818      	ldr	r0, [r3, #0]
 8008caa:	f7ff bfd3 	b.w	8008c54 <_raise_r>
 8008cae:	bf00      	nop
 8008cb0:	20001788 	.word	0x20001788

08008cb4 <_fstat_r>:
 8008cb4:	b538      	push	{r3, r4, r5, lr}
 8008cb6:	4d07      	ldr	r5, [pc, #28]	@ (8008cd4 <_fstat_r+0x20>)
 8008cb8:	2300      	movs	r3, #0
 8008cba:	4604      	mov	r4, r0
 8008cbc:	4608      	mov	r0, r1
 8008cbe:	4611      	mov	r1, r2
 8008cc0:	602b      	str	r3, [r5, #0]
 8008cc2:	f7f9 f8ff 	bl	8001ec4 <_fstat>
 8008cc6:	1c43      	adds	r3, r0, #1
 8008cc8:	d102      	bne.n	8008cd0 <_fstat_r+0x1c>
 8008cca:	682b      	ldr	r3, [r5, #0]
 8008ccc:	b103      	cbz	r3, 8008cd0 <_fstat_r+0x1c>
 8008cce:	6023      	str	r3, [r4, #0]
 8008cd0:	bd38      	pop	{r3, r4, r5, pc}
 8008cd2:	bf00      	nop
 8008cd4:	20001d88 	.word	0x20001d88

08008cd8 <_isatty_r>:
 8008cd8:	b538      	push	{r3, r4, r5, lr}
 8008cda:	4d06      	ldr	r5, [pc, #24]	@ (8008cf4 <_isatty_r+0x1c>)
 8008cdc:	2300      	movs	r3, #0
 8008cde:	4604      	mov	r4, r0
 8008ce0:	4608      	mov	r0, r1
 8008ce2:	602b      	str	r3, [r5, #0]
 8008ce4:	f7f9 f8fe 	bl	8001ee4 <_isatty>
 8008ce8:	1c43      	adds	r3, r0, #1
 8008cea:	d102      	bne.n	8008cf2 <_isatty_r+0x1a>
 8008cec:	682b      	ldr	r3, [r5, #0]
 8008cee:	b103      	cbz	r3, 8008cf2 <_isatty_r+0x1a>
 8008cf0:	6023      	str	r3, [r4, #0]
 8008cf2:	bd38      	pop	{r3, r4, r5, pc}
 8008cf4:	20001d88 	.word	0x20001d88

08008cf8 <_kill_r>:
 8008cf8:	b538      	push	{r3, r4, r5, lr}
 8008cfa:	4d07      	ldr	r5, [pc, #28]	@ (8008d18 <_kill_r+0x20>)
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	4604      	mov	r4, r0
 8008d00:	4608      	mov	r0, r1
 8008d02:	4611      	mov	r1, r2
 8008d04:	602b      	str	r3, [r5, #0]
 8008d06:	f7f9 f87d 	bl	8001e04 <_kill>
 8008d0a:	1c43      	adds	r3, r0, #1
 8008d0c:	d102      	bne.n	8008d14 <_kill_r+0x1c>
 8008d0e:	682b      	ldr	r3, [r5, #0]
 8008d10:	b103      	cbz	r3, 8008d14 <_kill_r+0x1c>
 8008d12:	6023      	str	r3, [r4, #0]
 8008d14:	bd38      	pop	{r3, r4, r5, pc}
 8008d16:	bf00      	nop
 8008d18:	20001d88 	.word	0x20001d88

08008d1c <_getpid_r>:
 8008d1c:	f7f9 b86a 	b.w	8001df4 <_getpid>

08008d20 <_malloc_usable_size_r>:
 8008d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d24:	1f18      	subs	r0, r3, #4
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	bfbc      	itt	lt
 8008d2a:	580b      	ldrlt	r3, [r1, r0]
 8008d2c:	18c0      	addlt	r0, r0, r3
 8008d2e:	4770      	bx	lr

08008d30 <_init>:
 8008d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d32:	bf00      	nop
 8008d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d36:	bc08      	pop	{r3}
 8008d38:	469e      	mov	lr, r3
 8008d3a:	4770      	bx	lr

08008d3c <_fini>:
 8008d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d3e:	bf00      	nop
 8008d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d42:	bc08      	pop	{r3}
 8008d44:	469e      	mov	lr, r3
 8008d46:	4770      	bx	lr
