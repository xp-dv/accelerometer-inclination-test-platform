
Accelerometer_Inclination_Test_Platform.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f58  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  080080f8  080080f8  000090f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086f8  080086f8  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080086f8  080086f8  000096f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008700  08008700  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008700  08008700  00009700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008704  08008704  00009704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008708  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  200001d4  080088dc  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  080088dc  0000a490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0a8  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e47  00000000  00000000  000182ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  0001a0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b70  00000000  00000000  0001af98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017768  00000000  00000000  0001bb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcf4  00000000  00000000  00033270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000926d1  00000000  00000000  00042f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5635  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005130  00000000  00000000  000d5678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  000da7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080080e0 	.word	0x080080e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080080e0 	.word	0x080080e0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <adxl_tx>:

int run_setpoint(int* setpoint_i) {
 // TODO: Same as move_platform, but the setpoint information must be parsed from setpoints[]
}

void adxl_tx(uint8_t address, uint8_t value) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	460a      	mov	r2, r1
 8000f52:	71fb      	strb	r3, [r7, #7]
 8000f54:	4613      	mov	r3, r2
 8000f56:	71bb      	strb	r3, [r7, #6]
  uint8_t data[2];
  data[0] = address | 0x40;  // multibyte write enabled
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	733b      	strb	r3, [r7, #12]
  data[1] = value;
 8000f62:	79bb      	ldrb	r3, [r7, #6]
 8000f64:	737b      	strb	r3, [r7, #13]
  HAL_GPIO_WritePin(ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_RESET); // pull the cs pin low to enable the slave
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f6c:	4809      	ldr	r0, [pc, #36]	@ (8000f94 <adxl_tx+0x4c>)
 8000f6e:	f001 fbe5 	bl	800273c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, data, 2, 100); // transmit the address and data
 8000f72:	f107 010c 	add.w	r1, r7, #12
 8000f76:	2364      	movs	r3, #100	@ 0x64
 8000f78:	2202      	movs	r2, #2
 8000f7a:	4807      	ldr	r0, [pc, #28]	@ (8000f98 <adxl_tx+0x50>)
 8000f7c:	f002 f919 	bl	80031b2 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_SET); // pull the cs pin high to disable the slave
 8000f80:	2201      	movs	r2, #1
 8000f82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f86:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <adxl_tx+0x4c>)
 8000f88:	f001 fbd8 	bl	800273c <HAL_GPIO_WritePin>
}
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40020400 	.word	0x40020400
 8000f98:	200001f0 	.word	0x200001f0

08000f9c <adxl_rx>:

void adxl_rx(uint8_t address) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
  address |= 0x80;  // read operation
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	71fb      	strb	r3, [r7, #7]
  address |= 0x40;  // multibyte read
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_RESET);  // pull the cs pin low to enable the slave
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fc0:	480c      	ldr	r0, [pc, #48]	@ (8000ff4 <adxl_rx+0x58>)
 8000fc2:	f001 fbbb 	bl	800273c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &address, 1, 100);  // send the address from where you want to read data
 8000fc6:	1df9      	adds	r1, r7, #7
 8000fc8:	2364      	movs	r3, #100	@ 0x64
 8000fca:	2201      	movs	r2, #1
 8000fcc:	480a      	ldr	r0, [pc, #40]	@ (8000ff8 <adxl_rx+0x5c>)
 8000fce:	f002 f8f0 	bl	80031b2 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3, data_rec, 6, 100);  // read 6 BYTES of data
 8000fd2:	2364      	movs	r3, #100	@ 0x64
 8000fd4:	2206      	movs	r2, #6
 8000fd6:	4909      	ldr	r1, [pc, #36]	@ (8000ffc <adxl_rx+0x60>)
 8000fd8:	4807      	ldr	r0, [pc, #28]	@ (8000ff8 <adxl_rx+0x5c>)
 8000fda:	f002 fa2e 	bl	800343a <HAL_SPI_Receive>
  HAL_GPIO_WritePin(ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_SET);  // pull the cs pin high to disable the slave
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fe4:	4803      	ldr	r0, [pc, #12]	@ (8000ff4 <adxl_rx+0x58>)
 8000fe6:	f001 fba9 	bl	800273c <HAL_GPIO_WritePin>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40020400 	.word	0x40020400
 8000ff8:	200001f0 	.word	0x200001f0
 8000ffc:	20000320 	.word	0x20000320

08001000 <adxl_init>:

void adxl_init(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  HAL_Delay(2000);
 8001004:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001008:	f001 f8f2 	bl	80021f0 <HAL_Delay>
  adxl_tx(0x31, 0x01);  // data_format range= +- 4g
 800100c:	2101      	movs	r1, #1
 800100e:	2031      	movs	r0, #49	@ 0x31
 8001010:	f7ff ff9a 	bl	8000f48 <adxl_tx>
  adxl_tx(0x2d, 0x00);  // reset all bits
 8001014:	2100      	movs	r1, #0
 8001016:	202d      	movs	r0, #45	@ 0x2d
 8001018:	f7ff ff96 	bl	8000f48 <adxl_tx>
  adxl_tx(0x2d, 0x08);  // power_cntl measure and wake up 8hz
 800101c:	2108      	movs	r1, #8
 800101e:	202d      	movs	r0, #45	@ 0x2d
 8001020:	f7ff ff92 	bl	8000f48 <adxl_tx>
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <adxl_id>:

void adxl_id(void) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
  uint8_t device_id_addr = 0x00; // Address of the device ID register
 800102e:	2300      	movs	r3, #0
 8001030:	77fb      	strb	r3, [r7, #31]
  uint8_t device_id = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	77bb      	strb	r3, [r7, #30]
  adxl_rx(device_id_addr); // Assuming this will populate 'data_rec' with the ID
 8001036:	7ffb      	ldrb	r3, [r7, #31]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ffaf 	bl	8000f9c <adxl_rx>

  device_id = data_rec[0]; // Assuming the ID is the first byte read
 800103e:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <adxl_id+0x5c>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	77bb      	strb	r3, [r7, #30]
  char debug_message[30];
  sprintf(debug_message, "Device ID: 0x%X\r\n", device_id);
 8001044:	7fba      	ldrb	r2, [r7, #30]
 8001046:	463b      	mov	r3, r7
 8001048:	490f      	ldr	r1, [pc, #60]	@ (8001088 <adxl_id+0x60>)
 800104a:	4618      	mov	r0, r3
 800104c:	f004 fd7c 	bl	8005b48 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)debug_message, strlen(debug_message), 100);
 8001050:	463b      	mov	r3, r7
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff f914 	bl	8000280 <strlen>
 8001058:	4603      	mov	r3, r0
 800105a:	b29a      	uxth	r2, r3
 800105c:	4639      	mov	r1, r7
 800105e:	2364      	movs	r3, #100	@ 0x64
 8001060:	480a      	ldr	r0, [pc, #40]	@ (800108c <adxl_id+0x64>)
 8001062:	f003 fc67 	bl	8004934 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t*)debug_message, strlen(debug_message), 100);
 8001066:	463b      	mov	r3, r7
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff f909 	bl	8000280 <strlen>
 800106e:	4603      	mov	r3, r0
 8001070:	b29a      	uxth	r2, r3
 8001072:	4639      	mov	r1, r7
 8001074:	2364      	movs	r3, #100	@ 0x64
 8001076:	4806      	ldr	r0, [pc, #24]	@ (8001090 <adxl_id+0x68>)
 8001078:	f003 fc5c 	bl	8004934 <HAL_UART_Transmit>
}
 800107c:	bf00      	nop
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000320 	.word	0x20000320
 8001088:	080080f8 	.word	0x080080f8
 800108c:	20000290 	.word	0x20000290
 8001090:	200002d8 	.word	0x200002d8
 8001094:	00000000 	.word	0x00000000

08001098 <adxl_read>:

void adxl_read(void) {
 8001098:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800109c:	ed2d 8b02 	vpush	{d8}
 80010a0:	b09a      	sub	sp, #104	@ 0x68
 80010a2:	af06      	add	r7, sp, #24
  adxl_rx(0x32); // Request data starting from the DATAX0 register
 80010a4:	2032      	movs	r0, #50	@ 0x32
 80010a6:	f7ff ff79 	bl	8000f9c <adxl_rx>
  // Convert the accelerometer values to 16-bit signed integers
  int16_t x_raw = (int16_t)((data_rec[1] << 8) | data_rec[0]);
 80010aa:	4b8b      	ldr	r3, [pc, #556]	@ (80012d8 <adxl_read+0x240>)
 80010ac:	785b      	ldrb	r3, [r3, #1]
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	b21a      	sxth	r2, r3
 80010b2:	4b89      	ldr	r3, [pc, #548]	@ (80012d8 <adxl_read+0x240>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	4313      	orrs	r3, r2
 80010ba:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  int16_t y_raw = (int16_t)((data_rec[3] << 8) | data_rec[2]);
 80010be:	4b86      	ldr	r3, [pc, #536]	@ (80012d8 <adxl_read+0x240>)
 80010c0:	78db      	ldrb	r3, [r3, #3]
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	4b84      	ldr	r3, [pc, #528]	@ (80012d8 <adxl_read+0x240>)
 80010c8:	789b      	ldrb	r3, [r3, #2]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
  int16_t z_raw = (int16_t)((data_rec[5] << 8) | data_rec[4]);
 80010d2:	4b81      	ldr	r3, [pc, #516]	@ (80012d8 <adxl_read+0x240>)
 80010d4:	795b      	ldrb	r3, [r3, #5]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	4b7f      	ldr	r3, [pc, #508]	@ (80012d8 <adxl_read+0x240>)
 80010dc:	791b      	ldrb	r3, [r3, #4]
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

  // Convert raw values to g's
  x_g = x_raw * ADXL_SCALE_FACTOR;
 80010e6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fa22 	bl	8000534 <__aeabi_i2d>
 80010f0:	a375      	add	r3, pc, #468	@ (adr r3, 80012c8 <adxl_read+0x230>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f7ff fa87 	bl	8000608 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	f7ff fd59 	bl	8000bb8 <__aeabi_d2f>
 8001106:	4603      	mov	r3, r0
 8001108:	4a74      	ldr	r2, [pc, #464]	@ (80012dc <adxl_read+0x244>)
 800110a:	6013      	str	r3, [r2, #0]
  y_g = y_raw * ADXL_SCALE_FACTOR;
 800110c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fa0f 	bl	8000534 <__aeabi_i2d>
 8001116:	a36c      	add	r3, pc, #432	@ (adr r3, 80012c8 <adxl_read+0x230>)
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	f7ff fa74 	bl	8000608 <__aeabi_dmul>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff fd46 	bl	8000bb8 <__aeabi_d2f>
 800112c:	4603      	mov	r3, r0
 800112e:	4a6c      	ldr	r2, [pc, #432]	@ (80012e0 <adxl_read+0x248>)
 8001130:	6013      	str	r3, [r2, #0]
  z_g = z_raw * ADXL_SCALE_FACTOR;
 8001132:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f9fc 	bl	8000534 <__aeabi_i2d>
 800113c:	a362      	add	r3, pc, #392	@ (adr r3, 80012c8 <adxl_read+0x230>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff fa61 	bl	8000608 <__aeabi_dmul>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff fd33 	bl	8000bb8 <__aeabi_d2f>
 8001152:	4603      	mov	r3, r0
 8001154:	4a63      	ldr	r2, [pc, #396]	@ (80012e4 <adxl_read+0x24c>)
 8001156:	6013      	str	r3, [r2, #0]

  x_ang = atan2f(-y_g, sqrtf(x_g * x_g + z_g * z_g));
 8001158:	4b61      	ldr	r3, [pc, #388]	@ (80012e0 <adxl_read+0x248>)
 800115a:	edd3 7a00 	vldr	s15, [r3]
 800115e:	eeb1 8a67 	vneg.f32	s16, s15
 8001162:	4b5e      	ldr	r3, [pc, #376]	@ (80012dc <adxl_read+0x244>)
 8001164:	ed93 7a00 	vldr	s14, [r3]
 8001168:	4b5c      	ldr	r3, [pc, #368]	@ (80012dc <adxl_read+0x244>)
 800116a:	edd3 7a00 	vldr	s15, [r3]
 800116e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001172:	4b5c      	ldr	r3, [pc, #368]	@ (80012e4 <adxl_read+0x24c>)
 8001174:	edd3 6a00 	vldr	s13, [r3]
 8001178:	4b5a      	ldr	r3, [pc, #360]	@ (80012e4 <adxl_read+0x24c>)
 800117a:	edd3 7a00 	vldr	s15, [r3]
 800117e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001182:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001186:	eeb0 0a67 	vmov.f32	s0, s15
 800118a:	f006 fe0b 	bl	8007da4 <sqrtf>
 800118e:	eef0 7a40 	vmov.f32	s15, s0
 8001192:	eef0 0a67 	vmov.f32	s1, s15
 8001196:	eeb0 0a48 	vmov.f32	s0, s16
 800119a:	f006 fe01 	bl	8007da0 <atan2f>
 800119e:	eef0 7a40 	vmov.f32	s15, s0
 80011a2:	4b51      	ldr	r3, [pc, #324]	@ (80012e8 <adxl_read+0x250>)
 80011a4:	edc3 7a00 	vstr	s15, [r3]
  y_ang = atan2f(-x_g, sqrtf(y_g * y_g + z_g * z_g));
 80011a8:	4b4c      	ldr	r3, [pc, #304]	@ (80012dc <adxl_read+0x244>)
 80011aa:	edd3 7a00 	vldr	s15, [r3]
 80011ae:	eeb1 8a67 	vneg.f32	s16, s15
 80011b2:	4b4b      	ldr	r3, [pc, #300]	@ (80012e0 <adxl_read+0x248>)
 80011b4:	ed93 7a00 	vldr	s14, [r3]
 80011b8:	4b49      	ldr	r3, [pc, #292]	@ (80012e0 <adxl_read+0x248>)
 80011ba:	edd3 7a00 	vldr	s15, [r3]
 80011be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c2:	4b48      	ldr	r3, [pc, #288]	@ (80012e4 <adxl_read+0x24c>)
 80011c4:	edd3 6a00 	vldr	s13, [r3]
 80011c8:	4b46      	ldr	r3, [pc, #280]	@ (80012e4 <adxl_read+0x24c>)
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d6:	eeb0 0a67 	vmov.f32	s0, s15
 80011da:	f006 fde3 	bl	8007da4 <sqrtf>
 80011de:	eef0 7a40 	vmov.f32	s15, s0
 80011e2:	eef0 0a67 	vmov.f32	s1, s15
 80011e6:	eeb0 0a48 	vmov.f32	s0, s16
 80011ea:	f006 fdd9 	bl	8007da0 <atan2f>
 80011ee:	eef0 7a40 	vmov.f32	s15, s0
 80011f2:	4b3e      	ldr	r3, [pc, #248]	@ (80012ec <adxl_read+0x254>)
 80011f4:	edc3 7a00 	vstr	s15, [r3]
  // z_ang = atan2f(sqrtf(x_g * x_g + y_g * y_g), z_g);

  x_ang = x_ang * (180.0f / M_PI);
 80011f8:	4b3b      	ldr	r3, [pc, #236]	@ (80012e8 <adxl_read+0x250>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f9ab 	bl	8000558 <__aeabi_f2d>
 8001202:	a333      	add	r3, pc, #204	@ (adr r3, 80012d0 <adxl_read+0x238>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff f9fe 	bl	8000608 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fcd0 	bl	8000bb8 <__aeabi_d2f>
 8001218:	4603      	mov	r3, r0
 800121a:	4a33      	ldr	r2, [pc, #204]	@ (80012e8 <adxl_read+0x250>)
 800121c:	6013      	str	r3, [r2, #0]
  y_ang = y_ang * (180.0f / M_PI);
 800121e:	4b33      	ldr	r3, [pc, #204]	@ (80012ec <adxl_read+0x254>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f998 	bl	8000558 <__aeabi_f2d>
 8001228:	a329      	add	r3, pc, #164	@ (adr r3, 80012d0 <adxl_read+0x238>)
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	f7ff f9eb 	bl	8000608 <__aeabi_dmul>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fcbd 	bl	8000bb8 <__aeabi_d2f>
 800123e:	4603      	mov	r3, r0
 8001240:	4a2a      	ldr	r2, [pc, #168]	@ (80012ec <adxl_read+0x254>)
 8001242:	6013      	str	r3, [r2, #0]
  // z_ang = z_ang * (180.0f / M_PI);

  char uart_buf[64];
  int len = snprintf(uart_buf, sizeof(uart_buf), "X(°)=%0.2f, Y(°)=%0.2f, Z(g)=%0.2f\r\n", x_ang, y_ang, z_g);
 8001244:	4b28      	ldr	r3, [pc, #160]	@ (80012e8 <adxl_read+0x250>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f985 	bl	8000558 <__aeabi_f2d>
 800124e:	4604      	mov	r4, r0
 8001250:	460d      	mov	r5, r1
 8001252:	4b26      	ldr	r3, [pc, #152]	@ (80012ec <adxl_read+0x254>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f97e 	bl	8000558 <__aeabi_f2d>
 800125c:	4680      	mov	r8, r0
 800125e:	4689      	mov	r9, r1
 8001260:	4b20      	ldr	r3, [pc, #128]	@ (80012e4 <adxl_read+0x24c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f977 	bl	8000558 <__aeabi_f2d>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	1d38      	adds	r0, r7, #4
 8001270:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001274:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001278:	e9cd 4500 	strd	r4, r5, [sp]
 800127c:	4a1c      	ldr	r2, [pc, #112]	@ (80012f0 <adxl_read+0x258>)
 800127e:	2140      	movs	r1, #64	@ 0x40
 8001280:	f004 fc2e 	bl	8005ae0 <sniprintf>
 8001284:	6478      	str	r0, [r7, #68]	@ 0x44
  if (len > 0 && len < sizeof(uart_buf)) {
 8001286:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001288:	2b00      	cmp	r3, #0
 800128a:	dd15      	ble.n	80012b8 <adxl_read+0x220>
 800128c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800128e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001290:	d812      	bhi.n	80012b8 <adxl_read+0x220>
  HAL_Delay(200); //*TODO Remove this delay when sample timer has been implemented
 8001292:	20c8      	movs	r0, #200	@ 0xc8
 8001294:	f000 ffac 	bl	80021f0 <HAL_Delay>
  HAL_UART_Transmit(&huart1, (uint8_t*)uart_buf, len, HAL_MAX_DELAY);
 8001298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800129a:	b29a      	uxth	r2, r3
 800129c:	1d39      	adds	r1, r7, #4
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	4814      	ldr	r0, [pc, #80]	@ (80012f4 <adxl_read+0x25c>)
 80012a4:	f003 fb46 	bl	8004934 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, len, HAL_MAX_DELAY); // Send data
 80012a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	1d39      	adds	r1, r7, #4
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	4811      	ldr	r0, [pc, #68]	@ (80012f8 <adxl_read+0x260>)
 80012b4:	f003 fb3e 	bl	8004934 <HAL_UART_Transmit>
  }
}
 80012b8:	bf00      	nop
 80012ba:	3750      	adds	r7, #80	@ 0x50
 80012bc:	46bd      	mov	sp, r7
 80012be:	ecbd 8b02 	vpop	{d8}
 80012c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012c6:	bf00      	nop
 80012c8:	c9afe1da 	.word	0xc9afe1da
 80012cc:	3f70f51a 	.word	0x3f70f51a
 80012d0:	1a63c1f8 	.word	0x1a63c1f8
 80012d4:	404ca5dc 	.word	0x404ca5dc
 80012d8:	20000320 	.word	0x20000320
 80012dc:	20000328 	.word	0x20000328
 80012e0:	2000032c 	.word	0x2000032c
 80012e4:	20000330 	.word	0x20000330
 80012e8:	20000334 	.word	0x20000334
 80012ec:	20000338 	.word	0x20000338
 80012f0:	0800810c 	.word	0x0800810c
 80012f4:	20000290 	.word	0x20000290
 80012f8:	200002d8 	.word	0x200002d8

080012fc <servo_test>:
//   // CCR2 = 75 + pos_y*(1/2.7); // Move y-axis servo
//   // HAL_Delay(1000); // Wait before moving again
// }

#ifdef TEST // The following code will only be compiled if TEST is defined in the header file
  void servo_test(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b09a      	sub	sp, #104	@ 0x68
 8001300:	af00      	add	r7, sp, #0
    char test_pos[100];
    int len;
    if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 8001302:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001306:	48bb      	ldr	r0, [pc, #748]	@ (80015f4 <servo_test+0x2f8>)
 8001308:	f001 fa00 	bl	800270c <HAL_GPIO_ReadPin>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	f040 820b 	bne.w	800172a <servo_test+0x42e>
      // Center Platform
      CCR_X = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_X; // 0°
 8001314:	4bb8      	ldr	r3, [pc, #736]	@ (80015f8 <servo_test+0x2fc>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f240 52cd 	movw	r2, #1485	@ 0x5cd
 800131c:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_Y; // 0°
 800131e:	4bb6      	ldr	r3, [pc, #728]	@ (80015f8 <servo_test+0x2fc>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f240 52c3 	movw	r2, #1475	@ 0x5c3
 8001326:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 8001328:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800132c:	f000 ff60 	bl	80021f0 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing 0° for X and Y axes:\r\n");
 8001330:	463b      	mov	r3, r7
 8001332:	4ab2      	ldr	r2, [pc, #712]	@ (80015fc <servo_test+0x300>)
 8001334:	2164      	movs	r1, #100	@ 0x64
 8001336:	4618      	mov	r0, r3
 8001338:	f004 fbd2 	bl	8005ae0 <sniprintf>
 800133c:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 800133e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001340:	b29a      	uxth	r2, r3
 8001342:	4639      	mov	r1, r7
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	48ad      	ldr	r0, [pc, #692]	@ (8001600 <servo_test+0x304>)
 800134a:	f003 faf3 	bl	8004934 <HAL_UART_Transmit>
      adxl_read();
 800134e:	f7ff fea3 	bl	8001098 <adxl_read>

      // Move X-Axis
      CCR_X = PULSE_WIDTH_NEG_90 + PULSE_WIDTH_OFFSET_X; // -90° or 45° (From PULSE_WIDTH_MIN)
 8001352:	4ba9      	ldr	r3, [pc, #676]	@ (80015f8 <servo_test+0x2fc>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f240 3233 	movw	r2, #819	@ 0x333
 800135a:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_Y; // 0° or 135°
 800135c:	4ba6      	ldr	r3, [pc, #664]	@ (80015f8 <servo_test+0x2fc>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f240 52c3 	movw	r2, #1475	@ 0x5c3
 8001364:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 8001366:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800136a:	f000 ff41 	bl	80021f0 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing -90° for X, 0° for Y axis:\r\n");
 800136e:	463b      	mov	r3, r7
 8001370:	4aa4      	ldr	r2, [pc, #656]	@ (8001604 <servo_test+0x308>)
 8001372:	2164      	movs	r1, #100	@ 0x64
 8001374:	4618      	mov	r0, r3
 8001376:	f004 fbb3 	bl	8005ae0 <sniprintf>
 800137a:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 800137c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800137e:	b29a      	uxth	r2, r3
 8001380:	4639      	mov	r1, r7
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	489e      	ldr	r0, [pc, #632]	@ (8001600 <servo_test+0x304>)
 8001388:	f003 fad4 	bl	8004934 <HAL_UART_Transmit>
      adxl_read();
 800138c:	f7ff fe84 	bl	8001098 <adxl_read>
      CCR_X = PULSE_WIDTH_NEG_45 + PULSE_WIDTH_OFFSET_X; // -45° or 90° (From PULSE_WIDTH_MIN)
 8001390:	4b99      	ldr	r3, [pc, #612]	@ (80015f8 <servo_test+0x2fc>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8001398:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_Y; // 0° or 135°
 800139a:	4b97      	ldr	r3, [pc, #604]	@ (80015f8 <servo_test+0x2fc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f240 52c3 	movw	r2, #1475	@ 0x5c3
 80013a2:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 80013a4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80013a8:	f000 ff22 	bl	80021f0 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing -45° for X, 0° for Y axis:\r\n");
 80013ac:	463b      	mov	r3, r7
 80013ae:	4a96      	ldr	r2, [pc, #600]	@ (8001608 <servo_test+0x30c>)
 80013b0:	2164      	movs	r1, #100	@ 0x64
 80013b2:	4618      	mov	r0, r3
 80013b4:	f004 fb94 	bl	8005ae0 <sniprintf>
 80013b8:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 80013ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80013bc:	b29a      	uxth	r2, r3
 80013be:	4639      	mov	r1, r7
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
 80013c4:	488e      	ldr	r0, [pc, #568]	@ (8001600 <servo_test+0x304>)
 80013c6:	f003 fab5 	bl	8004934 <HAL_UART_Transmit>
      adxl_read();
 80013ca:	f7ff fe65 	bl	8001098 <adxl_read>
      CCR_X = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_X; // 0° or 135°
 80013ce:	4b8a      	ldr	r3, [pc, #552]	@ (80015f8 <servo_test+0x2fc>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f240 52cd 	movw	r2, #1485	@ 0x5cd
 80013d6:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_Y; // 0° or 135°
 80013d8:	4b87      	ldr	r3, [pc, #540]	@ (80015f8 <servo_test+0x2fc>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f240 52c3 	movw	r2, #1475	@ 0x5c3
 80013e0:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 80013e2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80013e6:	f000 ff03 	bl	80021f0 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing 0° for X and Y axes:\r\n");
 80013ea:	463b      	mov	r3, r7
 80013ec:	4a83      	ldr	r2, [pc, #524]	@ (80015fc <servo_test+0x300>)
 80013ee:	2164      	movs	r1, #100	@ 0x64
 80013f0:	4618      	mov	r0, r3
 80013f2:	f004 fb75 	bl	8005ae0 <sniprintf>
 80013f6:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 80013f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	4639      	mov	r1, r7
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	487f      	ldr	r0, [pc, #508]	@ (8001600 <servo_test+0x304>)
 8001404:	f003 fa96 	bl	8004934 <HAL_UART_Transmit>
      adxl_read();
 8001408:	f7ff fe46 	bl	8001098 <adxl_read>
      CCR_X = PULSE_WIDTH_POS_45 + PULSE_WIDTH_OFFSET_X; // +45° or 180° (From PULSE_WIDTH_MIN)
 800140c:	4b7a      	ldr	r3, [pc, #488]	@ (80015f8 <servo_test+0x2fc>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f240 721a 	movw	r2, #1818	@ 0x71a
 8001414:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_Y; // 0° or 135°
 8001416:	4b78      	ldr	r3, [pc, #480]	@ (80015f8 <servo_test+0x2fc>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f240 52c3 	movw	r2, #1475	@ 0x5c3
 800141e:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 8001420:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001424:	f000 fee4 	bl	80021f0 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing +45° for X, 0° for Y axis:\r\n");
 8001428:	463b      	mov	r3, r7
 800142a:	4a78      	ldr	r2, [pc, #480]	@ (800160c <servo_test+0x310>)
 800142c:	2164      	movs	r1, #100	@ 0x64
 800142e:	4618      	mov	r0, r3
 8001430:	f004 fb56 	bl	8005ae0 <sniprintf>
 8001434:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 8001436:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001438:	b29a      	uxth	r2, r3
 800143a:	4639      	mov	r1, r7
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	486f      	ldr	r0, [pc, #444]	@ (8001600 <servo_test+0x304>)
 8001442:	f003 fa77 	bl	8004934 <HAL_UART_Transmit>
      adxl_read();
 8001446:	f7ff fe27 	bl	8001098 <adxl_read>
      CCR_X = PULSE_WIDTH_POS_90 + PULSE_WIDTH_OFFSET_X; // +90° or 225° (From PULSE_WIDTH_MIN)
 800144a:	4b6b      	ldr	r3, [pc, #428]	@ (80015f8 <servo_test+0x2fc>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f640 0267 	movw	r2, #2151	@ 0x867
 8001452:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_Y; // 0° or 135°
 8001454:	4b68      	ldr	r3, [pc, #416]	@ (80015f8 <servo_test+0x2fc>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f240 52c3 	movw	r2, #1475	@ 0x5c3
 800145c:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 800145e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001462:	f000 fec5 	bl	80021f0 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing +90° for X, 0° for Y axis:\r\n");
 8001466:	463b      	mov	r3, r7
 8001468:	4a69      	ldr	r2, [pc, #420]	@ (8001610 <servo_test+0x314>)
 800146a:	2164      	movs	r1, #100	@ 0x64
 800146c:	4618      	mov	r0, r3
 800146e:	f004 fb37 	bl	8005ae0 <sniprintf>
 8001472:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 8001474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001476:	b29a      	uxth	r2, r3
 8001478:	4639      	mov	r1, r7
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	4860      	ldr	r0, [pc, #384]	@ (8001600 <servo_test+0x304>)
 8001480:	f003 fa58 	bl	8004934 <HAL_UART_Transmit>
      adxl_read();
 8001484:	f7ff fe08 	bl	8001098 <adxl_read>

      // Move Y-Axis
      CCR_X = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_X; // 0° or 135°
 8001488:	4b5b      	ldr	r3, [pc, #364]	@ (80015f8 <servo_test+0x2fc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f240 52cd 	movw	r2, #1485	@ 0x5cd
 8001490:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_NEG_90 + PULSE_WIDTH_OFFSET_Y; // -90° or 45° (From PULSE_WIDTH_MIN)
 8001492:	4b59      	ldr	r3, [pc, #356]	@ (80015f8 <servo_test+0x2fc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f240 3229 	movw	r2, #809	@ 0x329
 800149a:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 800149c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80014a0:	f000 fea6 	bl	80021f0 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing 0° for X, -90° for Y axis:\r\n");
 80014a4:	463b      	mov	r3, r7
 80014a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001614 <servo_test+0x318>)
 80014a8:	2164      	movs	r1, #100	@ 0x64
 80014aa:	4618      	mov	r0, r3
 80014ac:	f004 fb18 	bl	8005ae0 <sniprintf>
 80014b0:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 80014b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	4639      	mov	r1, r7
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
 80014bc:	4850      	ldr	r0, [pc, #320]	@ (8001600 <servo_test+0x304>)
 80014be:	f003 fa39 	bl	8004934 <HAL_UART_Transmit>
      adxl_read();
 80014c2:	f7ff fde9 	bl	8001098 <adxl_read>
      CCR_X = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_X; // 0° or 135°
 80014c6:	4b4c      	ldr	r3, [pc, #304]	@ (80015f8 <servo_test+0x2fc>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f240 52cd 	movw	r2, #1485	@ 0x5cd
 80014ce:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_NEG_45 + PULSE_WIDTH_OFFSET_Y; // -45° or 90° (From PULSE_WIDTH_MIN)
 80014d0:	4b49      	ldr	r3, [pc, #292]	@ (80015f8 <servo_test+0x2fc>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f240 4276 	movw	r2, #1142	@ 0x476
 80014d8:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 80014da:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80014de:	f000 fe87 	bl	80021f0 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing 0° for X, -45° for Y axis:\r\n");
 80014e2:	463b      	mov	r3, r7
 80014e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001618 <servo_test+0x31c>)
 80014e6:	2164      	movs	r1, #100	@ 0x64
 80014e8:	4618      	mov	r0, r3
 80014ea:	f004 faf9 	bl	8005ae0 <sniprintf>
 80014ee:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 80014f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	4639      	mov	r1, r7
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
 80014fa:	4841      	ldr	r0, [pc, #260]	@ (8001600 <servo_test+0x304>)
 80014fc:	f003 fa1a 	bl	8004934 <HAL_UART_Transmit>
      adxl_read();
 8001500:	f7ff fdca 	bl	8001098 <adxl_read>
      CCR_X = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_X; // 0° or 135°
 8001504:	4b3c      	ldr	r3, [pc, #240]	@ (80015f8 <servo_test+0x2fc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f240 52cd 	movw	r2, #1485	@ 0x5cd
 800150c:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_Y; // 0° or 135°
 800150e:	4b3a      	ldr	r3, [pc, #232]	@ (80015f8 <servo_test+0x2fc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f240 52c3 	movw	r2, #1475	@ 0x5c3
 8001516:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 8001518:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800151c:	f000 fe68 	bl	80021f0 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing 0° for X and Y axes:\r\n");
 8001520:	463b      	mov	r3, r7
 8001522:	4a36      	ldr	r2, [pc, #216]	@ (80015fc <servo_test+0x300>)
 8001524:	2164      	movs	r1, #100	@ 0x64
 8001526:	4618      	mov	r0, r3
 8001528:	f004 fada 	bl	8005ae0 <sniprintf>
 800152c:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 800152e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001530:	b29a      	uxth	r2, r3
 8001532:	4639      	mov	r1, r7
 8001534:	f04f 33ff 	mov.w	r3, #4294967295
 8001538:	4831      	ldr	r0, [pc, #196]	@ (8001600 <servo_test+0x304>)
 800153a:	f003 f9fb 	bl	8004934 <HAL_UART_Transmit>
      adxl_read();
 800153e:	f7ff fdab 	bl	8001098 <adxl_read>
      CCR_X = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_X; // 0° or 135°
 8001542:	4b2d      	ldr	r3, [pc, #180]	@ (80015f8 <servo_test+0x2fc>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f240 52cd 	movw	r2, #1485	@ 0x5cd
 800154a:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_POS_45 + PULSE_WIDTH_OFFSET_Y; // +45° or 180° (From PULSE_WIDTH_MIN)
 800154c:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <servo_test+0x2fc>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f44f 62e2 	mov.w	r2, #1808	@ 0x710
 8001554:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 8001556:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800155a:	f000 fe49 	bl	80021f0 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing 0° for X, +45° for Y axis:\r\n");
 800155e:	463b      	mov	r3, r7
 8001560:	4a2e      	ldr	r2, [pc, #184]	@ (800161c <servo_test+0x320>)
 8001562:	2164      	movs	r1, #100	@ 0x64
 8001564:	4618      	mov	r0, r3
 8001566:	f004 fabb 	bl	8005ae0 <sniprintf>
 800156a:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 800156c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800156e:	b29a      	uxth	r2, r3
 8001570:	4639      	mov	r1, r7
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	4822      	ldr	r0, [pc, #136]	@ (8001600 <servo_test+0x304>)
 8001578:	f003 f9dc 	bl	8004934 <HAL_UART_Transmit>
      adxl_read();
 800157c:	f7ff fd8c 	bl	8001098 <adxl_read>
      CCR_X = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_X; // 0° or 135°
 8001580:	4b1d      	ldr	r3, [pc, #116]	@ (80015f8 <servo_test+0x2fc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f240 52cd 	movw	r2, #1485	@ 0x5cd
 8001588:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_POS_90 + PULSE_WIDTH_OFFSET_Y; // +90° or 225° (From PULSE_WIDTH_MIN)
 800158a:	4b1b      	ldr	r3, [pc, #108]	@ (80015f8 <servo_test+0x2fc>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f640 025d 	movw	r2, #2141	@ 0x85d
 8001592:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 8001594:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001598:	f000 fe2a 	bl	80021f0 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing 0° for X, +90° for Y axis:\r\n");
 800159c:	463b      	mov	r3, r7
 800159e:	4a20      	ldr	r2, [pc, #128]	@ (8001620 <servo_test+0x324>)
 80015a0:	2164      	movs	r1, #100	@ 0x64
 80015a2:	4618      	mov	r0, r3
 80015a4:	f004 fa9c 	bl	8005ae0 <sniprintf>
 80015a8:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 80015aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	4639      	mov	r1, r7
 80015b0:	f04f 33ff 	mov.w	r3, #4294967295
 80015b4:	4812      	ldr	r0, [pc, #72]	@ (8001600 <servo_test+0x304>)
 80015b6:	f003 f9bd 	bl	8004934 <HAL_UART_Transmit>
      adxl_read();
 80015ba:	f7ff fd6d 	bl	8001098 <adxl_read>

      // Move Both Axes
      CCR_X = PULSE_WIDTH_NEG_45 + PULSE_WIDTH_OFFSET_X; // -45°
 80015be:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <servo_test+0x2fc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 80015c6:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_NEG_45 + PULSE_WIDTH_OFFSET_Y; // -45°
 80015c8:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <servo_test+0x2fc>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f240 4276 	movw	r2, #1142	@ 0x476
 80015d0:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 80015d2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80015d6:	f000 fe0b 	bl	80021f0 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing -45° for X and Y axes:\r\n");
 80015da:	463b      	mov	r3, r7
 80015dc:	4a11      	ldr	r2, [pc, #68]	@ (8001624 <servo_test+0x328>)
 80015de:	2164      	movs	r1, #100	@ 0x64
 80015e0:	4618      	mov	r0, r3
 80015e2:	f004 fa7d 	bl	8005ae0 <sniprintf>
 80015e6:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 80015e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	4639      	mov	r1, r7
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	e019      	b.n	8001628 <servo_test+0x32c>
 80015f4:	40020800 	.word	0x40020800
 80015f8:	20000248 	.word	0x20000248
 80015fc:	08008134 	.word	0x08008134
 8001600:	200002d8 	.word	0x200002d8
 8001604:	08008154 	.word	0x08008154
 8001608:	0800817c 	.word	0x0800817c
 800160c:	080081a4 	.word	0x080081a4
 8001610:	080081cc 	.word	0x080081cc
 8001614:	080081f4 	.word	0x080081f4
 8001618:	0800821c 	.word	0x0800821c
 800161c:	08008244 	.word	0x08008244
 8001620:	0800826c 	.word	0x0800826c
 8001624:	08008294 	.word	0x08008294
 8001628:	4842      	ldr	r0, [pc, #264]	@ (8001734 <servo_test+0x438>)
 800162a:	f003 f983 	bl	8004934 <HAL_UART_Transmit>
      adxl_read();
 800162e:	f7ff fd33 	bl	8001098 <adxl_read>
      CCR_X = PULSE_WIDTH_POS_45 + PULSE_WIDTH_OFFSET_X; // +45°
 8001632:	4b41      	ldr	r3, [pc, #260]	@ (8001738 <servo_test+0x43c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f240 721a 	movw	r2, #1818	@ 0x71a
 800163a:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_POS_45 + PULSE_WIDTH_OFFSET_Y; // +45°
 800163c:	4b3e      	ldr	r3, [pc, #248]	@ (8001738 <servo_test+0x43c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f44f 62e2 	mov.w	r2, #1808	@ 0x710
 8001644:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 8001646:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800164a:	f000 fdd1 	bl	80021f0 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing +45° for X and Y axes:\r\n");
 800164e:	463b      	mov	r3, r7
 8001650:	4a3a      	ldr	r2, [pc, #232]	@ (800173c <servo_test+0x440>)
 8001652:	2164      	movs	r1, #100	@ 0x64
 8001654:	4618      	mov	r0, r3
 8001656:	f004 fa43 	bl	8005ae0 <sniprintf>
 800165a:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 800165c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800165e:	b29a      	uxth	r2, r3
 8001660:	4639      	mov	r1, r7
 8001662:	f04f 33ff 	mov.w	r3, #4294967295
 8001666:	4833      	ldr	r0, [pc, #204]	@ (8001734 <servo_test+0x438>)
 8001668:	f003 f964 	bl	8004934 <HAL_UART_Transmit>
      adxl_read();
 800166c:	f7ff fd14 	bl	8001098 <adxl_read>
      CCR_X = PULSE_WIDTH_POS_45 + PULSE_WIDTH_OFFSET_X; // +45°
 8001670:	4b31      	ldr	r3, [pc, #196]	@ (8001738 <servo_test+0x43c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f240 721a 	movw	r2, #1818	@ 0x71a
 8001678:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_NEG_45 + PULSE_WIDTH_OFFSET_Y; // -45°
 800167a:	4b2f      	ldr	r3, [pc, #188]	@ (8001738 <servo_test+0x43c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f240 4276 	movw	r2, #1142	@ 0x476
 8001682:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 8001684:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001688:	f000 fdb2 	bl	80021f0 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing +45° for X, -45° for Y axis:\r\n");
 800168c:	463b      	mov	r3, r7
 800168e:	4a2c      	ldr	r2, [pc, #176]	@ (8001740 <servo_test+0x444>)
 8001690:	2164      	movs	r1, #100	@ 0x64
 8001692:	4618      	mov	r0, r3
 8001694:	f004 fa24 	bl	8005ae0 <sniprintf>
 8001698:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 800169a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800169c:	b29a      	uxth	r2, r3
 800169e:	4639      	mov	r1, r7
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
 80016a4:	4823      	ldr	r0, [pc, #140]	@ (8001734 <servo_test+0x438>)
 80016a6:	f003 f945 	bl	8004934 <HAL_UART_Transmit>
      adxl_read();
 80016aa:	f7ff fcf5 	bl	8001098 <adxl_read>
      CCR_X = PULSE_WIDTH_NEG_45 + PULSE_WIDTH_OFFSET_X; // -45°
 80016ae:	4b22      	ldr	r3, [pc, #136]	@ (8001738 <servo_test+0x43c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 80016b6:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_POS_45 + PULSE_WIDTH_OFFSET_Y; // +45°
 80016b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001738 <servo_test+0x43c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f44f 62e2 	mov.w	r2, #1808	@ 0x710
 80016c0:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 80016c2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80016c6:	f000 fd93 	bl	80021f0 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing -45° for X, +45° for Y axis:\r\n");
 80016ca:	463b      	mov	r3, r7
 80016cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001744 <servo_test+0x448>)
 80016ce:	2164      	movs	r1, #100	@ 0x64
 80016d0:	4618      	mov	r0, r3
 80016d2:	f004 fa05 	bl	8005ae0 <sniprintf>
 80016d6:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 80016d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016da:	b29a      	uxth	r2, r3
 80016dc:	4639      	mov	r1, r7
 80016de:	f04f 33ff 	mov.w	r3, #4294967295
 80016e2:	4814      	ldr	r0, [pc, #80]	@ (8001734 <servo_test+0x438>)
 80016e4:	f003 f926 	bl	8004934 <HAL_UART_Transmit>
      adxl_read();
 80016e8:	f7ff fcd6 	bl	8001098 <adxl_read>
      CCR_X = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_X; // 0°
 80016ec:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <servo_test+0x43c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f240 52cd 	movw	r2, #1485	@ 0x5cd
 80016f4:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_Y; // 0°
 80016f6:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <servo_test+0x43c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f240 52c3 	movw	r2, #1475	@ 0x5c3
 80016fe:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 8001700:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001704:	f000 fd74 	bl	80021f0 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing 0° for X and Y axes:\r\n");
 8001708:	463b      	mov	r3, r7
 800170a:	4a0f      	ldr	r2, [pc, #60]	@ (8001748 <servo_test+0x44c>)
 800170c:	2164      	movs	r1, #100	@ 0x64
 800170e:	4618      	mov	r0, r3
 8001710:	f004 f9e6 	bl	8005ae0 <sniprintf>
 8001714:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 8001716:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001718:	b29a      	uxth	r2, r3
 800171a:	4639      	mov	r1, r7
 800171c:	f04f 33ff 	mov.w	r3, #4294967295
 8001720:	4804      	ldr	r0, [pc, #16]	@ (8001734 <servo_test+0x438>)
 8001722:	f003 f907 	bl	8004934 <HAL_UART_Transmit>
      adxl_read();
 8001726:	f7ff fcb7 	bl	8001098 <adxl_read>
      // HAL_Delay(SERVO_TEST_DELAY);
      // CCR_X = SERVO_NEUTRAL; // Return X-Axis to Neutral
      // CCR_Y = SERVO_NEUTRAL; // Return Y-Axis to Neutral
      // HAL_Delay(SERVO_TEST_DELAY);
    }
  }
 800172a:	bf00      	nop
 800172c:	3768      	adds	r7, #104	@ 0x68
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200002d8 	.word	0x200002d8
 8001738:	20000248 	.word	0x20000248
 800173c:	080082b8 	.word	0x080082b8
 8001740:	080082dc 	.word	0x080082dc
 8001744:	08008308 	.word	0x08008308
 8001748:	08008134 	.word	0x08008134

0800174c <startup_handler>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Prototype Event Handlers */
system_state_t startup_handler(void) {
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  // System startup processes
  // Calibrate/center servos
  return WAIT_FOR_INSTRUCTION;
 8001750:	2301      	movs	r3, #1
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <waiting_handler>:

system_state_t waiting_handler(void) {
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  //*TODO Detect and decode all incoming serial instructions to determine the next state

  // Else
  return WAIT_FOR_INSTRUCTION;
 8001760:	2301      	movs	r3, #1
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <edit_sequence_handler>:

system_state_t edit_sequence_handler(void) {
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  // Allow user to define and store a test setpoint
  return WAIT_FOR_INSTRUCTION;
 8001770:	2301      	movs	r3, #1
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <run_setpoint_handler>:

system_state_t run_setpoint_handler(void) {
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  // Run test setpoint
  // Calls move servo function
  return WAIT_FOR_INSTRUCTION;
 8001780:	2301      	movs	r3, #1
}
 8001782:	4618      	mov	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001792:	f000 fcbb 	bl	800210c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001796:	f000 f845 	bl	8001824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800179a:	f000 f9b5 	bl	8001b08 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800179e:	f000 f989 	bl	8001ab4 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80017a2:	f000 f8a7 	bl	80018f4 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80017a6:	f000 f95b 	bl	8001a60 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80017aa:	f000 f8d9 	bl	8001960 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* PWM Timers */
  // Internal Clock (HCLK) = 100 MHz. If Prescaler = (100 - 1) & Max Timer Count = (20000 - 1), then f = 100 MHz / 100 = 1 MHz, T = 1 us, and PWM f = 1/(20000 * T) = 50 Hz
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80017ae:	2100      	movs	r1, #0
 80017b0:	481b      	ldr	r0, [pc, #108]	@ (8001820 <main+0x94>)
 80017b2:	f002 faef 	bl	8003d94 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80017b6:	2104      	movs	r1, #4
 80017b8:	4819      	ldr	r0, [pc, #100]	@ (8001820 <main+0x94>)
 80017ba:	f002 faeb 	bl	8003d94 <HAL_TIM_PWM_Start>
  //*TODO Servo Control and Accelerometer Sample Timer (Basically the system clock)
  // HAL_TIM_Base_Start(&htim1); // Internal Clock (APB2) = 84 MHz. If Prescaler = (84 - 1) & Max Timer Count = (2^16 - 1), then f = 84 MHz / 84 = 1 MHz, T = 1 us, and Max Delay = (2^16 - 1) * T = 65.535 ms

  system_state_t next_state_e = STARTUP_STATE;
 80017be:	2300      	movs	r3, #0
 80017c0:	71fb      	strb	r3, [r7, #7]
  adxl_init();
 80017c2:	f7ff fc1d 	bl	8001000 <adxl_init>
  adxl_id();
 80017c6:	f7ff fc2f 	bl	8001028 <adxl_id>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    switch (next_state_e) {
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d821      	bhi.n	8001814 <main+0x88>
 80017d0:	a201      	add	r2, pc, #4	@ (adr r2, 80017d8 <main+0x4c>)
 80017d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d6:	bf00      	nop
 80017d8:	080017e9 	.word	0x080017e9
 80017dc:	080017f3 	.word	0x080017f3
 80017e0:	08001801 	.word	0x08001801
 80017e4:	0800180b 	.word	0x0800180b
      case STARTUP_STATE:
        next_state_e = startup_handler();
 80017e8:	f7ff ffb0 	bl	800174c <startup_handler>
 80017ec:	4603      	mov	r3, r0
 80017ee:	71fb      	strb	r3, [r7, #7]
        break;
 80017f0:	e015      	b.n	800181e <main+0x92>
      case WAIT_FOR_INSTRUCTION:
        #ifdef TEST // The following code will only be compiled if TEST is defined in the header file
          servo_test();
 80017f2:	f7ff fd83 	bl	80012fc <servo_test>
        #endif
          
        next_state_e = waiting_handler();
 80017f6:	f7ff ffb1 	bl	800175c <waiting_handler>
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
        break;
 80017fe:	e00e      	b.n	800181e <main+0x92>
      case SEQUENCE_EDIT:
        next_state_e = edit_sequence_handler();
 8001800:	f7ff ffb4 	bl	800176c <edit_sequence_handler>
 8001804:	4603      	mov	r3, r0
 8001806:	71fb      	strb	r3, [r7, #7]
        break;
 8001808:	e009      	b.n	800181e <main+0x92>
      case RUN_SEQUENCE:
        next_state_e = run_setpoint_handler();
 800180a:	f7ff ffb7 	bl	800177c <run_setpoint_handler>
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
        break;
 8001812:	e004      	b.n	800181e <main+0x92>
      
      default:
        next_state_e = startup_handler();
 8001814:	f7ff ff9a 	bl	800174c <startup_handler>
 8001818:	4603      	mov	r3, r0
 800181a:	71fb      	strb	r3, [r7, #7]
        break;
 800181c:	bf00      	nop
    switch (next_state_e) {
 800181e:	e7d4      	b.n	80017ca <main+0x3e>
 8001820:	20000248 	.word	0x20000248

08001824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b094      	sub	sp, #80	@ 0x50
 8001828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800182a:	f107 0320 	add.w	r3, r7, #32
 800182e:	2230      	movs	r2, #48	@ 0x30
 8001830:	2100      	movs	r1, #0
 8001832:	4618      	mov	r0, r3
 8001834:	f004 f9eb 	bl	8005c0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001848:	2300      	movs	r3, #0
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	4b27      	ldr	r3, [pc, #156]	@ (80018ec <SystemClock_Config+0xc8>)
 800184e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001850:	4a26      	ldr	r2, [pc, #152]	@ (80018ec <SystemClock_Config+0xc8>)
 8001852:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001856:	6413      	str	r3, [r2, #64]	@ 0x40
 8001858:	4b24      	ldr	r3, [pc, #144]	@ (80018ec <SystemClock_Config+0xc8>)
 800185a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001860:	60bb      	str	r3, [r7, #8]
 8001862:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001864:	2300      	movs	r3, #0
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	4b21      	ldr	r3, [pc, #132]	@ (80018f0 <SystemClock_Config+0xcc>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a20      	ldr	r2, [pc, #128]	@ (80018f0 <SystemClock_Config+0xcc>)
 800186e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	4b1e      	ldr	r3, [pc, #120]	@ (80018f0 <SystemClock_Config+0xcc>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001880:	2301      	movs	r3, #1
 8001882:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001884:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001888:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800188a:	2302      	movs	r3, #2
 800188c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800188e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001892:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001894:	2304      	movs	r3, #4
 8001896:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001898:	2364      	movs	r3, #100	@ 0x64
 800189a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800189c:	2302      	movs	r3, #2
 800189e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018a0:	2304      	movs	r3, #4
 80018a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a4:	f107 0320 	add.w	r3, r7, #32
 80018a8:	4618      	mov	r0, r3
 80018aa:	f000 ff61 	bl	8002770 <HAL_RCC_OscConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018b4:	f000 f9ae 	bl	8001c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018b8:	230f      	movs	r3, #15
 80018ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018bc:	2302      	movs	r3, #2
 80018be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018ce:	f107 030c 	add.w	r3, r7, #12
 80018d2:	2103      	movs	r1, #3
 80018d4:	4618      	mov	r0, r3
 80018d6:	f001 f9c3 	bl	8002c60 <HAL_RCC_ClockConfig>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018e0:	f000 f998 	bl	8001c14 <Error_Handler>
  }
}
 80018e4:	bf00      	nop
 80018e6:	3750      	adds	r7, #80	@ 0x50
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40007000 	.word	0x40007000

080018f4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80018f8:	4b17      	ldr	r3, [pc, #92]	@ (8001958 <MX_SPI3_Init+0x64>)
 80018fa:	4a18      	ldr	r2, [pc, #96]	@ (800195c <MX_SPI3_Init+0x68>)
 80018fc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018fe:	4b16      	ldr	r3, [pc, #88]	@ (8001958 <MX_SPI3_Init+0x64>)
 8001900:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001904:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001906:	4b14      	ldr	r3, [pc, #80]	@ (8001958 <MX_SPI3_Init+0x64>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800190c:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <MX_SPI3_Init+0x64>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001912:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <MX_SPI3_Init+0x64>)
 8001914:	2202      	movs	r2, #2
 8001916:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001918:	4b0f      	ldr	r3, [pc, #60]	@ (8001958 <MX_SPI3_Init+0x64>)
 800191a:	2201      	movs	r2, #1
 800191c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800191e:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <MX_SPI3_Init+0x64>)
 8001920:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001924:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001926:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <MX_SPI3_Init+0x64>)
 8001928:	2228      	movs	r2, #40	@ 0x28
 800192a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800192c:	4b0a      	ldr	r3, [pc, #40]	@ (8001958 <MX_SPI3_Init+0x64>)
 800192e:	2200      	movs	r2, #0
 8001930:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001932:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <MX_SPI3_Init+0x64>)
 8001934:	2200      	movs	r2, #0
 8001936:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001938:	4b07      	ldr	r3, [pc, #28]	@ (8001958 <MX_SPI3_Init+0x64>)
 800193a:	2200      	movs	r2, #0
 800193c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800193e:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <MX_SPI3_Init+0x64>)
 8001940:	220a      	movs	r2, #10
 8001942:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001944:	4804      	ldr	r0, [pc, #16]	@ (8001958 <MX_SPI3_Init+0x64>)
 8001946:	f001 fbab 	bl	80030a0 <HAL_SPI_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001950:	f000 f960 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001954:	bf00      	nop
 8001956:	bd80      	pop	{r7, pc}
 8001958:	200001f0 	.word	0x200001f0
 800195c:	40003c00 	.word	0x40003c00

08001960 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08e      	sub	sp, #56	@ 0x38
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001966:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
 8001970:	609a      	str	r2, [r3, #8]
 8001972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001974:	f107 0320 	add.w	r3, r7, #32
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
 800198c:	615a      	str	r2, [r3, #20]
 800198e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001990:	4b32      	ldr	r3, [pc, #200]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 8001992:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001996:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 8001998:	4b30      	ldr	r3, [pc, #192]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 800199a:	2263      	movs	r2, #99	@ 0x63
 800199c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199e:	4b2f      	ldr	r3, [pc, #188]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000 - 1;
 80019a4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 80019a6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80019aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ac:	4b2b      	ldr	r3, [pc, #172]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019b2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 80019b4:	2280      	movs	r2, #128	@ 0x80
 80019b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019b8:	4828      	ldr	r0, [pc, #160]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 80019ba:	f002 f943 	bl	8003c44 <HAL_TIM_Base_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80019c4:	f000 f926 	bl	8001c14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019d2:	4619      	mov	r1, r3
 80019d4:	4821      	ldr	r0, [pc, #132]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 80019d6:	f002 fb4f 	bl	8004078 <HAL_TIM_ConfigClockSource>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80019e0:	f000 f918 	bl	8001c14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019e4:	481d      	ldr	r0, [pc, #116]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 80019e6:	f002 f97c 	bl	8003ce2 <HAL_TIM_PWM_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80019f0:	f000 f910 	bl	8001c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f4:	2300      	movs	r3, #0
 80019f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019fc:	f107 0320 	add.w	r3, r7, #32
 8001a00:	4619      	mov	r1, r3
 8001a02:	4816      	ldr	r0, [pc, #88]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 8001a04:	f002 fed8 	bl	80047b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001a0e:	f000 f901 	bl	8001c14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a12:	2360      	movs	r3, #96	@ 0x60
 8001a14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	2200      	movs	r2, #0
 8001a26:	4619      	mov	r1, r3
 8001a28:	480c      	ldr	r0, [pc, #48]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 8001a2a:	f002 fa63 	bl	8003ef4 <HAL_TIM_PWM_ConfigChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001a34:	f000 f8ee 	bl	8001c14 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2204      	movs	r2, #4
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4807      	ldr	r0, [pc, #28]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 8001a40:	f002 fa58 	bl	8003ef4 <HAL_TIM_PWM_ConfigChannel>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001a4a:	f000 f8e3 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a4e:	4803      	ldr	r0, [pc, #12]	@ (8001a5c <MX_TIM2_Init+0xfc>)
 8001a50:	f000 f976 	bl	8001d40 <HAL_TIM_MspPostInit>

}
 8001a54:	bf00      	nop
 8001a56:	3738      	adds	r7, #56	@ 0x38
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000248 	.word	0x20000248

08001a60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a64:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a66:	4a12      	ldr	r2, [pc, #72]	@ (8001ab0 <MX_USART1_UART_Init+0x50>)
 8001a68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a6a:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	@ (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a84:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a86:	220c      	movs	r2, #12
 8001a88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	@ (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a90:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a96:	4805      	ldr	r0, [pc, #20]	@ (8001aac <MX_USART1_UART_Init+0x4c>)
 8001a98:	f002 fefc 	bl	8004894 <HAL_UART_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001aa2:	f000 f8b7 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000290 	.word	0x20000290
 8001ab0:	40011000 	.word	0x40011000

08001ab4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ab8:	4b11      	ldr	r3, [pc, #68]	@ (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001aba:	4a12      	ldr	r2, [pc, #72]	@ (8001b04 <MX_USART2_UART_Init+0x50>)
 8001abc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001abe:	4b10      	ldr	r3, [pc, #64]	@ (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ac0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ac4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001acc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	@ (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ada:	220c      	movs	r2, #12
 8001adc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ade:	4b08      	ldr	r3, [pc, #32]	@ (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	@ (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aea:	4805      	ldr	r0, [pc, #20]	@ (8001b00 <MX_USART2_UART_Init+0x4c>)
 8001aec:	f002 fed2 	bl	8004894 <HAL_UART_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001af6:	f000 f88d 	bl	8001c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	200002d8 	.word	0x200002d8
 8001b04:	40004400 	.word	0x40004400

08001b08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	@ 0x28
 8001b0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
 8001b1c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	4b38      	ldr	r3, [pc, #224]	@ (8001c04 <MX_GPIO_Init+0xfc>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	4a37      	ldr	r2, [pc, #220]	@ (8001c04 <MX_GPIO_Init+0xfc>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2e:	4b35      	ldr	r3, [pc, #212]	@ (8001c04 <MX_GPIO_Init+0xfc>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b31      	ldr	r3, [pc, #196]	@ (8001c04 <MX_GPIO_Init+0xfc>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	4a30      	ldr	r2, [pc, #192]	@ (8001c04 <MX_GPIO_Init+0xfc>)
 8001b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c04 <MX_GPIO_Init+0xfc>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8001c04 <MX_GPIO_Init+0xfc>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	4a29      	ldr	r2, [pc, #164]	@ (8001c04 <MX_GPIO_Init+0xfc>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b66:	4b27      	ldr	r3, [pc, #156]	@ (8001c04 <MX_GPIO_Init+0xfc>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	4b23      	ldr	r3, [pc, #140]	@ (8001c04 <MX_GPIO_Init+0xfc>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	4a22      	ldr	r2, [pc, #136]	@ (8001c04 <MX_GPIO_Init+0xfc>)
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b82:	4b20      	ldr	r3, [pc, #128]	@ (8001c04 <MX_GPIO_Init+0xfc>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2120      	movs	r1, #32
 8001b92:	481d      	ldr	r0, [pc, #116]	@ (8001c08 <MX_GPIO_Init+0x100>)
 8001b94:	f000 fdd2 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_RESET);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001b9e:	481b      	ldr	r0, [pc, #108]	@ (8001c0c <MX_GPIO_Init+0x104>)
 8001ba0:	f000 fdcc 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ba4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001baa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bb4:	f107 0314 	add.w	r3, r7, #20
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4815      	ldr	r0, [pc, #84]	@ (8001c10 <MX_GPIO_Init+0x108>)
 8001bbc:	f000 fc22 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001bc0:	2320      	movs	r3, #32
 8001bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	480c      	ldr	r0, [pc, #48]	@ (8001c08 <MX_GPIO_Init+0x100>)
 8001bd8:	f000 fc14 	bl	8002404 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADXL_CS_Pin */
  GPIO_InitStruct.Pin = ADXL_CS_Pin;
 8001bdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be2:	2301      	movs	r3, #1
 8001be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADXL_CS_GPIO_Port, &GPIO_InitStruct);
 8001bee:	f107 0314 	add.w	r3, r7, #20
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4805      	ldr	r0, [pc, #20]	@ (8001c0c <MX_GPIO_Init+0x104>)
 8001bf6:	f000 fc05 	bl	8002404 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bfa:	bf00      	nop
 8001bfc:	3728      	adds	r7, #40	@ 0x28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020000 	.word	0x40020000
 8001c0c:	40020400 	.word	0x40020400
 8001c10:	40020800 	.word	0x40020800

08001c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c18:	b672      	cpsid	i
}
 8001c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <Error_Handler+0x8>

08001c20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	4b10      	ldr	r3, [pc, #64]	@ (8001c6c <HAL_MspInit+0x4c>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c6c <HAL_MspInit+0x4c>)
 8001c30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c36:	4b0d      	ldr	r3, [pc, #52]	@ (8001c6c <HAL_MspInit+0x4c>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <HAL_MspInit+0x4c>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	4a08      	ldr	r2, [pc, #32]	@ (8001c6c <HAL_MspInit+0x4c>)
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_MspInit+0x4c>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c5e:	2007      	movs	r0, #7
 8001c60:	f000 fb9c 	bl	800239c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c64:	bf00      	nop
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40023800 	.word	0x40023800

08001c70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	@ 0x28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c78:	f107 0314 	add.w	r3, r7, #20
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a19      	ldr	r2, [pc, #100]	@ (8001cf4 <HAL_SPI_MspInit+0x84>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d12b      	bne.n	8001cea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	4b18      	ldr	r3, [pc, #96]	@ (8001cf8 <HAL_SPI_MspInit+0x88>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	4a17      	ldr	r2, [pc, #92]	@ (8001cf8 <HAL_SPI_MspInit+0x88>)
 8001c9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca2:	4b15      	ldr	r3, [pc, #84]	@ (8001cf8 <HAL_SPI_MspInit+0x88>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001caa:	613b      	str	r3, [r7, #16]
 8001cac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <HAL_SPI_MspInit+0x88>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	4a10      	ldr	r2, [pc, #64]	@ (8001cf8 <HAL_SPI_MspInit+0x88>)
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf8 <HAL_SPI_MspInit+0x88>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = ADXL_SCL_Pin|ADXL_SDO_Pin|ADXL_SDA_Pin;
 8001cca:	2338      	movs	r3, #56	@ 0x38
 8001ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cda:	2306      	movs	r3, #6
 8001cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4805      	ldr	r0, [pc, #20]	@ (8001cfc <HAL_SPI_MspInit+0x8c>)
 8001ce6:	f000 fb8d 	bl	8002404 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001cea:	bf00      	nop
 8001cec:	3728      	adds	r7, #40	@ 0x28
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40003c00 	.word	0x40003c00
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40020400 	.word	0x40020400

08001d00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d10:	d10d      	bne.n	8001d2e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b09      	ldr	r3, [pc, #36]	@ (8001d3c <HAL_TIM_Base_MspInit+0x3c>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	4a08      	ldr	r2, [pc, #32]	@ (8001d3c <HAL_TIM_Base_MspInit+0x3c>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d22:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <HAL_TIM_Base_MspInit+0x3c>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001d2e:	bf00      	nop
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800

08001d40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	f107 030c 	add.w	r3, r7, #12
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d60:	d11d      	bne.n	8001d9e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	4b10      	ldr	r3, [pc, #64]	@ (8001da8 <HAL_TIM_MspPostInit+0x68>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	4a0f      	ldr	r2, [pc, #60]	@ (8001da8 <HAL_TIM_MspPostInit+0x68>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d72:	4b0d      	ldr	r3, [pc, #52]	@ (8001da8 <HAL_TIM_MspPostInit+0x68>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PWM_X_Pin|PWM_Y_Pin;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	4619      	mov	r1, r3
 8001d98:	4804      	ldr	r0, [pc, #16]	@ (8001dac <HAL_TIM_MspPostInit+0x6c>)
 8001d9a:	f000 fb33 	bl	8002404 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d9e:	bf00      	nop
 8001da0:	3720      	adds	r7, #32
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40020000 	.word	0x40020000

08001db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08c      	sub	sp, #48	@ 0x30
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 031c 	add.w	r3, r7, #28
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a32      	ldr	r2, [pc, #200]	@ (8001e98 <HAL_UART_MspInit+0xe8>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d12d      	bne.n	8001e2e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	4b31      	ldr	r3, [pc, #196]	@ (8001e9c <HAL_UART_MspInit+0xec>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dda:	4a30      	ldr	r2, [pc, #192]	@ (8001e9c <HAL_UART_MspInit+0xec>)
 8001ddc:	f043 0310 	orr.w	r3, r3, #16
 8001de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001de2:	4b2e      	ldr	r3, [pc, #184]	@ (8001e9c <HAL_UART_MspInit+0xec>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	61bb      	str	r3, [r7, #24]
 8001dec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e9c <HAL_UART_MspInit+0xec>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	4a29      	ldr	r2, [pc, #164]	@ (8001e9c <HAL_UART_MspInit+0xec>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfe:	4b27      	ldr	r3, [pc, #156]	@ (8001e9c <HAL_UART_MspInit+0xec>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e0a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e10:	2302      	movs	r3, #2
 8001e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e1c:	2307      	movs	r3, #7
 8001e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e20:	f107 031c 	add.w	r3, r7, #28
 8001e24:	4619      	mov	r1, r3
 8001e26:	481e      	ldr	r0, [pc, #120]	@ (8001ea0 <HAL_UART_MspInit+0xf0>)
 8001e28:	f000 faec 	bl	8002404 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e2c:	e030      	b.n	8001e90 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1c      	ldr	r2, [pc, #112]	@ (8001ea4 <HAL_UART_MspInit+0xf4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d12b      	bne.n	8001e90 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e38:	2300      	movs	r3, #0
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	4b17      	ldr	r3, [pc, #92]	@ (8001e9c <HAL_UART_MspInit+0xec>)
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e40:	4a16      	ldr	r2, [pc, #88]	@ (8001e9c <HAL_UART_MspInit+0xec>)
 8001e42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e46:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e48:	4b14      	ldr	r3, [pc, #80]	@ (8001e9c <HAL_UART_MspInit+0xec>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	4b10      	ldr	r3, [pc, #64]	@ (8001e9c <HAL_UART_MspInit+0xec>)
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5c:	4a0f      	ldr	r2, [pc, #60]	@ (8001e9c <HAL_UART_MspInit+0xec>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e64:	4b0d      	ldr	r3, [pc, #52]	@ (8001e9c <HAL_UART_MspInit+0xec>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e70:	230c      	movs	r3, #12
 8001e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	2302      	movs	r3, #2
 8001e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e80:	2307      	movs	r3, #7
 8001e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e84:	f107 031c 	add.w	r3, r7, #28
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4805      	ldr	r0, [pc, #20]	@ (8001ea0 <HAL_UART_MspInit+0xf0>)
 8001e8c:	f000 faba 	bl	8002404 <HAL_GPIO_Init>
}
 8001e90:	bf00      	nop
 8001e92:	3730      	adds	r7, #48	@ 0x30
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40011000 	.word	0x40011000
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40020000 	.word	0x40020000
 8001ea4:	40004400 	.word	0x40004400

08001ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <NMI_Handler+0x4>

08001eb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb4:	bf00      	nop
 8001eb6:	e7fd      	b.n	8001eb4 <HardFault_Handler+0x4>

08001eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <MemManage_Handler+0x4>

08001ec0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <BusFault_Handler+0x4>

08001ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ecc:	bf00      	nop
 8001ece:	e7fd      	b.n	8001ecc <UsageFault_Handler+0x4>

08001ed0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001efe:	f000 f957 	bl	80021b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  return 1;
 8001f0a:	2301      	movs	r3, #1
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <_kill>:

int _kill(int pid, int sig)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f20:	f003 fec8 	bl	8005cb4 <__errno>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2216      	movs	r2, #22
 8001f28:	601a      	str	r2, [r3, #0]
  return -1;
 8001f2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_exit>:

void _exit (int status)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f3e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff ffe7 	bl	8001f16 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <_exit+0x12>

08001f4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	e00a      	b.n	8001f74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f5e:	f3af 8000 	nop.w
 8001f62:	4601      	mov	r1, r0
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	1c5a      	adds	r2, r3, #1
 8001f68:	60ba      	str	r2, [r7, #8]
 8001f6a:	b2ca      	uxtb	r2, r1
 8001f6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	3301      	adds	r3, #1
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	dbf0      	blt.n	8001f5e <_read+0x12>
  }

  return len;
 8001f7c:	687b      	ldr	r3, [r7, #4]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b086      	sub	sp, #24
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	60f8      	str	r0, [r7, #12]
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	e009      	b.n	8001fac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	60ba      	str	r2, [r7, #8]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	dbf1      	blt.n	8001f98 <_write+0x12>
  }
  return len;
 8001fb4:	687b      	ldr	r3, [r7, #4]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <_close>:

int _close(int file)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
 8001fde:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fe6:	605a      	str	r2, [r3, #4]
  return 0;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <_isatty>:

int _isatty(int file)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ffe:	2301      	movs	r3, #1
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002030:	4a14      	ldr	r2, [pc, #80]	@ (8002084 <_sbrk+0x5c>)
 8002032:	4b15      	ldr	r3, [pc, #84]	@ (8002088 <_sbrk+0x60>)
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800203c:	4b13      	ldr	r3, [pc, #76]	@ (800208c <_sbrk+0x64>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002044:	4b11      	ldr	r3, [pc, #68]	@ (800208c <_sbrk+0x64>)
 8002046:	4a12      	ldr	r2, [pc, #72]	@ (8002090 <_sbrk+0x68>)
 8002048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800204a:	4b10      	ldr	r3, [pc, #64]	@ (800208c <_sbrk+0x64>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4413      	add	r3, r2
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	429a      	cmp	r2, r3
 8002056:	d207      	bcs.n	8002068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002058:	f003 fe2c 	bl	8005cb4 <__errno>
 800205c:	4603      	mov	r3, r0
 800205e:	220c      	movs	r2, #12
 8002060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002062:	f04f 33ff 	mov.w	r3, #4294967295
 8002066:	e009      	b.n	800207c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002068:	4b08      	ldr	r3, [pc, #32]	@ (800208c <_sbrk+0x64>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800206e:	4b07      	ldr	r3, [pc, #28]	@ (800208c <_sbrk+0x64>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	4a05      	ldr	r2, [pc, #20]	@ (800208c <_sbrk+0x64>)
 8002078:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800207a:	68fb      	ldr	r3, [r7, #12]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20020000 	.word	0x20020000
 8002088:	00000400 	.word	0x00000400
 800208c:	2000033c 	.word	0x2000033c
 8002090:	20000490 	.word	0x20000490

08002094 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002098:	4b06      	ldr	r3, [pc, #24]	@ (80020b4 <SystemInit+0x20>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800209e:	4a05      	ldr	r2, [pc, #20]	@ (80020b4 <SystemInit+0x20>)
 80020a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020bc:	480d      	ldr	r0, [pc, #52]	@ (80020f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020be:	490e      	ldr	r1, [pc, #56]	@ (80020f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020c0:	4a0e      	ldr	r2, [pc, #56]	@ (80020fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c4:	e002      	b.n	80020cc <LoopCopyDataInit>

080020c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ca:	3304      	adds	r3, #4

080020cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d0:	d3f9      	bcc.n	80020c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002100 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020d4:	4c0b      	ldr	r4, [pc, #44]	@ (8002104 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d8:	e001      	b.n	80020de <LoopFillZerobss>

080020da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020dc:	3204      	adds	r2, #4

080020de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e0:	d3fb      	bcc.n	80020da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020e2:	f7ff ffd7 	bl	8002094 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020e6:	f003 fdeb 	bl	8005cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ea:	f7ff fb4f 	bl	800178c <main>
  bx  lr    
 80020ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f8:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80020fc:	08008708 	.word	0x08008708
  ldr r2, =_sbss
 8002100:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002104:	20000490 	.word	0x20000490

08002108 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002108:	e7fe      	b.n	8002108 <ADC_IRQHandler>
	...

0800210c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002110:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <HAL_Init+0x40>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0d      	ldr	r2, [pc, #52]	@ (800214c <HAL_Init+0x40>)
 8002116:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800211a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800211c:	4b0b      	ldr	r3, [pc, #44]	@ (800214c <HAL_Init+0x40>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0a      	ldr	r2, [pc, #40]	@ (800214c <HAL_Init+0x40>)
 8002122:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002126:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002128:	4b08      	ldr	r3, [pc, #32]	@ (800214c <HAL_Init+0x40>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a07      	ldr	r2, [pc, #28]	@ (800214c <HAL_Init+0x40>)
 800212e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002132:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002134:	2003      	movs	r0, #3
 8002136:	f000 f931 	bl	800239c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800213a:	2000      	movs	r0, #0
 800213c:	f000 f808 	bl	8002150 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002140:	f7ff fd6e 	bl	8001c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40023c00 	.word	0x40023c00

08002150 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002158:	4b12      	ldr	r3, [pc, #72]	@ (80021a4 <HAL_InitTick+0x54>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4b12      	ldr	r3, [pc, #72]	@ (80021a8 <HAL_InitTick+0x58>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	4619      	mov	r1, r3
 8002162:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002166:	fbb3 f3f1 	udiv	r3, r3, r1
 800216a:	fbb2 f3f3 	udiv	r3, r2, r3
 800216e:	4618      	mov	r0, r3
 8002170:	f000 f93b 	bl	80023ea <HAL_SYSTICK_Config>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e00e      	b.n	800219c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b0f      	cmp	r3, #15
 8002182:	d80a      	bhi.n	800219a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002184:	2200      	movs	r2, #0
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	f04f 30ff 	mov.w	r0, #4294967295
 800218c:	f000 f911 	bl	80023b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002190:	4a06      	ldr	r2, [pc, #24]	@ (80021ac <HAL_InitTick+0x5c>)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	e000      	b.n	800219c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	20000000 	.word	0x20000000
 80021a8:	20000008 	.word	0x20000008
 80021ac:	20000004 	.word	0x20000004

080021b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b4:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <HAL_IncTick+0x20>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	461a      	mov	r2, r3
 80021ba:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <HAL_IncTick+0x24>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4413      	add	r3, r2
 80021c0:	4a04      	ldr	r2, [pc, #16]	@ (80021d4 <HAL_IncTick+0x24>)
 80021c2:	6013      	str	r3, [r2, #0]
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	20000008 	.word	0x20000008
 80021d4:	20000340 	.word	0x20000340

080021d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  return uwTick;
 80021dc:	4b03      	ldr	r3, [pc, #12]	@ (80021ec <HAL_GetTick+0x14>)
 80021de:	681b      	ldr	r3, [r3, #0]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	20000340 	.word	0x20000340

080021f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f8:	f7ff ffee 	bl	80021d8 <HAL_GetTick>
 80021fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002208:	d005      	beq.n	8002216 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800220a:	4b0a      	ldr	r3, [pc, #40]	@ (8002234 <HAL_Delay+0x44>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4413      	add	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002216:	bf00      	nop
 8002218:	f7ff ffde 	bl	80021d8 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	429a      	cmp	r2, r3
 8002226:	d8f7      	bhi.n	8002218 <HAL_Delay+0x28>
  {
  }
}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	20000008 	.word	0x20000008

08002238 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002248:	4b0c      	ldr	r3, [pc, #48]	@ (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002254:	4013      	ands	r3, r2
 8002256:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002260:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226a:	4a04      	ldr	r2, [pc, #16]	@ (800227c <__NVIC_SetPriorityGrouping+0x44>)
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	60d3      	str	r3, [r2, #12]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	e000ed00 	.word	0xe000ed00

08002280 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002284:	4b04      	ldr	r3, [pc, #16]	@ (8002298 <__NVIC_GetPriorityGrouping+0x18>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	0a1b      	lsrs	r3, r3, #8
 800228a:	f003 0307 	and.w	r3, r3, #7
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	db0a      	blt.n	80022c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	490c      	ldr	r1, [pc, #48]	@ (80022e8 <__NVIC_SetPriority+0x4c>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	0112      	lsls	r2, r2, #4
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	440b      	add	r3, r1
 80022c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c4:	e00a      	b.n	80022dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4908      	ldr	r1, [pc, #32]	@ (80022ec <__NVIC_SetPriority+0x50>)
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	3b04      	subs	r3, #4
 80022d4:	0112      	lsls	r2, r2, #4
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	440b      	add	r3, r1
 80022da:	761a      	strb	r2, [r3, #24]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000e100 	.word	0xe000e100
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	@ 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f1c3 0307 	rsb	r3, r3, #7
 800230a:	2b04      	cmp	r3, #4
 800230c:	bf28      	it	cs
 800230e:	2304      	movcs	r3, #4
 8002310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3304      	adds	r3, #4
 8002316:	2b06      	cmp	r3, #6
 8002318:	d902      	bls.n	8002320 <NVIC_EncodePriority+0x30>
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3b03      	subs	r3, #3
 800231e:	e000      	b.n	8002322 <NVIC_EncodePriority+0x32>
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	f04f 32ff 	mov.w	r2, #4294967295
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	401a      	ands	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002338:	f04f 31ff 	mov.w	r1, #4294967295
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	43d9      	mvns	r1, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	4313      	orrs	r3, r2
         );
}
 800234a:	4618      	mov	r0, r3
 800234c:	3724      	adds	r7, #36	@ 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002368:	d301      	bcc.n	800236e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800236a:	2301      	movs	r3, #1
 800236c:	e00f      	b.n	800238e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236e:	4a0a      	ldr	r2, [pc, #40]	@ (8002398 <SysTick_Config+0x40>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002376:	210f      	movs	r1, #15
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	f7ff ff8e 	bl	800229c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002380:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <SysTick_Config+0x40>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002386:	4b04      	ldr	r3, [pc, #16]	@ (8002398 <SysTick_Config+0x40>)
 8002388:	2207      	movs	r2, #7
 800238a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	e000e010 	.word	0xe000e010

0800239c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f7ff ff47 	bl	8002238 <__NVIC_SetPriorityGrouping>
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	4603      	mov	r3, r0
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
 80023be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c4:	f7ff ff5c 	bl	8002280 <__NVIC_GetPriorityGrouping>
 80023c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	6978      	ldr	r0, [r7, #20]
 80023d0:	f7ff ff8e 	bl	80022f0 <NVIC_EncodePriority>
 80023d4:	4602      	mov	r2, r0
 80023d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff ff5d 	bl	800229c <__NVIC_SetPriority>
}
 80023e2:	bf00      	nop
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b082      	sub	sp, #8
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ffb0 	bl	8002358 <SysTick_Config>
 80023f8:	4603      	mov	r3, r0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	@ 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	e159      	b.n	80026d4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002420:	2201      	movs	r2, #1
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4013      	ands	r3, r2
 8002432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	429a      	cmp	r2, r3
 800243a:	f040 8148 	bne.w	80026ce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b01      	cmp	r3, #1
 8002448:	d005      	beq.n	8002456 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002452:	2b02      	cmp	r3, #2
 8002454:	d130      	bne.n	80024b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	2203      	movs	r2, #3
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43db      	mvns	r3, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4013      	ands	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800248c:	2201      	movs	r2, #1
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f003 0201 	and.w	r2, r3, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b03      	cmp	r3, #3
 80024c2:	d017      	beq.n	80024f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	2203      	movs	r2, #3
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0303 	and.w	r3, r3, #3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d123      	bne.n	8002548 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	08da      	lsrs	r2, r3, #3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3208      	adds	r2, #8
 8002508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	220f      	movs	r2, #15
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	08da      	lsrs	r2, r3, #3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3208      	adds	r2, #8
 8002542:	69b9      	ldr	r1, [r7, #24]
 8002544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0203 	and.w	r2, r3, #3
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80a2 	beq.w	80026ce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	4b57      	ldr	r3, [pc, #348]	@ (80026ec <HAL_GPIO_Init+0x2e8>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002592:	4a56      	ldr	r2, [pc, #344]	@ (80026ec <HAL_GPIO_Init+0x2e8>)
 8002594:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002598:	6453      	str	r3, [r2, #68]	@ 0x44
 800259a:	4b54      	ldr	r3, [pc, #336]	@ (80026ec <HAL_GPIO_Init+0x2e8>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025a6:	4a52      	ldr	r2, [pc, #328]	@ (80026f0 <HAL_GPIO_Init+0x2ec>)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	089b      	lsrs	r3, r3, #2
 80025ac:	3302      	adds	r3, #2
 80025ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	220f      	movs	r2, #15
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a49      	ldr	r2, [pc, #292]	@ (80026f4 <HAL_GPIO_Init+0x2f0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d019      	beq.n	8002606 <HAL_GPIO_Init+0x202>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a48      	ldr	r2, [pc, #288]	@ (80026f8 <HAL_GPIO_Init+0x2f4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d013      	beq.n	8002602 <HAL_GPIO_Init+0x1fe>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a47      	ldr	r2, [pc, #284]	@ (80026fc <HAL_GPIO_Init+0x2f8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00d      	beq.n	80025fe <HAL_GPIO_Init+0x1fa>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a46      	ldr	r2, [pc, #280]	@ (8002700 <HAL_GPIO_Init+0x2fc>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d007      	beq.n	80025fa <HAL_GPIO_Init+0x1f6>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a45      	ldr	r2, [pc, #276]	@ (8002704 <HAL_GPIO_Init+0x300>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d101      	bne.n	80025f6 <HAL_GPIO_Init+0x1f2>
 80025f2:	2304      	movs	r3, #4
 80025f4:	e008      	b.n	8002608 <HAL_GPIO_Init+0x204>
 80025f6:	2307      	movs	r3, #7
 80025f8:	e006      	b.n	8002608 <HAL_GPIO_Init+0x204>
 80025fa:	2303      	movs	r3, #3
 80025fc:	e004      	b.n	8002608 <HAL_GPIO_Init+0x204>
 80025fe:	2302      	movs	r3, #2
 8002600:	e002      	b.n	8002608 <HAL_GPIO_Init+0x204>
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_GPIO_Init+0x204>
 8002606:	2300      	movs	r3, #0
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	f002 0203 	and.w	r2, r2, #3
 800260e:	0092      	lsls	r2, r2, #2
 8002610:	4093      	lsls	r3, r2
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002618:	4935      	ldr	r1, [pc, #212]	@ (80026f0 <HAL_GPIO_Init+0x2ec>)
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	089b      	lsrs	r3, r3, #2
 800261e:	3302      	adds	r3, #2
 8002620:	69ba      	ldr	r2, [r7, #24]
 8002622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002626:	4b38      	ldr	r3, [pc, #224]	@ (8002708 <HAL_GPIO_Init+0x304>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	43db      	mvns	r3, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4013      	ands	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800264a:	4a2f      	ldr	r2, [pc, #188]	@ (8002708 <HAL_GPIO_Init+0x304>)
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002650:	4b2d      	ldr	r3, [pc, #180]	@ (8002708 <HAL_GPIO_Init+0x304>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	43db      	mvns	r3, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4013      	ands	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d003      	beq.n	8002674 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002674:	4a24      	ldr	r2, [pc, #144]	@ (8002708 <HAL_GPIO_Init+0x304>)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800267a:	4b23      	ldr	r3, [pc, #140]	@ (8002708 <HAL_GPIO_Init+0x304>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800269e:	4a1a      	ldr	r2, [pc, #104]	@ (8002708 <HAL_GPIO_Init+0x304>)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a4:	4b18      	ldr	r3, [pc, #96]	@ (8002708 <HAL_GPIO_Init+0x304>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026c8:	4a0f      	ldr	r2, [pc, #60]	@ (8002708 <HAL_GPIO_Init+0x304>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	3301      	adds	r3, #1
 80026d2:	61fb      	str	r3, [r7, #28]
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	2b0f      	cmp	r3, #15
 80026d8:	f67f aea2 	bls.w	8002420 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026dc:	bf00      	nop
 80026de:	bf00      	nop
 80026e0:	3724      	adds	r7, #36	@ 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800
 80026f0:	40013800 	.word	0x40013800
 80026f4:	40020000 	.word	0x40020000
 80026f8:	40020400 	.word	0x40020400
 80026fc:	40020800 	.word	0x40020800
 8002700:	40020c00 	.word	0x40020c00
 8002704:	40021000 	.word	0x40021000
 8002708:	40013c00 	.word	0x40013c00

0800270c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	887b      	ldrh	r3, [r7, #2]
 800271e:	4013      	ands	r3, r2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002724:	2301      	movs	r3, #1
 8002726:	73fb      	strb	r3, [r7, #15]
 8002728:	e001      	b.n	800272e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800272a:	2300      	movs	r3, #0
 800272c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800272e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
 8002748:	4613      	mov	r3, r2
 800274a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800274c:	787b      	ldrb	r3, [r7, #1]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002752:	887a      	ldrh	r2, [r7, #2]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002758:	e003      	b.n	8002762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	041a      	lsls	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	619a      	str	r2, [r3, #24]
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e267      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d075      	beq.n	800287a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800278e:	4b88      	ldr	r3, [pc, #544]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b04      	cmp	r3, #4
 8002798:	d00c      	beq.n	80027b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800279a:	4b85      	ldr	r3, [pc, #532]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d112      	bne.n	80027cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027a6:	4b82      	ldr	r3, [pc, #520]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027b2:	d10b      	bne.n	80027cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b4:	4b7e      	ldr	r3, [pc, #504]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d05b      	beq.n	8002878 <HAL_RCC_OscConfig+0x108>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d157      	bne.n	8002878 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e242      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027d4:	d106      	bne.n	80027e4 <HAL_RCC_OscConfig+0x74>
 80027d6:	4b76      	ldr	r3, [pc, #472]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a75      	ldr	r2, [pc, #468]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	e01d      	b.n	8002820 <HAL_RCC_OscConfig+0xb0>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x98>
 80027ee:	4b70      	ldr	r3, [pc, #448]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a6f      	ldr	r2, [pc, #444]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	4b6d      	ldr	r3, [pc, #436]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a6c      	ldr	r2, [pc, #432]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e00b      	b.n	8002820 <HAL_RCC_OscConfig+0xb0>
 8002808:	4b69      	ldr	r3, [pc, #420]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a68      	ldr	r2, [pc, #416]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800280e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	4b66      	ldr	r3, [pc, #408]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a65      	ldr	r2, [pc, #404]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800281a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800281e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d013      	beq.n	8002850 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7ff fcd6 	bl	80021d8 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002830:	f7ff fcd2 	bl	80021d8 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	@ 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e207      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002842:	4b5b      	ldr	r3, [pc, #364]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0xc0>
 800284e:	e014      	b.n	800287a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7ff fcc2 	bl	80021d8 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002858:	f7ff fcbe 	bl	80021d8 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	@ 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e1f3      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286a:	4b51      	ldr	r3, [pc, #324]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0xe8>
 8002876:	e000      	b.n	800287a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d063      	beq.n	800294e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002886:	4b4a      	ldr	r3, [pc, #296]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00b      	beq.n	80028aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002892:	4b47      	ldr	r3, [pc, #284]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800289a:	2b08      	cmp	r3, #8
 800289c:	d11c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800289e:	4b44      	ldr	r3, [pc, #272]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d116      	bne.n	80028d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028aa:	4b41      	ldr	r3, [pc, #260]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <HAL_RCC_OscConfig+0x152>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d001      	beq.n	80028c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e1c7      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c2:	4b3b      	ldr	r3, [pc, #236]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4937      	ldr	r1, [pc, #220]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d6:	e03a      	b.n	800294e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d020      	beq.n	8002922 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028e0:	4b34      	ldr	r3, [pc, #208]	@ (80029b4 <HAL_RCC_OscConfig+0x244>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e6:	f7ff fc77 	bl	80021d8 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ee:	f7ff fc73 	bl	80021d8 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e1a8      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002900:	4b2b      	ldr	r3, [pc, #172]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290c:	4b28      	ldr	r3, [pc, #160]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4925      	ldr	r1, [pc, #148]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800291c:	4313      	orrs	r3, r2
 800291e:	600b      	str	r3, [r1, #0]
 8002920:	e015      	b.n	800294e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002922:	4b24      	ldr	r3, [pc, #144]	@ (80029b4 <HAL_RCC_OscConfig+0x244>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7ff fc56 	bl	80021d8 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002930:	f7ff fc52 	bl	80021d8 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e187      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002942:	4b1b      	ldr	r3, [pc, #108]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d036      	beq.n	80029c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d016      	beq.n	8002990 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002962:	4b15      	ldr	r3, [pc, #84]	@ (80029b8 <HAL_RCC_OscConfig+0x248>)
 8002964:	2201      	movs	r2, #1
 8002966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002968:	f7ff fc36 	bl	80021d8 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002970:	f7ff fc32 	bl	80021d8 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e167      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002982:	4b0b      	ldr	r3, [pc, #44]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x200>
 800298e:	e01b      	b.n	80029c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002990:	4b09      	ldr	r3, [pc, #36]	@ (80029b8 <HAL_RCC_OscConfig+0x248>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002996:	f7ff fc1f 	bl	80021d8 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800299c:	e00e      	b.n	80029bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800299e:	f7ff fc1b 	bl	80021d8 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d907      	bls.n	80029bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e150      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
 80029b0:	40023800 	.word	0x40023800
 80029b4:	42470000 	.word	0x42470000
 80029b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029bc:	4b88      	ldr	r3, [pc, #544]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1ea      	bne.n	800299e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 8097 	beq.w	8002b04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d6:	2300      	movs	r3, #0
 80029d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029da:	4b81      	ldr	r3, [pc, #516]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10f      	bne.n	8002a06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	4b7d      	ldr	r3, [pc, #500]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	4a7c      	ldr	r2, [pc, #496]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f6:	4b7a      	ldr	r3, [pc, #488]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a02:	2301      	movs	r3, #1
 8002a04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a06:	4b77      	ldr	r3, [pc, #476]	@ (8002be4 <HAL_RCC_OscConfig+0x474>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d118      	bne.n	8002a44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a12:	4b74      	ldr	r3, [pc, #464]	@ (8002be4 <HAL_RCC_OscConfig+0x474>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a73      	ldr	r2, [pc, #460]	@ (8002be4 <HAL_RCC_OscConfig+0x474>)
 8002a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a1e:	f7ff fbdb 	bl	80021d8 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a26:	f7ff fbd7 	bl	80021d8 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e10c      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	4b6a      	ldr	r3, [pc, #424]	@ (8002be4 <HAL_RCC_OscConfig+0x474>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d106      	bne.n	8002a5a <HAL_RCC_OscConfig+0x2ea>
 8002a4c:	4b64      	ldr	r3, [pc, #400]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a50:	4a63      	ldr	r2, [pc, #396]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a58:	e01c      	b.n	8002a94 <HAL_RCC_OscConfig+0x324>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b05      	cmp	r3, #5
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCC_OscConfig+0x30c>
 8002a62:	4b5f      	ldr	r3, [pc, #380]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a66:	4a5e      	ldr	r2, [pc, #376]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a68:	f043 0304 	orr.w	r3, r3, #4
 8002a6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a6e:	4b5c      	ldr	r3, [pc, #368]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a72:	4a5b      	ldr	r2, [pc, #364]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a7a:	e00b      	b.n	8002a94 <HAL_RCC_OscConfig+0x324>
 8002a7c:	4b58      	ldr	r3, [pc, #352]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a80:	4a57      	ldr	r2, [pc, #348]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a82:	f023 0301 	bic.w	r3, r3, #1
 8002a86:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a88:	4b55      	ldr	r3, [pc, #340]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8c:	4a54      	ldr	r2, [pc, #336]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a8e:	f023 0304 	bic.w	r3, r3, #4
 8002a92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d015      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9c:	f7ff fb9c 	bl	80021d8 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa2:	e00a      	b.n	8002aba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa4:	f7ff fb98 	bl	80021d8 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e0cb      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aba:	4b49      	ldr	r3, [pc, #292]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0ee      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x334>
 8002ac6:	e014      	b.n	8002af2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac8:	f7ff fb86 	bl	80021d8 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad0:	f7ff fb82 	bl	80021d8 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e0b5      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1ee      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002af2:	7dfb      	ldrb	r3, [r7, #23]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d105      	bne.n	8002b04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af8:	4b39      	ldr	r3, [pc, #228]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	4a38      	ldr	r2, [pc, #224]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002afe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b02:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 80a1 	beq.w	8002c50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b0e:	4b34      	ldr	r3, [pc, #208]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d05c      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d141      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b22:	4b31      	ldr	r3, [pc, #196]	@ (8002be8 <HAL_RCC_OscConfig+0x478>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b28:	f7ff fb56 	bl	80021d8 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b30:	f7ff fb52 	bl	80021d8 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e087      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b42:	4b27      	ldr	r3, [pc, #156]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69da      	ldr	r2, [r3, #28]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5c:	019b      	lsls	r3, r3, #6
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b64:	085b      	lsrs	r3, r3, #1
 8002b66:	3b01      	subs	r3, #1
 8002b68:	041b      	lsls	r3, r3, #16
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b70:	061b      	lsls	r3, r3, #24
 8002b72:	491b      	ldr	r1, [pc, #108]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b78:	4b1b      	ldr	r3, [pc, #108]	@ (8002be8 <HAL_RCC_OscConfig+0x478>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7e:	f7ff fb2b 	bl	80021d8 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b86:	f7ff fb27 	bl	80021d8 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e05c      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b98:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0f0      	beq.n	8002b86 <HAL_RCC_OscConfig+0x416>
 8002ba4:	e054      	b.n	8002c50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba6:	4b10      	ldr	r3, [pc, #64]	@ (8002be8 <HAL_RCC_OscConfig+0x478>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7ff fb14 	bl	80021d8 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb4:	f7ff fb10 	bl	80021d8 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e045      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc6:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x444>
 8002bd2:	e03d      	b.n	8002c50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d107      	bne.n	8002bec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e038      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40007000 	.word	0x40007000
 8002be8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bec:	4b1b      	ldr	r3, [pc, #108]	@ (8002c5c <HAL_RCC_OscConfig+0x4ec>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d028      	beq.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d121      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d11a      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d111      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c32:	085b      	lsrs	r3, r3, #1
 8002c34:	3b01      	subs	r3, #1
 8002c36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d107      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800

08002c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0cc      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c74:	4b68      	ldr	r3, [pc, #416]	@ (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d90c      	bls.n	8002c9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c82:	4b65      	ldr	r3, [pc, #404]	@ (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8a:	4b63      	ldr	r3, [pc, #396]	@ (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0b8      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d020      	beq.n	8002cea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cb4:	4b59      	ldr	r3, [pc, #356]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	4a58      	ldr	r2, [pc, #352]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ccc:	4b53      	ldr	r3, [pc, #332]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4a52      	ldr	r2, [pc, #328]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd8:	4b50      	ldr	r3, [pc, #320]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	494d      	ldr	r1, [pc, #308]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d044      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d107      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfe:	4b47      	ldr	r3, [pc, #284]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d119      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e07f      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d003      	beq.n	8002d1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d1a:	2b03      	cmp	r3, #3
 8002d1c:	d107      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e06f      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e067      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d3e:	4b37      	ldr	r3, [pc, #220]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f023 0203 	bic.w	r2, r3, #3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4934      	ldr	r1, [pc, #208]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d50:	f7ff fa42 	bl	80021d8 <HAL_GetTick>
 8002d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d56:	e00a      	b.n	8002d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d58:	f7ff fa3e 	bl	80021d8 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e04f      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 020c 	and.w	r2, r3, #12
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d1eb      	bne.n	8002d58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d80:	4b25      	ldr	r3, [pc, #148]	@ (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d20c      	bcs.n	8002da8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8e:	4b22      	ldr	r3, [pc, #136]	@ (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d96:	4b20      	ldr	r3, [pc, #128]	@ (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e032      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db4:	4b19      	ldr	r3, [pc, #100]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	4916      	ldr	r1, [pc, #88]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d009      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dd2:	4b12      	ldr	r3, [pc, #72]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	490e      	ldr	r1, [pc, #56]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002de6:	f000 f821 	bl	8002e2c <HAL_RCC_GetSysClockFreq>
 8002dea:	4602      	mov	r2, r0
 8002dec:	4b0b      	ldr	r3, [pc, #44]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	490a      	ldr	r1, [pc, #40]	@ (8002e20 <HAL_RCC_ClockConfig+0x1c0>)
 8002df8:	5ccb      	ldrb	r3, [r1, r3]
 8002dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfe:	4a09      	ldr	r2, [pc, #36]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c4>)
 8002e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e02:	4b09      	ldr	r3, [pc, #36]	@ (8002e28 <HAL_RCC_ClockConfig+0x1c8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff f9a2 	bl	8002150 <HAL_InitTick>

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40023c00 	.word	0x40023c00
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	08008334 	.word	0x08008334
 8002e24:	20000000 	.word	0x20000000
 8002e28:	20000004 	.word	0x20000004

08002e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e30:	b094      	sub	sp, #80	@ 0x50
 8002e32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e44:	4b79      	ldr	r3, [pc, #484]	@ (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d00d      	beq.n	8002e6c <HAL_RCC_GetSysClockFreq+0x40>
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	f200 80e1 	bhi.w	8003018 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0x34>
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d003      	beq.n	8002e66 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e5e:	e0db      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e60:	4b73      	ldr	r3, [pc, #460]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e64:	e0db      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e66:	4b73      	ldr	r3, [pc, #460]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e6a:	e0d8      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e6c:	4b6f      	ldr	r3, [pc, #444]	@ (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e74:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e76:	4b6d      	ldr	r3, [pc, #436]	@ (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d063      	beq.n	8002f4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e82:	4b6a      	ldr	r3, [pc, #424]	@ (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	099b      	lsrs	r3, r3, #6
 8002e88:	2200      	movs	r2, #0
 8002e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e94:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e96:	2300      	movs	r3, #0
 8002e98:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e9e:	4622      	mov	r2, r4
 8002ea0:	462b      	mov	r3, r5
 8002ea2:	f04f 0000 	mov.w	r0, #0
 8002ea6:	f04f 0100 	mov.w	r1, #0
 8002eaa:	0159      	lsls	r1, r3, #5
 8002eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb0:	0150      	lsls	r0, r2, #5
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	1a51      	subs	r1, r2, r1
 8002eba:	6139      	str	r1, [r7, #16]
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ed0:	4659      	mov	r1, fp
 8002ed2:	018b      	lsls	r3, r1, #6
 8002ed4:	4651      	mov	r1, sl
 8002ed6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eda:	4651      	mov	r1, sl
 8002edc:	018a      	lsls	r2, r1, #6
 8002ede:	4651      	mov	r1, sl
 8002ee0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ee4:	4659      	mov	r1, fp
 8002ee6:	eb63 0901 	sbc.w	r9, r3, r1
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002efa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002efe:	4690      	mov	r8, r2
 8002f00:	4699      	mov	r9, r3
 8002f02:	4623      	mov	r3, r4
 8002f04:	eb18 0303 	adds.w	r3, r8, r3
 8002f08:	60bb      	str	r3, [r7, #8]
 8002f0a:	462b      	mov	r3, r5
 8002f0c:	eb49 0303 	adc.w	r3, r9, r3
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f1e:	4629      	mov	r1, r5
 8002f20:	024b      	lsls	r3, r1, #9
 8002f22:	4621      	mov	r1, r4
 8002f24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f28:	4621      	mov	r1, r4
 8002f2a:	024a      	lsls	r2, r1, #9
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f32:	2200      	movs	r2, #0
 8002f34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f3c:	f7fd fe8c 	bl	8000c58 <__aeabi_uldivmod>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4613      	mov	r3, r2
 8002f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f48:	e058      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4a:	4b38      	ldr	r3, [pc, #224]	@ (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	099b      	lsrs	r3, r3, #6
 8002f50:	2200      	movs	r2, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	4611      	mov	r1, r2
 8002f56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f5a:	623b      	str	r3, [r7, #32]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f64:	4642      	mov	r2, r8
 8002f66:	464b      	mov	r3, r9
 8002f68:	f04f 0000 	mov.w	r0, #0
 8002f6c:	f04f 0100 	mov.w	r1, #0
 8002f70:	0159      	lsls	r1, r3, #5
 8002f72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f76:	0150      	lsls	r0, r2, #5
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4641      	mov	r1, r8
 8002f7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f82:	4649      	mov	r1, r9
 8002f84:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f9c:	ebb2 040a 	subs.w	r4, r2, sl
 8002fa0:	eb63 050b 	sbc.w	r5, r3, fp
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	00eb      	lsls	r3, r5, #3
 8002fae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fb2:	00e2      	lsls	r2, r4, #3
 8002fb4:	4614      	mov	r4, r2
 8002fb6:	461d      	mov	r5, r3
 8002fb8:	4643      	mov	r3, r8
 8002fba:	18e3      	adds	r3, r4, r3
 8002fbc:	603b      	str	r3, [r7, #0]
 8002fbe:	464b      	mov	r3, r9
 8002fc0:	eb45 0303 	adc.w	r3, r5, r3
 8002fc4:	607b      	str	r3, [r7, #4]
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fd2:	4629      	mov	r1, r5
 8002fd4:	028b      	lsls	r3, r1, #10
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fdc:	4621      	mov	r1, r4
 8002fde:	028a      	lsls	r2, r1, #10
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	61bb      	str	r3, [r7, #24]
 8002fea:	61fa      	str	r2, [r7, #28]
 8002fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ff0:	f7fd fe32 	bl	8000c58 <__aeabi_uldivmod>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	0c1b      	lsrs	r3, r3, #16
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	3301      	adds	r3, #1
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800300c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800300e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003010:	fbb2 f3f3 	udiv	r3, r2, r3
 8003014:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003016:	e002      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003018:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x204>)
 800301a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800301c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800301e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003020:	4618      	mov	r0, r3
 8003022:	3750      	adds	r7, #80	@ 0x50
 8003024:	46bd      	mov	sp, r7
 8003026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800
 8003030:	00f42400 	.word	0x00f42400
 8003034:	007a1200 	.word	0x007a1200

08003038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800303c:	4b03      	ldr	r3, [pc, #12]	@ (800304c <HAL_RCC_GetHCLKFreq+0x14>)
 800303e:	681b      	ldr	r3, [r3, #0]
}
 8003040:	4618      	mov	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	20000000 	.word	0x20000000

08003050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003054:	f7ff fff0 	bl	8003038 <HAL_RCC_GetHCLKFreq>
 8003058:	4602      	mov	r2, r0
 800305a:	4b05      	ldr	r3, [pc, #20]	@ (8003070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	0a9b      	lsrs	r3, r3, #10
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	4903      	ldr	r1, [pc, #12]	@ (8003074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003066:	5ccb      	ldrb	r3, [r1, r3]
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800306c:	4618      	mov	r0, r3
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40023800 	.word	0x40023800
 8003074:	08008344 	.word	0x08008344

08003078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800307c:	f7ff ffdc 	bl	8003038 <HAL_RCC_GetHCLKFreq>
 8003080:	4602      	mov	r2, r0
 8003082:	4b05      	ldr	r3, [pc, #20]	@ (8003098 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	0b5b      	lsrs	r3, r3, #13
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	4903      	ldr	r1, [pc, #12]	@ (800309c <HAL_RCC_GetPCLK2Freq+0x24>)
 800308e:	5ccb      	ldrb	r3, [r1, r3]
 8003090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003094:	4618      	mov	r0, r3
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40023800 	.word	0x40023800
 800309c:	08008344 	.word	0x08008344

080030a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e07b      	b.n	80031aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d108      	bne.n	80030cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030c2:	d009      	beq.n	80030d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	61da      	str	r2, [r3, #28]
 80030ca:	e005      	b.n	80030d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7fe fdbc 	bl	8001c70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800310e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003152:	431a      	orrs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315c:	ea42 0103 	orr.w	r1, r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003164:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	430a      	orrs	r2, r1
 800316e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	0c1b      	lsrs	r3, r3, #16
 8003176:	f003 0104 	and.w	r1, r3, #4
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317e:	f003 0210 	and.w	r2, r3, #16
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69da      	ldr	r2, [r3, #28]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003198:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b088      	sub	sp, #32
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	603b      	str	r3, [r7, #0]
 80031be:	4613      	mov	r3, r2
 80031c0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031c2:	f7ff f809 	bl	80021d8 <HAL_GetTick>
 80031c6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d001      	beq.n	80031dc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80031d8:	2302      	movs	r3, #2
 80031da:	e12a      	b.n	8003432 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HAL_SPI_Transmit+0x36>
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d101      	bne.n	80031ec <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e122      	b.n	8003432 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_SPI_Transmit+0x48>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e11b      	b.n	8003432 <HAL_SPI_Transmit+0x280>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2203      	movs	r2, #3
 8003206:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	88fa      	ldrh	r2, [r7, #6]
 800321a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	88fa      	ldrh	r2, [r7, #6]
 8003220:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003248:	d10f      	bne.n	800326a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003258:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003268:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003274:	2b40      	cmp	r3, #64	@ 0x40
 8003276:	d007      	beq.n	8003288 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003286:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003290:	d152      	bne.n	8003338 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <HAL_SPI_Transmit+0xee>
 800329a:	8b7b      	ldrh	r3, [r7, #26]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d145      	bne.n	800332c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a4:	881a      	ldrh	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b0:	1c9a      	adds	r2, r3, #2
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032c4:	e032      	b.n	800332c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d112      	bne.n	80032fa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d8:	881a      	ldrh	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e4:	1c9a      	adds	r2, r3, #2
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80032f8:	e018      	b.n	800332c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032fa:	f7fe ff6d 	bl	80021d8 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d803      	bhi.n	8003312 <HAL_SPI_Transmit+0x160>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003310:	d102      	bne.n	8003318 <HAL_SPI_Transmit+0x166>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d109      	bne.n	800332c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e082      	b.n	8003432 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1c7      	bne.n	80032c6 <HAL_SPI_Transmit+0x114>
 8003336:	e053      	b.n	80033e0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <HAL_SPI_Transmit+0x194>
 8003340:	8b7b      	ldrh	r3, [r7, #26]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d147      	bne.n	80033d6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	330c      	adds	r3, #12
 8003350:	7812      	ldrb	r2, [r2, #0]
 8003352:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800336c:	e033      	b.n	80033d6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b02      	cmp	r3, #2
 800337a:	d113      	bne.n	80033a4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	330c      	adds	r3, #12
 8003386:	7812      	ldrb	r2, [r2, #0]
 8003388:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003398:	b29b      	uxth	r3, r3
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80033a2:	e018      	b.n	80033d6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033a4:	f7fe ff18 	bl	80021d8 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d803      	bhi.n	80033bc <HAL_SPI_Transmit+0x20a>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ba:	d102      	bne.n	80033c2 <HAL_SPI_Transmit+0x210>
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d109      	bne.n	80033d6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e02d      	b.n	8003432 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033da:	b29b      	uxth	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1c6      	bne.n	800336e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	6839      	ldr	r1, [r7, #0]
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 fbd9 	bl	8003b9c <SPI_EndRxTxTransaction>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10a      	bne.n	8003414 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e000      	b.n	8003432 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003430:	2300      	movs	r3, #0
  }
}
 8003432:	4618      	mov	r0, r3
 8003434:	3720      	adds	r7, #32
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b088      	sub	sp, #32
 800343e:	af02      	add	r7, sp, #8
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	603b      	str	r3, [r7, #0]
 8003446:	4613      	mov	r3, r2
 8003448:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b01      	cmp	r3, #1
 8003454:	d001      	beq.n	800345a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003456:	2302      	movs	r3, #2
 8003458:	e104      	b.n	8003664 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003462:	d112      	bne.n	800348a <HAL_SPI_Receive+0x50>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10e      	bne.n	800348a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2204      	movs	r2, #4
 8003470:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003474:	88fa      	ldrh	r2, [r7, #6]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	4613      	mov	r3, r2
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f000 f8f3 	bl	800366c <HAL_SPI_TransmitReceive>
 8003486:	4603      	mov	r3, r0
 8003488:	e0ec      	b.n	8003664 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800348a:	f7fe fea5 	bl	80021d8 <HAL_GetTick>
 800348e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <HAL_SPI_Receive+0x62>
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0e1      	b.n	8003664 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_SPI_Receive+0x74>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e0da      	b.n	8003664 <HAL_SPI_Receive+0x22a>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2204      	movs	r2, #4
 80034ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	88fa      	ldrh	r2, [r7, #6]
 80034ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	88fa      	ldrh	r2, [r7, #6]
 80034d4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034fc:	d10f      	bne.n	800351e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800350c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800351c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003528:	2b40      	cmp	r3, #64	@ 0x40
 800352a:	d007      	beq.n	800353c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800353a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d170      	bne.n	8003626 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003544:	e035      	b.n	80035b2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b01      	cmp	r3, #1
 8003552:	d115      	bne.n	8003580 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f103 020c 	add.w	r2, r3, #12
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003560:	7812      	ldrb	r2, [r2, #0]
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356a:	1c5a      	adds	r2, r3, #1
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003574:	b29b      	uxth	r3, r3
 8003576:	3b01      	subs	r3, #1
 8003578:	b29a      	uxth	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800357e:	e018      	b.n	80035b2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003580:	f7fe fe2a 	bl	80021d8 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d803      	bhi.n	8003598 <HAL_SPI_Receive+0x15e>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003596:	d102      	bne.n	800359e <HAL_SPI_Receive+0x164>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d109      	bne.n	80035b2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e058      	b.n	8003664 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1c4      	bne.n	8003546 <HAL_SPI_Receive+0x10c>
 80035bc:	e038      	b.n	8003630 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d113      	bne.n	80035f4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d6:	b292      	uxth	r2, r2
 80035d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035de:	1c9a      	adds	r2, r3, #2
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035f2:	e018      	b.n	8003626 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035f4:	f7fe fdf0 	bl	80021d8 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d803      	bhi.n	800360c <HAL_SPI_Receive+0x1d2>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360a:	d102      	bne.n	8003612 <HAL_SPI_Receive+0x1d8>
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e01e      	b.n	8003664 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1c6      	bne.n	80035be <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	6839      	ldr	r1, [r7, #0]
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 fa4b 	bl	8003ad0 <SPI_EndRxTransaction>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2220      	movs	r2, #32
 8003644:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003662:	2300      	movs	r3, #0
  }
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08a      	sub	sp, #40	@ 0x28
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800367a:	2301      	movs	r3, #1
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800367e:	f7fe fdab 	bl	80021d8 <HAL_GetTick>
 8003682:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800368a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003692:	887b      	ldrh	r3, [r7, #2]
 8003694:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003696:	7ffb      	ldrb	r3, [r7, #31]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d00c      	beq.n	80036b6 <HAL_SPI_TransmitReceive+0x4a>
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036a2:	d106      	bne.n	80036b2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d102      	bne.n	80036b2 <HAL_SPI_TransmitReceive+0x46>
 80036ac:	7ffb      	ldrb	r3, [r7, #31]
 80036ae:	2b04      	cmp	r3, #4
 80036b0:	d001      	beq.n	80036b6 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80036b2:	2302      	movs	r3, #2
 80036b4:	e17f      	b.n	80039b6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_SPI_TransmitReceive+0x5c>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <HAL_SPI_TransmitReceive+0x5c>
 80036c2:	887b      	ldrh	r3, [r7, #2]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e174      	b.n	80039b6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_SPI_TransmitReceive+0x6e>
 80036d6:	2302      	movs	r3, #2
 80036d8:	e16d      	b.n	80039b6 <HAL_SPI_TransmitReceive+0x34a>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d003      	beq.n	80036f6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2205      	movs	r2, #5
 80036f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	887a      	ldrh	r2, [r7, #2]
 8003706:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	887a      	ldrh	r2, [r7, #2]
 800370c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	887a      	ldrh	r2, [r7, #2]
 8003718:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	887a      	ldrh	r2, [r7, #2]
 800371e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003736:	2b40      	cmp	r3, #64	@ 0x40
 8003738:	d007      	beq.n	800374a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003748:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003752:	d17e      	bne.n	8003852 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <HAL_SPI_TransmitReceive+0xf6>
 800375c:	8afb      	ldrh	r3, [r7, #22]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d16c      	bne.n	800383c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003766:	881a      	ldrh	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	1c9a      	adds	r2, r3, #2
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800377c:	b29b      	uxth	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	b29a      	uxth	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003786:	e059      	b.n	800383c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b02      	cmp	r3, #2
 8003794:	d11b      	bne.n	80037ce <HAL_SPI_TransmitReceive+0x162>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800379a:	b29b      	uxth	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	d016      	beq.n	80037ce <HAL_SPI_TransmitReceive+0x162>
 80037a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d113      	bne.n	80037ce <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037aa:	881a      	ldrh	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b6:	1c9a      	adds	r2, r3, #2
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 0301 	and.w	r3, r3, #1
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d119      	bne.n	8003810 <HAL_SPI_TransmitReceive+0x1a4>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d014      	beq.n	8003810 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f0:	b292      	uxth	r2, r2
 80037f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f8:	1c9a      	adds	r2, r3, #2
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800380c:	2301      	movs	r3, #1
 800380e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003810:	f7fe fce2 	bl	80021d8 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800381c:	429a      	cmp	r2, r3
 800381e:	d80d      	bhi.n	800383c <HAL_SPI_TransmitReceive+0x1d0>
 8003820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003826:	d009      	beq.n	800383c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e0bc      	b.n	80039b6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1a0      	bne.n	8003788 <HAL_SPI_TransmitReceive+0x11c>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800384a:	b29b      	uxth	r3, r3
 800384c:	2b00      	cmp	r3, #0
 800384e:	d19b      	bne.n	8003788 <HAL_SPI_TransmitReceive+0x11c>
 8003850:	e082      	b.n	8003958 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_SPI_TransmitReceive+0x1f4>
 800385a:	8afb      	ldrh	r3, [r7, #22]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d171      	bne.n	8003944 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	330c      	adds	r3, #12
 800386a:	7812      	ldrb	r2, [r2, #0]
 800386c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003886:	e05d      	b.n	8003944 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b02      	cmp	r3, #2
 8003894:	d11c      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x264>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d017      	beq.n	80038d0 <HAL_SPI_TransmitReceive+0x264>
 80038a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d114      	bne.n	80038d0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	330c      	adds	r3, #12
 80038b0:	7812      	ldrb	r2, [r2, #0]
 80038b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d119      	bne.n	8003912 <HAL_SPI_TransmitReceive+0x2a6>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d014      	beq.n	8003912 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f2:	b2d2      	uxtb	r2, r2
 80038f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fa:	1c5a      	adds	r2, r3, #1
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003904:	b29b      	uxth	r3, r3
 8003906:	3b01      	subs	r3, #1
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800390e:	2301      	movs	r3, #1
 8003910:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003912:	f7fe fc61 	bl	80021d8 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800391e:	429a      	cmp	r2, r3
 8003920:	d803      	bhi.n	800392a <HAL_SPI_TransmitReceive+0x2be>
 8003922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003928:	d102      	bne.n	8003930 <HAL_SPI_TransmitReceive+0x2c4>
 800392a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392c:	2b00      	cmp	r3, #0
 800392e:	d109      	bne.n	8003944 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e038      	b.n	80039b6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d19c      	bne.n	8003888 <HAL_SPI_TransmitReceive+0x21c>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d197      	bne.n	8003888 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003958:	6a3a      	ldr	r2, [r7, #32]
 800395a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 f91d 	bl	8003b9c <SPI_EndRxTxTransaction>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2220      	movs	r2, #32
 800396c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e01d      	b.n	80039b6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10a      	bne.n	8003998 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003982:	2300      	movs	r3, #0
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	613b      	str	r3, [r7, #16]
 8003996:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80039b4:	2300      	movs	r3, #0
  }
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3728      	adds	r7, #40	@ 0x28
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
	...

080039c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	4613      	mov	r3, r2
 80039ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039d0:	f7fe fc02 	bl	80021d8 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d8:	1a9b      	subs	r3, r3, r2
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	4413      	add	r3, r2
 80039de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039e0:	f7fe fbfa 	bl	80021d8 <HAL_GetTick>
 80039e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039e6:	4b39      	ldr	r3, [pc, #228]	@ (8003acc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	015b      	lsls	r3, r3, #5
 80039ec:	0d1b      	lsrs	r3, r3, #20
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	fb02 f303 	mul.w	r3, r2, r3
 80039f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039f6:	e054      	b.n	8003aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fe:	d050      	beq.n	8003aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a00:	f7fe fbea 	bl	80021d8 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	69fa      	ldr	r2, [r7, #28]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d902      	bls.n	8003a16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d13d      	bne.n	8003a92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a2e:	d111      	bne.n	8003a54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a38:	d004      	beq.n	8003a44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a42:	d107      	bne.n	8003a54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a5c:	d10f      	bne.n	8003a7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e017      	b.n	8003ac2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	bf0c      	ite	eq
 8003ab2:	2301      	moveq	r3, #1
 8003ab4:	2300      	movne	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d19b      	bne.n	80039f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3720      	adds	r7, #32
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000000 	.word	0x20000000

08003ad0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ae4:	d111      	bne.n	8003b0a <SPI_EndRxTransaction+0x3a>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003aee:	d004      	beq.n	8003afa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003af8:	d107      	bne.n	8003b0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b08:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b12:	d12a      	bne.n	8003b6a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b1c:	d012      	beq.n	8003b44 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2200      	movs	r2, #0
 8003b26:	2180      	movs	r1, #128	@ 0x80
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f7ff ff49 	bl	80039c0 <SPI_WaitFlagStateUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d02d      	beq.n	8003b90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b38:	f043 0220 	orr.w	r2, r3, #32
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e026      	b.n	8003b92 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f7ff ff36 	bl	80039c0 <SPI_WaitFlagStateUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d01a      	beq.n	8003b90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5e:	f043 0220 	orr.w	r2, r3, #32
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e013      	b.n	8003b92 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2200      	movs	r2, #0
 8003b72:	2101      	movs	r1, #1
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f7ff ff23 	bl	80039c0 <SPI_WaitFlagStateUntilTimeout>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d007      	beq.n	8003b90 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b84:	f043 0220 	orr.w	r2, r3, #32
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e000      	b.n	8003b92 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af02      	add	r7, sp, #8
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	2102      	movs	r1, #2
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f7ff ff04 	bl	80039c0 <SPI_WaitFlagStateUntilTimeout>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc2:	f043 0220 	orr.w	r2, r3, #32
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e032      	b.n	8003c34 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bce:	4b1b      	ldr	r3, [pc, #108]	@ (8003c3c <SPI_EndRxTxTransaction+0xa0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c40 <SPI_EndRxTxTransaction+0xa4>)
 8003bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd8:	0d5b      	lsrs	r3, r3, #21
 8003bda:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003bde:	fb02 f303 	mul.w	r3, r2, r3
 8003be2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bec:	d112      	bne.n	8003c14 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2180      	movs	r1, #128	@ 0x80
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f7ff fee1 	bl	80039c0 <SPI_WaitFlagStateUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d016      	beq.n	8003c32 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c08:	f043 0220 	orr.w	r2, r3, #32
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e00f      	b.n	8003c34 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c2a:	2b80      	cmp	r3, #128	@ 0x80
 8003c2c:	d0f2      	beq.n	8003c14 <SPI_EndRxTxTransaction+0x78>
 8003c2e:	e000      	b.n	8003c32 <SPI_EndRxTxTransaction+0x96>
        break;
 8003c30:	bf00      	nop
  }

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3718      	adds	r7, #24
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20000000 	.word	0x20000000
 8003c40:	165e9f81 	.word	0x165e9f81

08003c44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e041      	b.n	8003cda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7fe f848 	bl	8001d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2202      	movs	r2, #2
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	4619      	mov	r1, r3
 8003c82:	4610      	mov	r0, r2
 8003c84:	f000 fac0 	bl	8004208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e041      	b.n	8003d78 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d106      	bne.n	8003d0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f839 	bl	8003d80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2202      	movs	r2, #2
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3304      	adds	r3, #4
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4610      	mov	r0, r2
 8003d22:	f000 fa71 	bl	8004208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2201      	movs	r2, #1
 8003d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d109      	bne.n	8003db8 <HAL_TIM_PWM_Start+0x24>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	bf14      	ite	ne
 8003db0:	2301      	movne	r3, #1
 8003db2:	2300      	moveq	r3, #0
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	e022      	b.n	8003dfe <HAL_TIM_PWM_Start+0x6a>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d109      	bne.n	8003dd2 <HAL_TIM_PWM_Start+0x3e>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	bf14      	ite	ne
 8003dca:	2301      	movne	r3, #1
 8003dcc:	2300      	moveq	r3, #0
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	e015      	b.n	8003dfe <HAL_TIM_PWM_Start+0x6a>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d109      	bne.n	8003dec <HAL_TIM_PWM_Start+0x58>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	bf14      	ite	ne
 8003de4:	2301      	movne	r3, #1
 8003de6:	2300      	moveq	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	e008      	b.n	8003dfe <HAL_TIM_PWM_Start+0x6a>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	bf14      	ite	ne
 8003df8:	2301      	movne	r3, #1
 8003dfa:	2300      	moveq	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e068      	b.n	8003ed8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d104      	bne.n	8003e16 <HAL_TIM_PWM_Start+0x82>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e14:	e013      	b.n	8003e3e <HAL_TIM_PWM_Start+0xaa>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d104      	bne.n	8003e26 <HAL_TIM_PWM_Start+0x92>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e24:	e00b      	b.n	8003e3e <HAL_TIM_PWM_Start+0xaa>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d104      	bne.n	8003e36 <HAL_TIM_PWM_Start+0xa2>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e34:	e003      	b.n	8003e3e <HAL_TIM_PWM_Start+0xaa>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2202      	movs	r2, #2
 8003e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2201      	movs	r2, #1
 8003e44:	6839      	ldr	r1, [r7, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 fc90 	bl	800476c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a23      	ldr	r2, [pc, #140]	@ (8003ee0 <HAL_TIM_PWM_Start+0x14c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d107      	bne.n	8003e66 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e64:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a1d      	ldr	r2, [pc, #116]	@ (8003ee0 <HAL_TIM_PWM_Start+0x14c>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d018      	beq.n	8003ea2 <HAL_TIM_PWM_Start+0x10e>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e78:	d013      	beq.n	8003ea2 <HAL_TIM_PWM_Start+0x10e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a19      	ldr	r2, [pc, #100]	@ (8003ee4 <HAL_TIM_PWM_Start+0x150>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d00e      	beq.n	8003ea2 <HAL_TIM_PWM_Start+0x10e>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a17      	ldr	r2, [pc, #92]	@ (8003ee8 <HAL_TIM_PWM_Start+0x154>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d009      	beq.n	8003ea2 <HAL_TIM_PWM_Start+0x10e>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a16      	ldr	r2, [pc, #88]	@ (8003eec <HAL_TIM_PWM_Start+0x158>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d004      	beq.n	8003ea2 <HAL_TIM_PWM_Start+0x10e>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a14      	ldr	r2, [pc, #80]	@ (8003ef0 <HAL_TIM_PWM_Start+0x15c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d111      	bne.n	8003ec6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2b06      	cmp	r3, #6
 8003eb2:	d010      	beq.n	8003ed6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec4:	e007      	b.n	8003ed6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f042 0201 	orr.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40010000 	.word	0x40010000
 8003ee4:	40000400 	.word	0x40000400
 8003ee8:	40000800 	.word	0x40000800
 8003eec:	40000c00 	.word	0x40000c00
 8003ef0:	40014000 	.word	0x40014000

08003ef4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d101      	bne.n	8003f12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f0e:	2302      	movs	r3, #2
 8003f10:	e0ae      	b.n	8004070 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b0c      	cmp	r3, #12
 8003f1e:	f200 809f 	bhi.w	8004060 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f22:	a201      	add	r2, pc, #4	@ (adr r2, 8003f28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f28:	08003f5d 	.word	0x08003f5d
 8003f2c:	08004061 	.word	0x08004061
 8003f30:	08004061 	.word	0x08004061
 8003f34:	08004061 	.word	0x08004061
 8003f38:	08003f9d 	.word	0x08003f9d
 8003f3c:	08004061 	.word	0x08004061
 8003f40:	08004061 	.word	0x08004061
 8003f44:	08004061 	.word	0x08004061
 8003f48:	08003fdf 	.word	0x08003fdf
 8003f4c:	08004061 	.word	0x08004061
 8003f50:	08004061 	.word	0x08004061
 8003f54:	08004061 	.word	0x08004061
 8003f58:	0800401f 	.word	0x0800401f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	68b9      	ldr	r1, [r7, #8]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 f9dc 	bl	8004320 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699a      	ldr	r2, [r3, #24]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0208 	orr.w	r2, r2, #8
 8003f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699a      	ldr	r2, [r3, #24]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 0204 	bic.w	r2, r2, #4
 8003f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6999      	ldr	r1, [r3, #24]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	691a      	ldr	r2, [r3, #16]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	619a      	str	r2, [r3, #24]
      break;
 8003f9a:	e064      	b.n	8004066 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68b9      	ldr	r1, [r7, #8]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fa22 	bl	80043ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699a      	ldr	r2, [r3, #24]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699a      	ldr	r2, [r3, #24]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6999      	ldr	r1, [r3, #24]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	021a      	lsls	r2, r3, #8
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	619a      	str	r2, [r3, #24]
      break;
 8003fdc:	e043      	b.n	8004066 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68b9      	ldr	r1, [r7, #8]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 fa6d 	bl	80044c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	69da      	ldr	r2, [r3, #28]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0208 	orr.w	r2, r2, #8
 8003ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69da      	ldr	r2, [r3, #28]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0204 	bic.w	r2, r2, #4
 8004008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69d9      	ldr	r1, [r3, #28]
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	430a      	orrs	r2, r1
 800401a:	61da      	str	r2, [r3, #28]
      break;
 800401c:	e023      	b.n	8004066 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	4618      	mov	r0, r3
 8004026:	f000 fab7 	bl	8004598 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	69da      	ldr	r2, [r3, #28]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	69da      	ldr	r2, [r3, #28]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69d9      	ldr	r1, [r3, #28]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	021a      	lsls	r2, r3, #8
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	61da      	str	r2, [r3, #28]
      break;
 800405e:	e002      	b.n	8004066 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	75fb      	strb	r3, [r7, #23]
      break;
 8004064:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800406e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <HAL_TIM_ConfigClockSource+0x1c>
 8004090:	2302      	movs	r3, #2
 8004092:	e0b4      	b.n	80041fe <HAL_TIM_ConfigClockSource+0x186>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80040b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040cc:	d03e      	beq.n	800414c <HAL_TIM_ConfigClockSource+0xd4>
 80040ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040d2:	f200 8087 	bhi.w	80041e4 <HAL_TIM_ConfigClockSource+0x16c>
 80040d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040da:	f000 8086 	beq.w	80041ea <HAL_TIM_ConfigClockSource+0x172>
 80040de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040e2:	d87f      	bhi.n	80041e4 <HAL_TIM_ConfigClockSource+0x16c>
 80040e4:	2b70      	cmp	r3, #112	@ 0x70
 80040e6:	d01a      	beq.n	800411e <HAL_TIM_ConfigClockSource+0xa6>
 80040e8:	2b70      	cmp	r3, #112	@ 0x70
 80040ea:	d87b      	bhi.n	80041e4 <HAL_TIM_ConfigClockSource+0x16c>
 80040ec:	2b60      	cmp	r3, #96	@ 0x60
 80040ee:	d050      	beq.n	8004192 <HAL_TIM_ConfigClockSource+0x11a>
 80040f0:	2b60      	cmp	r3, #96	@ 0x60
 80040f2:	d877      	bhi.n	80041e4 <HAL_TIM_ConfigClockSource+0x16c>
 80040f4:	2b50      	cmp	r3, #80	@ 0x50
 80040f6:	d03c      	beq.n	8004172 <HAL_TIM_ConfigClockSource+0xfa>
 80040f8:	2b50      	cmp	r3, #80	@ 0x50
 80040fa:	d873      	bhi.n	80041e4 <HAL_TIM_ConfigClockSource+0x16c>
 80040fc:	2b40      	cmp	r3, #64	@ 0x40
 80040fe:	d058      	beq.n	80041b2 <HAL_TIM_ConfigClockSource+0x13a>
 8004100:	2b40      	cmp	r3, #64	@ 0x40
 8004102:	d86f      	bhi.n	80041e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004104:	2b30      	cmp	r3, #48	@ 0x30
 8004106:	d064      	beq.n	80041d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004108:	2b30      	cmp	r3, #48	@ 0x30
 800410a:	d86b      	bhi.n	80041e4 <HAL_TIM_ConfigClockSource+0x16c>
 800410c:	2b20      	cmp	r3, #32
 800410e:	d060      	beq.n	80041d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004110:	2b20      	cmp	r3, #32
 8004112:	d867      	bhi.n	80041e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004114:	2b00      	cmp	r3, #0
 8004116:	d05c      	beq.n	80041d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004118:	2b10      	cmp	r3, #16
 800411a:	d05a      	beq.n	80041d2 <HAL_TIM_ConfigClockSource+0x15a>
 800411c:	e062      	b.n	80041e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800412e:	f000 fafd 	bl	800472c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004140:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	609a      	str	r2, [r3, #8]
      break;
 800414a:	e04f      	b.n	80041ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800415c:	f000 fae6 	bl	800472c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800416e:	609a      	str	r2, [r3, #8]
      break;
 8004170:	e03c      	b.n	80041ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800417e:	461a      	mov	r2, r3
 8004180:	f000 fa5a 	bl	8004638 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2150      	movs	r1, #80	@ 0x50
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fab3 	bl	80046f6 <TIM_ITRx_SetConfig>
      break;
 8004190:	e02c      	b.n	80041ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800419e:	461a      	mov	r2, r3
 80041a0:	f000 fa79 	bl	8004696 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2160      	movs	r1, #96	@ 0x60
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 faa3 	bl	80046f6 <TIM_ITRx_SetConfig>
      break;
 80041b0:	e01c      	b.n	80041ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041be:	461a      	mov	r2, r3
 80041c0:	f000 fa3a 	bl	8004638 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2140      	movs	r1, #64	@ 0x40
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fa93 	bl	80046f6 <TIM_ITRx_SetConfig>
      break;
 80041d0:	e00c      	b.n	80041ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4619      	mov	r1, r3
 80041dc:	4610      	mov	r0, r2
 80041de:	f000 fa8a 	bl	80046f6 <TIM_ITRx_SetConfig>
      break;
 80041e2:	e003      	b.n	80041ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	73fb      	strb	r3, [r7, #15]
      break;
 80041e8:	e000      	b.n	80041ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a3a      	ldr	r2, [pc, #232]	@ (8004304 <TIM_Base_SetConfig+0xfc>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d00f      	beq.n	8004240 <TIM_Base_SetConfig+0x38>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004226:	d00b      	beq.n	8004240 <TIM_Base_SetConfig+0x38>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a37      	ldr	r2, [pc, #220]	@ (8004308 <TIM_Base_SetConfig+0x100>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d007      	beq.n	8004240 <TIM_Base_SetConfig+0x38>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a36      	ldr	r2, [pc, #216]	@ (800430c <TIM_Base_SetConfig+0x104>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d003      	beq.n	8004240 <TIM_Base_SetConfig+0x38>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a35      	ldr	r2, [pc, #212]	@ (8004310 <TIM_Base_SetConfig+0x108>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d108      	bne.n	8004252 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4313      	orrs	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a2b      	ldr	r2, [pc, #172]	@ (8004304 <TIM_Base_SetConfig+0xfc>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d01b      	beq.n	8004292 <TIM_Base_SetConfig+0x8a>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004260:	d017      	beq.n	8004292 <TIM_Base_SetConfig+0x8a>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a28      	ldr	r2, [pc, #160]	@ (8004308 <TIM_Base_SetConfig+0x100>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d013      	beq.n	8004292 <TIM_Base_SetConfig+0x8a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a27      	ldr	r2, [pc, #156]	@ (800430c <TIM_Base_SetConfig+0x104>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00f      	beq.n	8004292 <TIM_Base_SetConfig+0x8a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a26      	ldr	r2, [pc, #152]	@ (8004310 <TIM_Base_SetConfig+0x108>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00b      	beq.n	8004292 <TIM_Base_SetConfig+0x8a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a25      	ldr	r2, [pc, #148]	@ (8004314 <TIM_Base_SetConfig+0x10c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d007      	beq.n	8004292 <TIM_Base_SetConfig+0x8a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a24      	ldr	r2, [pc, #144]	@ (8004318 <TIM_Base_SetConfig+0x110>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d003      	beq.n	8004292 <TIM_Base_SetConfig+0x8a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a23      	ldr	r2, [pc, #140]	@ (800431c <TIM_Base_SetConfig+0x114>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d108      	bne.n	80042a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a0e      	ldr	r2, [pc, #56]	@ (8004304 <TIM_Base_SetConfig+0xfc>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d103      	bne.n	80042d8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d105      	bne.n	80042f6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f023 0201 	bic.w	r2, r3, #1
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	611a      	str	r2, [r3, #16]
  }
}
 80042f6:	bf00      	nop
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	40010000 	.word	0x40010000
 8004308:	40000400 	.word	0x40000400
 800430c:	40000800 	.word	0x40000800
 8004310:	40000c00 	.word	0x40000c00
 8004314:	40014000 	.word	0x40014000
 8004318:	40014400 	.word	0x40014400
 800431c:	40014800 	.word	0x40014800

08004320 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	f023 0201 	bic.w	r2, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800434e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0303 	bic.w	r3, r3, #3
 8004356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	4313      	orrs	r3, r2
 8004360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f023 0302 	bic.w	r3, r3, #2
 8004368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	4313      	orrs	r3, r2
 8004372:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a1c      	ldr	r2, [pc, #112]	@ (80043e8 <TIM_OC1_SetConfig+0xc8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d10c      	bne.n	8004396 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f023 0308 	bic.w	r3, r3, #8
 8004382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f023 0304 	bic.w	r3, r3, #4
 8004394:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a13      	ldr	r2, [pc, #76]	@ (80043e8 <TIM_OC1_SetConfig+0xc8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d111      	bne.n	80043c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4313      	orrs	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	621a      	str	r2, [r3, #32]
}
 80043dc:	bf00      	nop
 80043de:	371c      	adds	r7, #28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	40010000 	.word	0x40010000

080043ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	f023 0210 	bic.w	r2, r3, #16
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800441a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	021b      	lsls	r3, r3, #8
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4313      	orrs	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f023 0320 	bic.w	r3, r3, #32
 8004436:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	4313      	orrs	r3, r2
 8004442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a1e      	ldr	r2, [pc, #120]	@ (80044c0 <TIM_OC2_SetConfig+0xd4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d10d      	bne.n	8004468 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004466:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a15      	ldr	r2, [pc, #84]	@ (80044c0 <TIM_OC2_SetConfig+0xd4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d113      	bne.n	8004498 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004476:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800447e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	4313      	orrs	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40010000 	.word	0x40010000

080044c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69db      	ldr	r3, [r3, #28]
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0303 	bic.w	r3, r3, #3
 80044fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800450c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	021b      	lsls	r3, r3, #8
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a1d      	ldr	r2, [pc, #116]	@ (8004594 <TIM_OC3_SetConfig+0xd0>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d10d      	bne.n	800453e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004528:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	021b      	lsls	r3, r3, #8
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	4313      	orrs	r3, r2
 8004534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800453c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a14      	ldr	r2, [pc, #80]	@ (8004594 <TIM_OC3_SetConfig+0xd0>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d113      	bne.n	800456e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800454c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	621a      	str	r2, [r3, #32]
}
 8004588:	bf00      	nop
 800458a:	371c      	adds	r7, #28
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	40010000 	.word	0x40010000

08004598 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	021b      	lsls	r3, r3, #8
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	031b      	lsls	r3, r3, #12
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a10      	ldr	r2, [pc, #64]	@ (8004634 <TIM_OC4_SetConfig+0x9c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d109      	bne.n	800460c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	019b      	lsls	r3, r3, #6
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	4313      	orrs	r3, r2
 800460a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	621a      	str	r2, [r3, #32]
}
 8004626:	bf00      	nop
 8004628:	371c      	adds	r7, #28
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40010000 	.word	0x40010000

08004638 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	f023 0201 	bic.w	r2, r3, #1
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004662:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	4313      	orrs	r3, r2
 800466c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f023 030a 	bic.w	r3, r3, #10
 8004674:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	621a      	str	r2, [r3, #32]
}
 800468a:	bf00      	nop
 800468c:	371c      	adds	r7, #28
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004696:	b480      	push	{r7}
 8004698:	b087      	sub	sp, #28
 800469a:	af00      	add	r7, sp, #0
 800469c:	60f8      	str	r0, [r7, #12]
 800469e:	60b9      	str	r1, [r7, #8]
 80046a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	f023 0210 	bic.w	r2, r3, #16
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	031b      	lsls	r3, r3, #12
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	011b      	lsls	r3, r3, #4
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	4313      	orrs	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	693a      	ldr	r2, [r7, #16]
 80046e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	621a      	str	r2, [r3, #32]
}
 80046ea:	bf00      	nop
 80046ec:	371c      	adds	r7, #28
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b085      	sub	sp, #20
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
 80046fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800470c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4313      	orrs	r3, r2
 8004714:	f043 0307 	orr.w	r3, r3, #7
 8004718:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	609a      	str	r2, [r3, #8]
}
 8004720:	bf00      	nop
 8004722:	3714      	adds	r7, #20
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
 8004738:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004746:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	021a      	lsls	r2, r3, #8
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	431a      	orrs	r2, r3
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4313      	orrs	r3, r2
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	4313      	orrs	r3, r2
 8004758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	609a      	str	r2, [r3, #8]
}
 8004760:	bf00      	nop
 8004762:	371c      	adds	r7, #28
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800476c:	b480      	push	{r7}
 800476e:	b087      	sub	sp, #28
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f003 031f 	and.w	r3, r3, #31
 800477e:	2201      	movs	r2, #1
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6a1a      	ldr	r2, [r3, #32]
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	43db      	mvns	r3, r3
 800478e:	401a      	ands	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a1a      	ldr	r2, [r3, #32]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f003 031f 	and.w	r3, r3, #31
 800479e:	6879      	ldr	r1, [r7, #4]
 80047a0:	fa01 f303 	lsl.w	r3, r1, r3
 80047a4:	431a      	orrs	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	621a      	str	r2, [r3, #32]
}
 80047aa:	bf00      	nop
 80047ac:	371c      	adds	r7, #28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
	...

080047b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e050      	b.n	8004872 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2202      	movs	r2, #2
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a1c      	ldr	r2, [pc, #112]	@ (8004880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d018      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800481c:	d013      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a18      	ldr	r2, [pc, #96]	@ (8004884 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00e      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a16      	ldr	r2, [pc, #88]	@ (8004888 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d009      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a15      	ldr	r2, [pc, #84]	@ (800488c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d004      	beq.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a13      	ldr	r2, [pc, #76]	@ (8004890 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d10c      	bne.n	8004860 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800484c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	4313      	orrs	r3, r2
 8004856:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68ba      	ldr	r2, [r7, #8]
 800485e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3714      	adds	r7, #20
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40010000 	.word	0x40010000
 8004884:	40000400 	.word	0x40000400
 8004888:	40000800 	.word	0x40000800
 800488c:	40000c00 	.word	0x40000c00
 8004890:	40014000 	.word	0x40014000

08004894 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e042      	b.n	800492c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fd fa78 	bl	8001db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2224      	movs	r2, #36	@ 0x24
 80048c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f973 	bl	8004bc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695a      	ldr	r2, [r3, #20]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800490c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b08a      	sub	sp, #40	@ 0x28
 8004938:	af02      	add	r7, sp, #8
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	4613      	mov	r3, r2
 8004942:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b20      	cmp	r3, #32
 8004952:	d175      	bne.n	8004a40 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <HAL_UART_Transmit+0x2c>
 800495a:	88fb      	ldrh	r3, [r7, #6]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d101      	bne.n	8004964 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e06e      	b.n	8004a42 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2221      	movs	r2, #33	@ 0x21
 800496e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004972:	f7fd fc31 	bl	80021d8 <HAL_GetTick>
 8004976:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	88fa      	ldrh	r2, [r7, #6]
 800497c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	88fa      	ldrh	r2, [r7, #6]
 8004982:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800498c:	d108      	bne.n	80049a0 <HAL_UART_Transmit+0x6c>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d104      	bne.n	80049a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004996:	2300      	movs	r3, #0
 8004998:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	61bb      	str	r3, [r7, #24]
 800499e:	e003      	b.n	80049a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049a4:	2300      	movs	r3, #0
 80049a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049a8:	e02e      	b.n	8004a08 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2200      	movs	r2, #0
 80049b2:	2180      	movs	r1, #128	@ 0x80
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f848 	bl	8004a4a <UART_WaitOnFlagUntilTimeout>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d005      	beq.n	80049cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e03a      	b.n	8004a42 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10b      	bne.n	80049ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	461a      	mov	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	3302      	adds	r3, #2
 80049e6:	61bb      	str	r3, [r7, #24]
 80049e8:	e007      	b.n	80049fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	781a      	ldrb	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	3301      	adds	r3, #1
 80049f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1cb      	bne.n	80049aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2140      	movs	r1, #64	@ 0x40
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f814 	bl	8004a4a <UART_WaitOnFlagUntilTimeout>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e006      	b.n	8004a42 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	e000      	b.n	8004a42 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a40:	2302      	movs	r3, #2
  }
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3720      	adds	r7, #32
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b086      	sub	sp, #24
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	60b9      	str	r1, [r7, #8]
 8004a54:	603b      	str	r3, [r7, #0]
 8004a56:	4613      	mov	r3, r2
 8004a58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a5a:	e03b      	b.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a62:	d037      	beq.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a64:	f7fd fbb8 	bl	80021d8 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	6a3a      	ldr	r2, [r7, #32]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d302      	bcc.n	8004a7a <UART_WaitOnFlagUntilTimeout+0x30>
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e03a      	b.n	8004af4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d023      	beq.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b80      	cmp	r3, #128	@ 0x80
 8004a90:	d020      	beq.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b40      	cmp	r3, #64	@ 0x40
 8004a96:	d01d      	beq.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0308 	and.w	r3, r3, #8
 8004aa2:	2b08      	cmp	r3, #8
 8004aa4:	d116      	bne.n	8004ad4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	617b      	str	r3, [r7, #20]
 8004aba:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 f81d 	bl	8004afc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2208      	movs	r2, #8
 8004ac6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e00f      	b.n	8004af4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	4013      	ands	r3, r2
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	bf0c      	ite	eq
 8004ae4:	2301      	moveq	r3, #1
 8004ae6:	2300      	movne	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	461a      	mov	r2, r3
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d0b4      	beq.n	8004a5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b095      	sub	sp, #84	@ 0x54
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	330c      	adds	r3, #12
 8004b0a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b0e:	e853 3f00 	ldrex	r3, [r3]
 8004b12:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	330c      	adds	r3, #12
 8004b22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b24:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b28:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b2c:	e841 2300 	strex	r3, r2, [r1]
 8004b30:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e5      	bne.n	8004b04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3314      	adds	r3, #20
 8004b3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	e853 3f00 	ldrex	r3, [r3]
 8004b46:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	f023 0301 	bic.w	r3, r3, #1
 8004b4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3314      	adds	r3, #20
 8004b56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b58:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b60:	e841 2300 	strex	r3, r2, [r1]
 8004b64:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e5      	bne.n	8004b38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d119      	bne.n	8004ba8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	330c      	adds	r3, #12
 8004b7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	e853 3f00 	ldrex	r3, [r3]
 8004b82:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f023 0310 	bic.w	r3, r3, #16
 8004b8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	330c      	adds	r3, #12
 8004b92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b94:	61ba      	str	r2, [r7, #24]
 8004b96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b98:	6979      	ldr	r1, [r7, #20]
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	e841 2300 	strex	r3, r2, [r1]
 8004ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e5      	bne.n	8004b74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004bb6:	bf00      	nop
 8004bb8:	3754      	adds	r7, #84	@ 0x54
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
	...

08004bc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bc8:	b0c0      	sub	sp, #256	@ 0x100
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be0:	68d9      	ldr	r1, [r3, #12]
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	ea40 0301 	orr.w	r3, r0, r1
 8004bec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c08:	69db      	ldr	r3, [r3, #28]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c1c:	f021 010c 	bic.w	r1, r1, #12
 8004c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3e:	6999      	ldr	r1, [r3, #24]
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	ea40 0301 	orr.w	r3, r0, r1
 8004c4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4b8f      	ldr	r3, [pc, #572]	@ (8004e90 <UART_SetConfig+0x2cc>)
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d005      	beq.n	8004c64 <UART_SetConfig+0xa0>
 8004c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4b8d      	ldr	r3, [pc, #564]	@ (8004e94 <UART_SetConfig+0x2d0>)
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d104      	bne.n	8004c6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c64:	f7fe fa08 	bl	8003078 <HAL_RCC_GetPCLK2Freq>
 8004c68:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c6c:	e003      	b.n	8004c76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c6e:	f7fe f9ef 	bl	8003050 <HAL_RCC_GetPCLK1Freq>
 8004c72:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7a:	69db      	ldr	r3, [r3, #28]
 8004c7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c80:	f040 810c 	bne.w	8004e9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c96:	4622      	mov	r2, r4
 8004c98:	462b      	mov	r3, r5
 8004c9a:	1891      	adds	r1, r2, r2
 8004c9c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c9e:	415b      	adcs	r3, r3
 8004ca0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ca2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	eb12 0801 	adds.w	r8, r2, r1
 8004cac:	4629      	mov	r1, r5
 8004cae:	eb43 0901 	adc.w	r9, r3, r1
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cc6:	4690      	mov	r8, r2
 8004cc8:	4699      	mov	r9, r3
 8004cca:	4623      	mov	r3, r4
 8004ccc:	eb18 0303 	adds.w	r3, r8, r3
 8004cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004cd4:	462b      	mov	r3, r5
 8004cd6:	eb49 0303 	adc.w	r3, r9, r3
 8004cda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004cee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	18db      	adds	r3, r3, r3
 8004cf6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	eb42 0303 	adc.w	r3, r2, r3
 8004cfe:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d08:	f7fb ffa6 	bl	8000c58 <__aeabi_uldivmod>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4b61      	ldr	r3, [pc, #388]	@ (8004e98 <UART_SetConfig+0x2d4>)
 8004d12:	fba3 2302 	umull	r2, r3, r3, r2
 8004d16:	095b      	lsrs	r3, r3, #5
 8004d18:	011c      	lsls	r4, r3, #4
 8004d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d24:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d2c:	4642      	mov	r2, r8
 8004d2e:	464b      	mov	r3, r9
 8004d30:	1891      	adds	r1, r2, r2
 8004d32:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d34:	415b      	adcs	r3, r3
 8004d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d3c:	4641      	mov	r1, r8
 8004d3e:	eb12 0a01 	adds.w	sl, r2, r1
 8004d42:	4649      	mov	r1, r9
 8004d44:	eb43 0b01 	adc.w	fp, r3, r1
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d5c:	4692      	mov	sl, r2
 8004d5e:	469b      	mov	fp, r3
 8004d60:	4643      	mov	r3, r8
 8004d62:	eb1a 0303 	adds.w	r3, sl, r3
 8004d66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d6a:	464b      	mov	r3, r9
 8004d6c:	eb4b 0303 	adc.w	r3, fp, r3
 8004d70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	18db      	adds	r3, r3, r3
 8004d8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d8e:	4613      	mov	r3, r2
 8004d90:	eb42 0303 	adc.w	r3, r2, r3
 8004d94:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d9e:	f7fb ff5b 	bl	8000c58 <__aeabi_uldivmod>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4611      	mov	r1, r2
 8004da8:	4b3b      	ldr	r3, [pc, #236]	@ (8004e98 <UART_SetConfig+0x2d4>)
 8004daa:	fba3 2301 	umull	r2, r3, r3, r1
 8004dae:	095b      	lsrs	r3, r3, #5
 8004db0:	2264      	movs	r2, #100	@ 0x64
 8004db2:	fb02 f303 	mul.w	r3, r2, r3
 8004db6:	1acb      	subs	r3, r1, r3
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004dbe:	4b36      	ldr	r3, [pc, #216]	@ (8004e98 <UART_SetConfig+0x2d4>)
 8004dc0:	fba3 2302 	umull	r2, r3, r3, r2
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004dcc:	441c      	add	r4, r3
 8004dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004dd8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ddc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004de0:	4642      	mov	r2, r8
 8004de2:	464b      	mov	r3, r9
 8004de4:	1891      	adds	r1, r2, r2
 8004de6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004de8:	415b      	adcs	r3, r3
 8004dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004df0:	4641      	mov	r1, r8
 8004df2:	1851      	adds	r1, r2, r1
 8004df4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004df6:	4649      	mov	r1, r9
 8004df8:	414b      	adcs	r3, r1
 8004dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dfc:	f04f 0200 	mov.w	r2, #0
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e08:	4659      	mov	r1, fp
 8004e0a:	00cb      	lsls	r3, r1, #3
 8004e0c:	4651      	mov	r1, sl
 8004e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e12:	4651      	mov	r1, sl
 8004e14:	00ca      	lsls	r2, r1, #3
 8004e16:	4610      	mov	r0, r2
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	189b      	adds	r3, r3, r2
 8004e20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e24:	464b      	mov	r3, r9
 8004e26:	460a      	mov	r2, r1
 8004e28:	eb42 0303 	adc.w	r3, r2, r3
 8004e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e44:	460b      	mov	r3, r1
 8004e46:	18db      	adds	r3, r3, r3
 8004e48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	eb42 0303 	adc.w	r3, r2, r3
 8004e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e5a:	f7fb fefd 	bl	8000c58 <__aeabi_uldivmod>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4b0d      	ldr	r3, [pc, #52]	@ (8004e98 <UART_SetConfig+0x2d4>)
 8004e64:	fba3 1302 	umull	r1, r3, r3, r2
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	2164      	movs	r1, #100	@ 0x64
 8004e6c:	fb01 f303 	mul.w	r3, r1, r3
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	3332      	adds	r3, #50	@ 0x32
 8004e76:	4a08      	ldr	r2, [pc, #32]	@ (8004e98 <UART_SetConfig+0x2d4>)
 8004e78:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7c:	095b      	lsrs	r3, r3, #5
 8004e7e:	f003 0207 	and.w	r2, r3, #7
 8004e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4422      	add	r2, r4
 8004e8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e8c:	e106      	b.n	800509c <UART_SetConfig+0x4d8>
 8004e8e:	bf00      	nop
 8004e90:	40011000 	.word	0x40011000
 8004e94:	40011400 	.word	0x40011400
 8004e98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ea6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004eaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004eae:	4642      	mov	r2, r8
 8004eb0:	464b      	mov	r3, r9
 8004eb2:	1891      	adds	r1, r2, r2
 8004eb4:	6239      	str	r1, [r7, #32]
 8004eb6:	415b      	adcs	r3, r3
 8004eb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004eba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ebe:	4641      	mov	r1, r8
 8004ec0:	1854      	adds	r4, r2, r1
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	eb43 0501 	adc.w	r5, r3, r1
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	00eb      	lsls	r3, r5, #3
 8004ed2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ed6:	00e2      	lsls	r2, r4, #3
 8004ed8:	4614      	mov	r4, r2
 8004eda:	461d      	mov	r5, r3
 8004edc:	4643      	mov	r3, r8
 8004ede:	18e3      	adds	r3, r4, r3
 8004ee0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ee4:	464b      	mov	r3, r9
 8004ee6:	eb45 0303 	adc.w	r3, r5, r3
 8004eea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004efa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f0a:	4629      	mov	r1, r5
 8004f0c:	008b      	lsls	r3, r1, #2
 8004f0e:	4621      	mov	r1, r4
 8004f10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f14:	4621      	mov	r1, r4
 8004f16:	008a      	lsls	r2, r1, #2
 8004f18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f1c:	f7fb fe9c 	bl	8000c58 <__aeabi_uldivmod>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4b60      	ldr	r3, [pc, #384]	@ (80050a8 <UART_SetConfig+0x4e4>)
 8004f26:	fba3 2302 	umull	r2, r3, r3, r2
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	011c      	lsls	r4, r3, #4
 8004f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f32:	2200      	movs	r2, #0
 8004f34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f40:	4642      	mov	r2, r8
 8004f42:	464b      	mov	r3, r9
 8004f44:	1891      	adds	r1, r2, r2
 8004f46:	61b9      	str	r1, [r7, #24]
 8004f48:	415b      	adcs	r3, r3
 8004f4a:	61fb      	str	r3, [r7, #28]
 8004f4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f50:	4641      	mov	r1, r8
 8004f52:	1851      	adds	r1, r2, r1
 8004f54:	6139      	str	r1, [r7, #16]
 8004f56:	4649      	mov	r1, r9
 8004f58:	414b      	adcs	r3, r1
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f68:	4659      	mov	r1, fp
 8004f6a:	00cb      	lsls	r3, r1, #3
 8004f6c:	4651      	mov	r1, sl
 8004f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f72:	4651      	mov	r1, sl
 8004f74:	00ca      	lsls	r2, r1, #3
 8004f76:	4610      	mov	r0, r2
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	4642      	mov	r2, r8
 8004f7e:	189b      	adds	r3, r3, r2
 8004f80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f84:	464b      	mov	r3, r9
 8004f86:	460a      	mov	r2, r1
 8004f88:	eb42 0303 	adc.w	r3, r2, r3
 8004f8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004fa8:	4649      	mov	r1, r9
 8004faa:	008b      	lsls	r3, r1, #2
 8004fac:	4641      	mov	r1, r8
 8004fae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fb2:	4641      	mov	r1, r8
 8004fb4:	008a      	lsls	r2, r1, #2
 8004fb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004fba:	f7fb fe4d 	bl	8000c58 <__aeabi_uldivmod>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	4b38      	ldr	r3, [pc, #224]	@ (80050a8 <UART_SetConfig+0x4e4>)
 8004fc6:	fba3 2301 	umull	r2, r3, r3, r1
 8004fca:	095b      	lsrs	r3, r3, #5
 8004fcc:	2264      	movs	r2, #100	@ 0x64
 8004fce:	fb02 f303 	mul.w	r3, r2, r3
 8004fd2:	1acb      	subs	r3, r1, r3
 8004fd4:	011b      	lsls	r3, r3, #4
 8004fd6:	3332      	adds	r3, #50	@ 0x32
 8004fd8:	4a33      	ldr	r2, [pc, #204]	@ (80050a8 <UART_SetConfig+0x4e4>)
 8004fda:	fba2 2303 	umull	r2, r3, r2, r3
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004fe4:	441c      	add	r4, r3
 8004fe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fea:	2200      	movs	r2, #0
 8004fec:	673b      	str	r3, [r7, #112]	@ 0x70
 8004fee:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ff0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ff4:	4642      	mov	r2, r8
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	1891      	adds	r1, r2, r2
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	415b      	adcs	r3, r3
 8004ffe:	60fb      	str	r3, [r7, #12]
 8005000:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005004:	4641      	mov	r1, r8
 8005006:	1851      	adds	r1, r2, r1
 8005008:	6039      	str	r1, [r7, #0]
 800500a:	4649      	mov	r1, r9
 800500c:	414b      	adcs	r3, r1
 800500e:	607b      	str	r3, [r7, #4]
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800501c:	4659      	mov	r1, fp
 800501e:	00cb      	lsls	r3, r1, #3
 8005020:	4651      	mov	r1, sl
 8005022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005026:	4651      	mov	r1, sl
 8005028:	00ca      	lsls	r2, r1, #3
 800502a:	4610      	mov	r0, r2
 800502c:	4619      	mov	r1, r3
 800502e:	4603      	mov	r3, r0
 8005030:	4642      	mov	r2, r8
 8005032:	189b      	adds	r3, r3, r2
 8005034:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005036:	464b      	mov	r3, r9
 8005038:	460a      	mov	r2, r1
 800503a:	eb42 0303 	adc.w	r3, r2, r3
 800503e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	663b      	str	r3, [r7, #96]	@ 0x60
 800504a:	667a      	str	r2, [r7, #100]	@ 0x64
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005058:	4649      	mov	r1, r9
 800505a:	008b      	lsls	r3, r1, #2
 800505c:	4641      	mov	r1, r8
 800505e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005062:	4641      	mov	r1, r8
 8005064:	008a      	lsls	r2, r1, #2
 8005066:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800506a:	f7fb fdf5 	bl	8000c58 <__aeabi_uldivmod>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	4b0d      	ldr	r3, [pc, #52]	@ (80050a8 <UART_SetConfig+0x4e4>)
 8005074:	fba3 1302 	umull	r1, r3, r3, r2
 8005078:	095b      	lsrs	r3, r3, #5
 800507a:	2164      	movs	r1, #100	@ 0x64
 800507c:	fb01 f303 	mul.w	r3, r1, r3
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	3332      	adds	r3, #50	@ 0x32
 8005086:	4a08      	ldr	r2, [pc, #32]	@ (80050a8 <UART_SetConfig+0x4e4>)
 8005088:	fba2 2303 	umull	r2, r3, r2, r3
 800508c:	095b      	lsrs	r3, r3, #5
 800508e:	f003 020f 	and.w	r2, r3, #15
 8005092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4422      	add	r2, r4
 800509a:	609a      	str	r2, [r3, #8]
}
 800509c:	bf00      	nop
 800509e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80050a2:	46bd      	mov	sp, r7
 80050a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050a8:	51eb851f 	.word	0x51eb851f

080050ac <__cvt>:
 80050ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050b0:	ec57 6b10 	vmov	r6, r7, d0
 80050b4:	2f00      	cmp	r7, #0
 80050b6:	460c      	mov	r4, r1
 80050b8:	4619      	mov	r1, r3
 80050ba:	463b      	mov	r3, r7
 80050bc:	bfbb      	ittet	lt
 80050be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80050c2:	461f      	movlt	r7, r3
 80050c4:	2300      	movge	r3, #0
 80050c6:	232d      	movlt	r3, #45	@ 0x2d
 80050c8:	700b      	strb	r3, [r1, #0]
 80050ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80050cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80050d0:	4691      	mov	r9, r2
 80050d2:	f023 0820 	bic.w	r8, r3, #32
 80050d6:	bfbc      	itt	lt
 80050d8:	4632      	movlt	r2, r6
 80050da:	4616      	movlt	r6, r2
 80050dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80050e0:	d005      	beq.n	80050ee <__cvt+0x42>
 80050e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80050e6:	d100      	bne.n	80050ea <__cvt+0x3e>
 80050e8:	3401      	adds	r4, #1
 80050ea:	2102      	movs	r1, #2
 80050ec:	e000      	b.n	80050f0 <__cvt+0x44>
 80050ee:	2103      	movs	r1, #3
 80050f0:	ab03      	add	r3, sp, #12
 80050f2:	9301      	str	r3, [sp, #4]
 80050f4:	ab02      	add	r3, sp, #8
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	ec47 6b10 	vmov	d0, r6, r7
 80050fc:	4653      	mov	r3, sl
 80050fe:	4622      	mov	r2, r4
 8005100:	f000 fe8e 	bl	8005e20 <_dtoa_r>
 8005104:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005108:	4605      	mov	r5, r0
 800510a:	d119      	bne.n	8005140 <__cvt+0x94>
 800510c:	f019 0f01 	tst.w	r9, #1
 8005110:	d00e      	beq.n	8005130 <__cvt+0x84>
 8005112:	eb00 0904 	add.w	r9, r0, r4
 8005116:	2200      	movs	r2, #0
 8005118:	2300      	movs	r3, #0
 800511a:	4630      	mov	r0, r6
 800511c:	4639      	mov	r1, r7
 800511e:	f7fb fcdb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005122:	b108      	cbz	r0, 8005128 <__cvt+0x7c>
 8005124:	f8cd 900c 	str.w	r9, [sp, #12]
 8005128:	2230      	movs	r2, #48	@ 0x30
 800512a:	9b03      	ldr	r3, [sp, #12]
 800512c:	454b      	cmp	r3, r9
 800512e:	d31e      	bcc.n	800516e <__cvt+0xc2>
 8005130:	9b03      	ldr	r3, [sp, #12]
 8005132:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005134:	1b5b      	subs	r3, r3, r5
 8005136:	4628      	mov	r0, r5
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	b004      	add	sp, #16
 800513c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005140:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005144:	eb00 0904 	add.w	r9, r0, r4
 8005148:	d1e5      	bne.n	8005116 <__cvt+0x6a>
 800514a:	7803      	ldrb	r3, [r0, #0]
 800514c:	2b30      	cmp	r3, #48	@ 0x30
 800514e:	d10a      	bne.n	8005166 <__cvt+0xba>
 8005150:	2200      	movs	r2, #0
 8005152:	2300      	movs	r3, #0
 8005154:	4630      	mov	r0, r6
 8005156:	4639      	mov	r1, r7
 8005158:	f7fb fcbe 	bl	8000ad8 <__aeabi_dcmpeq>
 800515c:	b918      	cbnz	r0, 8005166 <__cvt+0xba>
 800515e:	f1c4 0401 	rsb	r4, r4, #1
 8005162:	f8ca 4000 	str.w	r4, [sl]
 8005166:	f8da 3000 	ldr.w	r3, [sl]
 800516a:	4499      	add	r9, r3
 800516c:	e7d3      	b.n	8005116 <__cvt+0x6a>
 800516e:	1c59      	adds	r1, r3, #1
 8005170:	9103      	str	r1, [sp, #12]
 8005172:	701a      	strb	r2, [r3, #0]
 8005174:	e7d9      	b.n	800512a <__cvt+0x7e>

08005176 <__exponent>:
 8005176:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005178:	2900      	cmp	r1, #0
 800517a:	bfba      	itte	lt
 800517c:	4249      	neglt	r1, r1
 800517e:	232d      	movlt	r3, #45	@ 0x2d
 8005180:	232b      	movge	r3, #43	@ 0x2b
 8005182:	2909      	cmp	r1, #9
 8005184:	7002      	strb	r2, [r0, #0]
 8005186:	7043      	strb	r3, [r0, #1]
 8005188:	dd29      	ble.n	80051de <__exponent+0x68>
 800518a:	f10d 0307 	add.w	r3, sp, #7
 800518e:	461d      	mov	r5, r3
 8005190:	270a      	movs	r7, #10
 8005192:	461a      	mov	r2, r3
 8005194:	fbb1 f6f7 	udiv	r6, r1, r7
 8005198:	fb07 1416 	mls	r4, r7, r6, r1
 800519c:	3430      	adds	r4, #48	@ 0x30
 800519e:	f802 4c01 	strb.w	r4, [r2, #-1]
 80051a2:	460c      	mov	r4, r1
 80051a4:	2c63      	cmp	r4, #99	@ 0x63
 80051a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80051aa:	4631      	mov	r1, r6
 80051ac:	dcf1      	bgt.n	8005192 <__exponent+0x1c>
 80051ae:	3130      	adds	r1, #48	@ 0x30
 80051b0:	1e94      	subs	r4, r2, #2
 80051b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80051b6:	1c41      	adds	r1, r0, #1
 80051b8:	4623      	mov	r3, r4
 80051ba:	42ab      	cmp	r3, r5
 80051bc:	d30a      	bcc.n	80051d4 <__exponent+0x5e>
 80051be:	f10d 0309 	add.w	r3, sp, #9
 80051c2:	1a9b      	subs	r3, r3, r2
 80051c4:	42ac      	cmp	r4, r5
 80051c6:	bf88      	it	hi
 80051c8:	2300      	movhi	r3, #0
 80051ca:	3302      	adds	r3, #2
 80051cc:	4403      	add	r3, r0
 80051ce:	1a18      	subs	r0, r3, r0
 80051d0:	b003      	add	sp, #12
 80051d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80051d8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80051dc:	e7ed      	b.n	80051ba <__exponent+0x44>
 80051de:	2330      	movs	r3, #48	@ 0x30
 80051e0:	3130      	adds	r1, #48	@ 0x30
 80051e2:	7083      	strb	r3, [r0, #2]
 80051e4:	70c1      	strb	r1, [r0, #3]
 80051e6:	1d03      	adds	r3, r0, #4
 80051e8:	e7f1      	b.n	80051ce <__exponent+0x58>
	...

080051ec <_printf_float>:
 80051ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f0:	b08d      	sub	sp, #52	@ 0x34
 80051f2:	460c      	mov	r4, r1
 80051f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80051f8:	4616      	mov	r6, r2
 80051fa:	461f      	mov	r7, r3
 80051fc:	4605      	mov	r5, r0
 80051fe:	f000 fd0f 	bl	8005c20 <_localeconv_r>
 8005202:	6803      	ldr	r3, [r0, #0]
 8005204:	9304      	str	r3, [sp, #16]
 8005206:	4618      	mov	r0, r3
 8005208:	f7fb f83a 	bl	8000280 <strlen>
 800520c:	2300      	movs	r3, #0
 800520e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005210:	f8d8 3000 	ldr.w	r3, [r8]
 8005214:	9005      	str	r0, [sp, #20]
 8005216:	3307      	adds	r3, #7
 8005218:	f023 0307 	bic.w	r3, r3, #7
 800521c:	f103 0208 	add.w	r2, r3, #8
 8005220:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005224:	f8d4 b000 	ldr.w	fp, [r4]
 8005228:	f8c8 2000 	str.w	r2, [r8]
 800522c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005230:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005234:	9307      	str	r3, [sp, #28]
 8005236:	f8cd 8018 	str.w	r8, [sp, #24]
 800523a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800523e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005242:	4b9c      	ldr	r3, [pc, #624]	@ (80054b4 <_printf_float+0x2c8>)
 8005244:	f04f 32ff 	mov.w	r2, #4294967295
 8005248:	f7fb fc78 	bl	8000b3c <__aeabi_dcmpun>
 800524c:	bb70      	cbnz	r0, 80052ac <_printf_float+0xc0>
 800524e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005252:	4b98      	ldr	r3, [pc, #608]	@ (80054b4 <_printf_float+0x2c8>)
 8005254:	f04f 32ff 	mov.w	r2, #4294967295
 8005258:	f7fb fc52 	bl	8000b00 <__aeabi_dcmple>
 800525c:	bb30      	cbnz	r0, 80052ac <_printf_float+0xc0>
 800525e:	2200      	movs	r2, #0
 8005260:	2300      	movs	r3, #0
 8005262:	4640      	mov	r0, r8
 8005264:	4649      	mov	r1, r9
 8005266:	f7fb fc41 	bl	8000aec <__aeabi_dcmplt>
 800526a:	b110      	cbz	r0, 8005272 <_printf_float+0x86>
 800526c:	232d      	movs	r3, #45	@ 0x2d
 800526e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005272:	4a91      	ldr	r2, [pc, #580]	@ (80054b8 <_printf_float+0x2cc>)
 8005274:	4b91      	ldr	r3, [pc, #580]	@ (80054bc <_printf_float+0x2d0>)
 8005276:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800527a:	bf94      	ite	ls
 800527c:	4690      	movls	r8, r2
 800527e:	4698      	movhi	r8, r3
 8005280:	2303      	movs	r3, #3
 8005282:	6123      	str	r3, [r4, #16]
 8005284:	f02b 0304 	bic.w	r3, fp, #4
 8005288:	6023      	str	r3, [r4, #0]
 800528a:	f04f 0900 	mov.w	r9, #0
 800528e:	9700      	str	r7, [sp, #0]
 8005290:	4633      	mov	r3, r6
 8005292:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005294:	4621      	mov	r1, r4
 8005296:	4628      	mov	r0, r5
 8005298:	f000 f9d2 	bl	8005640 <_printf_common>
 800529c:	3001      	adds	r0, #1
 800529e:	f040 808d 	bne.w	80053bc <_printf_float+0x1d0>
 80052a2:	f04f 30ff 	mov.w	r0, #4294967295
 80052a6:	b00d      	add	sp, #52	@ 0x34
 80052a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ac:	4642      	mov	r2, r8
 80052ae:	464b      	mov	r3, r9
 80052b0:	4640      	mov	r0, r8
 80052b2:	4649      	mov	r1, r9
 80052b4:	f7fb fc42 	bl	8000b3c <__aeabi_dcmpun>
 80052b8:	b140      	cbz	r0, 80052cc <_printf_float+0xe0>
 80052ba:	464b      	mov	r3, r9
 80052bc:	2b00      	cmp	r3, #0
 80052be:	bfbc      	itt	lt
 80052c0:	232d      	movlt	r3, #45	@ 0x2d
 80052c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80052c6:	4a7e      	ldr	r2, [pc, #504]	@ (80054c0 <_printf_float+0x2d4>)
 80052c8:	4b7e      	ldr	r3, [pc, #504]	@ (80054c4 <_printf_float+0x2d8>)
 80052ca:	e7d4      	b.n	8005276 <_printf_float+0x8a>
 80052cc:	6863      	ldr	r3, [r4, #4]
 80052ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80052d2:	9206      	str	r2, [sp, #24]
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	d13b      	bne.n	8005350 <_printf_float+0x164>
 80052d8:	2306      	movs	r3, #6
 80052da:	6063      	str	r3, [r4, #4]
 80052dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80052e0:	2300      	movs	r3, #0
 80052e2:	6022      	str	r2, [r4, #0]
 80052e4:	9303      	str	r3, [sp, #12]
 80052e6:	ab0a      	add	r3, sp, #40	@ 0x28
 80052e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80052ec:	ab09      	add	r3, sp, #36	@ 0x24
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	6861      	ldr	r1, [r4, #4]
 80052f2:	ec49 8b10 	vmov	d0, r8, r9
 80052f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80052fa:	4628      	mov	r0, r5
 80052fc:	f7ff fed6 	bl	80050ac <__cvt>
 8005300:	9b06      	ldr	r3, [sp, #24]
 8005302:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005304:	2b47      	cmp	r3, #71	@ 0x47
 8005306:	4680      	mov	r8, r0
 8005308:	d129      	bne.n	800535e <_printf_float+0x172>
 800530a:	1cc8      	adds	r0, r1, #3
 800530c:	db02      	blt.n	8005314 <_printf_float+0x128>
 800530e:	6863      	ldr	r3, [r4, #4]
 8005310:	4299      	cmp	r1, r3
 8005312:	dd41      	ble.n	8005398 <_printf_float+0x1ac>
 8005314:	f1aa 0a02 	sub.w	sl, sl, #2
 8005318:	fa5f fa8a 	uxtb.w	sl, sl
 800531c:	3901      	subs	r1, #1
 800531e:	4652      	mov	r2, sl
 8005320:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005324:	9109      	str	r1, [sp, #36]	@ 0x24
 8005326:	f7ff ff26 	bl	8005176 <__exponent>
 800532a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800532c:	1813      	adds	r3, r2, r0
 800532e:	2a01      	cmp	r2, #1
 8005330:	4681      	mov	r9, r0
 8005332:	6123      	str	r3, [r4, #16]
 8005334:	dc02      	bgt.n	800533c <_printf_float+0x150>
 8005336:	6822      	ldr	r2, [r4, #0]
 8005338:	07d2      	lsls	r2, r2, #31
 800533a:	d501      	bpl.n	8005340 <_printf_float+0x154>
 800533c:	3301      	adds	r3, #1
 800533e:	6123      	str	r3, [r4, #16]
 8005340:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005344:	2b00      	cmp	r3, #0
 8005346:	d0a2      	beq.n	800528e <_printf_float+0xa2>
 8005348:	232d      	movs	r3, #45	@ 0x2d
 800534a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800534e:	e79e      	b.n	800528e <_printf_float+0xa2>
 8005350:	9a06      	ldr	r2, [sp, #24]
 8005352:	2a47      	cmp	r2, #71	@ 0x47
 8005354:	d1c2      	bne.n	80052dc <_printf_float+0xf0>
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1c0      	bne.n	80052dc <_printf_float+0xf0>
 800535a:	2301      	movs	r3, #1
 800535c:	e7bd      	b.n	80052da <_printf_float+0xee>
 800535e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005362:	d9db      	bls.n	800531c <_printf_float+0x130>
 8005364:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005368:	d118      	bne.n	800539c <_printf_float+0x1b0>
 800536a:	2900      	cmp	r1, #0
 800536c:	6863      	ldr	r3, [r4, #4]
 800536e:	dd0b      	ble.n	8005388 <_printf_float+0x19c>
 8005370:	6121      	str	r1, [r4, #16]
 8005372:	b913      	cbnz	r3, 800537a <_printf_float+0x18e>
 8005374:	6822      	ldr	r2, [r4, #0]
 8005376:	07d0      	lsls	r0, r2, #31
 8005378:	d502      	bpl.n	8005380 <_printf_float+0x194>
 800537a:	3301      	adds	r3, #1
 800537c:	440b      	add	r3, r1
 800537e:	6123      	str	r3, [r4, #16]
 8005380:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005382:	f04f 0900 	mov.w	r9, #0
 8005386:	e7db      	b.n	8005340 <_printf_float+0x154>
 8005388:	b913      	cbnz	r3, 8005390 <_printf_float+0x1a4>
 800538a:	6822      	ldr	r2, [r4, #0]
 800538c:	07d2      	lsls	r2, r2, #31
 800538e:	d501      	bpl.n	8005394 <_printf_float+0x1a8>
 8005390:	3302      	adds	r3, #2
 8005392:	e7f4      	b.n	800537e <_printf_float+0x192>
 8005394:	2301      	movs	r3, #1
 8005396:	e7f2      	b.n	800537e <_printf_float+0x192>
 8005398:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800539c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800539e:	4299      	cmp	r1, r3
 80053a0:	db05      	blt.n	80053ae <_printf_float+0x1c2>
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	6121      	str	r1, [r4, #16]
 80053a6:	07d8      	lsls	r0, r3, #31
 80053a8:	d5ea      	bpl.n	8005380 <_printf_float+0x194>
 80053aa:	1c4b      	adds	r3, r1, #1
 80053ac:	e7e7      	b.n	800537e <_printf_float+0x192>
 80053ae:	2900      	cmp	r1, #0
 80053b0:	bfd4      	ite	le
 80053b2:	f1c1 0202 	rsble	r2, r1, #2
 80053b6:	2201      	movgt	r2, #1
 80053b8:	4413      	add	r3, r2
 80053ba:	e7e0      	b.n	800537e <_printf_float+0x192>
 80053bc:	6823      	ldr	r3, [r4, #0]
 80053be:	055a      	lsls	r2, r3, #21
 80053c0:	d407      	bmi.n	80053d2 <_printf_float+0x1e6>
 80053c2:	6923      	ldr	r3, [r4, #16]
 80053c4:	4642      	mov	r2, r8
 80053c6:	4631      	mov	r1, r6
 80053c8:	4628      	mov	r0, r5
 80053ca:	47b8      	blx	r7
 80053cc:	3001      	adds	r0, #1
 80053ce:	d12b      	bne.n	8005428 <_printf_float+0x23c>
 80053d0:	e767      	b.n	80052a2 <_printf_float+0xb6>
 80053d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80053d6:	f240 80dd 	bls.w	8005594 <_printf_float+0x3a8>
 80053da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80053de:	2200      	movs	r2, #0
 80053e0:	2300      	movs	r3, #0
 80053e2:	f7fb fb79 	bl	8000ad8 <__aeabi_dcmpeq>
 80053e6:	2800      	cmp	r0, #0
 80053e8:	d033      	beq.n	8005452 <_printf_float+0x266>
 80053ea:	4a37      	ldr	r2, [pc, #220]	@ (80054c8 <_printf_float+0x2dc>)
 80053ec:	2301      	movs	r3, #1
 80053ee:	4631      	mov	r1, r6
 80053f0:	4628      	mov	r0, r5
 80053f2:	47b8      	blx	r7
 80053f4:	3001      	adds	r0, #1
 80053f6:	f43f af54 	beq.w	80052a2 <_printf_float+0xb6>
 80053fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80053fe:	4543      	cmp	r3, r8
 8005400:	db02      	blt.n	8005408 <_printf_float+0x21c>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	07d8      	lsls	r0, r3, #31
 8005406:	d50f      	bpl.n	8005428 <_printf_float+0x23c>
 8005408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800540c:	4631      	mov	r1, r6
 800540e:	4628      	mov	r0, r5
 8005410:	47b8      	blx	r7
 8005412:	3001      	adds	r0, #1
 8005414:	f43f af45 	beq.w	80052a2 <_printf_float+0xb6>
 8005418:	f04f 0900 	mov.w	r9, #0
 800541c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005420:	f104 0a1a 	add.w	sl, r4, #26
 8005424:	45c8      	cmp	r8, r9
 8005426:	dc09      	bgt.n	800543c <_printf_float+0x250>
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	079b      	lsls	r3, r3, #30
 800542c:	f100 8103 	bmi.w	8005636 <_printf_float+0x44a>
 8005430:	68e0      	ldr	r0, [r4, #12]
 8005432:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005434:	4298      	cmp	r0, r3
 8005436:	bfb8      	it	lt
 8005438:	4618      	movlt	r0, r3
 800543a:	e734      	b.n	80052a6 <_printf_float+0xba>
 800543c:	2301      	movs	r3, #1
 800543e:	4652      	mov	r2, sl
 8005440:	4631      	mov	r1, r6
 8005442:	4628      	mov	r0, r5
 8005444:	47b8      	blx	r7
 8005446:	3001      	adds	r0, #1
 8005448:	f43f af2b 	beq.w	80052a2 <_printf_float+0xb6>
 800544c:	f109 0901 	add.w	r9, r9, #1
 8005450:	e7e8      	b.n	8005424 <_printf_float+0x238>
 8005452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005454:	2b00      	cmp	r3, #0
 8005456:	dc39      	bgt.n	80054cc <_printf_float+0x2e0>
 8005458:	4a1b      	ldr	r2, [pc, #108]	@ (80054c8 <_printf_float+0x2dc>)
 800545a:	2301      	movs	r3, #1
 800545c:	4631      	mov	r1, r6
 800545e:	4628      	mov	r0, r5
 8005460:	47b8      	blx	r7
 8005462:	3001      	adds	r0, #1
 8005464:	f43f af1d 	beq.w	80052a2 <_printf_float+0xb6>
 8005468:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800546c:	ea59 0303 	orrs.w	r3, r9, r3
 8005470:	d102      	bne.n	8005478 <_printf_float+0x28c>
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	07d9      	lsls	r1, r3, #31
 8005476:	d5d7      	bpl.n	8005428 <_printf_float+0x23c>
 8005478:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800547c:	4631      	mov	r1, r6
 800547e:	4628      	mov	r0, r5
 8005480:	47b8      	blx	r7
 8005482:	3001      	adds	r0, #1
 8005484:	f43f af0d 	beq.w	80052a2 <_printf_float+0xb6>
 8005488:	f04f 0a00 	mov.w	sl, #0
 800548c:	f104 0b1a 	add.w	fp, r4, #26
 8005490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005492:	425b      	negs	r3, r3
 8005494:	4553      	cmp	r3, sl
 8005496:	dc01      	bgt.n	800549c <_printf_float+0x2b0>
 8005498:	464b      	mov	r3, r9
 800549a:	e793      	b.n	80053c4 <_printf_float+0x1d8>
 800549c:	2301      	movs	r3, #1
 800549e:	465a      	mov	r2, fp
 80054a0:	4631      	mov	r1, r6
 80054a2:	4628      	mov	r0, r5
 80054a4:	47b8      	blx	r7
 80054a6:	3001      	adds	r0, #1
 80054a8:	f43f aefb 	beq.w	80052a2 <_printf_float+0xb6>
 80054ac:	f10a 0a01 	add.w	sl, sl, #1
 80054b0:	e7ee      	b.n	8005490 <_printf_float+0x2a4>
 80054b2:	bf00      	nop
 80054b4:	7fefffff 	.word	0x7fefffff
 80054b8:	0800834c 	.word	0x0800834c
 80054bc:	08008350 	.word	0x08008350
 80054c0:	08008354 	.word	0x08008354
 80054c4:	08008358 	.word	0x08008358
 80054c8:	0800835c 	.word	0x0800835c
 80054cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80054ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80054d2:	4553      	cmp	r3, sl
 80054d4:	bfa8      	it	ge
 80054d6:	4653      	movge	r3, sl
 80054d8:	2b00      	cmp	r3, #0
 80054da:	4699      	mov	r9, r3
 80054dc:	dc36      	bgt.n	800554c <_printf_float+0x360>
 80054de:	f04f 0b00 	mov.w	fp, #0
 80054e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054e6:	f104 021a 	add.w	r2, r4, #26
 80054ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80054ec:	9306      	str	r3, [sp, #24]
 80054ee:	eba3 0309 	sub.w	r3, r3, r9
 80054f2:	455b      	cmp	r3, fp
 80054f4:	dc31      	bgt.n	800555a <_printf_float+0x36e>
 80054f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054f8:	459a      	cmp	sl, r3
 80054fa:	dc3a      	bgt.n	8005572 <_printf_float+0x386>
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	07da      	lsls	r2, r3, #31
 8005500:	d437      	bmi.n	8005572 <_printf_float+0x386>
 8005502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005504:	ebaa 0903 	sub.w	r9, sl, r3
 8005508:	9b06      	ldr	r3, [sp, #24]
 800550a:	ebaa 0303 	sub.w	r3, sl, r3
 800550e:	4599      	cmp	r9, r3
 8005510:	bfa8      	it	ge
 8005512:	4699      	movge	r9, r3
 8005514:	f1b9 0f00 	cmp.w	r9, #0
 8005518:	dc33      	bgt.n	8005582 <_printf_float+0x396>
 800551a:	f04f 0800 	mov.w	r8, #0
 800551e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005522:	f104 0b1a 	add.w	fp, r4, #26
 8005526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005528:	ebaa 0303 	sub.w	r3, sl, r3
 800552c:	eba3 0309 	sub.w	r3, r3, r9
 8005530:	4543      	cmp	r3, r8
 8005532:	f77f af79 	ble.w	8005428 <_printf_float+0x23c>
 8005536:	2301      	movs	r3, #1
 8005538:	465a      	mov	r2, fp
 800553a:	4631      	mov	r1, r6
 800553c:	4628      	mov	r0, r5
 800553e:	47b8      	blx	r7
 8005540:	3001      	adds	r0, #1
 8005542:	f43f aeae 	beq.w	80052a2 <_printf_float+0xb6>
 8005546:	f108 0801 	add.w	r8, r8, #1
 800554a:	e7ec      	b.n	8005526 <_printf_float+0x33a>
 800554c:	4642      	mov	r2, r8
 800554e:	4631      	mov	r1, r6
 8005550:	4628      	mov	r0, r5
 8005552:	47b8      	blx	r7
 8005554:	3001      	adds	r0, #1
 8005556:	d1c2      	bne.n	80054de <_printf_float+0x2f2>
 8005558:	e6a3      	b.n	80052a2 <_printf_float+0xb6>
 800555a:	2301      	movs	r3, #1
 800555c:	4631      	mov	r1, r6
 800555e:	4628      	mov	r0, r5
 8005560:	9206      	str	r2, [sp, #24]
 8005562:	47b8      	blx	r7
 8005564:	3001      	adds	r0, #1
 8005566:	f43f ae9c 	beq.w	80052a2 <_printf_float+0xb6>
 800556a:	9a06      	ldr	r2, [sp, #24]
 800556c:	f10b 0b01 	add.w	fp, fp, #1
 8005570:	e7bb      	b.n	80054ea <_printf_float+0x2fe>
 8005572:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005576:	4631      	mov	r1, r6
 8005578:	4628      	mov	r0, r5
 800557a:	47b8      	blx	r7
 800557c:	3001      	adds	r0, #1
 800557e:	d1c0      	bne.n	8005502 <_printf_float+0x316>
 8005580:	e68f      	b.n	80052a2 <_printf_float+0xb6>
 8005582:	9a06      	ldr	r2, [sp, #24]
 8005584:	464b      	mov	r3, r9
 8005586:	4442      	add	r2, r8
 8005588:	4631      	mov	r1, r6
 800558a:	4628      	mov	r0, r5
 800558c:	47b8      	blx	r7
 800558e:	3001      	adds	r0, #1
 8005590:	d1c3      	bne.n	800551a <_printf_float+0x32e>
 8005592:	e686      	b.n	80052a2 <_printf_float+0xb6>
 8005594:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005598:	f1ba 0f01 	cmp.w	sl, #1
 800559c:	dc01      	bgt.n	80055a2 <_printf_float+0x3b6>
 800559e:	07db      	lsls	r3, r3, #31
 80055a0:	d536      	bpl.n	8005610 <_printf_float+0x424>
 80055a2:	2301      	movs	r3, #1
 80055a4:	4642      	mov	r2, r8
 80055a6:	4631      	mov	r1, r6
 80055a8:	4628      	mov	r0, r5
 80055aa:	47b8      	blx	r7
 80055ac:	3001      	adds	r0, #1
 80055ae:	f43f ae78 	beq.w	80052a2 <_printf_float+0xb6>
 80055b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055b6:	4631      	mov	r1, r6
 80055b8:	4628      	mov	r0, r5
 80055ba:	47b8      	blx	r7
 80055bc:	3001      	adds	r0, #1
 80055be:	f43f ae70 	beq.w	80052a2 <_printf_float+0xb6>
 80055c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80055c6:	2200      	movs	r2, #0
 80055c8:	2300      	movs	r3, #0
 80055ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055ce:	f7fb fa83 	bl	8000ad8 <__aeabi_dcmpeq>
 80055d2:	b9c0      	cbnz	r0, 8005606 <_printf_float+0x41a>
 80055d4:	4653      	mov	r3, sl
 80055d6:	f108 0201 	add.w	r2, r8, #1
 80055da:	4631      	mov	r1, r6
 80055dc:	4628      	mov	r0, r5
 80055de:	47b8      	blx	r7
 80055e0:	3001      	adds	r0, #1
 80055e2:	d10c      	bne.n	80055fe <_printf_float+0x412>
 80055e4:	e65d      	b.n	80052a2 <_printf_float+0xb6>
 80055e6:	2301      	movs	r3, #1
 80055e8:	465a      	mov	r2, fp
 80055ea:	4631      	mov	r1, r6
 80055ec:	4628      	mov	r0, r5
 80055ee:	47b8      	blx	r7
 80055f0:	3001      	adds	r0, #1
 80055f2:	f43f ae56 	beq.w	80052a2 <_printf_float+0xb6>
 80055f6:	f108 0801 	add.w	r8, r8, #1
 80055fa:	45d0      	cmp	r8, sl
 80055fc:	dbf3      	blt.n	80055e6 <_printf_float+0x3fa>
 80055fe:	464b      	mov	r3, r9
 8005600:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005604:	e6df      	b.n	80053c6 <_printf_float+0x1da>
 8005606:	f04f 0800 	mov.w	r8, #0
 800560a:	f104 0b1a 	add.w	fp, r4, #26
 800560e:	e7f4      	b.n	80055fa <_printf_float+0x40e>
 8005610:	2301      	movs	r3, #1
 8005612:	4642      	mov	r2, r8
 8005614:	e7e1      	b.n	80055da <_printf_float+0x3ee>
 8005616:	2301      	movs	r3, #1
 8005618:	464a      	mov	r2, r9
 800561a:	4631      	mov	r1, r6
 800561c:	4628      	mov	r0, r5
 800561e:	47b8      	blx	r7
 8005620:	3001      	adds	r0, #1
 8005622:	f43f ae3e 	beq.w	80052a2 <_printf_float+0xb6>
 8005626:	f108 0801 	add.w	r8, r8, #1
 800562a:	68e3      	ldr	r3, [r4, #12]
 800562c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800562e:	1a5b      	subs	r3, r3, r1
 8005630:	4543      	cmp	r3, r8
 8005632:	dcf0      	bgt.n	8005616 <_printf_float+0x42a>
 8005634:	e6fc      	b.n	8005430 <_printf_float+0x244>
 8005636:	f04f 0800 	mov.w	r8, #0
 800563a:	f104 0919 	add.w	r9, r4, #25
 800563e:	e7f4      	b.n	800562a <_printf_float+0x43e>

08005640 <_printf_common>:
 8005640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005644:	4616      	mov	r6, r2
 8005646:	4698      	mov	r8, r3
 8005648:	688a      	ldr	r2, [r1, #8]
 800564a:	690b      	ldr	r3, [r1, #16]
 800564c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005650:	4293      	cmp	r3, r2
 8005652:	bfb8      	it	lt
 8005654:	4613      	movlt	r3, r2
 8005656:	6033      	str	r3, [r6, #0]
 8005658:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800565c:	4607      	mov	r7, r0
 800565e:	460c      	mov	r4, r1
 8005660:	b10a      	cbz	r2, 8005666 <_printf_common+0x26>
 8005662:	3301      	adds	r3, #1
 8005664:	6033      	str	r3, [r6, #0]
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	0699      	lsls	r1, r3, #26
 800566a:	bf42      	ittt	mi
 800566c:	6833      	ldrmi	r3, [r6, #0]
 800566e:	3302      	addmi	r3, #2
 8005670:	6033      	strmi	r3, [r6, #0]
 8005672:	6825      	ldr	r5, [r4, #0]
 8005674:	f015 0506 	ands.w	r5, r5, #6
 8005678:	d106      	bne.n	8005688 <_printf_common+0x48>
 800567a:	f104 0a19 	add.w	sl, r4, #25
 800567e:	68e3      	ldr	r3, [r4, #12]
 8005680:	6832      	ldr	r2, [r6, #0]
 8005682:	1a9b      	subs	r3, r3, r2
 8005684:	42ab      	cmp	r3, r5
 8005686:	dc26      	bgt.n	80056d6 <_printf_common+0x96>
 8005688:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800568c:	6822      	ldr	r2, [r4, #0]
 800568e:	3b00      	subs	r3, #0
 8005690:	bf18      	it	ne
 8005692:	2301      	movne	r3, #1
 8005694:	0692      	lsls	r2, r2, #26
 8005696:	d42b      	bmi.n	80056f0 <_printf_common+0xb0>
 8005698:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800569c:	4641      	mov	r1, r8
 800569e:	4638      	mov	r0, r7
 80056a0:	47c8      	blx	r9
 80056a2:	3001      	adds	r0, #1
 80056a4:	d01e      	beq.n	80056e4 <_printf_common+0xa4>
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	6922      	ldr	r2, [r4, #16]
 80056aa:	f003 0306 	and.w	r3, r3, #6
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	bf02      	ittt	eq
 80056b2:	68e5      	ldreq	r5, [r4, #12]
 80056b4:	6833      	ldreq	r3, [r6, #0]
 80056b6:	1aed      	subeq	r5, r5, r3
 80056b8:	68a3      	ldr	r3, [r4, #8]
 80056ba:	bf0c      	ite	eq
 80056bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056c0:	2500      	movne	r5, #0
 80056c2:	4293      	cmp	r3, r2
 80056c4:	bfc4      	itt	gt
 80056c6:	1a9b      	subgt	r3, r3, r2
 80056c8:	18ed      	addgt	r5, r5, r3
 80056ca:	2600      	movs	r6, #0
 80056cc:	341a      	adds	r4, #26
 80056ce:	42b5      	cmp	r5, r6
 80056d0:	d11a      	bne.n	8005708 <_printf_common+0xc8>
 80056d2:	2000      	movs	r0, #0
 80056d4:	e008      	b.n	80056e8 <_printf_common+0xa8>
 80056d6:	2301      	movs	r3, #1
 80056d8:	4652      	mov	r2, sl
 80056da:	4641      	mov	r1, r8
 80056dc:	4638      	mov	r0, r7
 80056de:	47c8      	blx	r9
 80056e0:	3001      	adds	r0, #1
 80056e2:	d103      	bne.n	80056ec <_printf_common+0xac>
 80056e4:	f04f 30ff 	mov.w	r0, #4294967295
 80056e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ec:	3501      	adds	r5, #1
 80056ee:	e7c6      	b.n	800567e <_printf_common+0x3e>
 80056f0:	18e1      	adds	r1, r4, r3
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	2030      	movs	r0, #48	@ 0x30
 80056f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80056fa:	4422      	add	r2, r4
 80056fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005700:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005704:	3302      	adds	r3, #2
 8005706:	e7c7      	b.n	8005698 <_printf_common+0x58>
 8005708:	2301      	movs	r3, #1
 800570a:	4622      	mov	r2, r4
 800570c:	4641      	mov	r1, r8
 800570e:	4638      	mov	r0, r7
 8005710:	47c8      	blx	r9
 8005712:	3001      	adds	r0, #1
 8005714:	d0e6      	beq.n	80056e4 <_printf_common+0xa4>
 8005716:	3601      	adds	r6, #1
 8005718:	e7d9      	b.n	80056ce <_printf_common+0x8e>
	...

0800571c <_printf_i>:
 800571c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005720:	7e0f      	ldrb	r7, [r1, #24]
 8005722:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005724:	2f78      	cmp	r7, #120	@ 0x78
 8005726:	4691      	mov	r9, r2
 8005728:	4680      	mov	r8, r0
 800572a:	460c      	mov	r4, r1
 800572c:	469a      	mov	sl, r3
 800572e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005732:	d807      	bhi.n	8005744 <_printf_i+0x28>
 8005734:	2f62      	cmp	r7, #98	@ 0x62
 8005736:	d80a      	bhi.n	800574e <_printf_i+0x32>
 8005738:	2f00      	cmp	r7, #0
 800573a:	f000 80d2 	beq.w	80058e2 <_printf_i+0x1c6>
 800573e:	2f58      	cmp	r7, #88	@ 0x58
 8005740:	f000 80b9 	beq.w	80058b6 <_printf_i+0x19a>
 8005744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005748:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800574c:	e03a      	b.n	80057c4 <_printf_i+0xa8>
 800574e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005752:	2b15      	cmp	r3, #21
 8005754:	d8f6      	bhi.n	8005744 <_printf_i+0x28>
 8005756:	a101      	add	r1, pc, #4	@ (adr r1, 800575c <_printf_i+0x40>)
 8005758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800575c:	080057b5 	.word	0x080057b5
 8005760:	080057c9 	.word	0x080057c9
 8005764:	08005745 	.word	0x08005745
 8005768:	08005745 	.word	0x08005745
 800576c:	08005745 	.word	0x08005745
 8005770:	08005745 	.word	0x08005745
 8005774:	080057c9 	.word	0x080057c9
 8005778:	08005745 	.word	0x08005745
 800577c:	08005745 	.word	0x08005745
 8005780:	08005745 	.word	0x08005745
 8005784:	08005745 	.word	0x08005745
 8005788:	080058c9 	.word	0x080058c9
 800578c:	080057f3 	.word	0x080057f3
 8005790:	08005883 	.word	0x08005883
 8005794:	08005745 	.word	0x08005745
 8005798:	08005745 	.word	0x08005745
 800579c:	080058eb 	.word	0x080058eb
 80057a0:	08005745 	.word	0x08005745
 80057a4:	080057f3 	.word	0x080057f3
 80057a8:	08005745 	.word	0x08005745
 80057ac:	08005745 	.word	0x08005745
 80057b0:	0800588b 	.word	0x0800588b
 80057b4:	6833      	ldr	r3, [r6, #0]
 80057b6:	1d1a      	adds	r2, r3, #4
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6032      	str	r2, [r6, #0]
 80057bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80057c4:	2301      	movs	r3, #1
 80057c6:	e09d      	b.n	8005904 <_printf_i+0x1e8>
 80057c8:	6833      	ldr	r3, [r6, #0]
 80057ca:	6820      	ldr	r0, [r4, #0]
 80057cc:	1d19      	adds	r1, r3, #4
 80057ce:	6031      	str	r1, [r6, #0]
 80057d0:	0606      	lsls	r6, r0, #24
 80057d2:	d501      	bpl.n	80057d8 <_printf_i+0xbc>
 80057d4:	681d      	ldr	r5, [r3, #0]
 80057d6:	e003      	b.n	80057e0 <_printf_i+0xc4>
 80057d8:	0645      	lsls	r5, r0, #25
 80057da:	d5fb      	bpl.n	80057d4 <_printf_i+0xb8>
 80057dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80057e0:	2d00      	cmp	r5, #0
 80057e2:	da03      	bge.n	80057ec <_printf_i+0xd0>
 80057e4:	232d      	movs	r3, #45	@ 0x2d
 80057e6:	426d      	negs	r5, r5
 80057e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057ec:	4859      	ldr	r0, [pc, #356]	@ (8005954 <_printf_i+0x238>)
 80057ee:	230a      	movs	r3, #10
 80057f0:	e011      	b.n	8005816 <_printf_i+0xfa>
 80057f2:	6821      	ldr	r1, [r4, #0]
 80057f4:	6833      	ldr	r3, [r6, #0]
 80057f6:	0608      	lsls	r0, r1, #24
 80057f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80057fc:	d402      	bmi.n	8005804 <_printf_i+0xe8>
 80057fe:	0649      	lsls	r1, r1, #25
 8005800:	bf48      	it	mi
 8005802:	b2ad      	uxthmi	r5, r5
 8005804:	2f6f      	cmp	r7, #111	@ 0x6f
 8005806:	4853      	ldr	r0, [pc, #332]	@ (8005954 <_printf_i+0x238>)
 8005808:	6033      	str	r3, [r6, #0]
 800580a:	bf14      	ite	ne
 800580c:	230a      	movne	r3, #10
 800580e:	2308      	moveq	r3, #8
 8005810:	2100      	movs	r1, #0
 8005812:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005816:	6866      	ldr	r6, [r4, #4]
 8005818:	60a6      	str	r6, [r4, #8]
 800581a:	2e00      	cmp	r6, #0
 800581c:	bfa2      	ittt	ge
 800581e:	6821      	ldrge	r1, [r4, #0]
 8005820:	f021 0104 	bicge.w	r1, r1, #4
 8005824:	6021      	strge	r1, [r4, #0]
 8005826:	b90d      	cbnz	r5, 800582c <_printf_i+0x110>
 8005828:	2e00      	cmp	r6, #0
 800582a:	d04b      	beq.n	80058c4 <_printf_i+0x1a8>
 800582c:	4616      	mov	r6, r2
 800582e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005832:	fb03 5711 	mls	r7, r3, r1, r5
 8005836:	5dc7      	ldrb	r7, [r0, r7]
 8005838:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800583c:	462f      	mov	r7, r5
 800583e:	42bb      	cmp	r3, r7
 8005840:	460d      	mov	r5, r1
 8005842:	d9f4      	bls.n	800582e <_printf_i+0x112>
 8005844:	2b08      	cmp	r3, #8
 8005846:	d10b      	bne.n	8005860 <_printf_i+0x144>
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	07df      	lsls	r7, r3, #31
 800584c:	d508      	bpl.n	8005860 <_printf_i+0x144>
 800584e:	6923      	ldr	r3, [r4, #16]
 8005850:	6861      	ldr	r1, [r4, #4]
 8005852:	4299      	cmp	r1, r3
 8005854:	bfde      	ittt	le
 8005856:	2330      	movle	r3, #48	@ 0x30
 8005858:	f806 3c01 	strble.w	r3, [r6, #-1]
 800585c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005860:	1b92      	subs	r2, r2, r6
 8005862:	6122      	str	r2, [r4, #16]
 8005864:	f8cd a000 	str.w	sl, [sp]
 8005868:	464b      	mov	r3, r9
 800586a:	aa03      	add	r2, sp, #12
 800586c:	4621      	mov	r1, r4
 800586e:	4640      	mov	r0, r8
 8005870:	f7ff fee6 	bl	8005640 <_printf_common>
 8005874:	3001      	adds	r0, #1
 8005876:	d14a      	bne.n	800590e <_printf_i+0x1f2>
 8005878:	f04f 30ff 	mov.w	r0, #4294967295
 800587c:	b004      	add	sp, #16
 800587e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	f043 0320 	orr.w	r3, r3, #32
 8005888:	6023      	str	r3, [r4, #0]
 800588a:	4833      	ldr	r0, [pc, #204]	@ (8005958 <_printf_i+0x23c>)
 800588c:	2778      	movs	r7, #120	@ 0x78
 800588e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005892:	6823      	ldr	r3, [r4, #0]
 8005894:	6831      	ldr	r1, [r6, #0]
 8005896:	061f      	lsls	r7, r3, #24
 8005898:	f851 5b04 	ldr.w	r5, [r1], #4
 800589c:	d402      	bmi.n	80058a4 <_printf_i+0x188>
 800589e:	065f      	lsls	r7, r3, #25
 80058a0:	bf48      	it	mi
 80058a2:	b2ad      	uxthmi	r5, r5
 80058a4:	6031      	str	r1, [r6, #0]
 80058a6:	07d9      	lsls	r1, r3, #31
 80058a8:	bf44      	itt	mi
 80058aa:	f043 0320 	orrmi.w	r3, r3, #32
 80058ae:	6023      	strmi	r3, [r4, #0]
 80058b0:	b11d      	cbz	r5, 80058ba <_printf_i+0x19e>
 80058b2:	2310      	movs	r3, #16
 80058b4:	e7ac      	b.n	8005810 <_printf_i+0xf4>
 80058b6:	4827      	ldr	r0, [pc, #156]	@ (8005954 <_printf_i+0x238>)
 80058b8:	e7e9      	b.n	800588e <_printf_i+0x172>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	f023 0320 	bic.w	r3, r3, #32
 80058c0:	6023      	str	r3, [r4, #0]
 80058c2:	e7f6      	b.n	80058b2 <_printf_i+0x196>
 80058c4:	4616      	mov	r6, r2
 80058c6:	e7bd      	b.n	8005844 <_printf_i+0x128>
 80058c8:	6833      	ldr	r3, [r6, #0]
 80058ca:	6825      	ldr	r5, [r4, #0]
 80058cc:	6961      	ldr	r1, [r4, #20]
 80058ce:	1d18      	adds	r0, r3, #4
 80058d0:	6030      	str	r0, [r6, #0]
 80058d2:	062e      	lsls	r6, r5, #24
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	d501      	bpl.n	80058dc <_printf_i+0x1c0>
 80058d8:	6019      	str	r1, [r3, #0]
 80058da:	e002      	b.n	80058e2 <_printf_i+0x1c6>
 80058dc:	0668      	lsls	r0, r5, #25
 80058de:	d5fb      	bpl.n	80058d8 <_printf_i+0x1bc>
 80058e0:	8019      	strh	r1, [r3, #0]
 80058e2:	2300      	movs	r3, #0
 80058e4:	6123      	str	r3, [r4, #16]
 80058e6:	4616      	mov	r6, r2
 80058e8:	e7bc      	b.n	8005864 <_printf_i+0x148>
 80058ea:	6833      	ldr	r3, [r6, #0]
 80058ec:	1d1a      	adds	r2, r3, #4
 80058ee:	6032      	str	r2, [r6, #0]
 80058f0:	681e      	ldr	r6, [r3, #0]
 80058f2:	6862      	ldr	r2, [r4, #4]
 80058f4:	2100      	movs	r1, #0
 80058f6:	4630      	mov	r0, r6
 80058f8:	f7fa fc72 	bl	80001e0 <memchr>
 80058fc:	b108      	cbz	r0, 8005902 <_printf_i+0x1e6>
 80058fe:	1b80      	subs	r0, r0, r6
 8005900:	6060      	str	r0, [r4, #4]
 8005902:	6863      	ldr	r3, [r4, #4]
 8005904:	6123      	str	r3, [r4, #16]
 8005906:	2300      	movs	r3, #0
 8005908:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800590c:	e7aa      	b.n	8005864 <_printf_i+0x148>
 800590e:	6923      	ldr	r3, [r4, #16]
 8005910:	4632      	mov	r2, r6
 8005912:	4649      	mov	r1, r9
 8005914:	4640      	mov	r0, r8
 8005916:	47d0      	blx	sl
 8005918:	3001      	adds	r0, #1
 800591a:	d0ad      	beq.n	8005878 <_printf_i+0x15c>
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	079b      	lsls	r3, r3, #30
 8005920:	d413      	bmi.n	800594a <_printf_i+0x22e>
 8005922:	68e0      	ldr	r0, [r4, #12]
 8005924:	9b03      	ldr	r3, [sp, #12]
 8005926:	4298      	cmp	r0, r3
 8005928:	bfb8      	it	lt
 800592a:	4618      	movlt	r0, r3
 800592c:	e7a6      	b.n	800587c <_printf_i+0x160>
 800592e:	2301      	movs	r3, #1
 8005930:	4632      	mov	r2, r6
 8005932:	4649      	mov	r1, r9
 8005934:	4640      	mov	r0, r8
 8005936:	47d0      	blx	sl
 8005938:	3001      	adds	r0, #1
 800593a:	d09d      	beq.n	8005878 <_printf_i+0x15c>
 800593c:	3501      	adds	r5, #1
 800593e:	68e3      	ldr	r3, [r4, #12]
 8005940:	9903      	ldr	r1, [sp, #12]
 8005942:	1a5b      	subs	r3, r3, r1
 8005944:	42ab      	cmp	r3, r5
 8005946:	dcf2      	bgt.n	800592e <_printf_i+0x212>
 8005948:	e7eb      	b.n	8005922 <_printf_i+0x206>
 800594a:	2500      	movs	r5, #0
 800594c:	f104 0619 	add.w	r6, r4, #25
 8005950:	e7f5      	b.n	800593e <_printf_i+0x222>
 8005952:	bf00      	nop
 8005954:	0800835e 	.word	0x0800835e
 8005958:	0800836f 	.word	0x0800836f

0800595c <std>:
 800595c:	2300      	movs	r3, #0
 800595e:	b510      	push	{r4, lr}
 8005960:	4604      	mov	r4, r0
 8005962:	e9c0 3300 	strd	r3, r3, [r0]
 8005966:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800596a:	6083      	str	r3, [r0, #8]
 800596c:	8181      	strh	r1, [r0, #12]
 800596e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005970:	81c2      	strh	r2, [r0, #14]
 8005972:	6183      	str	r3, [r0, #24]
 8005974:	4619      	mov	r1, r3
 8005976:	2208      	movs	r2, #8
 8005978:	305c      	adds	r0, #92	@ 0x5c
 800597a:	f000 f948 	bl	8005c0e <memset>
 800597e:	4b0d      	ldr	r3, [pc, #52]	@ (80059b4 <std+0x58>)
 8005980:	6263      	str	r3, [r4, #36]	@ 0x24
 8005982:	4b0d      	ldr	r3, [pc, #52]	@ (80059b8 <std+0x5c>)
 8005984:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005986:	4b0d      	ldr	r3, [pc, #52]	@ (80059bc <std+0x60>)
 8005988:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800598a:	4b0d      	ldr	r3, [pc, #52]	@ (80059c0 <std+0x64>)
 800598c:	6323      	str	r3, [r4, #48]	@ 0x30
 800598e:	4b0d      	ldr	r3, [pc, #52]	@ (80059c4 <std+0x68>)
 8005990:	6224      	str	r4, [r4, #32]
 8005992:	429c      	cmp	r4, r3
 8005994:	d006      	beq.n	80059a4 <std+0x48>
 8005996:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800599a:	4294      	cmp	r4, r2
 800599c:	d002      	beq.n	80059a4 <std+0x48>
 800599e:	33d0      	adds	r3, #208	@ 0xd0
 80059a0:	429c      	cmp	r4, r3
 80059a2:	d105      	bne.n	80059b0 <std+0x54>
 80059a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80059a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059ac:	f000 b9ac 	b.w	8005d08 <__retarget_lock_init_recursive>
 80059b0:	bd10      	pop	{r4, pc}
 80059b2:	bf00      	nop
 80059b4:	08005b89 	.word	0x08005b89
 80059b8:	08005bab 	.word	0x08005bab
 80059bc:	08005be3 	.word	0x08005be3
 80059c0:	08005c07 	.word	0x08005c07
 80059c4:	20000344 	.word	0x20000344

080059c8 <stdio_exit_handler>:
 80059c8:	4a02      	ldr	r2, [pc, #8]	@ (80059d4 <stdio_exit_handler+0xc>)
 80059ca:	4903      	ldr	r1, [pc, #12]	@ (80059d8 <stdio_exit_handler+0x10>)
 80059cc:	4803      	ldr	r0, [pc, #12]	@ (80059dc <stdio_exit_handler+0x14>)
 80059ce:	f000 b869 	b.w	8005aa4 <_fwalk_sglue>
 80059d2:	bf00      	nop
 80059d4:	2000000c 	.word	0x2000000c
 80059d8:	08007665 	.word	0x08007665
 80059dc:	2000001c 	.word	0x2000001c

080059e0 <cleanup_stdio>:
 80059e0:	6841      	ldr	r1, [r0, #4]
 80059e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005a14 <cleanup_stdio+0x34>)
 80059e4:	4299      	cmp	r1, r3
 80059e6:	b510      	push	{r4, lr}
 80059e8:	4604      	mov	r4, r0
 80059ea:	d001      	beq.n	80059f0 <cleanup_stdio+0x10>
 80059ec:	f001 fe3a 	bl	8007664 <_fflush_r>
 80059f0:	68a1      	ldr	r1, [r4, #8]
 80059f2:	4b09      	ldr	r3, [pc, #36]	@ (8005a18 <cleanup_stdio+0x38>)
 80059f4:	4299      	cmp	r1, r3
 80059f6:	d002      	beq.n	80059fe <cleanup_stdio+0x1e>
 80059f8:	4620      	mov	r0, r4
 80059fa:	f001 fe33 	bl	8007664 <_fflush_r>
 80059fe:	68e1      	ldr	r1, [r4, #12]
 8005a00:	4b06      	ldr	r3, [pc, #24]	@ (8005a1c <cleanup_stdio+0x3c>)
 8005a02:	4299      	cmp	r1, r3
 8005a04:	d004      	beq.n	8005a10 <cleanup_stdio+0x30>
 8005a06:	4620      	mov	r0, r4
 8005a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a0c:	f001 be2a 	b.w	8007664 <_fflush_r>
 8005a10:	bd10      	pop	{r4, pc}
 8005a12:	bf00      	nop
 8005a14:	20000344 	.word	0x20000344
 8005a18:	200003ac 	.word	0x200003ac
 8005a1c:	20000414 	.word	0x20000414

08005a20 <global_stdio_init.part.0>:
 8005a20:	b510      	push	{r4, lr}
 8005a22:	4b0b      	ldr	r3, [pc, #44]	@ (8005a50 <global_stdio_init.part.0+0x30>)
 8005a24:	4c0b      	ldr	r4, [pc, #44]	@ (8005a54 <global_stdio_init.part.0+0x34>)
 8005a26:	4a0c      	ldr	r2, [pc, #48]	@ (8005a58 <global_stdio_init.part.0+0x38>)
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2104      	movs	r1, #4
 8005a30:	f7ff ff94 	bl	800595c <std>
 8005a34:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a38:	2201      	movs	r2, #1
 8005a3a:	2109      	movs	r1, #9
 8005a3c:	f7ff ff8e 	bl	800595c <std>
 8005a40:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a44:	2202      	movs	r2, #2
 8005a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a4a:	2112      	movs	r1, #18
 8005a4c:	f7ff bf86 	b.w	800595c <std>
 8005a50:	2000047c 	.word	0x2000047c
 8005a54:	20000344 	.word	0x20000344
 8005a58:	080059c9 	.word	0x080059c9

08005a5c <__sfp_lock_acquire>:
 8005a5c:	4801      	ldr	r0, [pc, #4]	@ (8005a64 <__sfp_lock_acquire+0x8>)
 8005a5e:	f000 b954 	b.w	8005d0a <__retarget_lock_acquire_recursive>
 8005a62:	bf00      	nop
 8005a64:	20000485 	.word	0x20000485

08005a68 <__sfp_lock_release>:
 8005a68:	4801      	ldr	r0, [pc, #4]	@ (8005a70 <__sfp_lock_release+0x8>)
 8005a6a:	f000 b94f 	b.w	8005d0c <__retarget_lock_release_recursive>
 8005a6e:	bf00      	nop
 8005a70:	20000485 	.word	0x20000485

08005a74 <__sinit>:
 8005a74:	b510      	push	{r4, lr}
 8005a76:	4604      	mov	r4, r0
 8005a78:	f7ff fff0 	bl	8005a5c <__sfp_lock_acquire>
 8005a7c:	6a23      	ldr	r3, [r4, #32]
 8005a7e:	b11b      	cbz	r3, 8005a88 <__sinit+0x14>
 8005a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a84:	f7ff bff0 	b.w	8005a68 <__sfp_lock_release>
 8005a88:	4b04      	ldr	r3, [pc, #16]	@ (8005a9c <__sinit+0x28>)
 8005a8a:	6223      	str	r3, [r4, #32]
 8005a8c:	4b04      	ldr	r3, [pc, #16]	@ (8005aa0 <__sinit+0x2c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1f5      	bne.n	8005a80 <__sinit+0xc>
 8005a94:	f7ff ffc4 	bl	8005a20 <global_stdio_init.part.0>
 8005a98:	e7f2      	b.n	8005a80 <__sinit+0xc>
 8005a9a:	bf00      	nop
 8005a9c:	080059e1 	.word	0x080059e1
 8005aa0:	2000047c 	.word	0x2000047c

08005aa4 <_fwalk_sglue>:
 8005aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aa8:	4607      	mov	r7, r0
 8005aaa:	4688      	mov	r8, r1
 8005aac:	4614      	mov	r4, r2
 8005aae:	2600      	movs	r6, #0
 8005ab0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ab4:	f1b9 0901 	subs.w	r9, r9, #1
 8005ab8:	d505      	bpl.n	8005ac6 <_fwalk_sglue+0x22>
 8005aba:	6824      	ldr	r4, [r4, #0]
 8005abc:	2c00      	cmp	r4, #0
 8005abe:	d1f7      	bne.n	8005ab0 <_fwalk_sglue+0xc>
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ac6:	89ab      	ldrh	r3, [r5, #12]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d907      	bls.n	8005adc <_fwalk_sglue+0x38>
 8005acc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	d003      	beq.n	8005adc <_fwalk_sglue+0x38>
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	47c0      	blx	r8
 8005ada:	4306      	orrs	r6, r0
 8005adc:	3568      	adds	r5, #104	@ 0x68
 8005ade:	e7e9      	b.n	8005ab4 <_fwalk_sglue+0x10>

08005ae0 <sniprintf>:
 8005ae0:	b40c      	push	{r2, r3}
 8005ae2:	b530      	push	{r4, r5, lr}
 8005ae4:	4b17      	ldr	r3, [pc, #92]	@ (8005b44 <sniprintf+0x64>)
 8005ae6:	1e0c      	subs	r4, r1, #0
 8005ae8:	681d      	ldr	r5, [r3, #0]
 8005aea:	b09d      	sub	sp, #116	@ 0x74
 8005aec:	da08      	bge.n	8005b00 <sniprintf+0x20>
 8005aee:	238b      	movs	r3, #139	@ 0x8b
 8005af0:	602b      	str	r3, [r5, #0]
 8005af2:	f04f 30ff 	mov.w	r0, #4294967295
 8005af6:	b01d      	add	sp, #116	@ 0x74
 8005af8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005afc:	b002      	add	sp, #8
 8005afe:	4770      	bx	lr
 8005b00:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005b04:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005b08:	bf14      	ite	ne
 8005b0a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005b0e:	4623      	moveq	r3, r4
 8005b10:	9304      	str	r3, [sp, #16]
 8005b12:	9307      	str	r3, [sp, #28]
 8005b14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005b18:	9002      	str	r0, [sp, #8]
 8005b1a:	9006      	str	r0, [sp, #24]
 8005b1c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b20:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005b22:	ab21      	add	r3, sp, #132	@ 0x84
 8005b24:	a902      	add	r1, sp, #8
 8005b26:	4628      	mov	r0, r5
 8005b28:	9301      	str	r3, [sp, #4]
 8005b2a:	f001 fc1b 	bl	8007364 <_svfiprintf_r>
 8005b2e:	1c43      	adds	r3, r0, #1
 8005b30:	bfbc      	itt	lt
 8005b32:	238b      	movlt	r3, #139	@ 0x8b
 8005b34:	602b      	strlt	r3, [r5, #0]
 8005b36:	2c00      	cmp	r4, #0
 8005b38:	d0dd      	beq.n	8005af6 <sniprintf+0x16>
 8005b3a:	9b02      	ldr	r3, [sp, #8]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	701a      	strb	r2, [r3, #0]
 8005b40:	e7d9      	b.n	8005af6 <sniprintf+0x16>
 8005b42:	bf00      	nop
 8005b44:	20000018 	.word	0x20000018

08005b48 <siprintf>:
 8005b48:	b40e      	push	{r1, r2, r3}
 8005b4a:	b500      	push	{lr}
 8005b4c:	b09c      	sub	sp, #112	@ 0x70
 8005b4e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005b50:	9002      	str	r0, [sp, #8]
 8005b52:	9006      	str	r0, [sp, #24]
 8005b54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005b58:	4809      	ldr	r0, [pc, #36]	@ (8005b80 <siprintf+0x38>)
 8005b5a:	9107      	str	r1, [sp, #28]
 8005b5c:	9104      	str	r1, [sp, #16]
 8005b5e:	4909      	ldr	r1, [pc, #36]	@ (8005b84 <siprintf+0x3c>)
 8005b60:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b64:	9105      	str	r1, [sp, #20]
 8005b66:	6800      	ldr	r0, [r0, #0]
 8005b68:	9301      	str	r3, [sp, #4]
 8005b6a:	a902      	add	r1, sp, #8
 8005b6c:	f001 fbfa 	bl	8007364 <_svfiprintf_r>
 8005b70:	9b02      	ldr	r3, [sp, #8]
 8005b72:	2200      	movs	r2, #0
 8005b74:	701a      	strb	r2, [r3, #0]
 8005b76:	b01c      	add	sp, #112	@ 0x70
 8005b78:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b7c:	b003      	add	sp, #12
 8005b7e:	4770      	bx	lr
 8005b80:	20000018 	.word	0x20000018
 8005b84:	ffff0208 	.word	0xffff0208

08005b88 <__sread>:
 8005b88:	b510      	push	{r4, lr}
 8005b8a:	460c      	mov	r4, r1
 8005b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b90:	f000 f86c 	bl	8005c6c <_read_r>
 8005b94:	2800      	cmp	r0, #0
 8005b96:	bfab      	itete	ge
 8005b98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005b9a:	89a3      	ldrhlt	r3, [r4, #12]
 8005b9c:	181b      	addge	r3, r3, r0
 8005b9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005ba2:	bfac      	ite	ge
 8005ba4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005ba6:	81a3      	strhlt	r3, [r4, #12]
 8005ba8:	bd10      	pop	{r4, pc}

08005baa <__swrite>:
 8005baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bae:	461f      	mov	r7, r3
 8005bb0:	898b      	ldrh	r3, [r1, #12]
 8005bb2:	05db      	lsls	r3, r3, #23
 8005bb4:	4605      	mov	r5, r0
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	4616      	mov	r6, r2
 8005bba:	d505      	bpl.n	8005bc8 <__swrite+0x1e>
 8005bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f000 f840 	bl	8005c48 <_lseek_r>
 8005bc8:	89a3      	ldrh	r3, [r4, #12]
 8005bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bd2:	81a3      	strh	r3, [r4, #12]
 8005bd4:	4632      	mov	r2, r6
 8005bd6:	463b      	mov	r3, r7
 8005bd8:	4628      	mov	r0, r5
 8005bda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bde:	f000 b857 	b.w	8005c90 <_write_r>

08005be2 <__sseek>:
 8005be2:	b510      	push	{r4, lr}
 8005be4:	460c      	mov	r4, r1
 8005be6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bea:	f000 f82d 	bl	8005c48 <_lseek_r>
 8005bee:	1c43      	adds	r3, r0, #1
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	bf15      	itete	ne
 8005bf4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005bf6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005bfa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005bfe:	81a3      	strheq	r3, [r4, #12]
 8005c00:	bf18      	it	ne
 8005c02:	81a3      	strhne	r3, [r4, #12]
 8005c04:	bd10      	pop	{r4, pc}

08005c06 <__sclose>:
 8005c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c0a:	f000 b80d 	b.w	8005c28 <_close_r>

08005c0e <memset>:
 8005c0e:	4402      	add	r2, r0
 8005c10:	4603      	mov	r3, r0
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d100      	bne.n	8005c18 <memset+0xa>
 8005c16:	4770      	bx	lr
 8005c18:	f803 1b01 	strb.w	r1, [r3], #1
 8005c1c:	e7f9      	b.n	8005c12 <memset+0x4>
	...

08005c20 <_localeconv_r>:
 8005c20:	4800      	ldr	r0, [pc, #0]	@ (8005c24 <_localeconv_r+0x4>)
 8005c22:	4770      	bx	lr
 8005c24:	20000158 	.word	0x20000158

08005c28 <_close_r>:
 8005c28:	b538      	push	{r3, r4, r5, lr}
 8005c2a:	4d06      	ldr	r5, [pc, #24]	@ (8005c44 <_close_r+0x1c>)
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	4604      	mov	r4, r0
 8005c30:	4608      	mov	r0, r1
 8005c32:	602b      	str	r3, [r5, #0]
 8005c34:	f7fc f9c3 	bl	8001fbe <_close>
 8005c38:	1c43      	adds	r3, r0, #1
 8005c3a:	d102      	bne.n	8005c42 <_close_r+0x1a>
 8005c3c:	682b      	ldr	r3, [r5, #0]
 8005c3e:	b103      	cbz	r3, 8005c42 <_close_r+0x1a>
 8005c40:	6023      	str	r3, [r4, #0]
 8005c42:	bd38      	pop	{r3, r4, r5, pc}
 8005c44:	20000480 	.word	0x20000480

08005c48 <_lseek_r>:
 8005c48:	b538      	push	{r3, r4, r5, lr}
 8005c4a:	4d07      	ldr	r5, [pc, #28]	@ (8005c68 <_lseek_r+0x20>)
 8005c4c:	4604      	mov	r4, r0
 8005c4e:	4608      	mov	r0, r1
 8005c50:	4611      	mov	r1, r2
 8005c52:	2200      	movs	r2, #0
 8005c54:	602a      	str	r2, [r5, #0]
 8005c56:	461a      	mov	r2, r3
 8005c58:	f7fc f9d8 	bl	800200c <_lseek>
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	d102      	bne.n	8005c66 <_lseek_r+0x1e>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	b103      	cbz	r3, 8005c66 <_lseek_r+0x1e>
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	bd38      	pop	{r3, r4, r5, pc}
 8005c68:	20000480 	.word	0x20000480

08005c6c <_read_r>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	4d07      	ldr	r5, [pc, #28]	@ (8005c8c <_read_r+0x20>)
 8005c70:	4604      	mov	r4, r0
 8005c72:	4608      	mov	r0, r1
 8005c74:	4611      	mov	r1, r2
 8005c76:	2200      	movs	r2, #0
 8005c78:	602a      	str	r2, [r5, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f7fc f966 	bl	8001f4c <_read>
 8005c80:	1c43      	adds	r3, r0, #1
 8005c82:	d102      	bne.n	8005c8a <_read_r+0x1e>
 8005c84:	682b      	ldr	r3, [r5, #0]
 8005c86:	b103      	cbz	r3, 8005c8a <_read_r+0x1e>
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	bd38      	pop	{r3, r4, r5, pc}
 8005c8c:	20000480 	.word	0x20000480

08005c90 <_write_r>:
 8005c90:	b538      	push	{r3, r4, r5, lr}
 8005c92:	4d07      	ldr	r5, [pc, #28]	@ (8005cb0 <_write_r+0x20>)
 8005c94:	4604      	mov	r4, r0
 8005c96:	4608      	mov	r0, r1
 8005c98:	4611      	mov	r1, r2
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	602a      	str	r2, [r5, #0]
 8005c9e:	461a      	mov	r2, r3
 8005ca0:	f7fc f971 	bl	8001f86 <_write>
 8005ca4:	1c43      	adds	r3, r0, #1
 8005ca6:	d102      	bne.n	8005cae <_write_r+0x1e>
 8005ca8:	682b      	ldr	r3, [r5, #0]
 8005caa:	b103      	cbz	r3, 8005cae <_write_r+0x1e>
 8005cac:	6023      	str	r3, [r4, #0]
 8005cae:	bd38      	pop	{r3, r4, r5, pc}
 8005cb0:	20000480 	.word	0x20000480

08005cb4 <__errno>:
 8005cb4:	4b01      	ldr	r3, [pc, #4]	@ (8005cbc <__errno+0x8>)
 8005cb6:	6818      	ldr	r0, [r3, #0]
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	20000018 	.word	0x20000018

08005cc0 <__libc_init_array>:
 8005cc0:	b570      	push	{r4, r5, r6, lr}
 8005cc2:	4d0d      	ldr	r5, [pc, #52]	@ (8005cf8 <__libc_init_array+0x38>)
 8005cc4:	4c0d      	ldr	r4, [pc, #52]	@ (8005cfc <__libc_init_array+0x3c>)
 8005cc6:	1b64      	subs	r4, r4, r5
 8005cc8:	10a4      	asrs	r4, r4, #2
 8005cca:	2600      	movs	r6, #0
 8005ccc:	42a6      	cmp	r6, r4
 8005cce:	d109      	bne.n	8005ce4 <__libc_init_array+0x24>
 8005cd0:	4d0b      	ldr	r5, [pc, #44]	@ (8005d00 <__libc_init_array+0x40>)
 8005cd2:	4c0c      	ldr	r4, [pc, #48]	@ (8005d04 <__libc_init_array+0x44>)
 8005cd4:	f002 fa04 	bl	80080e0 <_init>
 8005cd8:	1b64      	subs	r4, r4, r5
 8005cda:	10a4      	asrs	r4, r4, #2
 8005cdc:	2600      	movs	r6, #0
 8005cde:	42a6      	cmp	r6, r4
 8005ce0:	d105      	bne.n	8005cee <__libc_init_array+0x2e>
 8005ce2:	bd70      	pop	{r4, r5, r6, pc}
 8005ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce8:	4798      	blx	r3
 8005cea:	3601      	adds	r6, #1
 8005cec:	e7ee      	b.n	8005ccc <__libc_init_array+0xc>
 8005cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cf2:	4798      	blx	r3
 8005cf4:	3601      	adds	r6, #1
 8005cf6:	e7f2      	b.n	8005cde <__libc_init_array+0x1e>
 8005cf8:	08008700 	.word	0x08008700
 8005cfc:	08008700 	.word	0x08008700
 8005d00:	08008700 	.word	0x08008700
 8005d04:	08008704 	.word	0x08008704

08005d08 <__retarget_lock_init_recursive>:
 8005d08:	4770      	bx	lr

08005d0a <__retarget_lock_acquire_recursive>:
 8005d0a:	4770      	bx	lr

08005d0c <__retarget_lock_release_recursive>:
 8005d0c:	4770      	bx	lr

08005d0e <quorem>:
 8005d0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d12:	6903      	ldr	r3, [r0, #16]
 8005d14:	690c      	ldr	r4, [r1, #16]
 8005d16:	42a3      	cmp	r3, r4
 8005d18:	4607      	mov	r7, r0
 8005d1a:	db7e      	blt.n	8005e1a <quorem+0x10c>
 8005d1c:	3c01      	subs	r4, #1
 8005d1e:	f101 0814 	add.w	r8, r1, #20
 8005d22:	00a3      	lsls	r3, r4, #2
 8005d24:	f100 0514 	add.w	r5, r0, #20
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d2e:	9301      	str	r3, [sp, #4]
 8005d30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d40:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d44:	d32e      	bcc.n	8005da4 <quorem+0x96>
 8005d46:	f04f 0a00 	mov.w	sl, #0
 8005d4a:	46c4      	mov	ip, r8
 8005d4c:	46ae      	mov	lr, r5
 8005d4e:	46d3      	mov	fp, sl
 8005d50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005d54:	b298      	uxth	r0, r3
 8005d56:	fb06 a000 	mla	r0, r6, r0, sl
 8005d5a:	0c02      	lsrs	r2, r0, #16
 8005d5c:	0c1b      	lsrs	r3, r3, #16
 8005d5e:	fb06 2303 	mla	r3, r6, r3, r2
 8005d62:	f8de 2000 	ldr.w	r2, [lr]
 8005d66:	b280      	uxth	r0, r0
 8005d68:	b292      	uxth	r2, r2
 8005d6a:	1a12      	subs	r2, r2, r0
 8005d6c:	445a      	add	r2, fp
 8005d6e:	f8de 0000 	ldr.w	r0, [lr]
 8005d72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005d7c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005d80:	b292      	uxth	r2, r2
 8005d82:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005d86:	45e1      	cmp	r9, ip
 8005d88:	f84e 2b04 	str.w	r2, [lr], #4
 8005d8c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005d90:	d2de      	bcs.n	8005d50 <quorem+0x42>
 8005d92:	9b00      	ldr	r3, [sp, #0]
 8005d94:	58eb      	ldr	r3, [r5, r3]
 8005d96:	b92b      	cbnz	r3, 8005da4 <quorem+0x96>
 8005d98:	9b01      	ldr	r3, [sp, #4]
 8005d9a:	3b04      	subs	r3, #4
 8005d9c:	429d      	cmp	r5, r3
 8005d9e:	461a      	mov	r2, r3
 8005da0:	d32f      	bcc.n	8005e02 <quorem+0xf4>
 8005da2:	613c      	str	r4, [r7, #16]
 8005da4:	4638      	mov	r0, r7
 8005da6:	f001 f979 	bl	800709c <__mcmp>
 8005daa:	2800      	cmp	r0, #0
 8005dac:	db25      	blt.n	8005dfa <quorem+0xec>
 8005dae:	4629      	mov	r1, r5
 8005db0:	2000      	movs	r0, #0
 8005db2:	f858 2b04 	ldr.w	r2, [r8], #4
 8005db6:	f8d1 c000 	ldr.w	ip, [r1]
 8005dba:	fa1f fe82 	uxth.w	lr, r2
 8005dbe:	fa1f f38c 	uxth.w	r3, ip
 8005dc2:	eba3 030e 	sub.w	r3, r3, lr
 8005dc6:	4403      	add	r3, r0
 8005dc8:	0c12      	lsrs	r2, r2, #16
 8005dca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005dce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dd8:	45c1      	cmp	r9, r8
 8005dda:	f841 3b04 	str.w	r3, [r1], #4
 8005dde:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005de2:	d2e6      	bcs.n	8005db2 <quorem+0xa4>
 8005de4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005de8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005dec:	b922      	cbnz	r2, 8005df8 <quorem+0xea>
 8005dee:	3b04      	subs	r3, #4
 8005df0:	429d      	cmp	r5, r3
 8005df2:	461a      	mov	r2, r3
 8005df4:	d30b      	bcc.n	8005e0e <quorem+0x100>
 8005df6:	613c      	str	r4, [r7, #16]
 8005df8:	3601      	adds	r6, #1
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	b003      	add	sp, #12
 8005dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e02:	6812      	ldr	r2, [r2, #0]
 8005e04:	3b04      	subs	r3, #4
 8005e06:	2a00      	cmp	r2, #0
 8005e08:	d1cb      	bne.n	8005da2 <quorem+0x94>
 8005e0a:	3c01      	subs	r4, #1
 8005e0c:	e7c6      	b.n	8005d9c <quorem+0x8e>
 8005e0e:	6812      	ldr	r2, [r2, #0]
 8005e10:	3b04      	subs	r3, #4
 8005e12:	2a00      	cmp	r2, #0
 8005e14:	d1ef      	bne.n	8005df6 <quorem+0xe8>
 8005e16:	3c01      	subs	r4, #1
 8005e18:	e7ea      	b.n	8005df0 <quorem+0xe2>
 8005e1a:	2000      	movs	r0, #0
 8005e1c:	e7ee      	b.n	8005dfc <quorem+0xee>
	...

08005e20 <_dtoa_r>:
 8005e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e24:	69c7      	ldr	r7, [r0, #28]
 8005e26:	b099      	sub	sp, #100	@ 0x64
 8005e28:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005e2c:	ec55 4b10 	vmov	r4, r5, d0
 8005e30:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005e32:	9109      	str	r1, [sp, #36]	@ 0x24
 8005e34:	4683      	mov	fp, r0
 8005e36:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005e3a:	b97f      	cbnz	r7, 8005e5c <_dtoa_r+0x3c>
 8005e3c:	2010      	movs	r0, #16
 8005e3e:	f000 fdfd 	bl	8006a3c <malloc>
 8005e42:	4602      	mov	r2, r0
 8005e44:	f8cb 001c 	str.w	r0, [fp, #28]
 8005e48:	b920      	cbnz	r0, 8005e54 <_dtoa_r+0x34>
 8005e4a:	4ba7      	ldr	r3, [pc, #668]	@ (80060e8 <_dtoa_r+0x2c8>)
 8005e4c:	21ef      	movs	r1, #239	@ 0xef
 8005e4e:	48a7      	ldr	r0, [pc, #668]	@ (80060ec <_dtoa_r+0x2cc>)
 8005e50:	f001 fc68 	bl	8007724 <__assert_func>
 8005e54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005e58:	6007      	str	r7, [r0, #0]
 8005e5a:	60c7      	str	r7, [r0, #12]
 8005e5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e60:	6819      	ldr	r1, [r3, #0]
 8005e62:	b159      	cbz	r1, 8005e7c <_dtoa_r+0x5c>
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	604a      	str	r2, [r1, #4]
 8005e68:	2301      	movs	r3, #1
 8005e6a:	4093      	lsls	r3, r2
 8005e6c:	608b      	str	r3, [r1, #8]
 8005e6e:	4658      	mov	r0, fp
 8005e70:	f000 feda 	bl	8006c28 <_Bfree>
 8005e74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	601a      	str	r2, [r3, #0]
 8005e7c:	1e2b      	subs	r3, r5, #0
 8005e7e:	bfb9      	ittee	lt
 8005e80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005e84:	9303      	strlt	r3, [sp, #12]
 8005e86:	2300      	movge	r3, #0
 8005e88:	6033      	strge	r3, [r6, #0]
 8005e8a:	9f03      	ldr	r7, [sp, #12]
 8005e8c:	4b98      	ldr	r3, [pc, #608]	@ (80060f0 <_dtoa_r+0x2d0>)
 8005e8e:	bfbc      	itt	lt
 8005e90:	2201      	movlt	r2, #1
 8005e92:	6032      	strlt	r2, [r6, #0]
 8005e94:	43bb      	bics	r3, r7
 8005e96:	d112      	bne.n	8005ebe <_dtoa_r+0x9e>
 8005e98:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005e9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005e9e:	6013      	str	r3, [r2, #0]
 8005ea0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005ea4:	4323      	orrs	r3, r4
 8005ea6:	f000 854d 	beq.w	8006944 <_dtoa_r+0xb24>
 8005eaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005eac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006104 <_dtoa_r+0x2e4>
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 854f 	beq.w	8006954 <_dtoa_r+0xb34>
 8005eb6:	f10a 0303 	add.w	r3, sl, #3
 8005eba:	f000 bd49 	b.w	8006950 <_dtoa_r+0xb30>
 8005ebe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	ec51 0b17 	vmov	r0, r1, d7
 8005ec8:	2300      	movs	r3, #0
 8005eca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005ece:	f7fa fe03 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ed2:	4680      	mov	r8, r0
 8005ed4:	b158      	cbz	r0, 8005eee <_dtoa_r+0xce>
 8005ed6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005ed8:	2301      	movs	r3, #1
 8005eda:	6013      	str	r3, [r2, #0]
 8005edc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005ede:	b113      	cbz	r3, 8005ee6 <_dtoa_r+0xc6>
 8005ee0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005ee2:	4b84      	ldr	r3, [pc, #528]	@ (80060f4 <_dtoa_r+0x2d4>)
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006108 <_dtoa_r+0x2e8>
 8005eea:	f000 bd33 	b.w	8006954 <_dtoa_r+0xb34>
 8005eee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005ef2:	aa16      	add	r2, sp, #88	@ 0x58
 8005ef4:	a917      	add	r1, sp, #92	@ 0x5c
 8005ef6:	4658      	mov	r0, fp
 8005ef8:	f001 f980 	bl	80071fc <__d2b>
 8005efc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005f00:	4681      	mov	r9, r0
 8005f02:	2e00      	cmp	r6, #0
 8005f04:	d077      	beq.n	8005ff6 <_dtoa_r+0x1d6>
 8005f06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f08:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005f0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005f18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005f1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005f20:	4619      	mov	r1, r3
 8005f22:	2200      	movs	r2, #0
 8005f24:	4b74      	ldr	r3, [pc, #464]	@ (80060f8 <_dtoa_r+0x2d8>)
 8005f26:	f7fa f9b7 	bl	8000298 <__aeabi_dsub>
 8005f2a:	a369      	add	r3, pc, #420	@ (adr r3, 80060d0 <_dtoa_r+0x2b0>)
 8005f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f30:	f7fa fb6a 	bl	8000608 <__aeabi_dmul>
 8005f34:	a368      	add	r3, pc, #416	@ (adr r3, 80060d8 <_dtoa_r+0x2b8>)
 8005f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3a:	f7fa f9af 	bl	800029c <__adddf3>
 8005f3e:	4604      	mov	r4, r0
 8005f40:	4630      	mov	r0, r6
 8005f42:	460d      	mov	r5, r1
 8005f44:	f7fa faf6 	bl	8000534 <__aeabi_i2d>
 8005f48:	a365      	add	r3, pc, #404	@ (adr r3, 80060e0 <_dtoa_r+0x2c0>)
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	f7fa fb5b 	bl	8000608 <__aeabi_dmul>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	4620      	mov	r0, r4
 8005f58:	4629      	mov	r1, r5
 8005f5a:	f7fa f99f 	bl	800029c <__adddf3>
 8005f5e:	4604      	mov	r4, r0
 8005f60:	460d      	mov	r5, r1
 8005f62:	f7fa fe01 	bl	8000b68 <__aeabi_d2iz>
 8005f66:	2200      	movs	r2, #0
 8005f68:	4607      	mov	r7, r0
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	4620      	mov	r0, r4
 8005f6e:	4629      	mov	r1, r5
 8005f70:	f7fa fdbc 	bl	8000aec <__aeabi_dcmplt>
 8005f74:	b140      	cbz	r0, 8005f88 <_dtoa_r+0x168>
 8005f76:	4638      	mov	r0, r7
 8005f78:	f7fa fadc 	bl	8000534 <__aeabi_i2d>
 8005f7c:	4622      	mov	r2, r4
 8005f7e:	462b      	mov	r3, r5
 8005f80:	f7fa fdaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f84:	b900      	cbnz	r0, 8005f88 <_dtoa_r+0x168>
 8005f86:	3f01      	subs	r7, #1
 8005f88:	2f16      	cmp	r7, #22
 8005f8a:	d851      	bhi.n	8006030 <_dtoa_r+0x210>
 8005f8c:	4b5b      	ldr	r3, [pc, #364]	@ (80060fc <_dtoa_r+0x2dc>)
 8005f8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f9a:	f7fa fda7 	bl	8000aec <__aeabi_dcmplt>
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	d048      	beq.n	8006034 <_dtoa_r+0x214>
 8005fa2:	3f01      	subs	r7, #1
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	9312      	str	r3, [sp, #72]	@ 0x48
 8005fa8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005faa:	1b9b      	subs	r3, r3, r6
 8005fac:	1e5a      	subs	r2, r3, #1
 8005fae:	bf44      	itt	mi
 8005fb0:	f1c3 0801 	rsbmi	r8, r3, #1
 8005fb4:	2300      	movmi	r3, #0
 8005fb6:	9208      	str	r2, [sp, #32]
 8005fb8:	bf54      	ite	pl
 8005fba:	f04f 0800 	movpl.w	r8, #0
 8005fbe:	9308      	strmi	r3, [sp, #32]
 8005fc0:	2f00      	cmp	r7, #0
 8005fc2:	db39      	blt.n	8006038 <_dtoa_r+0x218>
 8005fc4:	9b08      	ldr	r3, [sp, #32]
 8005fc6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005fc8:	443b      	add	r3, r7
 8005fca:	9308      	str	r3, [sp, #32]
 8005fcc:	2300      	movs	r3, #0
 8005fce:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fd2:	2b09      	cmp	r3, #9
 8005fd4:	d864      	bhi.n	80060a0 <_dtoa_r+0x280>
 8005fd6:	2b05      	cmp	r3, #5
 8005fd8:	bfc4      	itt	gt
 8005fda:	3b04      	subgt	r3, #4
 8005fdc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fe0:	f1a3 0302 	sub.w	r3, r3, #2
 8005fe4:	bfcc      	ite	gt
 8005fe6:	2400      	movgt	r4, #0
 8005fe8:	2401      	movle	r4, #1
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d863      	bhi.n	80060b6 <_dtoa_r+0x296>
 8005fee:	e8df f003 	tbb	[pc, r3]
 8005ff2:	372a      	.short	0x372a
 8005ff4:	5535      	.short	0x5535
 8005ff6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005ffa:	441e      	add	r6, r3
 8005ffc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006000:	2b20      	cmp	r3, #32
 8006002:	bfc1      	itttt	gt
 8006004:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006008:	409f      	lslgt	r7, r3
 800600a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800600e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006012:	bfd6      	itet	le
 8006014:	f1c3 0320 	rsble	r3, r3, #32
 8006018:	ea47 0003 	orrgt.w	r0, r7, r3
 800601c:	fa04 f003 	lslle.w	r0, r4, r3
 8006020:	f7fa fa78 	bl	8000514 <__aeabi_ui2d>
 8006024:	2201      	movs	r2, #1
 8006026:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800602a:	3e01      	subs	r6, #1
 800602c:	9214      	str	r2, [sp, #80]	@ 0x50
 800602e:	e777      	b.n	8005f20 <_dtoa_r+0x100>
 8006030:	2301      	movs	r3, #1
 8006032:	e7b8      	b.n	8005fa6 <_dtoa_r+0x186>
 8006034:	9012      	str	r0, [sp, #72]	@ 0x48
 8006036:	e7b7      	b.n	8005fa8 <_dtoa_r+0x188>
 8006038:	427b      	negs	r3, r7
 800603a:	930a      	str	r3, [sp, #40]	@ 0x28
 800603c:	2300      	movs	r3, #0
 800603e:	eba8 0807 	sub.w	r8, r8, r7
 8006042:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006044:	e7c4      	b.n	8005fd0 <_dtoa_r+0x1b0>
 8006046:	2300      	movs	r3, #0
 8006048:	930b      	str	r3, [sp, #44]	@ 0x2c
 800604a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800604c:	2b00      	cmp	r3, #0
 800604e:	dc35      	bgt.n	80060bc <_dtoa_r+0x29c>
 8006050:	2301      	movs	r3, #1
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	9307      	str	r3, [sp, #28]
 8006056:	461a      	mov	r2, r3
 8006058:	920e      	str	r2, [sp, #56]	@ 0x38
 800605a:	e00b      	b.n	8006074 <_dtoa_r+0x254>
 800605c:	2301      	movs	r3, #1
 800605e:	e7f3      	b.n	8006048 <_dtoa_r+0x228>
 8006060:	2300      	movs	r3, #0
 8006062:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006064:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006066:	18fb      	adds	r3, r7, r3
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	3301      	adds	r3, #1
 800606c:	2b01      	cmp	r3, #1
 800606e:	9307      	str	r3, [sp, #28]
 8006070:	bfb8      	it	lt
 8006072:	2301      	movlt	r3, #1
 8006074:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006078:	2100      	movs	r1, #0
 800607a:	2204      	movs	r2, #4
 800607c:	f102 0514 	add.w	r5, r2, #20
 8006080:	429d      	cmp	r5, r3
 8006082:	d91f      	bls.n	80060c4 <_dtoa_r+0x2a4>
 8006084:	6041      	str	r1, [r0, #4]
 8006086:	4658      	mov	r0, fp
 8006088:	f000 fd8e 	bl	8006ba8 <_Balloc>
 800608c:	4682      	mov	sl, r0
 800608e:	2800      	cmp	r0, #0
 8006090:	d13c      	bne.n	800610c <_dtoa_r+0x2ec>
 8006092:	4b1b      	ldr	r3, [pc, #108]	@ (8006100 <_dtoa_r+0x2e0>)
 8006094:	4602      	mov	r2, r0
 8006096:	f240 11af 	movw	r1, #431	@ 0x1af
 800609a:	e6d8      	b.n	8005e4e <_dtoa_r+0x2e>
 800609c:	2301      	movs	r3, #1
 800609e:	e7e0      	b.n	8006062 <_dtoa_r+0x242>
 80060a0:	2401      	movs	r4, #1
 80060a2:	2300      	movs	r3, #0
 80060a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80060a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80060a8:	f04f 33ff 	mov.w	r3, #4294967295
 80060ac:	9300      	str	r3, [sp, #0]
 80060ae:	9307      	str	r3, [sp, #28]
 80060b0:	2200      	movs	r2, #0
 80060b2:	2312      	movs	r3, #18
 80060b4:	e7d0      	b.n	8006058 <_dtoa_r+0x238>
 80060b6:	2301      	movs	r3, #1
 80060b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060ba:	e7f5      	b.n	80060a8 <_dtoa_r+0x288>
 80060bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	9307      	str	r3, [sp, #28]
 80060c2:	e7d7      	b.n	8006074 <_dtoa_r+0x254>
 80060c4:	3101      	adds	r1, #1
 80060c6:	0052      	lsls	r2, r2, #1
 80060c8:	e7d8      	b.n	800607c <_dtoa_r+0x25c>
 80060ca:	bf00      	nop
 80060cc:	f3af 8000 	nop.w
 80060d0:	636f4361 	.word	0x636f4361
 80060d4:	3fd287a7 	.word	0x3fd287a7
 80060d8:	8b60c8b3 	.word	0x8b60c8b3
 80060dc:	3fc68a28 	.word	0x3fc68a28
 80060e0:	509f79fb 	.word	0x509f79fb
 80060e4:	3fd34413 	.word	0x3fd34413
 80060e8:	0800838d 	.word	0x0800838d
 80060ec:	080083a4 	.word	0x080083a4
 80060f0:	7ff00000 	.word	0x7ff00000
 80060f4:	0800835d 	.word	0x0800835d
 80060f8:	3ff80000 	.word	0x3ff80000
 80060fc:	080084a0 	.word	0x080084a0
 8006100:	080083fc 	.word	0x080083fc
 8006104:	08008389 	.word	0x08008389
 8006108:	0800835c 	.word	0x0800835c
 800610c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006110:	6018      	str	r0, [r3, #0]
 8006112:	9b07      	ldr	r3, [sp, #28]
 8006114:	2b0e      	cmp	r3, #14
 8006116:	f200 80a4 	bhi.w	8006262 <_dtoa_r+0x442>
 800611a:	2c00      	cmp	r4, #0
 800611c:	f000 80a1 	beq.w	8006262 <_dtoa_r+0x442>
 8006120:	2f00      	cmp	r7, #0
 8006122:	dd33      	ble.n	800618c <_dtoa_r+0x36c>
 8006124:	4bad      	ldr	r3, [pc, #692]	@ (80063dc <_dtoa_r+0x5bc>)
 8006126:	f007 020f 	and.w	r2, r7, #15
 800612a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800612e:	ed93 7b00 	vldr	d7, [r3]
 8006132:	05f8      	lsls	r0, r7, #23
 8006134:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006138:	ea4f 1427 	mov.w	r4, r7, asr #4
 800613c:	d516      	bpl.n	800616c <_dtoa_r+0x34c>
 800613e:	4ba8      	ldr	r3, [pc, #672]	@ (80063e0 <_dtoa_r+0x5c0>)
 8006140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006144:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006148:	f7fa fb88 	bl	800085c <__aeabi_ddiv>
 800614c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006150:	f004 040f 	and.w	r4, r4, #15
 8006154:	2603      	movs	r6, #3
 8006156:	4da2      	ldr	r5, [pc, #648]	@ (80063e0 <_dtoa_r+0x5c0>)
 8006158:	b954      	cbnz	r4, 8006170 <_dtoa_r+0x350>
 800615a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800615e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006162:	f7fa fb7b 	bl	800085c <__aeabi_ddiv>
 8006166:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800616a:	e028      	b.n	80061be <_dtoa_r+0x39e>
 800616c:	2602      	movs	r6, #2
 800616e:	e7f2      	b.n	8006156 <_dtoa_r+0x336>
 8006170:	07e1      	lsls	r1, r4, #31
 8006172:	d508      	bpl.n	8006186 <_dtoa_r+0x366>
 8006174:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006178:	e9d5 2300 	ldrd	r2, r3, [r5]
 800617c:	f7fa fa44 	bl	8000608 <__aeabi_dmul>
 8006180:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006184:	3601      	adds	r6, #1
 8006186:	1064      	asrs	r4, r4, #1
 8006188:	3508      	adds	r5, #8
 800618a:	e7e5      	b.n	8006158 <_dtoa_r+0x338>
 800618c:	f000 80d2 	beq.w	8006334 <_dtoa_r+0x514>
 8006190:	427c      	negs	r4, r7
 8006192:	4b92      	ldr	r3, [pc, #584]	@ (80063dc <_dtoa_r+0x5bc>)
 8006194:	4d92      	ldr	r5, [pc, #584]	@ (80063e0 <_dtoa_r+0x5c0>)
 8006196:	f004 020f 	and.w	r2, r4, #15
 800619a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800619e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061a6:	f7fa fa2f 	bl	8000608 <__aeabi_dmul>
 80061aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061ae:	1124      	asrs	r4, r4, #4
 80061b0:	2300      	movs	r3, #0
 80061b2:	2602      	movs	r6, #2
 80061b4:	2c00      	cmp	r4, #0
 80061b6:	f040 80b2 	bne.w	800631e <_dtoa_r+0x4fe>
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1d3      	bne.n	8006166 <_dtoa_r+0x346>
 80061be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80061c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 80b7 	beq.w	8006338 <_dtoa_r+0x518>
 80061ca:	4b86      	ldr	r3, [pc, #536]	@ (80063e4 <_dtoa_r+0x5c4>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	4620      	mov	r0, r4
 80061d0:	4629      	mov	r1, r5
 80061d2:	f7fa fc8b 	bl	8000aec <__aeabi_dcmplt>
 80061d6:	2800      	cmp	r0, #0
 80061d8:	f000 80ae 	beq.w	8006338 <_dtoa_r+0x518>
 80061dc:	9b07      	ldr	r3, [sp, #28]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 80aa 	beq.w	8006338 <_dtoa_r+0x518>
 80061e4:	9b00      	ldr	r3, [sp, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	dd37      	ble.n	800625a <_dtoa_r+0x43a>
 80061ea:	1e7b      	subs	r3, r7, #1
 80061ec:	9304      	str	r3, [sp, #16]
 80061ee:	4620      	mov	r0, r4
 80061f0:	4b7d      	ldr	r3, [pc, #500]	@ (80063e8 <_dtoa_r+0x5c8>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	4629      	mov	r1, r5
 80061f6:	f7fa fa07 	bl	8000608 <__aeabi_dmul>
 80061fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061fe:	9c00      	ldr	r4, [sp, #0]
 8006200:	3601      	adds	r6, #1
 8006202:	4630      	mov	r0, r6
 8006204:	f7fa f996 	bl	8000534 <__aeabi_i2d>
 8006208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800620c:	f7fa f9fc 	bl	8000608 <__aeabi_dmul>
 8006210:	4b76      	ldr	r3, [pc, #472]	@ (80063ec <_dtoa_r+0x5cc>)
 8006212:	2200      	movs	r2, #0
 8006214:	f7fa f842 	bl	800029c <__adddf3>
 8006218:	4605      	mov	r5, r0
 800621a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800621e:	2c00      	cmp	r4, #0
 8006220:	f040 808d 	bne.w	800633e <_dtoa_r+0x51e>
 8006224:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006228:	4b71      	ldr	r3, [pc, #452]	@ (80063f0 <_dtoa_r+0x5d0>)
 800622a:	2200      	movs	r2, #0
 800622c:	f7fa f834 	bl	8000298 <__aeabi_dsub>
 8006230:	4602      	mov	r2, r0
 8006232:	460b      	mov	r3, r1
 8006234:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006238:	462a      	mov	r2, r5
 800623a:	4633      	mov	r3, r6
 800623c:	f7fa fc74 	bl	8000b28 <__aeabi_dcmpgt>
 8006240:	2800      	cmp	r0, #0
 8006242:	f040 828b 	bne.w	800675c <_dtoa_r+0x93c>
 8006246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800624a:	462a      	mov	r2, r5
 800624c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006250:	f7fa fc4c 	bl	8000aec <__aeabi_dcmplt>
 8006254:	2800      	cmp	r0, #0
 8006256:	f040 8128 	bne.w	80064aa <_dtoa_r+0x68a>
 800625a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800625e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006262:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006264:	2b00      	cmp	r3, #0
 8006266:	f2c0 815a 	blt.w	800651e <_dtoa_r+0x6fe>
 800626a:	2f0e      	cmp	r7, #14
 800626c:	f300 8157 	bgt.w	800651e <_dtoa_r+0x6fe>
 8006270:	4b5a      	ldr	r3, [pc, #360]	@ (80063dc <_dtoa_r+0x5bc>)
 8006272:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006276:	ed93 7b00 	vldr	d7, [r3]
 800627a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800627c:	2b00      	cmp	r3, #0
 800627e:	ed8d 7b00 	vstr	d7, [sp]
 8006282:	da03      	bge.n	800628c <_dtoa_r+0x46c>
 8006284:	9b07      	ldr	r3, [sp, #28]
 8006286:	2b00      	cmp	r3, #0
 8006288:	f340 8101 	ble.w	800648e <_dtoa_r+0x66e>
 800628c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006290:	4656      	mov	r6, sl
 8006292:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006296:	4620      	mov	r0, r4
 8006298:	4629      	mov	r1, r5
 800629a:	f7fa fadf 	bl	800085c <__aeabi_ddiv>
 800629e:	f7fa fc63 	bl	8000b68 <__aeabi_d2iz>
 80062a2:	4680      	mov	r8, r0
 80062a4:	f7fa f946 	bl	8000534 <__aeabi_i2d>
 80062a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062ac:	f7fa f9ac 	bl	8000608 <__aeabi_dmul>
 80062b0:	4602      	mov	r2, r0
 80062b2:	460b      	mov	r3, r1
 80062b4:	4620      	mov	r0, r4
 80062b6:	4629      	mov	r1, r5
 80062b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80062bc:	f7f9 ffec 	bl	8000298 <__aeabi_dsub>
 80062c0:	f806 4b01 	strb.w	r4, [r6], #1
 80062c4:	9d07      	ldr	r5, [sp, #28]
 80062c6:	eba6 040a 	sub.w	r4, r6, sl
 80062ca:	42a5      	cmp	r5, r4
 80062cc:	4602      	mov	r2, r0
 80062ce:	460b      	mov	r3, r1
 80062d0:	f040 8117 	bne.w	8006502 <_dtoa_r+0x6e2>
 80062d4:	f7f9 ffe2 	bl	800029c <__adddf3>
 80062d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062dc:	4604      	mov	r4, r0
 80062de:	460d      	mov	r5, r1
 80062e0:	f7fa fc22 	bl	8000b28 <__aeabi_dcmpgt>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	f040 80f9 	bne.w	80064dc <_dtoa_r+0x6bc>
 80062ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062ee:	4620      	mov	r0, r4
 80062f0:	4629      	mov	r1, r5
 80062f2:	f7fa fbf1 	bl	8000ad8 <__aeabi_dcmpeq>
 80062f6:	b118      	cbz	r0, 8006300 <_dtoa_r+0x4e0>
 80062f8:	f018 0f01 	tst.w	r8, #1
 80062fc:	f040 80ee 	bne.w	80064dc <_dtoa_r+0x6bc>
 8006300:	4649      	mov	r1, r9
 8006302:	4658      	mov	r0, fp
 8006304:	f000 fc90 	bl	8006c28 <_Bfree>
 8006308:	2300      	movs	r3, #0
 800630a:	7033      	strb	r3, [r6, #0]
 800630c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800630e:	3701      	adds	r7, #1
 8006310:	601f      	str	r7, [r3, #0]
 8006312:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 831d 	beq.w	8006954 <_dtoa_r+0xb34>
 800631a:	601e      	str	r6, [r3, #0]
 800631c:	e31a      	b.n	8006954 <_dtoa_r+0xb34>
 800631e:	07e2      	lsls	r2, r4, #31
 8006320:	d505      	bpl.n	800632e <_dtoa_r+0x50e>
 8006322:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006326:	f7fa f96f 	bl	8000608 <__aeabi_dmul>
 800632a:	3601      	adds	r6, #1
 800632c:	2301      	movs	r3, #1
 800632e:	1064      	asrs	r4, r4, #1
 8006330:	3508      	adds	r5, #8
 8006332:	e73f      	b.n	80061b4 <_dtoa_r+0x394>
 8006334:	2602      	movs	r6, #2
 8006336:	e742      	b.n	80061be <_dtoa_r+0x39e>
 8006338:	9c07      	ldr	r4, [sp, #28]
 800633a:	9704      	str	r7, [sp, #16]
 800633c:	e761      	b.n	8006202 <_dtoa_r+0x3e2>
 800633e:	4b27      	ldr	r3, [pc, #156]	@ (80063dc <_dtoa_r+0x5bc>)
 8006340:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006342:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006346:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800634a:	4454      	add	r4, sl
 800634c:	2900      	cmp	r1, #0
 800634e:	d053      	beq.n	80063f8 <_dtoa_r+0x5d8>
 8006350:	4928      	ldr	r1, [pc, #160]	@ (80063f4 <_dtoa_r+0x5d4>)
 8006352:	2000      	movs	r0, #0
 8006354:	f7fa fa82 	bl	800085c <__aeabi_ddiv>
 8006358:	4633      	mov	r3, r6
 800635a:	462a      	mov	r2, r5
 800635c:	f7f9 ff9c 	bl	8000298 <__aeabi_dsub>
 8006360:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006364:	4656      	mov	r6, sl
 8006366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800636a:	f7fa fbfd 	bl	8000b68 <__aeabi_d2iz>
 800636e:	4605      	mov	r5, r0
 8006370:	f7fa f8e0 	bl	8000534 <__aeabi_i2d>
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800637c:	f7f9 ff8c 	bl	8000298 <__aeabi_dsub>
 8006380:	3530      	adds	r5, #48	@ 0x30
 8006382:	4602      	mov	r2, r0
 8006384:	460b      	mov	r3, r1
 8006386:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800638a:	f806 5b01 	strb.w	r5, [r6], #1
 800638e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006392:	f7fa fbab 	bl	8000aec <__aeabi_dcmplt>
 8006396:	2800      	cmp	r0, #0
 8006398:	d171      	bne.n	800647e <_dtoa_r+0x65e>
 800639a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800639e:	4911      	ldr	r1, [pc, #68]	@ (80063e4 <_dtoa_r+0x5c4>)
 80063a0:	2000      	movs	r0, #0
 80063a2:	f7f9 ff79 	bl	8000298 <__aeabi_dsub>
 80063a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063aa:	f7fa fb9f 	bl	8000aec <__aeabi_dcmplt>
 80063ae:	2800      	cmp	r0, #0
 80063b0:	f040 8095 	bne.w	80064de <_dtoa_r+0x6be>
 80063b4:	42a6      	cmp	r6, r4
 80063b6:	f43f af50 	beq.w	800625a <_dtoa_r+0x43a>
 80063ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80063be:	4b0a      	ldr	r3, [pc, #40]	@ (80063e8 <_dtoa_r+0x5c8>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	f7fa f921 	bl	8000608 <__aeabi_dmul>
 80063c6:	4b08      	ldr	r3, [pc, #32]	@ (80063e8 <_dtoa_r+0x5c8>)
 80063c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063cc:	2200      	movs	r2, #0
 80063ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063d2:	f7fa f919 	bl	8000608 <__aeabi_dmul>
 80063d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063da:	e7c4      	b.n	8006366 <_dtoa_r+0x546>
 80063dc:	080084a0 	.word	0x080084a0
 80063e0:	08008478 	.word	0x08008478
 80063e4:	3ff00000 	.word	0x3ff00000
 80063e8:	40240000 	.word	0x40240000
 80063ec:	401c0000 	.word	0x401c0000
 80063f0:	40140000 	.word	0x40140000
 80063f4:	3fe00000 	.word	0x3fe00000
 80063f8:	4631      	mov	r1, r6
 80063fa:	4628      	mov	r0, r5
 80063fc:	f7fa f904 	bl	8000608 <__aeabi_dmul>
 8006400:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006404:	9415      	str	r4, [sp, #84]	@ 0x54
 8006406:	4656      	mov	r6, sl
 8006408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800640c:	f7fa fbac 	bl	8000b68 <__aeabi_d2iz>
 8006410:	4605      	mov	r5, r0
 8006412:	f7fa f88f 	bl	8000534 <__aeabi_i2d>
 8006416:	4602      	mov	r2, r0
 8006418:	460b      	mov	r3, r1
 800641a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800641e:	f7f9 ff3b 	bl	8000298 <__aeabi_dsub>
 8006422:	3530      	adds	r5, #48	@ 0x30
 8006424:	f806 5b01 	strb.w	r5, [r6], #1
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	42a6      	cmp	r6, r4
 800642e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006432:	f04f 0200 	mov.w	r2, #0
 8006436:	d124      	bne.n	8006482 <_dtoa_r+0x662>
 8006438:	4bac      	ldr	r3, [pc, #688]	@ (80066ec <_dtoa_r+0x8cc>)
 800643a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800643e:	f7f9 ff2d 	bl	800029c <__adddf3>
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800644a:	f7fa fb6d 	bl	8000b28 <__aeabi_dcmpgt>
 800644e:	2800      	cmp	r0, #0
 8006450:	d145      	bne.n	80064de <_dtoa_r+0x6be>
 8006452:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006456:	49a5      	ldr	r1, [pc, #660]	@ (80066ec <_dtoa_r+0x8cc>)
 8006458:	2000      	movs	r0, #0
 800645a:	f7f9 ff1d 	bl	8000298 <__aeabi_dsub>
 800645e:	4602      	mov	r2, r0
 8006460:	460b      	mov	r3, r1
 8006462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006466:	f7fa fb41 	bl	8000aec <__aeabi_dcmplt>
 800646a:	2800      	cmp	r0, #0
 800646c:	f43f aef5 	beq.w	800625a <_dtoa_r+0x43a>
 8006470:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006472:	1e73      	subs	r3, r6, #1
 8006474:	9315      	str	r3, [sp, #84]	@ 0x54
 8006476:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800647a:	2b30      	cmp	r3, #48	@ 0x30
 800647c:	d0f8      	beq.n	8006470 <_dtoa_r+0x650>
 800647e:	9f04      	ldr	r7, [sp, #16]
 8006480:	e73e      	b.n	8006300 <_dtoa_r+0x4e0>
 8006482:	4b9b      	ldr	r3, [pc, #620]	@ (80066f0 <_dtoa_r+0x8d0>)
 8006484:	f7fa f8c0 	bl	8000608 <__aeabi_dmul>
 8006488:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800648c:	e7bc      	b.n	8006408 <_dtoa_r+0x5e8>
 800648e:	d10c      	bne.n	80064aa <_dtoa_r+0x68a>
 8006490:	4b98      	ldr	r3, [pc, #608]	@ (80066f4 <_dtoa_r+0x8d4>)
 8006492:	2200      	movs	r2, #0
 8006494:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006498:	f7fa f8b6 	bl	8000608 <__aeabi_dmul>
 800649c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064a0:	f7fa fb38 	bl	8000b14 <__aeabi_dcmpge>
 80064a4:	2800      	cmp	r0, #0
 80064a6:	f000 8157 	beq.w	8006758 <_dtoa_r+0x938>
 80064aa:	2400      	movs	r4, #0
 80064ac:	4625      	mov	r5, r4
 80064ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064b0:	43db      	mvns	r3, r3
 80064b2:	9304      	str	r3, [sp, #16]
 80064b4:	4656      	mov	r6, sl
 80064b6:	2700      	movs	r7, #0
 80064b8:	4621      	mov	r1, r4
 80064ba:	4658      	mov	r0, fp
 80064bc:	f000 fbb4 	bl	8006c28 <_Bfree>
 80064c0:	2d00      	cmp	r5, #0
 80064c2:	d0dc      	beq.n	800647e <_dtoa_r+0x65e>
 80064c4:	b12f      	cbz	r7, 80064d2 <_dtoa_r+0x6b2>
 80064c6:	42af      	cmp	r7, r5
 80064c8:	d003      	beq.n	80064d2 <_dtoa_r+0x6b2>
 80064ca:	4639      	mov	r1, r7
 80064cc:	4658      	mov	r0, fp
 80064ce:	f000 fbab 	bl	8006c28 <_Bfree>
 80064d2:	4629      	mov	r1, r5
 80064d4:	4658      	mov	r0, fp
 80064d6:	f000 fba7 	bl	8006c28 <_Bfree>
 80064da:	e7d0      	b.n	800647e <_dtoa_r+0x65e>
 80064dc:	9704      	str	r7, [sp, #16]
 80064de:	4633      	mov	r3, r6
 80064e0:	461e      	mov	r6, r3
 80064e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064e6:	2a39      	cmp	r2, #57	@ 0x39
 80064e8:	d107      	bne.n	80064fa <_dtoa_r+0x6da>
 80064ea:	459a      	cmp	sl, r3
 80064ec:	d1f8      	bne.n	80064e0 <_dtoa_r+0x6c0>
 80064ee:	9a04      	ldr	r2, [sp, #16]
 80064f0:	3201      	adds	r2, #1
 80064f2:	9204      	str	r2, [sp, #16]
 80064f4:	2230      	movs	r2, #48	@ 0x30
 80064f6:	f88a 2000 	strb.w	r2, [sl]
 80064fa:	781a      	ldrb	r2, [r3, #0]
 80064fc:	3201      	adds	r2, #1
 80064fe:	701a      	strb	r2, [r3, #0]
 8006500:	e7bd      	b.n	800647e <_dtoa_r+0x65e>
 8006502:	4b7b      	ldr	r3, [pc, #492]	@ (80066f0 <_dtoa_r+0x8d0>)
 8006504:	2200      	movs	r2, #0
 8006506:	f7fa f87f 	bl	8000608 <__aeabi_dmul>
 800650a:	2200      	movs	r2, #0
 800650c:	2300      	movs	r3, #0
 800650e:	4604      	mov	r4, r0
 8006510:	460d      	mov	r5, r1
 8006512:	f7fa fae1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006516:	2800      	cmp	r0, #0
 8006518:	f43f aebb 	beq.w	8006292 <_dtoa_r+0x472>
 800651c:	e6f0      	b.n	8006300 <_dtoa_r+0x4e0>
 800651e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006520:	2a00      	cmp	r2, #0
 8006522:	f000 80db 	beq.w	80066dc <_dtoa_r+0x8bc>
 8006526:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006528:	2a01      	cmp	r2, #1
 800652a:	f300 80bf 	bgt.w	80066ac <_dtoa_r+0x88c>
 800652e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006530:	2a00      	cmp	r2, #0
 8006532:	f000 80b7 	beq.w	80066a4 <_dtoa_r+0x884>
 8006536:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800653a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800653c:	4646      	mov	r6, r8
 800653e:	9a08      	ldr	r2, [sp, #32]
 8006540:	2101      	movs	r1, #1
 8006542:	441a      	add	r2, r3
 8006544:	4658      	mov	r0, fp
 8006546:	4498      	add	r8, r3
 8006548:	9208      	str	r2, [sp, #32]
 800654a:	f000 fc21 	bl	8006d90 <__i2b>
 800654e:	4605      	mov	r5, r0
 8006550:	b15e      	cbz	r6, 800656a <_dtoa_r+0x74a>
 8006552:	9b08      	ldr	r3, [sp, #32]
 8006554:	2b00      	cmp	r3, #0
 8006556:	dd08      	ble.n	800656a <_dtoa_r+0x74a>
 8006558:	42b3      	cmp	r3, r6
 800655a:	9a08      	ldr	r2, [sp, #32]
 800655c:	bfa8      	it	ge
 800655e:	4633      	movge	r3, r6
 8006560:	eba8 0803 	sub.w	r8, r8, r3
 8006564:	1af6      	subs	r6, r6, r3
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	9308      	str	r3, [sp, #32]
 800656a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800656c:	b1f3      	cbz	r3, 80065ac <_dtoa_r+0x78c>
 800656e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 80b7 	beq.w	80066e4 <_dtoa_r+0x8c4>
 8006576:	b18c      	cbz	r4, 800659c <_dtoa_r+0x77c>
 8006578:	4629      	mov	r1, r5
 800657a:	4622      	mov	r2, r4
 800657c:	4658      	mov	r0, fp
 800657e:	f000 fcc7 	bl	8006f10 <__pow5mult>
 8006582:	464a      	mov	r2, r9
 8006584:	4601      	mov	r1, r0
 8006586:	4605      	mov	r5, r0
 8006588:	4658      	mov	r0, fp
 800658a:	f000 fc17 	bl	8006dbc <__multiply>
 800658e:	4649      	mov	r1, r9
 8006590:	9004      	str	r0, [sp, #16]
 8006592:	4658      	mov	r0, fp
 8006594:	f000 fb48 	bl	8006c28 <_Bfree>
 8006598:	9b04      	ldr	r3, [sp, #16]
 800659a:	4699      	mov	r9, r3
 800659c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800659e:	1b1a      	subs	r2, r3, r4
 80065a0:	d004      	beq.n	80065ac <_dtoa_r+0x78c>
 80065a2:	4649      	mov	r1, r9
 80065a4:	4658      	mov	r0, fp
 80065a6:	f000 fcb3 	bl	8006f10 <__pow5mult>
 80065aa:	4681      	mov	r9, r0
 80065ac:	2101      	movs	r1, #1
 80065ae:	4658      	mov	r0, fp
 80065b0:	f000 fbee 	bl	8006d90 <__i2b>
 80065b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065b6:	4604      	mov	r4, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 81cf 	beq.w	800695c <_dtoa_r+0xb3c>
 80065be:	461a      	mov	r2, r3
 80065c0:	4601      	mov	r1, r0
 80065c2:	4658      	mov	r0, fp
 80065c4:	f000 fca4 	bl	8006f10 <__pow5mult>
 80065c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	4604      	mov	r4, r0
 80065ce:	f300 8095 	bgt.w	80066fc <_dtoa_r+0x8dc>
 80065d2:	9b02      	ldr	r3, [sp, #8]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f040 8087 	bne.w	80066e8 <_dtoa_r+0x8c8>
 80065da:	9b03      	ldr	r3, [sp, #12]
 80065dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f040 8089 	bne.w	80066f8 <_dtoa_r+0x8d8>
 80065e6:	9b03      	ldr	r3, [sp, #12]
 80065e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80065ec:	0d1b      	lsrs	r3, r3, #20
 80065ee:	051b      	lsls	r3, r3, #20
 80065f0:	b12b      	cbz	r3, 80065fe <_dtoa_r+0x7de>
 80065f2:	9b08      	ldr	r3, [sp, #32]
 80065f4:	3301      	adds	r3, #1
 80065f6:	9308      	str	r3, [sp, #32]
 80065f8:	f108 0801 	add.w	r8, r8, #1
 80065fc:	2301      	movs	r3, #1
 80065fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006602:	2b00      	cmp	r3, #0
 8006604:	f000 81b0 	beq.w	8006968 <_dtoa_r+0xb48>
 8006608:	6923      	ldr	r3, [r4, #16]
 800660a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800660e:	6918      	ldr	r0, [r3, #16]
 8006610:	f000 fb72 	bl	8006cf8 <__hi0bits>
 8006614:	f1c0 0020 	rsb	r0, r0, #32
 8006618:	9b08      	ldr	r3, [sp, #32]
 800661a:	4418      	add	r0, r3
 800661c:	f010 001f 	ands.w	r0, r0, #31
 8006620:	d077      	beq.n	8006712 <_dtoa_r+0x8f2>
 8006622:	f1c0 0320 	rsb	r3, r0, #32
 8006626:	2b04      	cmp	r3, #4
 8006628:	dd6b      	ble.n	8006702 <_dtoa_r+0x8e2>
 800662a:	9b08      	ldr	r3, [sp, #32]
 800662c:	f1c0 001c 	rsb	r0, r0, #28
 8006630:	4403      	add	r3, r0
 8006632:	4480      	add	r8, r0
 8006634:	4406      	add	r6, r0
 8006636:	9308      	str	r3, [sp, #32]
 8006638:	f1b8 0f00 	cmp.w	r8, #0
 800663c:	dd05      	ble.n	800664a <_dtoa_r+0x82a>
 800663e:	4649      	mov	r1, r9
 8006640:	4642      	mov	r2, r8
 8006642:	4658      	mov	r0, fp
 8006644:	f000 fcbe 	bl	8006fc4 <__lshift>
 8006648:	4681      	mov	r9, r0
 800664a:	9b08      	ldr	r3, [sp, #32]
 800664c:	2b00      	cmp	r3, #0
 800664e:	dd05      	ble.n	800665c <_dtoa_r+0x83c>
 8006650:	4621      	mov	r1, r4
 8006652:	461a      	mov	r2, r3
 8006654:	4658      	mov	r0, fp
 8006656:	f000 fcb5 	bl	8006fc4 <__lshift>
 800665a:	4604      	mov	r4, r0
 800665c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800665e:	2b00      	cmp	r3, #0
 8006660:	d059      	beq.n	8006716 <_dtoa_r+0x8f6>
 8006662:	4621      	mov	r1, r4
 8006664:	4648      	mov	r0, r9
 8006666:	f000 fd19 	bl	800709c <__mcmp>
 800666a:	2800      	cmp	r0, #0
 800666c:	da53      	bge.n	8006716 <_dtoa_r+0x8f6>
 800666e:	1e7b      	subs	r3, r7, #1
 8006670:	9304      	str	r3, [sp, #16]
 8006672:	4649      	mov	r1, r9
 8006674:	2300      	movs	r3, #0
 8006676:	220a      	movs	r2, #10
 8006678:	4658      	mov	r0, fp
 800667a:	f000 faf7 	bl	8006c6c <__multadd>
 800667e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006680:	4681      	mov	r9, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	f000 8172 	beq.w	800696c <_dtoa_r+0xb4c>
 8006688:	2300      	movs	r3, #0
 800668a:	4629      	mov	r1, r5
 800668c:	220a      	movs	r2, #10
 800668e:	4658      	mov	r0, fp
 8006690:	f000 faec 	bl	8006c6c <__multadd>
 8006694:	9b00      	ldr	r3, [sp, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	4605      	mov	r5, r0
 800669a:	dc67      	bgt.n	800676c <_dtoa_r+0x94c>
 800669c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800669e:	2b02      	cmp	r3, #2
 80066a0:	dc41      	bgt.n	8006726 <_dtoa_r+0x906>
 80066a2:	e063      	b.n	800676c <_dtoa_r+0x94c>
 80066a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80066a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80066aa:	e746      	b.n	800653a <_dtoa_r+0x71a>
 80066ac:	9b07      	ldr	r3, [sp, #28]
 80066ae:	1e5c      	subs	r4, r3, #1
 80066b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066b2:	42a3      	cmp	r3, r4
 80066b4:	bfbf      	itttt	lt
 80066b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80066b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80066ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80066bc:	1ae3      	sublt	r3, r4, r3
 80066be:	bfb4      	ite	lt
 80066c0:	18d2      	addlt	r2, r2, r3
 80066c2:	1b1c      	subge	r4, r3, r4
 80066c4:	9b07      	ldr	r3, [sp, #28]
 80066c6:	bfbc      	itt	lt
 80066c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80066ca:	2400      	movlt	r4, #0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	bfb5      	itete	lt
 80066d0:	eba8 0603 	sublt.w	r6, r8, r3
 80066d4:	9b07      	ldrge	r3, [sp, #28]
 80066d6:	2300      	movlt	r3, #0
 80066d8:	4646      	movge	r6, r8
 80066da:	e730      	b.n	800653e <_dtoa_r+0x71e>
 80066dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80066de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80066e0:	4646      	mov	r6, r8
 80066e2:	e735      	b.n	8006550 <_dtoa_r+0x730>
 80066e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066e6:	e75c      	b.n	80065a2 <_dtoa_r+0x782>
 80066e8:	2300      	movs	r3, #0
 80066ea:	e788      	b.n	80065fe <_dtoa_r+0x7de>
 80066ec:	3fe00000 	.word	0x3fe00000
 80066f0:	40240000 	.word	0x40240000
 80066f4:	40140000 	.word	0x40140000
 80066f8:	9b02      	ldr	r3, [sp, #8]
 80066fa:	e780      	b.n	80065fe <_dtoa_r+0x7de>
 80066fc:	2300      	movs	r3, #0
 80066fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006700:	e782      	b.n	8006608 <_dtoa_r+0x7e8>
 8006702:	d099      	beq.n	8006638 <_dtoa_r+0x818>
 8006704:	9a08      	ldr	r2, [sp, #32]
 8006706:	331c      	adds	r3, #28
 8006708:	441a      	add	r2, r3
 800670a:	4498      	add	r8, r3
 800670c:	441e      	add	r6, r3
 800670e:	9208      	str	r2, [sp, #32]
 8006710:	e792      	b.n	8006638 <_dtoa_r+0x818>
 8006712:	4603      	mov	r3, r0
 8006714:	e7f6      	b.n	8006704 <_dtoa_r+0x8e4>
 8006716:	9b07      	ldr	r3, [sp, #28]
 8006718:	9704      	str	r7, [sp, #16]
 800671a:	2b00      	cmp	r3, #0
 800671c:	dc20      	bgt.n	8006760 <_dtoa_r+0x940>
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006722:	2b02      	cmp	r3, #2
 8006724:	dd1e      	ble.n	8006764 <_dtoa_r+0x944>
 8006726:	9b00      	ldr	r3, [sp, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	f47f aec0 	bne.w	80064ae <_dtoa_r+0x68e>
 800672e:	4621      	mov	r1, r4
 8006730:	2205      	movs	r2, #5
 8006732:	4658      	mov	r0, fp
 8006734:	f000 fa9a 	bl	8006c6c <__multadd>
 8006738:	4601      	mov	r1, r0
 800673a:	4604      	mov	r4, r0
 800673c:	4648      	mov	r0, r9
 800673e:	f000 fcad 	bl	800709c <__mcmp>
 8006742:	2800      	cmp	r0, #0
 8006744:	f77f aeb3 	ble.w	80064ae <_dtoa_r+0x68e>
 8006748:	4656      	mov	r6, sl
 800674a:	2331      	movs	r3, #49	@ 0x31
 800674c:	f806 3b01 	strb.w	r3, [r6], #1
 8006750:	9b04      	ldr	r3, [sp, #16]
 8006752:	3301      	adds	r3, #1
 8006754:	9304      	str	r3, [sp, #16]
 8006756:	e6ae      	b.n	80064b6 <_dtoa_r+0x696>
 8006758:	9c07      	ldr	r4, [sp, #28]
 800675a:	9704      	str	r7, [sp, #16]
 800675c:	4625      	mov	r5, r4
 800675e:	e7f3      	b.n	8006748 <_dtoa_r+0x928>
 8006760:	9b07      	ldr	r3, [sp, #28]
 8006762:	9300      	str	r3, [sp, #0]
 8006764:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 8104 	beq.w	8006974 <_dtoa_r+0xb54>
 800676c:	2e00      	cmp	r6, #0
 800676e:	dd05      	ble.n	800677c <_dtoa_r+0x95c>
 8006770:	4629      	mov	r1, r5
 8006772:	4632      	mov	r2, r6
 8006774:	4658      	mov	r0, fp
 8006776:	f000 fc25 	bl	8006fc4 <__lshift>
 800677a:	4605      	mov	r5, r0
 800677c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800677e:	2b00      	cmp	r3, #0
 8006780:	d05a      	beq.n	8006838 <_dtoa_r+0xa18>
 8006782:	6869      	ldr	r1, [r5, #4]
 8006784:	4658      	mov	r0, fp
 8006786:	f000 fa0f 	bl	8006ba8 <_Balloc>
 800678a:	4606      	mov	r6, r0
 800678c:	b928      	cbnz	r0, 800679a <_dtoa_r+0x97a>
 800678e:	4b84      	ldr	r3, [pc, #528]	@ (80069a0 <_dtoa_r+0xb80>)
 8006790:	4602      	mov	r2, r0
 8006792:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006796:	f7ff bb5a 	b.w	8005e4e <_dtoa_r+0x2e>
 800679a:	692a      	ldr	r2, [r5, #16]
 800679c:	3202      	adds	r2, #2
 800679e:	0092      	lsls	r2, r2, #2
 80067a0:	f105 010c 	add.w	r1, r5, #12
 80067a4:	300c      	adds	r0, #12
 80067a6:	f000 ffaf 	bl	8007708 <memcpy>
 80067aa:	2201      	movs	r2, #1
 80067ac:	4631      	mov	r1, r6
 80067ae:	4658      	mov	r0, fp
 80067b0:	f000 fc08 	bl	8006fc4 <__lshift>
 80067b4:	f10a 0301 	add.w	r3, sl, #1
 80067b8:	9307      	str	r3, [sp, #28]
 80067ba:	9b00      	ldr	r3, [sp, #0]
 80067bc:	4453      	add	r3, sl
 80067be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067c0:	9b02      	ldr	r3, [sp, #8]
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	462f      	mov	r7, r5
 80067c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80067ca:	4605      	mov	r5, r0
 80067cc:	9b07      	ldr	r3, [sp, #28]
 80067ce:	4621      	mov	r1, r4
 80067d0:	3b01      	subs	r3, #1
 80067d2:	4648      	mov	r0, r9
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	f7ff fa9a 	bl	8005d0e <quorem>
 80067da:	4639      	mov	r1, r7
 80067dc:	9002      	str	r0, [sp, #8]
 80067de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80067e2:	4648      	mov	r0, r9
 80067e4:	f000 fc5a 	bl	800709c <__mcmp>
 80067e8:	462a      	mov	r2, r5
 80067ea:	9008      	str	r0, [sp, #32]
 80067ec:	4621      	mov	r1, r4
 80067ee:	4658      	mov	r0, fp
 80067f0:	f000 fc70 	bl	80070d4 <__mdiff>
 80067f4:	68c2      	ldr	r2, [r0, #12]
 80067f6:	4606      	mov	r6, r0
 80067f8:	bb02      	cbnz	r2, 800683c <_dtoa_r+0xa1c>
 80067fa:	4601      	mov	r1, r0
 80067fc:	4648      	mov	r0, r9
 80067fe:	f000 fc4d 	bl	800709c <__mcmp>
 8006802:	4602      	mov	r2, r0
 8006804:	4631      	mov	r1, r6
 8006806:	4658      	mov	r0, fp
 8006808:	920e      	str	r2, [sp, #56]	@ 0x38
 800680a:	f000 fa0d 	bl	8006c28 <_Bfree>
 800680e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006810:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006812:	9e07      	ldr	r6, [sp, #28]
 8006814:	ea43 0102 	orr.w	r1, r3, r2
 8006818:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800681a:	4319      	orrs	r1, r3
 800681c:	d110      	bne.n	8006840 <_dtoa_r+0xa20>
 800681e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006822:	d029      	beq.n	8006878 <_dtoa_r+0xa58>
 8006824:	9b08      	ldr	r3, [sp, #32]
 8006826:	2b00      	cmp	r3, #0
 8006828:	dd02      	ble.n	8006830 <_dtoa_r+0xa10>
 800682a:	9b02      	ldr	r3, [sp, #8]
 800682c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006830:	9b00      	ldr	r3, [sp, #0]
 8006832:	f883 8000 	strb.w	r8, [r3]
 8006836:	e63f      	b.n	80064b8 <_dtoa_r+0x698>
 8006838:	4628      	mov	r0, r5
 800683a:	e7bb      	b.n	80067b4 <_dtoa_r+0x994>
 800683c:	2201      	movs	r2, #1
 800683e:	e7e1      	b.n	8006804 <_dtoa_r+0x9e4>
 8006840:	9b08      	ldr	r3, [sp, #32]
 8006842:	2b00      	cmp	r3, #0
 8006844:	db04      	blt.n	8006850 <_dtoa_r+0xa30>
 8006846:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006848:	430b      	orrs	r3, r1
 800684a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800684c:	430b      	orrs	r3, r1
 800684e:	d120      	bne.n	8006892 <_dtoa_r+0xa72>
 8006850:	2a00      	cmp	r2, #0
 8006852:	dded      	ble.n	8006830 <_dtoa_r+0xa10>
 8006854:	4649      	mov	r1, r9
 8006856:	2201      	movs	r2, #1
 8006858:	4658      	mov	r0, fp
 800685a:	f000 fbb3 	bl	8006fc4 <__lshift>
 800685e:	4621      	mov	r1, r4
 8006860:	4681      	mov	r9, r0
 8006862:	f000 fc1b 	bl	800709c <__mcmp>
 8006866:	2800      	cmp	r0, #0
 8006868:	dc03      	bgt.n	8006872 <_dtoa_r+0xa52>
 800686a:	d1e1      	bne.n	8006830 <_dtoa_r+0xa10>
 800686c:	f018 0f01 	tst.w	r8, #1
 8006870:	d0de      	beq.n	8006830 <_dtoa_r+0xa10>
 8006872:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006876:	d1d8      	bne.n	800682a <_dtoa_r+0xa0a>
 8006878:	9a00      	ldr	r2, [sp, #0]
 800687a:	2339      	movs	r3, #57	@ 0x39
 800687c:	7013      	strb	r3, [r2, #0]
 800687e:	4633      	mov	r3, r6
 8006880:	461e      	mov	r6, r3
 8006882:	3b01      	subs	r3, #1
 8006884:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006888:	2a39      	cmp	r2, #57	@ 0x39
 800688a:	d052      	beq.n	8006932 <_dtoa_r+0xb12>
 800688c:	3201      	adds	r2, #1
 800688e:	701a      	strb	r2, [r3, #0]
 8006890:	e612      	b.n	80064b8 <_dtoa_r+0x698>
 8006892:	2a00      	cmp	r2, #0
 8006894:	dd07      	ble.n	80068a6 <_dtoa_r+0xa86>
 8006896:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800689a:	d0ed      	beq.n	8006878 <_dtoa_r+0xa58>
 800689c:	9a00      	ldr	r2, [sp, #0]
 800689e:	f108 0301 	add.w	r3, r8, #1
 80068a2:	7013      	strb	r3, [r2, #0]
 80068a4:	e608      	b.n	80064b8 <_dtoa_r+0x698>
 80068a6:	9b07      	ldr	r3, [sp, #28]
 80068a8:	9a07      	ldr	r2, [sp, #28]
 80068aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80068ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d028      	beq.n	8006906 <_dtoa_r+0xae6>
 80068b4:	4649      	mov	r1, r9
 80068b6:	2300      	movs	r3, #0
 80068b8:	220a      	movs	r2, #10
 80068ba:	4658      	mov	r0, fp
 80068bc:	f000 f9d6 	bl	8006c6c <__multadd>
 80068c0:	42af      	cmp	r7, r5
 80068c2:	4681      	mov	r9, r0
 80068c4:	f04f 0300 	mov.w	r3, #0
 80068c8:	f04f 020a 	mov.w	r2, #10
 80068cc:	4639      	mov	r1, r7
 80068ce:	4658      	mov	r0, fp
 80068d0:	d107      	bne.n	80068e2 <_dtoa_r+0xac2>
 80068d2:	f000 f9cb 	bl	8006c6c <__multadd>
 80068d6:	4607      	mov	r7, r0
 80068d8:	4605      	mov	r5, r0
 80068da:	9b07      	ldr	r3, [sp, #28]
 80068dc:	3301      	adds	r3, #1
 80068de:	9307      	str	r3, [sp, #28]
 80068e0:	e774      	b.n	80067cc <_dtoa_r+0x9ac>
 80068e2:	f000 f9c3 	bl	8006c6c <__multadd>
 80068e6:	4629      	mov	r1, r5
 80068e8:	4607      	mov	r7, r0
 80068ea:	2300      	movs	r3, #0
 80068ec:	220a      	movs	r2, #10
 80068ee:	4658      	mov	r0, fp
 80068f0:	f000 f9bc 	bl	8006c6c <__multadd>
 80068f4:	4605      	mov	r5, r0
 80068f6:	e7f0      	b.n	80068da <_dtoa_r+0xaba>
 80068f8:	9b00      	ldr	r3, [sp, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	bfcc      	ite	gt
 80068fe:	461e      	movgt	r6, r3
 8006900:	2601      	movle	r6, #1
 8006902:	4456      	add	r6, sl
 8006904:	2700      	movs	r7, #0
 8006906:	4649      	mov	r1, r9
 8006908:	2201      	movs	r2, #1
 800690a:	4658      	mov	r0, fp
 800690c:	f000 fb5a 	bl	8006fc4 <__lshift>
 8006910:	4621      	mov	r1, r4
 8006912:	4681      	mov	r9, r0
 8006914:	f000 fbc2 	bl	800709c <__mcmp>
 8006918:	2800      	cmp	r0, #0
 800691a:	dcb0      	bgt.n	800687e <_dtoa_r+0xa5e>
 800691c:	d102      	bne.n	8006924 <_dtoa_r+0xb04>
 800691e:	f018 0f01 	tst.w	r8, #1
 8006922:	d1ac      	bne.n	800687e <_dtoa_r+0xa5e>
 8006924:	4633      	mov	r3, r6
 8006926:	461e      	mov	r6, r3
 8006928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800692c:	2a30      	cmp	r2, #48	@ 0x30
 800692e:	d0fa      	beq.n	8006926 <_dtoa_r+0xb06>
 8006930:	e5c2      	b.n	80064b8 <_dtoa_r+0x698>
 8006932:	459a      	cmp	sl, r3
 8006934:	d1a4      	bne.n	8006880 <_dtoa_r+0xa60>
 8006936:	9b04      	ldr	r3, [sp, #16]
 8006938:	3301      	adds	r3, #1
 800693a:	9304      	str	r3, [sp, #16]
 800693c:	2331      	movs	r3, #49	@ 0x31
 800693e:	f88a 3000 	strb.w	r3, [sl]
 8006942:	e5b9      	b.n	80064b8 <_dtoa_r+0x698>
 8006944:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006946:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80069a4 <_dtoa_r+0xb84>
 800694a:	b11b      	cbz	r3, 8006954 <_dtoa_r+0xb34>
 800694c:	f10a 0308 	add.w	r3, sl, #8
 8006950:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006952:	6013      	str	r3, [r2, #0]
 8006954:	4650      	mov	r0, sl
 8006956:	b019      	add	sp, #100	@ 0x64
 8006958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800695c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800695e:	2b01      	cmp	r3, #1
 8006960:	f77f ae37 	ble.w	80065d2 <_dtoa_r+0x7b2>
 8006964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006966:	930a      	str	r3, [sp, #40]	@ 0x28
 8006968:	2001      	movs	r0, #1
 800696a:	e655      	b.n	8006618 <_dtoa_r+0x7f8>
 800696c:	9b00      	ldr	r3, [sp, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	f77f aed6 	ble.w	8006720 <_dtoa_r+0x900>
 8006974:	4656      	mov	r6, sl
 8006976:	4621      	mov	r1, r4
 8006978:	4648      	mov	r0, r9
 800697a:	f7ff f9c8 	bl	8005d0e <quorem>
 800697e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006982:	f806 8b01 	strb.w	r8, [r6], #1
 8006986:	9b00      	ldr	r3, [sp, #0]
 8006988:	eba6 020a 	sub.w	r2, r6, sl
 800698c:	4293      	cmp	r3, r2
 800698e:	ddb3      	ble.n	80068f8 <_dtoa_r+0xad8>
 8006990:	4649      	mov	r1, r9
 8006992:	2300      	movs	r3, #0
 8006994:	220a      	movs	r2, #10
 8006996:	4658      	mov	r0, fp
 8006998:	f000 f968 	bl	8006c6c <__multadd>
 800699c:	4681      	mov	r9, r0
 800699e:	e7ea      	b.n	8006976 <_dtoa_r+0xb56>
 80069a0:	080083fc 	.word	0x080083fc
 80069a4:	08008380 	.word	0x08008380

080069a8 <_free_r>:
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	4605      	mov	r5, r0
 80069ac:	2900      	cmp	r1, #0
 80069ae:	d041      	beq.n	8006a34 <_free_r+0x8c>
 80069b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069b4:	1f0c      	subs	r4, r1, #4
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	bfb8      	it	lt
 80069ba:	18e4      	addlt	r4, r4, r3
 80069bc:	f000 f8e8 	bl	8006b90 <__malloc_lock>
 80069c0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a38 <_free_r+0x90>)
 80069c2:	6813      	ldr	r3, [r2, #0]
 80069c4:	b933      	cbnz	r3, 80069d4 <_free_r+0x2c>
 80069c6:	6063      	str	r3, [r4, #4]
 80069c8:	6014      	str	r4, [r2, #0]
 80069ca:	4628      	mov	r0, r5
 80069cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069d0:	f000 b8e4 	b.w	8006b9c <__malloc_unlock>
 80069d4:	42a3      	cmp	r3, r4
 80069d6:	d908      	bls.n	80069ea <_free_r+0x42>
 80069d8:	6820      	ldr	r0, [r4, #0]
 80069da:	1821      	adds	r1, r4, r0
 80069dc:	428b      	cmp	r3, r1
 80069de:	bf01      	itttt	eq
 80069e0:	6819      	ldreq	r1, [r3, #0]
 80069e2:	685b      	ldreq	r3, [r3, #4]
 80069e4:	1809      	addeq	r1, r1, r0
 80069e6:	6021      	streq	r1, [r4, #0]
 80069e8:	e7ed      	b.n	80069c6 <_free_r+0x1e>
 80069ea:	461a      	mov	r2, r3
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	b10b      	cbz	r3, 80069f4 <_free_r+0x4c>
 80069f0:	42a3      	cmp	r3, r4
 80069f2:	d9fa      	bls.n	80069ea <_free_r+0x42>
 80069f4:	6811      	ldr	r1, [r2, #0]
 80069f6:	1850      	adds	r0, r2, r1
 80069f8:	42a0      	cmp	r0, r4
 80069fa:	d10b      	bne.n	8006a14 <_free_r+0x6c>
 80069fc:	6820      	ldr	r0, [r4, #0]
 80069fe:	4401      	add	r1, r0
 8006a00:	1850      	adds	r0, r2, r1
 8006a02:	4283      	cmp	r3, r0
 8006a04:	6011      	str	r1, [r2, #0]
 8006a06:	d1e0      	bne.n	80069ca <_free_r+0x22>
 8006a08:	6818      	ldr	r0, [r3, #0]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	6053      	str	r3, [r2, #4]
 8006a0e:	4408      	add	r0, r1
 8006a10:	6010      	str	r0, [r2, #0]
 8006a12:	e7da      	b.n	80069ca <_free_r+0x22>
 8006a14:	d902      	bls.n	8006a1c <_free_r+0x74>
 8006a16:	230c      	movs	r3, #12
 8006a18:	602b      	str	r3, [r5, #0]
 8006a1a:	e7d6      	b.n	80069ca <_free_r+0x22>
 8006a1c:	6820      	ldr	r0, [r4, #0]
 8006a1e:	1821      	adds	r1, r4, r0
 8006a20:	428b      	cmp	r3, r1
 8006a22:	bf04      	itt	eq
 8006a24:	6819      	ldreq	r1, [r3, #0]
 8006a26:	685b      	ldreq	r3, [r3, #4]
 8006a28:	6063      	str	r3, [r4, #4]
 8006a2a:	bf04      	itt	eq
 8006a2c:	1809      	addeq	r1, r1, r0
 8006a2e:	6021      	streq	r1, [r4, #0]
 8006a30:	6054      	str	r4, [r2, #4]
 8006a32:	e7ca      	b.n	80069ca <_free_r+0x22>
 8006a34:	bd38      	pop	{r3, r4, r5, pc}
 8006a36:	bf00      	nop
 8006a38:	2000048c 	.word	0x2000048c

08006a3c <malloc>:
 8006a3c:	4b02      	ldr	r3, [pc, #8]	@ (8006a48 <malloc+0xc>)
 8006a3e:	4601      	mov	r1, r0
 8006a40:	6818      	ldr	r0, [r3, #0]
 8006a42:	f000 b825 	b.w	8006a90 <_malloc_r>
 8006a46:	bf00      	nop
 8006a48:	20000018 	.word	0x20000018

08006a4c <sbrk_aligned>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	4e0f      	ldr	r6, [pc, #60]	@ (8006a8c <sbrk_aligned+0x40>)
 8006a50:	460c      	mov	r4, r1
 8006a52:	6831      	ldr	r1, [r6, #0]
 8006a54:	4605      	mov	r5, r0
 8006a56:	b911      	cbnz	r1, 8006a5e <sbrk_aligned+0x12>
 8006a58:	f000 fe46 	bl	80076e8 <_sbrk_r>
 8006a5c:	6030      	str	r0, [r6, #0]
 8006a5e:	4621      	mov	r1, r4
 8006a60:	4628      	mov	r0, r5
 8006a62:	f000 fe41 	bl	80076e8 <_sbrk_r>
 8006a66:	1c43      	adds	r3, r0, #1
 8006a68:	d103      	bne.n	8006a72 <sbrk_aligned+0x26>
 8006a6a:	f04f 34ff 	mov.w	r4, #4294967295
 8006a6e:	4620      	mov	r0, r4
 8006a70:	bd70      	pop	{r4, r5, r6, pc}
 8006a72:	1cc4      	adds	r4, r0, #3
 8006a74:	f024 0403 	bic.w	r4, r4, #3
 8006a78:	42a0      	cmp	r0, r4
 8006a7a:	d0f8      	beq.n	8006a6e <sbrk_aligned+0x22>
 8006a7c:	1a21      	subs	r1, r4, r0
 8006a7e:	4628      	mov	r0, r5
 8006a80:	f000 fe32 	bl	80076e8 <_sbrk_r>
 8006a84:	3001      	adds	r0, #1
 8006a86:	d1f2      	bne.n	8006a6e <sbrk_aligned+0x22>
 8006a88:	e7ef      	b.n	8006a6a <sbrk_aligned+0x1e>
 8006a8a:	bf00      	nop
 8006a8c:	20000488 	.word	0x20000488

08006a90 <_malloc_r>:
 8006a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a94:	1ccd      	adds	r5, r1, #3
 8006a96:	f025 0503 	bic.w	r5, r5, #3
 8006a9a:	3508      	adds	r5, #8
 8006a9c:	2d0c      	cmp	r5, #12
 8006a9e:	bf38      	it	cc
 8006aa0:	250c      	movcc	r5, #12
 8006aa2:	2d00      	cmp	r5, #0
 8006aa4:	4606      	mov	r6, r0
 8006aa6:	db01      	blt.n	8006aac <_malloc_r+0x1c>
 8006aa8:	42a9      	cmp	r1, r5
 8006aaa:	d904      	bls.n	8006ab6 <_malloc_r+0x26>
 8006aac:	230c      	movs	r3, #12
 8006aae:	6033      	str	r3, [r6, #0]
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ab6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b8c <_malloc_r+0xfc>
 8006aba:	f000 f869 	bl	8006b90 <__malloc_lock>
 8006abe:	f8d8 3000 	ldr.w	r3, [r8]
 8006ac2:	461c      	mov	r4, r3
 8006ac4:	bb44      	cbnz	r4, 8006b18 <_malloc_r+0x88>
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	4630      	mov	r0, r6
 8006aca:	f7ff ffbf 	bl	8006a4c <sbrk_aligned>
 8006ace:	1c43      	adds	r3, r0, #1
 8006ad0:	4604      	mov	r4, r0
 8006ad2:	d158      	bne.n	8006b86 <_malloc_r+0xf6>
 8006ad4:	f8d8 4000 	ldr.w	r4, [r8]
 8006ad8:	4627      	mov	r7, r4
 8006ada:	2f00      	cmp	r7, #0
 8006adc:	d143      	bne.n	8006b66 <_malloc_r+0xd6>
 8006ade:	2c00      	cmp	r4, #0
 8006ae0:	d04b      	beq.n	8006b7a <_malloc_r+0xea>
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	4639      	mov	r1, r7
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	eb04 0903 	add.w	r9, r4, r3
 8006aec:	f000 fdfc 	bl	80076e8 <_sbrk_r>
 8006af0:	4581      	cmp	r9, r0
 8006af2:	d142      	bne.n	8006b7a <_malloc_r+0xea>
 8006af4:	6821      	ldr	r1, [r4, #0]
 8006af6:	1a6d      	subs	r5, r5, r1
 8006af8:	4629      	mov	r1, r5
 8006afa:	4630      	mov	r0, r6
 8006afc:	f7ff ffa6 	bl	8006a4c <sbrk_aligned>
 8006b00:	3001      	adds	r0, #1
 8006b02:	d03a      	beq.n	8006b7a <_malloc_r+0xea>
 8006b04:	6823      	ldr	r3, [r4, #0]
 8006b06:	442b      	add	r3, r5
 8006b08:	6023      	str	r3, [r4, #0]
 8006b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8006b0e:	685a      	ldr	r2, [r3, #4]
 8006b10:	bb62      	cbnz	r2, 8006b6c <_malloc_r+0xdc>
 8006b12:	f8c8 7000 	str.w	r7, [r8]
 8006b16:	e00f      	b.n	8006b38 <_malloc_r+0xa8>
 8006b18:	6822      	ldr	r2, [r4, #0]
 8006b1a:	1b52      	subs	r2, r2, r5
 8006b1c:	d420      	bmi.n	8006b60 <_malloc_r+0xd0>
 8006b1e:	2a0b      	cmp	r2, #11
 8006b20:	d917      	bls.n	8006b52 <_malloc_r+0xc2>
 8006b22:	1961      	adds	r1, r4, r5
 8006b24:	42a3      	cmp	r3, r4
 8006b26:	6025      	str	r5, [r4, #0]
 8006b28:	bf18      	it	ne
 8006b2a:	6059      	strne	r1, [r3, #4]
 8006b2c:	6863      	ldr	r3, [r4, #4]
 8006b2e:	bf08      	it	eq
 8006b30:	f8c8 1000 	streq.w	r1, [r8]
 8006b34:	5162      	str	r2, [r4, r5]
 8006b36:	604b      	str	r3, [r1, #4]
 8006b38:	4630      	mov	r0, r6
 8006b3a:	f000 f82f 	bl	8006b9c <__malloc_unlock>
 8006b3e:	f104 000b 	add.w	r0, r4, #11
 8006b42:	1d23      	adds	r3, r4, #4
 8006b44:	f020 0007 	bic.w	r0, r0, #7
 8006b48:	1ac2      	subs	r2, r0, r3
 8006b4a:	bf1c      	itt	ne
 8006b4c:	1a1b      	subne	r3, r3, r0
 8006b4e:	50a3      	strne	r3, [r4, r2]
 8006b50:	e7af      	b.n	8006ab2 <_malloc_r+0x22>
 8006b52:	6862      	ldr	r2, [r4, #4]
 8006b54:	42a3      	cmp	r3, r4
 8006b56:	bf0c      	ite	eq
 8006b58:	f8c8 2000 	streq.w	r2, [r8]
 8006b5c:	605a      	strne	r2, [r3, #4]
 8006b5e:	e7eb      	b.n	8006b38 <_malloc_r+0xa8>
 8006b60:	4623      	mov	r3, r4
 8006b62:	6864      	ldr	r4, [r4, #4]
 8006b64:	e7ae      	b.n	8006ac4 <_malloc_r+0x34>
 8006b66:	463c      	mov	r4, r7
 8006b68:	687f      	ldr	r7, [r7, #4]
 8006b6a:	e7b6      	b.n	8006ada <_malloc_r+0x4a>
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	42a3      	cmp	r3, r4
 8006b72:	d1fb      	bne.n	8006b6c <_malloc_r+0xdc>
 8006b74:	2300      	movs	r3, #0
 8006b76:	6053      	str	r3, [r2, #4]
 8006b78:	e7de      	b.n	8006b38 <_malloc_r+0xa8>
 8006b7a:	230c      	movs	r3, #12
 8006b7c:	6033      	str	r3, [r6, #0]
 8006b7e:	4630      	mov	r0, r6
 8006b80:	f000 f80c 	bl	8006b9c <__malloc_unlock>
 8006b84:	e794      	b.n	8006ab0 <_malloc_r+0x20>
 8006b86:	6005      	str	r5, [r0, #0]
 8006b88:	e7d6      	b.n	8006b38 <_malloc_r+0xa8>
 8006b8a:	bf00      	nop
 8006b8c:	2000048c 	.word	0x2000048c

08006b90 <__malloc_lock>:
 8006b90:	4801      	ldr	r0, [pc, #4]	@ (8006b98 <__malloc_lock+0x8>)
 8006b92:	f7ff b8ba 	b.w	8005d0a <__retarget_lock_acquire_recursive>
 8006b96:	bf00      	nop
 8006b98:	20000484 	.word	0x20000484

08006b9c <__malloc_unlock>:
 8006b9c:	4801      	ldr	r0, [pc, #4]	@ (8006ba4 <__malloc_unlock+0x8>)
 8006b9e:	f7ff b8b5 	b.w	8005d0c <__retarget_lock_release_recursive>
 8006ba2:	bf00      	nop
 8006ba4:	20000484 	.word	0x20000484

08006ba8 <_Balloc>:
 8006ba8:	b570      	push	{r4, r5, r6, lr}
 8006baa:	69c6      	ldr	r6, [r0, #28]
 8006bac:	4604      	mov	r4, r0
 8006bae:	460d      	mov	r5, r1
 8006bb0:	b976      	cbnz	r6, 8006bd0 <_Balloc+0x28>
 8006bb2:	2010      	movs	r0, #16
 8006bb4:	f7ff ff42 	bl	8006a3c <malloc>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	61e0      	str	r0, [r4, #28]
 8006bbc:	b920      	cbnz	r0, 8006bc8 <_Balloc+0x20>
 8006bbe:	4b18      	ldr	r3, [pc, #96]	@ (8006c20 <_Balloc+0x78>)
 8006bc0:	4818      	ldr	r0, [pc, #96]	@ (8006c24 <_Balloc+0x7c>)
 8006bc2:	216b      	movs	r1, #107	@ 0x6b
 8006bc4:	f000 fdae 	bl	8007724 <__assert_func>
 8006bc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bcc:	6006      	str	r6, [r0, #0]
 8006bce:	60c6      	str	r6, [r0, #12]
 8006bd0:	69e6      	ldr	r6, [r4, #28]
 8006bd2:	68f3      	ldr	r3, [r6, #12]
 8006bd4:	b183      	cbz	r3, 8006bf8 <_Balloc+0x50>
 8006bd6:	69e3      	ldr	r3, [r4, #28]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006bde:	b9b8      	cbnz	r0, 8006c10 <_Balloc+0x68>
 8006be0:	2101      	movs	r1, #1
 8006be2:	fa01 f605 	lsl.w	r6, r1, r5
 8006be6:	1d72      	adds	r2, r6, #5
 8006be8:	0092      	lsls	r2, r2, #2
 8006bea:	4620      	mov	r0, r4
 8006bec:	f000 fdb8 	bl	8007760 <_calloc_r>
 8006bf0:	b160      	cbz	r0, 8006c0c <_Balloc+0x64>
 8006bf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006bf6:	e00e      	b.n	8006c16 <_Balloc+0x6e>
 8006bf8:	2221      	movs	r2, #33	@ 0x21
 8006bfa:	2104      	movs	r1, #4
 8006bfc:	4620      	mov	r0, r4
 8006bfe:	f000 fdaf 	bl	8007760 <_calloc_r>
 8006c02:	69e3      	ldr	r3, [r4, #28]
 8006c04:	60f0      	str	r0, [r6, #12]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d1e4      	bne.n	8006bd6 <_Balloc+0x2e>
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	bd70      	pop	{r4, r5, r6, pc}
 8006c10:	6802      	ldr	r2, [r0, #0]
 8006c12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c16:	2300      	movs	r3, #0
 8006c18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c1c:	e7f7      	b.n	8006c0e <_Balloc+0x66>
 8006c1e:	bf00      	nop
 8006c20:	0800838d 	.word	0x0800838d
 8006c24:	0800840d 	.word	0x0800840d

08006c28 <_Bfree>:
 8006c28:	b570      	push	{r4, r5, r6, lr}
 8006c2a:	69c6      	ldr	r6, [r0, #28]
 8006c2c:	4605      	mov	r5, r0
 8006c2e:	460c      	mov	r4, r1
 8006c30:	b976      	cbnz	r6, 8006c50 <_Bfree+0x28>
 8006c32:	2010      	movs	r0, #16
 8006c34:	f7ff ff02 	bl	8006a3c <malloc>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	61e8      	str	r0, [r5, #28]
 8006c3c:	b920      	cbnz	r0, 8006c48 <_Bfree+0x20>
 8006c3e:	4b09      	ldr	r3, [pc, #36]	@ (8006c64 <_Bfree+0x3c>)
 8006c40:	4809      	ldr	r0, [pc, #36]	@ (8006c68 <_Bfree+0x40>)
 8006c42:	218f      	movs	r1, #143	@ 0x8f
 8006c44:	f000 fd6e 	bl	8007724 <__assert_func>
 8006c48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c4c:	6006      	str	r6, [r0, #0]
 8006c4e:	60c6      	str	r6, [r0, #12]
 8006c50:	b13c      	cbz	r4, 8006c62 <_Bfree+0x3a>
 8006c52:	69eb      	ldr	r3, [r5, #28]
 8006c54:	6862      	ldr	r2, [r4, #4]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c5c:	6021      	str	r1, [r4, #0]
 8006c5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c62:	bd70      	pop	{r4, r5, r6, pc}
 8006c64:	0800838d 	.word	0x0800838d
 8006c68:	0800840d 	.word	0x0800840d

08006c6c <__multadd>:
 8006c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c70:	690d      	ldr	r5, [r1, #16]
 8006c72:	4607      	mov	r7, r0
 8006c74:	460c      	mov	r4, r1
 8006c76:	461e      	mov	r6, r3
 8006c78:	f101 0c14 	add.w	ip, r1, #20
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	f8dc 3000 	ldr.w	r3, [ip]
 8006c82:	b299      	uxth	r1, r3
 8006c84:	fb02 6101 	mla	r1, r2, r1, r6
 8006c88:	0c1e      	lsrs	r6, r3, #16
 8006c8a:	0c0b      	lsrs	r3, r1, #16
 8006c8c:	fb02 3306 	mla	r3, r2, r6, r3
 8006c90:	b289      	uxth	r1, r1
 8006c92:	3001      	adds	r0, #1
 8006c94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c98:	4285      	cmp	r5, r0
 8006c9a:	f84c 1b04 	str.w	r1, [ip], #4
 8006c9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ca2:	dcec      	bgt.n	8006c7e <__multadd+0x12>
 8006ca4:	b30e      	cbz	r6, 8006cea <__multadd+0x7e>
 8006ca6:	68a3      	ldr	r3, [r4, #8]
 8006ca8:	42ab      	cmp	r3, r5
 8006caa:	dc19      	bgt.n	8006ce0 <__multadd+0x74>
 8006cac:	6861      	ldr	r1, [r4, #4]
 8006cae:	4638      	mov	r0, r7
 8006cb0:	3101      	adds	r1, #1
 8006cb2:	f7ff ff79 	bl	8006ba8 <_Balloc>
 8006cb6:	4680      	mov	r8, r0
 8006cb8:	b928      	cbnz	r0, 8006cc6 <__multadd+0x5a>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8006cf0 <__multadd+0x84>)
 8006cbe:	480d      	ldr	r0, [pc, #52]	@ (8006cf4 <__multadd+0x88>)
 8006cc0:	21ba      	movs	r1, #186	@ 0xba
 8006cc2:	f000 fd2f 	bl	8007724 <__assert_func>
 8006cc6:	6922      	ldr	r2, [r4, #16]
 8006cc8:	3202      	adds	r2, #2
 8006cca:	f104 010c 	add.w	r1, r4, #12
 8006cce:	0092      	lsls	r2, r2, #2
 8006cd0:	300c      	adds	r0, #12
 8006cd2:	f000 fd19 	bl	8007708 <memcpy>
 8006cd6:	4621      	mov	r1, r4
 8006cd8:	4638      	mov	r0, r7
 8006cda:	f7ff ffa5 	bl	8006c28 <_Bfree>
 8006cde:	4644      	mov	r4, r8
 8006ce0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006ce4:	3501      	adds	r5, #1
 8006ce6:	615e      	str	r6, [r3, #20]
 8006ce8:	6125      	str	r5, [r4, #16]
 8006cea:	4620      	mov	r0, r4
 8006cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cf0:	080083fc 	.word	0x080083fc
 8006cf4:	0800840d 	.word	0x0800840d

08006cf8 <__hi0bits>:
 8006cf8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	bf36      	itet	cc
 8006d00:	0403      	lslcc	r3, r0, #16
 8006d02:	2000      	movcs	r0, #0
 8006d04:	2010      	movcc	r0, #16
 8006d06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d0a:	bf3c      	itt	cc
 8006d0c:	021b      	lslcc	r3, r3, #8
 8006d0e:	3008      	addcc	r0, #8
 8006d10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d14:	bf3c      	itt	cc
 8006d16:	011b      	lslcc	r3, r3, #4
 8006d18:	3004      	addcc	r0, #4
 8006d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d1e:	bf3c      	itt	cc
 8006d20:	009b      	lslcc	r3, r3, #2
 8006d22:	3002      	addcc	r0, #2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	db05      	blt.n	8006d34 <__hi0bits+0x3c>
 8006d28:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006d2c:	f100 0001 	add.w	r0, r0, #1
 8006d30:	bf08      	it	eq
 8006d32:	2020      	moveq	r0, #32
 8006d34:	4770      	bx	lr

08006d36 <__lo0bits>:
 8006d36:	6803      	ldr	r3, [r0, #0]
 8006d38:	4602      	mov	r2, r0
 8006d3a:	f013 0007 	ands.w	r0, r3, #7
 8006d3e:	d00b      	beq.n	8006d58 <__lo0bits+0x22>
 8006d40:	07d9      	lsls	r1, r3, #31
 8006d42:	d421      	bmi.n	8006d88 <__lo0bits+0x52>
 8006d44:	0798      	lsls	r0, r3, #30
 8006d46:	bf49      	itett	mi
 8006d48:	085b      	lsrmi	r3, r3, #1
 8006d4a:	089b      	lsrpl	r3, r3, #2
 8006d4c:	2001      	movmi	r0, #1
 8006d4e:	6013      	strmi	r3, [r2, #0]
 8006d50:	bf5c      	itt	pl
 8006d52:	6013      	strpl	r3, [r2, #0]
 8006d54:	2002      	movpl	r0, #2
 8006d56:	4770      	bx	lr
 8006d58:	b299      	uxth	r1, r3
 8006d5a:	b909      	cbnz	r1, 8006d60 <__lo0bits+0x2a>
 8006d5c:	0c1b      	lsrs	r3, r3, #16
 8006d5e:	2010      	movs	r0, #16
 8006d60:	b2d9      	uxtb	r1, r3
 8006d62:	b909      	cbnz	r1, 8006d68 <__lo0bits+0x32>
 8006d64:	3008      	adds	r0, #8
 8006d66:	0a1b      	lsrs	r3, r3, #8
 8006d68:	0719      	lsls	r1, r3, #28
 8006d6a:	bf04      	itt	eq
 8006d6c:	091b      	lsreq	r3, r3, #4
 8006d6e:	3004      	addeq	r0, #4
 8006d70:	0799      	lsls	r1, r3, #30
 8006d72:	bf04      	itt	eq
 8006d74:	089b      	lsreq	r3, r3, #2
 8006d76:	3002      	addeq	r0, #2
 8006d78:	07d9      	lsls	r1, r3, #31
 8006d7a:	d403      	bmi.n	8006d84 <__lo0bits+0x4e>
 8006d7c:	085b      	lsrs	r3, r3, #1
 8006d7e:	f100 0001 	add.w	r0, r0, #1
 8006d82:	d003      	beq.n	8006d8c <__lo0bits+0x56>
 8006d84:	6013      	str	r3, [r2, #0]
 8006d86:	4770      	bx	lr
 8006d88:	2000      	movs	r0, #0
 8006d8a:	4770      	bx	lr
 8006d8c:	2020      	movs	r0, #32
 8006d8e:	4770      	bx	lr

08006d90 <__i2b>:
 8006d90:	b510      	push	{r4, lr}
 8006d92:	460c      	mov	r4, r1
 8006d94:	2101      	movs	r1, #1
 8006d96:	f7ff ff07 	bl	8006ba8 <_Balloc>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	b928      	cbnz	r0, 8006daa <__i2b+0x1a>
 8006d9e:	4b05      	ldr	r3, [pc, #20]	@ (8006db4 <__i2b+0x24>)
 8006da0:	4805      	ldr	r0, [pc, #20]	@ (8006db8 <__i2b+0x28>)
 8006da2:	f240 1145 	movw	r1, #325	@ 0x145
 8006da6:	f000 fcbd 	bl	8007724 <__assert_func>
 8006daa:	2301      	movs	r3, #1
 8006dac:	6144      	str	r4, [r0, #20]
 8006dae:	6103      	str	r3, [r0, #16]
 8006db0:	bd10      	pop	{r4, pc}
 8006db2:	bf00      	nop
 8006db4:	080083fc 	.word	0x080083fc
 8006db8:	0800840d 	.word	0x0800840d

08006dbc <__multiply>:
 8006dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc0:	4614      	mov	r4, r2
 8006dc2:	690a      	ldr	r2, [r1, #16]
 8006dc4:	6923      	ldr	r3, [r4, #16]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	bfa8      	it	ge
 8006dca:	4623      	movge	r3, r4
 8006dcc:	460f      	mov	r7, r1
 8006dce:	bfa4      	itt	ge
 8006dd0:	460c      	movge	r4, r1
 8006dd2:	461f      	movge	r7, r3
 8006dd4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006dd8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006ddc:	68a3      	ldr	r3, [r4, #8]
 8006dde:	6861      	ldr	r1, [r4, #4]
 8006de0:	eb0a 0609 	add.w	r6, sl, r9
 8006de4:	42b3      	cmp	r3, r6
 8006de6:	b085      	sub	sp, #20
 8006de8:	bfb8      	it	lt
 8006dea:	3101      	addlt	r1, #1
 8006dec:	f7ff fedc 	bl	8006ba8 <_Balloc>
 8006df0:	b930      	cbnz	r0, 8006e00 <__multiply+0x44>
 8006df2:	4602      	mov	r2, r0
 8006df4:	4b44      	ldr	r3, [pc, #272]	@ (8006f08 <__multiply+0x14c>)
 8006df6:	4845      	ldr	r0, [pc, #276]	@ (8006f0c <__multiply+0x150>)
 8006df8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006dfc:	f000 fc92 	bl	8007724 <__assert_func>
 8006e00:	f100 0514 	add.w	r5, r0, #20
 8006e04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e08:	462b      	mov	r3, r5
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	4543      	cmp	r3, r8
 8006e0e:	d321      	bcc.n	8006e54 <__multiply+0x98>
 8006e10:	f107 0114 	add.w	r1, r7, #20
 8006e14:	f104 0214 	add.w	r2, r4, #20
 8006e18:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006e1c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006e20:	9302      	str	r3, [sp, #8]
 8006e22:	1b13      	subs	r3, r2, r4
 8006e24:	3b15      	subs	r3, #21
 8006e26:	f023 0303 	bic.w	r3, r3, #3
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	f104 0715 	add.w	r7, r4, #21
 8006e30:	42ba      	cmp	r2, r7
 8006e32:	bf38      	it	cc
 8006e34:	2304      	movcc	r3, #4
 8006e36:	9301      	str	r3, [sp, #4]
 8006e38:	9b02      	ldr	r3, [sp, #8]
 8006e3a:	9103      	str	r1, [sp, #12]
 8006e3c:	428b      	cmp	r3, r1
 8006e3e:	d80c      	bhi.n	8006e5a <__multiply+0x9e>
 8006e40:	2e00      	cmp	r6, #0
 8006e42:	dd03      	ble.n	8006e4c <__multiply+0x90>
 8006e44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d05b      	beq.n	8006f04 <__multiply+0x148>
 8006e4c:	6106      	str	r6, [r0, #16]
 8006e4e:	b005      	add	sp, #20
 8006e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e54:	f843 2b04 	str.w	r2, [r3], #4
 8006e58:	e7d8      	b.n	8006e0c <__multiply+0x50>
 8006e5a:	f8b1 a000 	ldrh.w	sl, [r1]
 8006e5e:	f1ba 0f00 	cmp.w	sl, #0
 8006e62:	d024      	beq.n	8006eae <__multiply+0xf2>
 8006e64:	f104 0e14 	add.w	lr, r4, #20
 8006e68:	46a9      	mov	r9, r5
 8006e6a:	f04f 0c00 	mov.w	ip, #0
 8006e6e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006e72:	f8d9 3000 	ldr.w	r3, [r9]
 8006e76:	fa1f fb87 	uxth.w	fp, r7
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006e80:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006e84:	f8d9 7000 	ldr.w	r7, [r9]
 8006e88:	4463      	add	r3, ip
 8006e8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006e8e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006e92:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006e9c:	4572      	cmp	r2, lr
 8006e9e:	f849 3b04 	str.w	r3, [r9], #4
 8006ea2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006ea6:	d8e2      	bhi.n	8006e6e <__multiply+0xb2>
 8006ea8:	9b01      	ldr	r3, [sp, #4]
 8006eaa:	f845 c003 	str.w	ip, [r5, r3]
 8006eae:	9b03      	ldr	r3, [sp, #12]
 8006eb0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006eb4:	3104      	adds	r1, #4
 8006eb6:	f1b9 0f00 	cmp.w	r9, #0
 8006eba:	d021      	beq.n	8006f00 <__multiply+0x144>
 8006ebc:	682b      	ldr	r3, [r5, #0]
 8006ebe:	f104 0c14 	add.w	ip, r4, #20
 8006ec2:	46ae      	mov	lr, r5
 8006ec4:	f04f 0a00 	mov.w	sl, #0
 8006ec8:	f8bc b000 	ldrh.w	fp, [ip]
 8006ecc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006ed0:	fb09 770b 	mla	r7, r9, fp, r7
 8006ed4:	4457      	add	r7, sl
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006edc:	f84e 3b04 	str.w	r3, [lr], #4
 8006ee0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006ee4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ee8:	f8be 3000 	ldrh.w	r3, [lr]
 8006eec:	fb09 330a 	mla	r3, r9, sl, r3
 8006ef0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006ef4:	4562      	cmp	r2, ip
 8006ef6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006efa:	d8e5      	bhi.n	8006ec8 <__multiply+0x10c>
 8006efc:	9f01      	ldr	r7, [sp, #4]
 8006efe:	51eb      	str	r3, [r5, r7]
 8006f00:	3504      	adds	r5, #4
 8006f02:	e799      	b.n	8006e38 <__multiply+0x7c>
 8006f04:	3e01      	subs	r6, #1
 8006f06:	e79b      	b.n	8006e40 <__multiply+0x84>
 8006f08:	080083fc 	.word	0x080083fc
 8006f0c:	0800840d 	.word	0x0800840d

08006f10 <__pow5mult>:
 8006f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f14:	4615      	mov	r5, r2
 8006f16:	f012 0203 	ands.w	r2, r2, #3
 8006f1a:	4607      	mov	r7, r0
 8006f1c:	460e      	mov	r6, r1
 8006f1e:	d007      	beq.n	8006f30 <__pow5mult+0x20>
 8006f20:	4c25      	ldr	r4, [pc, #148]	@ (8006fb8 <__pow5mult+0xa8>)
 8006f22:	3a01      	subs	r2, #1
 8006f24:	2300      	movs	r3, #0
 8006f26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f2a:	f7ff fe9f 	bl	8006c6c <__multadd>
 8006f2e:	4606      	mov	r6, r0
 8006f30:	10ad      	asrs	r5, r5, #2
 8006f32:	d03d      	beq.n	8006fb0 <__pow5mult+0xa0>
 8006f34:	69fc      	ldr	r4, [r7, #28]
 8006f36:	b97c      	cbnz	r4, 8006f58 <__pow5mult+0x48>
 8006f38:	2010      	movs	r0, #16
 8006f3a:	f7ff fd7f 	bl	8006a3c <malloc>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	61f8      	str	r0, [r7, #28]
 8006f42:	b928      	cbnz	r0, 8006f50 <__pow5mult+0x40>
 8006f44:	4b1d      	ldr	r3, [pc, #116]	@ (8006fbc <__pow5mult+0xac>)
 8006f46:	481e      	ldr	r0, [pc, #120]	@ (8006fc0 <__pow5mult+0xb0>)
 8006f48:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006f4c:	f000 fbea 	bl	8007724 <__assert_func>
 8006f50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f54:	6004      	str	r4, [r0, #0]
 8006f56:	60c4      	str	r4, [r0, #12]
 8006f58:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006f5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f60:	b94c      	cbnz	r4, 8006f76 <__pow5mult+0x66>
 8006f62:	f240 2171 	movw	r1, #625	@ 0x271
 8006f66:	4638      	mov	r0, r7
 8006f68:	f7ff ff12 	bl	8006d90 <__i2b>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f72:	4604      	mov	r4, r0
 8006f74:	6003      	str	r3, [r0, #0]
 8006f76:	f04f 0900 	mov.w	r9, #0
 8006f7a:	07eb      	lsls	r3, r5, #31
 8006f7c:	d50a      	bpl.n	8006f94 <__pow5mult+0x84>
 8006f7e:	4631      	mov	r1, r6
 8006f80:	4622      	mov	r2, r4
 8006f82:	4638      	mov	r0, r7
 8006f84:	f7ff ff1a 	bl	8006dbc <__multiply>
 8006f88:	4631      	mov	r1, r6
 8006f8a:	4680      	mov	r8, r0
 8006f8c:	4638      	mov	r0, r7
 8006f8e:	f7ff fe4b 	bl	8006c28 <_Bfree>
 8006f92:	4646      	mov	r6, r8
 8006f94:	106d      	asrs	r5, r5, #1
 8006f96:	d00b      	beq.n	8006fb0 <__pow5mult+0xa0>
 8006f98:	6820      	ldr	r0, [r4, #0]
 8006f9a:	b938      	cbnz	r0, 8006fac <__pow5mult+0x9c>
 8006f9c:	4622      	mov	r2, r4
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	4638      	mov	r0, r7
 8006fa2:	f7ff ff0b 	bl	8006dbc <__multiply>
 8006fa6:	6020      	str	r0, [r4, #0]
 8006fa8:	f8c0 9000 	str.w	r9, [r0]
 8006fac:	4604      	mov	r4, r0
 8006fae:	e7e4      	b.n	8006f7a <__pow5mult+0x6a>
 8006fb0:	4630      	mov	r0, r6
 8006fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fb6:	bf00      	nop
 8006fb8:	08008468 	.word	0x08008468
 8006fbc:	0800838d 	.word	0x0800838d
 8006fc0:	0800840d 	.word	0x0800840d

08006fc4 <__lshift>:
 8006fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc8:	460c      	mov	r4, r1
 8006fca:	6849      	ldr	r1, [r1, #4]
 8006fcc:	6923      	ldr	r3, [r4, #16]
 8006fce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006fd2:	68a3      	ldr	r3, [r4, #8]
 8006fd4:	4607      	mov	r7, r0
 8006fd6:	4691      	mov	r9, r2
 8006fd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006fdc:	f108 0601 	add.w	r6, r8, #1
 8006fe0:	42b3      	cmp	r3, r6
 8006fe2:	db0b      	blt.n	8006ffc <__lshift+0x38>
 8006fe4:	4638      	mov	r0, r7
 8006fe6:	f7ff fddf 	bl	8006ba8 <_Balloc>
 8006fea:	4605      	mov	r5, r0
 8006fec:	b948      	cbnz	r0, 8007002 <__lshift+0x3e>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	4b28      	ldr	r3, [pc, #160]	@ (8007094 <__lshift+0xd0>)
 8006ff2:	4829      	ldr	r0, [pc, #164]	@ (8007098 <__lshift+0xd4>)
 8006ff4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006ff8:	f000 fb94 	bl	8007724 <__assert_func>
 8006ffc:	3101      	adds	r1, #1
 8006ffe:	005b      	lsls	r3, r3, #1
 8007000:	e7ee      	b.n	8006fe0 <__lshift+0x1c>
 8007002:	2300      	movs	r3, #0
 8007004:	f100 0114 	add.w	r1, r0, #20
 8007008:	f100 0210 	add.w	r2, r0, #16
 800700c:	4618      	mov	r0, r3
 800700e:	4553      	cmp	r3, sl
 8007010:	db33      	blt.n	800707a <__lshift+0xb6>
 8007012:	6920      	ldr	r0, [r4, #16]
 8007014:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007018:	f104 0314 	add.w	r3, r4, #20
 800701c:	f019 091f 	ands.w	r9, r9, #31
 8007020:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007024:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007028:	d02b      	beq.n	8007082 <__lshift+0xbe>
 800702a:	f1c9 0e20 	rsb	lr, r9, #32
 800702e:	468a      	mov	sl, r1
 8007030:	2200      	movs	r2, #0
 8007032:	6818      	ldr	r0, [r3, #0]
 8007034:	fa00 f009 	lsl.w	r0, r0, r9
 8007038:	4310      	orrs	r0, r2
 800703a:	f84a 0b04 	str.w	r0, [sl], #4
 800703e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007042:	459c      	cmp	ip, r3
 8007044:	fa22 f20e 	lsr.w	r2, r2, lr
 8007048:	d8f3      	bhi.n	8007032 <__lshift+0x6e>
 800704a:	ebac 0304 	sub.w	r3, ip, r4
 800704e:	3b15      	subs	r3, #21
 8007050:	f023 0303 	bic.w	r3, r3, #3
 8007054:	3304      	adds	r3, #4
 8007056:	f104 0015 	add.w	r0, r4, #21
 800705a:	4584      	cmp	ip, r0
 800705c:	bf38      	it	cc
 800705e:	2304      	movcc	r3, #4
 8007060:	50ca      	str	r2, [r1, r3]
 8007062:	b10a      	cbz	r2, 8007068 <__lshift+0xa4>
 8007064:	f108 0602 	add.w	r6, r8, #2
 8007068:	3e01      	subs	r6, #1
 800706a:	4638      	mov	r0, r7
 800706c:	612e      	str	r6, [r5, #16]
 800706e:	4621      	mov	r1, r4
 8007070:	f7ff fdda 	bl	8006c28 <_Bfree>
 8007074:	4628      	mov	r0, r5
 8007076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800707a:	f842 0f04 	str.w	r0, [r2, #4]!
 800707e:	3301      	adds	r3, #1
 8007080:	e7c5      	b.n	800700e <__lshift+0x4a>
 8007082:	3904      	subs	r1, #4
 8007084:	f853 2b04 	ldr.w	r2, [r3], #4
 8007088:	f841 2f04 	str.w	r2, [r1, #4]!
 800708c:	459c      	cmp	ip, r3
 800708e:	d8f9      	bhi.n	8007084 <__lshift+0xc0>
 8007090:	e7ea      	b.n	8007068 <__lshift+0xa4>
 8007092:	bf00      	nop
 8007094:	080083fc 	.word	0x080083fc
 8007098:	0800840d 	.word	0x0800840d

0800709c <__mcmp>:
 800709c:	690a      	ldr	r2, [r1, #16]
 800709e:	4603      	mov	r3, r0
 80070a0:	6900      	ldr	r0, [r0, #16]
 80070a2:	1a80      	subs	r0, r0, r2
 80070a4:	b530      	push	{r4, r5, lr}
 80070a6:	d10e      	bne.n	80070c6 <__mcmp+0x2a>
 80070a8:	3314      	adds	r3, #20
 80070aa:	3114      	adds	r1, #20
 80070ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80070b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80070b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80070b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80070bc:	4295      	cmp	r5, r2
 80070be:	d003      	beq.n	80070c8 <__mcmp+0x2c>
 80070c0:	d205      	bcs.n	80070ce <__mcmp+0x32>
 80070c2:	f04f 30ff 	mov.w	r0, #4294967295
 80070c6:	bd30      	pop	{r4, r5, pc}
 80070c8:	42a3      	cmp	r3, r4
 80070ca:	d3f3      	bcc.n	80070b4 <__mcmp+0x18>
 80070cc:	e7fb      	b.n	80070c6 <__mcmp+0x2a>
 80070ce:	2001      	movs	r0, #1
 80070d0:	e7f9      	b.n	80070c6 <__mcmp+0x2a>
	...

080070d4 <__mdiff>:
 80070d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d8:	4689      	mov	r9, r1
 80070da:	4606      	mov	r6, r0
 80070dc:	4611      	mov	r1, r2
 80070de:	4648      	mov	r0, r9
 80070e0:	4614      	mov	r4, r2
 80070e2:	f7ff ffdb 	bl	800709c <__mcmp>
 80070e6:	1e05      	subs	r5, r0, #0
 80070e8:	d112      	bne.n	8007110 <__mdiff+0x3c>
 80070ea:	4629      	mov	r1, r5
 80070ec:	4630      	mov	r0, r6
 80070ee:	f7ff fd5b 	bl	8006ba8 <_Balloc>
 80070f2:	4602      	mov	r2, r0
 80070f4:	b928      	cbnz	r0, 8007102 <__mdiff+0x2e>
 80070f6:	4b3f      	ldr	r3, [pc, #252]	@ (80071f4 <__mdiff+0x120>)
 80070f8:	f240 2137 	movw	r1, #567	@ 0x237
 80070fc:	483e      	ldr	r0, [pc, #248]	@ (80071f8 <__mdiff+0x124>)
 80070fe:	f000 fb11 	bl	8007724 <__assert_func>
 8007102:	2301      	movs	r3, #1
 8007104:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007108:	4610      	mov	r0, r2
 800710a:	b003      	add	sp, #12
 800710c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007110:	bfbc      	itt	lt
 8007112:	464b      	movlt	r3, r9
 8007114:	46a1      	movlt	r9, r4
 8007116:	4630      	mov	r0, r6
 8007118:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800711c:	bfba      	itte	lt
 800711e:	461c      	movlt	r4, r3
 8007120:	2501      	movlt	r5, #1
 8007122:	2500      	movge	r5, #0
 8007124:	f7ff fd40 	bl	8006ba8 <_Balloc>
 8007128:	4602      	mov	r2, r0
 800712a:	b918      	cbnz	r0, 8007134 <__mdiff+0x60>
 800712c:	4b31      	ldr	r3, [pc, #196]	@ (80071f4 <__mdiff+0x120>)
 800712e:	f240 2145 	movw	r1, #581	@ 0x245
 8007132:	e7e3      	b.n	80070fc <__mdiff+0x28>
 8007134:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007138:	6926      	ldr	r6, [r4, #16]
 800713a:	60c5      	str	r5, [r0, #12]
 800713c:	f109 0310 	add.w	r3, r9, #16
 8007140:	f109 0514 	add.w	r5, r9, #20
 8007144:	f104 0e14 	add.w	lr, r4, #20
 8007148:	f100 0b14 	add.w	fp, r0, #20
 800714c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007150:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007154:	9301      	str	r3, [sp, #4]
 8007156:	46d9      	mov	r9, fp
 8007158:	f04f 0c00 	mov.w	ip, #0
 800715c:	9b01      	ldr	r3, [sp, #4]
 800715e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007162:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007166:	9301      	str	r3, [sp, #4]
 8007168:	fa1f f38a 	uxth.w	r3, sl
 800716c:	4619      	mov	r1, r3
 800716e:	b283      	uxth	r3, r0
 8007170:	1acb      	subs	r3, r1, r3
 8007172:	0c00      	lsrs	r0, r0, #16
 8007174:	4463      	add	r3, ip
 8007176:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800717a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800717e:	b29b      	uxth	r3, r3
 8007180:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007184:	4576      	cmp	r6, lr
 8007186:	f849 3b04 	str.w	r3, [r9], #4
 800718a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800718e:	d8e5      	bhi.n	800715c <__mdiff+0x88>
 8007190:	1b33      	subs	r3, r6, r4
 8007192:	3b15      	subs	r3, #21
 8007194:	f023 0303 	bic.w	r3, r3, #3
 8007198:	3415      	adds	r4, #21
 800719a:	3304      	adds	r3, #4
 800719c:	42a6      	cmp	r6, r4
 800719e:	bf38      	it	cc
 80071a0:	2304      	movcc	r3, #4
 80071a2:	441d      	add	r5, r3
 80071a4:	445b      	add	r3, fp
 80071a6:	461e      	mov	r6, r3
 80071a8:	462c      	mov	r4, r5
 80071aa:	4544      	cmp	r4, r8
 80071ac:	d30e      	bcc.n	80071cc <__mdiff+0xf8>
 80071ae:	f108 0103 	add.w	r1, r8, #3
 80071b2:	1b49      	subs	r1, r1, r5
 80071b4:	f021 0103 	bic.w	r1, r1, #3
 80071b8:	3d03      	subs	r5, #3
 80071ba:	45a8      	cmp	r8, r5
 80071bc:	bf38      	it	cc
 80071be:	2100      	movcc	r1, #0
 80071c0:	440b      	add	r3, r1
 80071c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80071c6:	b191      	cbz	r1, 80071ee <__mdiff+0x11a>
 80071c8:	6117      	str	r7, [r2, #16]
 80071ca:	e79d      	b.n	8007108 <__mdiff+0x34>
 80071cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80071d0:	46e6      	mov	lr, ip
 80071d2:	0c08      	lsrs	r0, r1, #16
 80071d4:	fa1c fc81 	uxtah	ip, ip, r1
 80071d8:	4471      	add	r1, lr
 80071da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80071de:	b289      	uxth	r1, r1
 80071e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80071e4:	f846 1b04 	str.w	r1, [r6], #4
 80071e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80071ec:	e7dd      	b.n	80071aa <__mdiff+0xd6>
 80071ee:	3f01      	subs	r7, #1
 80071f0:	e7e7      	b.n	80071c2 <__mdiff+0xee>
 80071f2:	bf00      	nop
 80071f4:	080083fc 	.word	0x080083fc
 80071f8:	0800840d 	.word	0x0800840d

080071fc <__d2b>:
 80071fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007200:	460f      	mov	r7, r1
 8007202:	2101      	movs	r1, #1
 8007204:	ec59 8b10 	vmov	r8, r9, d0
 8007208:	4616      	mov	r6, r2
 800720a:	f7ff fccd 	bl	8006ba8 <_Balloc>
 800720e:	4604      	mov	r4, r0
 8007210:	b930      	cbnz	r0, 8007220 <__d2b+0x24>
 8007212:	4602      	mov	r2, r0
 8007214:	4b23      	ldr	r3, [pc, #140]	@ (80072a4 <__d2b+0xa8>)
 8007216:	4824      	ldr	r0, [pc, #144]	@ (80072a8 <__d2b+0xac>)
 8007218:	f240 310f 	movw	r1, #783	@ 0x30f
 800721c:	f000 fa82 	bl	8007724 <__assert_func>
 8007220:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007224:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007228:	b10d      	cbz	r5, 800722e <__d2b+0x32>
 800722a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800722e:	9301      	str	r3, [sp, #4]
 8007230:	f1b8 0300 	subs.w	r3, r8, #0
 8007234:	d023      	beq.n	800727e <__d2b+0x82>
 8007236:	4668      	mov	r0, sp
 8007238:	9300      	str	r3, [sp, #0]
 800723a:	f7ff fd7c 	bl	8006d36 <__lo0bits>
 800723e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007242:	b1d0      	cbz	r0, 800727a <__d2b+0x7e>
 8007244:	f1c0 0320 	rsb	r3, r0, #32
 8007248:	fa02 f303 	lsl.w	r3, r2, r3
 800724c:	430b      	orrs	r3, r1
 800724e:	40c2      	lsrs	r2, r0
 8007250:	6163      	str	r3, [r4, #20]
 8007252:	9201      	str	r2, [sp, #4]
 8007254:	9b01      	ldr	r3, [sp, #4]
 8007256:	61a3      	str	r3, [r4, #24]
 8007258:	2b00      	cmp	r3, #0
 800725a:	bf0c      	ite	eq
 800725c:	2201      	moveq	r2, #1
 800725e:	2202      	movne	r2, #2
 8007260:	6122      	str	r2, [r4, #16]
 8007262:	b1a5      	cbz	r5, 800728e <__d2b+0x92>
 8007264:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007268:	4405      	add	r5, r0
 800726a:	603d      	str	r5, [r7, #0]
 800726c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007270:	6030      	str	r0, [r6, #0]
 8007272:	4620      	mov	r0, r4
 8007274:	b003      	add	sp, #12
 8007276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800727a:	6161      	str	r1, [r4, #20]
 800727c:	e7ea      	b.n	8007254 <__d2b+0x58>
 800727e:	a801      	add	r0, sp, #4
 8007280:	f7ff fd59 	bl	8006d36 <__lo0bits>
 8007284:	9b01      	ldr	r3, [sp, #4]
 8007286:	6163      	str	r3, [r4, #20]
 8007288:	3020      	adds	r0, #32
 800728a:	2201      	movs	r2, #1
 800728c:	e7e8      	b.n	8007260 <__d2b+0x64>
 800728e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007292:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007296:	6038      	str	r0, [r7, #0]
 8007298:	6918      	ldr	r0, [r3, #16]
 800729a:	f7ff fd2d 	bl	8006cf8 <__hi0bits>
 800729e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80072a2:	e7e5      	b.n	8007270 <__d2b+0x74>
 80072a4:	080083fc 	.word	0x080083fc
 80072a8:	0800840d 	.word	0x0800840d

080072ac <__ssputs_r>:
 80072ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072b0:	688e      	ldr	r6, [r1, #8]
 80072b2:	461f      	mov	r7, r3
 80072b4:	42be      	cmp	r6, r7
 80072b6:	680b      	ldr	r3, [r1, #0]
 80072b8:	4682      	mov	sl, r0
 80072ba:	460c      	mov	r4, r1
 80072bc:	4690      	mov	r8, r2
 80072be:	d82d      	bhi.n	800731c <__ssputs_r+0x70>
 80072c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80072c8:	d026      	beq.n	8007318 <__ssputs_r+0x6c>
 80072ca:	6965      	ldr	r5, [r4, #20]
 80072cc:	6909      	ldr	r1, [r1, #16]
 80072ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072d2:	eba3 0901 	sub.w	r9, r3, r1
 80072d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072da:	1c7b      	adds	r3, r7, #1
 80072dc:	444b      	add	r3, r9
 80072de:	106d      	asrs	r5, r5, #1
 80072e0:	429d      	cmp	r5, r3
 80072e2:	bf38      	it	cc
 80072e4:	461d      	movcc	r5, r3
 80072e6:	0553      	lsls	r3, r2, #21
 80072e8:	d527      	bpl.n	800733a <__ssputs_r+0x8e>
 80072ea:	4629      	mov	r1, r5
 80072ec:	f7ff fbd0 	bl	8006a90 <_malloc_r>
 80072f0:	4606      	mov	r6, r0
 80072f2:	b360      	cbz	r0, 800734e <__ssputs_r+0xa2>
 80072f4:	6921      	ldr	r1, [r4, #16]
 80072f6:	464a      	mov	r2, r9
 80072f8:	f000 fa06 	bl	8007708 <memcpy>
 80072fc:	89a3      	ldrh	r3, [r4, #12]
 80072fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007306:	81a3      	strh	r3, [r4, #12]
 8007308:	6126      	str	r6, [r4, #16]
 800730a:	6165      	str	r5, [r4, #20]
 800730c:	444e      	add	r6, r9
 800730e:	eba5 0509 	sub.w	r5, r5, r9
 8007312:	6026      	str	r6, [r4, #0]
 8007314:	60a5      	str	r5, [r4, #8]
 8007316:	463e      	mov	r6, r7
 8007318:	42be      	cmp	r6, r7
 800731a:	d900      	bls.n	800731e <__ssputs_r+0x72>
 800731c:	463e      	mov	r6, r7
 800731e:	6820      	ldr	r0, [r4, #0]
 8007320:	4632      	mov	r2, r6
 8007322:	4641      	mov	r1, r8
 8007324:	f000 f9c6 	bl	80076b4 <memmove>
 8007328:	68a3      	ldr	r3, [r4, #8]
 800732a:	1b9b      	subs	r3, r3, r6
 800732c:	60a3      	str	r3, [r4, #8]
 800732e:	6823      	ldr	r3, [r4, #0]
 8007330:	4433      	add	r3, r6
 8007332:	6023      	str	r3, [r4, #0]
 8007334:	2000      	movs	r0, #0
 8007336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800733a:	462a      	mov	r2, r5
 800733c:	f000 fa36 	bl	80077ac <_realloc_r>
 8007340:	4606      	mov	r6, r0
 8007342:	2800      	cmp	r0, #0
 8007344:	d1e0      	bne.n	8007308 <__ssputs_r+0x5c>
 8007346:	6921      	ldr	r1, [r4, #16]
 8007348:	4650      	mov	r0, sl
 800734a:	f7ff fb2d 	bl	80069a8 <_free_r>
 800734e:	230c      	movs	r3, #12
 8007350:	f8ca 3000 	str.w	r3, [sl]
 8007354:	89a3      	ldrh	r3, [r4, #12]
 8007356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800735a:	81a3      	strh	r3, [r4, #12]
 800735c:	f04f 30ff 	mov.w	r0, #4294967295
 8007360:	e7e9      	b.n	8007336 <__ssputs_r+0x8a>
	...

08007364 <_svfiprintf_r>:
 8007364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007368:	4698      	mov	r8, r3
 800736a:	898b      	ldrh	r3, [r1, #12]
 800736c:	061b      	lsls	r3, r3, #24
 800736e:	b09d      	sub	sp, #116	@ 0x74
 8007370:	4607      	mov	r7, r0
 8007372:	460d      	mov	r5, r1
 8007374:	4614      	mov	r4, r2
 8007376:	d510      	bpl.n	800739a <_svfiprintf_r+0x36>
 8007378:	690b      	ldr	r3, [r1, #16]
 800737a:	b973      	cbnz	r3, 800739a <_svfiprintf_r+0x36>
 800737c:	2140      	movs	r1, #64	@ 0x40
 800737e:	f7ff fb87 	bl	8006a90 <_malloc_r>
 8007382:	6028      	str	r0, [r5, #0]
 8007384:	6128      	str	r0, [r5, #16]
 8007386:	b930      	cbnz	r0, 8007396 <_svfiprintf_r+0x32>
 8007388:	230c      	movs	r3, #12
 800738a:	603b      	str	r3, [r7, #0]
 800738c:	f04f 30ff 	mov.w	r0, #4294967295
 8007390:	b01d      	add	sp, #116	@ 0x74
 8007392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007396:	2340      	movs	r3, #64	@ 0x40
 8007398:	616b      	str	r3, [r5, #20]
 800739a:	2300      	movs	r3, #0
 800739c:	9309      	str	r3, [sp, #36]	@ 0x24
 800739e:	2320      	movs	r3, #32
 80073a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80073a8:	2330      	movs	r3, #48	@ 0x30
 80073aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007548 <_svfiprintf_r+0x1e4>
 80073ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073b2:	f04f 0901 	mov.w	r9, #1
 80073b6:	4623      	mov	r3, r4
 80073b8:	469a      	mov	sl, r3
 80073ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073be:	b10a      	cbz	r2, 80073c4 <_svfiprintf_r+0x60>
 80073c0:	2a25      	cmp	r2, #37	@ 0x25
 80073c2:	d1f9      	bne.n	80073b8 <_svfiprintf_r+0x54>
 80073c4:	ebba 0b04 	subs.w	fp, sl, r4
 80073c8:	d00b      	beq.n	80073e2 <_svfiprintf_r+0x7e>
 80073ca:	465b      	mov	r3, fp
 80073cc:	4622      	mov	r2, r4
 80073ce:	4629      	mov	r1, r5
 80073d0:	4638      	mov	r0, r7
 80073d2:	f7ff ff6b 	bl	80072ac <__ssputs_r>
 80073d6:	3001      	adds	r0, #1
 80073d8:	f000 80a7 	beq.w	800752a <_svfiprintf_r+0x1c6>
 80073dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073de:	445a      	add	r2, fp
 80073e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80073e2:	f89a 3000 	ldrb.w	r3, [sl]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	f000 809f 	beq.w	800752a <_svfiprintf_r+0x1c6>
 80073ec:	2300      	movs	r3, #0
 80073ee:	f04f 32ff 	mov.w	r2, #4294967295
 80073f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073f6:	f10a 0a01 	add.w	sl, sl, #1
 80073fa:	9304      	str	r3, [sp, #16]
 80073fc:	9307      	str	r3, [sp, #28]
 80073fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007402:	931a      	str	r3, [sp, #104]	@ 0x68
 8007404:	4654      	mov	r4, sl
 8007406:	2205      	movs	r2, #5
 8007408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800740c:	484e      	ldr	r0, [pc, #312]	@ (8007548 <_svfiprintf_r+0x1e4>)
 800740e:	f7f8 fee7 	bl	80001e0 <memchr>
 8007412:	9a04      	ldr	r2, [sp, #16]
 8007414:	b9d8      	cbnz	r0, 800744e <_svfiprintf_r+0xea>
 8007416:	06d0      	lsls	r0, r2, #27
 8007418:	bf44      	itt	mi
 800741a:	2320      	movmi	r3, #32
 800741c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007420:	0711      	lsls	r1, r2, #28
 8007422:	bf44      	itt	mi
 8007424:	232b      	movmi	r3, #43	@ 0x2b
 8007426:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800742a:	f89a 3000 	ldrb.w	r3, [sl]
 800742e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007430:	d015      	beq.n	800745e <_svfiprintf_r+0xfa>
 8007432:	9a07      	ldr	r2, [sp, #28]
 8007434:	4654      	mov	r4, sl
 8007436:	2000      	movs	r0, #0
 8007438:	f04f 0c0a 	mov.w	ip, #10
 800743c:	4621      	mov	r1, r4
 800743e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007442:	3b30      	subs	r3, #48	@ 0x30
 8007444:	2b09      	cmp	r3, #9
 8007446:	d94b      	bls.n	80074e0 <_svfiprintf_r+0x17c>
 8007448:	b1b0      	cbz	r0, 8007478 <_svfiprintf_r+0x114>
 800744a:	9207      	str	r2, [sp, #28]
 800744c:	e014      	b.n	8007478 <_svfiprintf_r+0x114>
 800744e:	eba0 0308 	sub.w	r3, r0, r8
 8007452:	fa09 f303 	lsl.w	r3, r9, r3
 8007456:	4313      	orrs	r3, r2
 8007458:	9304      	str	r3, [sp, #16]
 800745a:	46a2      	mov	sl, r4
 800745c:	e7d2      	b.n	8007404 <_svfiprintf_r+0xa0>
 800745e:	9b03      	ldr	r3, [sp, #12]
 8007460:	1d19      	adds	r1, r3, #4
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	9103      	str	r1, [sp, #12]
 8007466:	2b00      	cmp	r3, #0
 8007468:	bfbb      	ittet	lt
 800746a:	425b      	neglt	r3, r3
 800746c:	f042 0202 	orrlt.w	r2, r2, #2
 8007470:	9307      	strge	r3, [sp, #28]
 8007472:	9307      	strlt	r3, [sp, #28]
 8007474:	bfb8      	it	lt
 8007476:	9204      	strlt	r2, [sp, #16]
 8007478:	7823      	ldrb	r3, [r4, #0]
 800747a:	2b2e      	cmp	r3, #46	@ 0x2e
 800747c:	d10a      	bne.n	8007494 <_svfiprintf_r+0x130>
 800747e:	7863      	ldrb	r3, [r4, #1]
 8007480:	2b2a      	cmp	r3, #42	@ 0x2a
 8007482:	d132      	bne.n	80074ea <_svfiprintf_r+0x186>
 8007484:	9b03      	ldr	r3, [sp, #12]
 8007486:	1d1a      	adds	r2, r3, #4
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	9203      	str	r2, [sp, #12]
 800748c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007490:	3402      	adds	r4, #2
 8007492:	9305      	str	r3, [sp, #20]
 8007494:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007558 <_svfiprintf_r+0x1f4>
 8007498:	7821      	ldrb	r1, [r4, #0]
 800749a:	2203      	movs	r2, #3
 800749c:	4650      	mov	r0, sl
 800749e:	f7f8 fe9f 	bl	80001e0 <memchr>
 80074a2:	b138      	cbz	r0, 80074b4 <_svfiprintf_r+0x150>
 80074a4:	9b04      	ldr	r3, [sp, #16]
 80074a6:	eba0 000a 	sub.w	r0, r0, sl
 80074aa:	2240      	movs	r2, #64	@ 0x40
 80074ac:	4082      	lsls	r2, r0
 80074ae:	4313      	orrs	r3, r2
 80074b0:	3401      	adds	r4, #1
 80074b2:	9304      	str	r3, [sp, #16]
 80074b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b8:	4824      	ldr	r0, [pc, #144]	@ (800754c <_svfiprintf_r+0x1e8>)
 80074ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074be:	2206      	movs	r2, #6
 80074c0:	f7f8 fe8e 	bl	80001e0 <memchr>
 80074c4:	2800      	cmp	r0, #0
 80074c6:	d036      	beq.n	8007536 <_svfiprintf_r+0x1d2>
 80074c8:	4b21      	ldr	r3, [pc, #132]	@ (8007550 <_svfiprintf_r+0x1ec>)
 80074ca:	bb1b      	cbnz	r3, 8007514 <_svfiprintf_r+0x1b0>
 80074cc:	9b03      	ldr	r3, [sp, #12]
 80074ce:	3307      	adds	r3, #7
 80074d0:	f023 0307 	bic.w	r3, r3, #7
 80074d4:	3308      	adds	r3, #8
 80074d6:	9303      	str	r3, [sp, #12]
 80074d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074da:	4433      	add	r3, r6
 80074dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80074de:	e76a      	b.n	80073b6 <_svfiprintf_r+0x52>
 80074e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80074e4:	460c      	mov	r4, r1
 80074e6:	2001      	movs	r0, #1
 80074e8:	e7a8      	b.n	800743c <_svfiprintf_r+0xd8>
 80074ea:	2300      	movs	r3, #0
 80074ec:	3401      	adds	r4, #1
 80074ee:	9305      	str	r3, [sp, #20]
 80074f0:	4619      	mov	r1, r3
 80074f2:	f04f 0c0a 	mov.w	ip, #10
 80074f6:	4620      	mov	r0, r4
 80074f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074fc:	3a30      	subs	r2, #48	@ 0x30
 80074fe:	2a09      	cmp	r2, #9
 8007500:	d903      	bls.n	800750a <_svfiprintf_r+0x1a6>
 8007502:	2b00      	cmp	r3, #0
 8007504:	d0c6      	beq.n	8007494 <_svfiprintf_r+0x130>
 8007506:	9105      	str	r1, [sp, #20]
 8007508:	e7c4      	b.n	8007494 <_svfiprintf_r+0x130>
 800750a:	fb0c 2101 	mla	r1, ip, r1, r2
 800750e:	4604      	mov	r4, r0
 8007510:	2301      	movs	r3, #1
 8007512:	e7f0      	b.n	80074f6 <_svfiprintf_r+0x192>
 8007514:	ab03      	add	r3, sp, #12
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	462a      	mov	r2, r5
 800751a:	4b0e      	ldr	r3, [pc, #56]	@ (8007554 <_svfiprintf_r+0x1f0>)
 800751c:	a904      	add	r1, sp, #16
 800751e:	4638      	mov	r0, r7
 8007520:	f7fd fe64 	bl	80051ec <_printf_float>
 8007524:	1c42      	adds	r2, r0, #1
 8007526:	4606      	mov	r6, r0
 8007528:	d1d6      	bne.n	80074d8 <_svfiprintf_r+0x174>
 800752a:	89ab      	ldrh	r3, [r5, #12]
 800752c:	065b      	lsls	r3, r3, #25
 800752e:	f53f af2d 	bmi.w	800738c <_svfiprintf_r+0x28>
 8007532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007534:	e72c      	b.n	8007390 <_svfiprintf_r+0x2c>
 8007536:	ab03      	add	r3, sp, #12
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	462a      	mov	r2, r5
 800753c:	4b05      	ldr	r3, [pc, #20]	@ (8007554 <_svfiprintf_r+0x1f0>)
 800753e:	a904      	add	r1, sp, #16
 8007540:	4638      	mov	r0, r7
 8007542:	f7fe f8eb 	bl	800571c <_printf_i>
 8007546:	e7ed      	b.n	8007524 <_svfiprintf_r+0x1c0>
 8007548:	08008568 	.word	0x08008568
 800754c:	08008572 	.word	0x08008572
 8007550:	080051ed 	.word	0x080051ed
 8007554:	080072ad 	.word	0x080072ad
 8007558:	0800856e 	.word	0x0800856e

0800755c <__sflush_r>:
 800755c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007564:	0716      	lsls	r6, r2, #28
 8007566:	4605      	mov	r5, r0
 8007568:	460c      	mov	r4, r1
 800756a:	d454      	bmi.n	8007616 <__sflush_r+0xba>
 800756c:	684b      	ldr	r3, [r1, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	dc02      	bgt.n	8007578 <__sflush_r+0x1c>
 8007572:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007574:	2b00      	cmp	r3, #0
 8007576:	dd48      	ble.n	800760a <__sflush_r+0xae>
 8007578:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800757a:	2e00      	cmp	r6, #0
 800757c:	d045      	beq.n	800760a <__sflush_r+0xae>
 800757e:	2300      	movs	r3, #0
 8007580:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007584:	682f      	ldr	r7, [r5, #0]
 8007586:	6a21      	ldr	r1, [r4, #32]
 8007588:	602b      	str	r3, [r5, #0]
 800758a:	d030      	beq.n	80075ee <__sflush_r+0x92>
 800758c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	0759      	lsls	r1, r3, #29
 8007592:	d505      	bpl.n	80075a0 <__sflush_r+0x44>
 8007594:	6863      	ldr	r3, [r4, #4]
 8007596:	1ad2      	subs	r2, r2, r3
 8007598:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800759a:	b10b      	cbz	r3, 80075a0 <__sflush_r+0x44>
 800759c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800759e:	1ad2      	subs	r2, r2, r3
 80075a0:	2300      	movs	r3, #0
 80075a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075a4:	6a21      	ldr	r1, [r4, #32]
 80075a6:	4628      	mov	r0, r5
 80075a8:	47b0      	blx	r6
 80075aa:	1c43      	adds	r3, r0, #1
 80075ac:	89a3      	ldrh	r3, [r4, #12]
 80075ae:	d106      	bne.n	80075be <__sflush_r+0x62>
 80075b0:	6829      	ldr	r1, [r5, #0]
 80075b2:	291d      	cmp	r1, #29
 80075b4:	d82b      	bhi.n	800760e <__sflush_r+0xb2>
 80075b6:	4a2a      	ldr	r2, [pc, #168]	@ (8007660 <__sflush_r+0x104>)
 80075b8:	410a      	asrs	r2, r1
 80075ba:	07d6      	lsls	r6, r2, #31
 80075bc:	d427      	bmi.n	800760e <__sflush_r+0xb2>
 80075be:	2200      	movs	r2, #0
 80075c0:	6062      	str	r2, [r4, #4]
 80075c2:	04d9      	lsls	r1, r3, #19
 80075c4:	6922      	ldr	r2, [r4, #16]
 80075c6:	6022      	str	r2, [r4, #0]
 80075c8:	d504      	bpl.n	80075d4 <__sflush_r+0x78>
 80075ca:	1c42      	adds	r2, r0, #1
 80075cc:	d101      	bne.n	80075d2 <__sflush_r+0x76>
 80075ce:	682b      	ldr	r3, [r5, #0]
 80075d0:	b903      	cbnz	r3, 80075d4 <__sflush_r+0x78>
 80075d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80075d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075d6:	602f      	str	r7, [r5, #0]
 80075d8:	b1b9      	cbz	r1, 800760a <__sflush_r+0xae>
 80075da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075de:	4299      	cmp	r1, r3
 80075e0:	d002      	beq.n	80075e8 <__sflush_r+0x8c>
 80075e2:	4628      	mov	r0, r5
 80075e4:	f7ff f9e0 	bl	80069a8 <_free_r>
 80075e8:	2300      	movs	r3, #0
 80075ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80075ec:	e00d      	b.n	800760a <__sflush_r+0xae>
 80075ee:	2301      	movs	r3, #1
 80075f0:	4628      	mov	r0, r5
 80075f2:	47b0      	blx	r6
 80075f4:	4602      	mov	r2, r0
 80075f6:	1c50      	adds	r0, r2, #1
 80075f8:	d1c9      	bne.n	800758e <__sflush_r+0x32>
 80075fa:	682b      	ldr	r3, [r5, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d0c6      	beq.n	800758e <__sflush_r+0x32>
 8007600:	2b1d      	cmp	r3, #29
 8007602:	d001      	beq.n	8007608 <__sflush_r+0xac>
 8007604:	2b16      	cmp	r3, #22
 8007606:	d11e      	bne.n	8007646 <__sflush_r+0xea>
 8007608:	602f      	str	r7, [r5, #0]
 800760a:	2000      	movs	r0, #0
 800760c:	e022      	b.n	8007654 <__sflush_r+0xf8>
 800760e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007612:	b21b      	sxth	r3, r3
 8007614:	e01b      	b.n	800764e <__sflush_r+0xf2>
 8007616:	690f      	ldr	r7, [r1, #16]
 8007618:	2f00      	cmp	r7, #0
 800761a:	d0f6      	beq.n	800760a <__sflush_r+0xae>
 800761c:	0793      	lsls	r3, r2, #30
 800761e:	680e      	ldr	r6, [r1, #0]
 8007620:	bf08      	it	eq
 8007622:	694b      	ldreq	r3, [r1, #20]
 8007624:	600f      	str	r7, [r1, #0]
 8007626:	bf18      	it	ne
 8007628:	2300      	movne	r3, #0
 800762a:	eba6 0807 	sub.w	r8, r6, r7
 800762e:	608b      	str	r3, [r1, #8]
 8007630:	f1b8 0f00 	cmp.w	r8, #0
 8007634:	dde9      	ble.n	800760a <__sflush_r+0xae>
 8007636:	6a21      	ldr	r1, [r4, #32]
 8007638:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800763a:	4643      	mov	r3, r8
 800763c:	463a      	mov	r2, r7
 800763e:	4628      	mov	r0, r5
 8007640:	47b0      	blx	r6
 8007642:	2800      	cmp	r0, #0
 8007644:	dc08      	bgt.n	8007658 <__sflush_r+0xfc>
 8007646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800764a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800764e:	81a3      	strh	r3, [r4, #12]
 8007650:	f04f 30ff 	mov.w	r0, #4294967295
 8007654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007658:	4407      	add	r7, r0
 800765a:	eba8 0800 	sub.w	r8, r8, r0
 800765e:	e7e7      	b.n	8007630 <__sflush_r+0xd4>
 8007660:	dfbffffe 	.word	0xdfbffffe

08007664 <_fflush_r>:
 8007664:	b538      	push	{r3, r4, r5, lr}
 8007666:	690b      	ldr	r3, [r1, #16]
 8007668:	4605      	mov	r5, r0
 800766a:	460c      	mov	r4, r1
 800766c:	b913      	cbnz	r3, 8007674 <_fflush_r+0x10>
 800766e:	2500      	movs	r5, #0
 8007670:	4628      	mov	r0, r5
 8007672:	bd38      	pop	{r3, r4, r5, pc}
 8007674:	b118      	cbz	r0, 800767e <_fflush_r+0x1a>
 8007676:	6a03      	ldr	r3, [r0, #32]
 8007678:	b90b      	cbnz	r3, 800767e <_fflush_r+0x1a>
 800767a:	f7fe f9fb 	bl	8005a74 <__sinit>
 800767e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d0f3      	beq.n	800766e <_fflush_r+0xa>
 8007686:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007688:	07d0      	lsls	r0, r2, #31
 800768a:	d404      	bmi.n	8007696 <_fflush_r+0x32>
 800768c:	0599      	lsls	r1, r3, #22
 800768e:	d402      	bmi.n	8007696 <_fflush_r+0x32>
 8007690:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007692:	f7fe fb3a 	bl	8005d0a <__retarget_lock_acquire_recursive>
 8007696:	4628      	mov	r0, r5
 8007698:	4621      	mov	r1, r4
 800769a:	f7ff ff5f 	bl	800755c <__sflush_r>
 800769e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076a0:	07da      	lsls	r2, r3, #31
 80076a2:	4605      	mov	r5, r0
 80076a4:	d4e4      	bmi.n	8007670 <_fflush_r+0xc>
 80076a6:	89a3      	ldrh	r3, [r4, #12]
 80076a8:	059b      	lsls	r3, r3, #22
 80076aa:	d4e1      	bmi.n	8007670 <_fflush_r+0xc>
 80076ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076ae:	f7fe fb2d 	bl	8005d0c <__retarget_lock_release_recursive>
 80076b2:	e7dd      	b.n	8007670 <_fflush_r+0xc>

080076b4 <memmove>:
 80076b4:	4288      	cmp	r0, r1
 80076b6:	b510      	push	{r4, lr}
 80076b8:	eb01 0402 	add.w	r4, r1, r2
 80076bc:	d902      	bls.n	80076c4 <memmove+0x10>
 80076be:	4284      	cmp	r4, r0
 80076c0:	4623      	mov	r3, r4
 80076c2:	d807      	bhi.n	80076d4 <memmove+0x20>
 80076c4:	1e43      	subs	r3, r0, #1
 80076c6:	42a1      	cmp	r1, r4
 80076c8:	d008      	beq.n	80076dc <memmove+0x28>
 80076ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076d2:	e7f8      	b.n	80076c6 <memmove+0x12>
 80076d4:	4402      	add	r2, r0
 80076d6:	4601      	mov	r1, r0
 80076d8:	428a      	cmp	r2, r1
 80076da:	d100      	bne.n	80076de <memmove+0x2a>
 80076dc:	bd10      	pop	{r4, pc}
 80076de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076e6:	e7f7      	b.n	80076d8 <memmove+0x24>

080076e8 <_sbrk_r>:
 80076e8:	b538      	push	{r3, r4, r5, lr}
 80076ea:	4d06      	ldr	r5, [pc, #24]	@ (8007704 <_sbrk_r+0x1c>)
 80076ec:	2300      	movs	r3, #0
 80076ee:	4604      	mov	r4, r0
 80076f0:	4608      	mov	r0, r1
 80076f2:	602b      	str	r3, [r5, #0]
 80076f4:	f7fa fc98 	bl	8002028 <_sbrk>
 80076f8:	1c43      	adds	r3, r0, #1
 80076fa:	d102      	bne.n	8007702 <_sbrk_r+0x1a>
 80076fc:	682b      	ldr	r3, [r5, #0]
 80076fe:	b103      	cbz	r3, 8007702 <_sbrk_r+0x1a>
 8007700:	6023      	str	r3, [r4, #0]
 8007702:	bd38      	pop	{r3, r4, r5, pc}
 8007704:	20000480 	.word	0x20000480

08007708 <memcpy>:
 8007708:	440a      	add	r2, r1
 800770a:	4291      	cmp	r1, r2
 800770c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007710:	d100      	bne.n	8007714 <memcpy+0xc>
 8007712:	4770      	bx	lr
 8007714:	b510      	push	{r4, lr}
 8007716:	f811 4b01 	ldrb.w	r4, [r1], #1
 800771a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800771e:	4291      	cmp	r1, r2
 8007720:	d1f9      	bne.n	8007716 <memcpy+0xe>
 8007722:	bd10      	pop	{r4, pc}

08007724 <__assert_func>:
 8007724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007726:	4614      	mov	r4, r2
 8007728:	461a      	mov	r2, r3
 800772a:	4b09      	ldr	r3, [pc, #36]	@ (8007750 <__assert_func+0x2c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4605      	mov	r5, r0
 8007730:	68d8      	ldr	r0, [r3, #12]
 8007732:	b954      	cbnz	r4, 800774a <__assert_func+0x26>
 8007734:	4b07      	ldr	r3, [pc, #28]	@ (8007754 <__assert_func+0x30>)
 8007736:	461c      	mov	r4, r3
 8007738:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800773c:	9100      	str	r1, [sp, #0]
 800773e:	462b      	mov	r3, r5
 8007740:	4905      	ldr	r1, [pc, #20]	@ (8007758 <__assert_func+0x34>)
 8007742:	f000 f86f 	bl	8007824 <fiprintf>
 8007746:	f000 f87f 	bl	8007848 <abort>
 800774a:	4b04      	ldr	r3, [pc, #16]	@ (800775c <__assert_func+0x38>)
 800774c:	e7f4      	b.n	8007738 <__assert_func+0x14>
 800774e:	bf00      	nop
 8007750:	20000018 	.word	0x20000018
 8007754:	080085be 	.word	0x080085be
 8007758:	08008590 	.word	0x08008590
 800775c:	08008583 	.word	0x08008583

08007760 <_calloc_r>:
 8007760:	b570      	push	{r4, r5, r6, lr}
 8007762:	fba1 5402 	umull	r5, r4, r1, r2
 8007766:	b93c      	cbnz	r4, 8007778 <_calloc_r+0x18>
 8007768:	4629      	mov	r1, r5
 800776a:	f7ff f991 	bl	8006a90 <_malloc_r>
 800776e:	4606      	mov	r6, r0
 8007770:	b928      	cbnz	r0, 800777e <_calloc_r+0x1e>
 8007772:	2600      	movs	r6, #0
 8007774:	4630      	mov	r0, r6
 8007776:	bd70      	pop	{r4, r5, r6, pc}
 8007778:	220c      	movs	r2, #12
 800777a:	6002      	str	r2, [r0, #0]
 800777c:	e7f9      	b.n	8007772 <_calloc_r+0x12>
 800777e:	462a      	mov	r2, r5
 8007780:	4621      	mov	r1, r4
 8007782:	f7fe fa44 	bl	8005c0e <memset>
 8007786:	e7f5      	b.n	8007774 <_calloc_r+0x14>

08007788 <__ascii_mbtowc>:
 8007788:	b082      	sub	sp, #8
 800778a:	b901      	cbnz	r1, 800778e <__ascii_mbtowc+0x6>
 800778c:	a901      	add	r1, sp, #4
 800778e:	b142      	cbz	r2, 80077a2 <__ascii_mbtowc+0x1a>
 8007790:	b14b      	cbz	r3, 80077a6 <__ascii_mbtowc+0x1e>
 8007792:	7813      	ldrb	r3, [r2, #0]
 8007794:	600b      	str	r3, [r1, #0]
 8007796:	7812      	ldrb	r2, [r2, #0]
 8007798:	1e10      	subs	r0, r2, #0
 800779a:	bf18      	it	ne
 800779c:	2001      	movne	r0, #1
 800779e:	b002      	add	sp, #8
 80077a0:	4770      	bx	lr
 80077a2:	4610      	mov	r0, r2
 80077a4:	e7fb      	b.n	800779e <__ascii_mbtowc+0x16>
 80077a6:	f06f 0001 	mvn.w	r0, #1
 80077aa:	e7f8      	b.n	800779e <__ascii_mbtowc+0x16>

080077ac <_realloc_r>:
 80077ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077b0:	4680      	mov	r8, r0
 80077b2:	4615      	mov	r5, r2
 80077b4:	460c      	mov	r4, r1
 80077b6:	b921      	cbnz	r1, 80077c2 <_realloc_r+0x16>
 80077b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077bc:	4611      	mov	r1, r2
 80077be:	f7ff b967 	b.w	8006a90 <_malloc_r>
 80077c2:	b92a      	cbnz	r2, 80077d0 <_realloc_r+0x24>
 80077c4:	f7ff f8f0 	bl	80069a8 <_free_r>
 80077c8:	2400      	movs	r4, #0
 80077ca:	4620      	mov	r0, r4
 80077cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077d0:	f000 f841 	bl	8007856 <_malloc_usable_size_r>
 80077d4:	4285      	cmp	r5, r0
 80077d6:	4606      	mov	r6, r0
 80077d8:	d802      	bhi.n	80077e0 <_realloc_r+0x34>
 80077da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80077de:	d8f4      	bhi.n	80077ca <_realloc_r+0x1e>
 80077e0:	4629      	mov	r1, r5
 80077e2:	4640      	mov	r0, r8
 80077e4:	f7ff f954 	bl	8006a90 <_malloc_r>
 80077e8:	4607      	mov	r7, r0
 80077ea:	2800      	cmp	r0, #0
 80077ec:	d0ec      	beq.n	80077c8 <_realloc_r+0x1c>
 80077ee:	42b5      	cmp	r5, r6
 80077f0:	462a      	mov	r2, r5
 80077f2:	4621      	mov	r1, r4
 80077f4:	bf28      	it	cs
 80077f6:	4632      	movcs	r2, r6
 80077f8:	f7ff ff86 	bl	8007708 <memcpy>
 80077fc:	4621      	mov	r1, r4
 80077fe:	4640      	mov	r0, r8
 8007800:	f7ff f8d2 	bl	80069a8 <_free_r>
 8007804:	463c      	mov	r4, r7
 8007806:	e7e0      	b.n	80077ca <_realloc_r+0x1e>

08007808 <__ascii_wctomb>:
 8007808:	4603      	mov	r3, r0
 800780a:	4608      	mov	r0, r1
 800780c:	b141      	cbz	r1, 8007820 <__ascii_wctomb+0x18>
 800780e:	2aff      	cmp	r2, #255	@ 0xff
 8007810:	d904      	bls.n	800781c <__ascii_wctomb+0x14>
 8007812:	228a      	movs	r2, #138	@ 0x8a
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	f04f 30ff 	mov.w	r0, #4294967295
 800781a:	4770      	bx	lr
 800781c:	700a      	strb	r2, [r1, #0]
 800781e:	2001      	movs	r0, #1
 8007820:	4770      	bx	lr
	...

08007824 <fiprintf>:
 8007824:	b40e      	push	{r1, r2, r3}
 8007826:	b503      	push	{r0, r1, lr}
 8007828:	4601      	mov	r1, r0
 800782a:	ab03      	add	r3, sp, #12
 800782c:	4805      	ldr	r0, [pc, #20]	@ (8007844 <fiprintf+0x20>)
 800782e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007832:	6800      	ldr	r0, [r0, #0]
 8007834:	9301      	str	r3, [sp, #4]
 8007836:	f000 f83f 	bl	80078b8 <_vfiprintf_r>
 800783a:	b002      	add	sp, #8
 800783c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007840:	b003      	add	sp, #12
 8007842:	4770      	bx	lr
 8007844:	20000018 	.word	0x20000018

08007848 <abort>:
 8007848:	b508      	push	{r3, lr}
 800784a:	2006      	movs	r0, #6
 800784c:	f000 fa08 	bl	8007c60 <raise>
 8007850:	2001      	movs	r0, #1
 8007852:	f7fa fb70 	bl	8001f36 <_exit>

08007856 <_malloc_usable_size_r>:
 8007856:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800785a:	1f18      	subs	r0, r3, #4
 800785c:	2b00      	cmp	r3, #0
 800785e:	bfbc      	itt	lt
 8007860:	580b      	ldrlt	r3, [r1, r0]
 8007862:	18c0      	addlt	r0, r0, r3
 8007864:	4770      	bx	lr

08007866 <__sfputc_r>:
 8007866:	6893      	ldr	r3, [r2, #8]
 8007868:	3b01      	subs	r3, #1
 800786a:	2b00      	cmp	r3, #0
 800786c:	b410      	push	{r4}
 800786e:	6093      	str	r3, [r2, #8]
 8007870:	da08      	bge.n	8007884 <__sfputc_r+0x1e>
 8007872:	6994      	ldr	r4, [r2, #24]
 8007874:	42a3      	cmp	r3, r4
 8007876:	db01      	blt.n	800787c <__sfputc_r+0x16>
 8007878:	290a      	cmp	r1, #10
 800787a:	d103      	bne.n	8007884 <__sfputc_r+0x1e>
 800787c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007880:	f000 b932 	b.w	8007ae8 <__swbuf_r>
 8007884:	6813      	ldr	r3, [r2, #0]
 8007886:	1c58      	adds	r0, r3, #1
 8007888:	6010      	str	r0, [r2, #0]
 800788a:	7019      	strb	r1, [r3, #0]
 800788c:	4608      	mov	r0, r1
 800788e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007892:	4770      	bx	lr

08007894 <__sfputs_r>:
 8007894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007896:	4606      	mov	r6, r0
 8007898:	460f      	mov	r7, r1
 800789a:	4614      	mov	r4, r2
 800789c:	18d5      	adds	r5, r2, r3
 800789e:	42ac      	cmp	r4, r5
 80078a0:	d101      	bne.n	80078a6 <__sfputs_r+0x12>
 80078a2:	2000      	movs	r0, #0
 80078a4:	e007      	b.n	80078b6 <__sfputs_r+0x22>
 80078a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078aa:	463a      	mov	r2, r7
 80078ac:	4630      	mov	r0, r6
 80078ae:	f7ff ffda 	bl	8007866 <__sfputc_r>
 80078b2:	1c43      	adds	r3, r0, #1
 80078b4:	d1f3      	bne.n	800789e <__sfputs_r+0xa>
 80078b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080078b8 <_vfiprintf_r>:
 80078b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078bc:	460d      	mov	r5, r1
 80078be:	b09d      	sub	sp, #116	@ 0x74
 80078c0:	4614      	mov	r4, r2
 80078c2:	4698      	mov	r8, r3
 80078c4:	4606      	mov	r6, r0
 80078c6:	b118      	cbz	r0, 80078d0 <_vfiprintf_r+0x18>
 80078c8:	6a03      	ldr	r3, [r0, #32]
 80078ca:	b90b      	cbnz	r3, 80078d0 <_vfiprintf_r+0x18>
 80078cc:	f7fe f8d2 	bl	8005a74 <__sinit>
 80078d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078d2:	07d9      	lsls	r1, r3, #31
 80078d4:	d405      	bmi.n	80078e2 <_vfiprintf_r+0x2a>
 80078d6:	89ab      	ldrh	r3, [r5, #12]
 80078d8:	059a      	lsls	r2, r3, #22
 80078da:	d402      	bmi.n	80078e2 <_vfiprintf_r+0x2a>
 80078dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078de:	f7fe fa14 	bl	8005d0a <__retarget_lock_acquire_recursive>
 80078e2:	89ab      	ldrh	r3, [r5, #12]
 80078e4:	071b      	lsls	r3, r3, #28
 80078e6:	d501      	bpl.n	80078ec <_vfiprintf_r+0x34>
 80078e8:	692b      	ldr	r3, [r5, #16]
 80078ea:	b99b      	cbnz	r3, 8007914 <_vfiprintf_r+0x5c>
 80078ec:	4629      	mov	r1, r5
 80078ee:	4630      	mov	r0, r6
 80078f0:	f000 f938 	bl	8007b64 <__swsetup_r>
 80078f4:	b170      	cbz	r0, 8007914 <_vfiprintf_r+0x5c>
 80078f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078f8:	07dc      	lsls	r4, r3, #31
 80078fa:	d504      	bpl.n	8007906 <_vfiprintf_r+0x4e>
 80078fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007900:	b01d      	add	sp, #116	@ 0x74
 8007902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007906:	89ab      	ldrh	r3, [r5, #12]
 8007908:	0598      	lsls	r0, r3, #22
 800790a:	d4f7      	bmi.n	80078fc <_vfiprintf_r+0x44>
 800790c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800790e:	f7fe f9fd 	bl	8005d0c <__retarget_lock_release_recursive>
 8007912:	e7f3      	b.n	80078fc <_vfiprintf_r+0x44>
 8007914:	2300      	movs	r3, #0
 8007916:	9309      	str	r3, [sp, #36]	@ 0x24
 8007918:	2320      	movs	r3, #32
 800791a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800791e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007922:	2330      	movs	r3, #48	@ 0x30
 8007924:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007ad4 <_vfiprintf_r+0x21c>
 8007928:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800792c:	f04f 0901 	mov.w	r9, #1
 8007930:	4623      	mov	r3, r4
 8007932:	469a      	mov	sl, r3
 8007934:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007938:	b10a      	cbz	r2, 800793e <_vfiprintf_r+0x86>
 800793a:	2a25      	cmp	r2, #37	@ 0x25
 800793c:	d1f9      	bne.n	8007932 <_vfiprintf_r+0x7a>
 800793e:	ebba 0b04 	subs.w	fp, sl, r4
 8007942:	d00b      	beq.n	800795c <_vfiprintf_r+0xa4>
 8007944:	465b      	mov	r3, fp
 8007946:	4622      	mov	r2, r4
 8007948:	4629      	mov	r1, r5
 800794a:	4630      	mov	r0, r6
 800794c:	f7ff ffa2 	bl	8007894 <__sfputs_r>
 8007950:	3001      	adds	r0, #1
 8007952:	f000 80a7 	beq.w	8007aa4 <_vfiprintf_r+0x1ec>
 8007956:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007958:	445a      	add	r2, fp
 800795a:	9209      	str	r2, [sp, #36]	@ 0x24
 800795c:	f89a 3000 	ldrb.w	r3, [sl]
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 809f 	beq.w	8007aa4 <_vfiprintf_r+0x1ec>
 8007966:	2300      	movs	r3, #0
 8007968:	f04f 32ff 	mov.w	r2, #4294967295
 800796c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007970:	f10a 0a01 	add.w	sl, sl, #1
 8007974:	9304      	str	r3, [sp, #16]
 8007976:	9307      	str	r3, [sp, #28]
 8007978:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800797c:	931a      	str	r3, [sp, #104]	@ 0x68
 800797e:	4654      	mov	r4, sl
 8007980:	2205      	movs	r2, #5
 8007982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007986:	4853      	ldr	r0, [pc, #332]	@ (8007ad4 <_vfiprintf_r+0x21c>)
 8007988:	f7f8 fc2a 	bl	80001e0 <memchr>
 800798c:	9a04      	ldr	r2, [sp, #16]
 800798e:	b9d8      	cbnz	r0, 80079c8 <_vfiprintf_r+0x110>
 8007990:	06d1      	lsls	r1, r2, #27
 8007992:	bf44      	itt	mi
 8007994:	2320      	movmi	r3, #32
 8007996:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800799a:	0713      	lsls	r3, r2, #28
 800799c:	bf44      	itt	mi
 800799e:	232b      	movmi	r3, #43	@ 0x2b
 80079a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079a4:	f89a 3000 	ldrb.w	r3, [sl]
 80079a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80079aa:	d015      	beq.n	80079d8 <_vfiprintf_r+0x120>
 80079ac:	9a07      	ldr	r2, [sp, #28]
 80079ae:	4654      	mov	r4, sl
 80079b0:	2000      	movs	r0, #0
 80079b2:	f04f 0c0a 	mov.w	ip, #10
 80079b6:	4621      	mov	r1, r4
 80079b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079bc:	3b30      	subs	r3, #48	@ 0x30
 80079be:	2b09      	cmp	r3, #9
 80079c0:	d94b      	bls.n	8007a5a <_vfiprintf_r+0x1a2>
 80079c2:	b1b0      	cbz	r0, 80079f2 <_vfiprintf_r+0x13a>
 80079c4:	9207      	str	r2, [sp, #28]
 80079c6:	e014      	b.n	80079f2 <_vfiprintf_r+0x13a>
 80079c8:	eba0 0308 	sub.w	r3, r0, r8
 80079cc:	fa09 f303 	lsl.w	r3, r9, r3
 80079d0:	4313      	orrs	r3, r2
 80079d2:	9304      	str	r3, [sp, #16]
 80079d4:	46a2      	mov	sl, r4
 80079d6:	e7d2      	b.n	800797e <_vfiprintf_r+0xc6>
 80079d8:	9b03      	ldr	r3, [sp, #12]
 80079da:	1d19      	adds	r1, r3, #4
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	9103      	str	r1, [sp, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	bfbb      	ittet	lt
 80079e4:	425b      	neglt	r3, r3
 80079e6:	f042 0202 	orrlt.w	r2, r2, #2
 80079ea:	9307      	strge	r3, [sp, #28]
 80079ec:	9307      	strlt	r3, [sp, #28]
 80079ee:	bfb8      	it	lt
 80079f0:	9204      	strlt	r2, [sp, #16]
 80079f2:	7823      	ldrb	r3, [r4, #0]
 80079f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80079f6:	d10a      	bne.n	8007a0e <_vfiprintf_r+0x156>
 80079f8:	7863      	ldrb	r3, [r4, #1]
 80079fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80079fc:	d132      	bne.n	8007a64 <_vfiprintf_r+0x1ac>
 80079fe:	9b03      	ldr	r3, [sp, #12]
 8007a00:	1d1a      	adds	r2, r3, #4
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	9203      	str	r2, [sp, #12]
 8007a06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a0a:	3402      	adds	r4, #2
 8007a0c:	9305      	str	r3, [sp, #20]
 8007a0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007ae4 <_vfiprintf_r+0x22c>
 8007a12:	7821      	ldrb	r1, [r4, #0]
 8007a14:	2203      	movs	r2, #3
 8007a16:	4650      	mov	r0, sl
 8007a18:	f7f8 fbe2 	bl	80001e0 <memchr>
 8007a1c:	b138      	cbz	r0, 8007a2e <_vfiprintf_r+0x176>
 8007a1e:	9b04      	ldr	r3, [sp, #16]
 8007a20:	eba0 000a 	sub.w	r0, r0, sl
 8007a24:	2240      	movs	r2, #64	@ 0x40
 8007a26:	4082      	lsls	r2, r0
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	3401      	adds	r4, #1
 8007a2c:	9304      	str	r3, [sp, #16]
 8007a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a32:	4829      	ldr	r0, [pc, #164]	@ (8007ad8 <_vfiprintf_r+0x220>)
 8007a34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a38:	2206      	movs	r2, #6
 8007a3a:	f7f8 fbd1 	bl	80001e0 <memchr>
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	d03f      	beq.n	8007ac2 <_vfiprintf_r+0x20a>
 8007a42:	4b26      	ldr	r3, [pc, #152]	@ (8007adc <_vfiprintf_r+0x224>)
 8007a44:	bb1b      	cbnz	r3, 8007a8e <_vfiprintf_r+0x1d6>
 8007a46:	9b03      	ldr	r3, [sp, #12]
 8007a48:	3307      	adds	r3, #7
 8007a4a:	f023 0307 	bic.w	r3, r3, #7
 8007a4e:	3308      	adds	r3, #8
 8007a50:	9303      	str	r3, [sp, #12]
 8007a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a54:	443b      	add	r3, r7
 8007a56:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a58:	e76a      	b.n	8007930 <_vfiprintf_r+0x78>
 8007a5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a5e:	460c      	mov	r4, r1
 8007a60:	2001      	movs	r0, #1
 8007a62:	e7a8      	b.n	80079b6 <_vfiprintf_r+0xfe>
 8007a64:	2300      	movs	r3, #0
 8007a66:	3401      	adds	r4, #1
 8007a68:	9305      	str	r3, [sp, #20]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	f04f 0c0a 	mov.w	ip, #10
 8007a70:	4620      	mov	r0, r4
 8007a72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a76:	3a30      	subs	r2, #48	@ 0x30
 8007a78:	2a09      	cmp	r2, #9
 8007a7a:	d903      	bls.n	8007a84 <_vfiprintf_r+0x1cc>
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d0c6      	beq.n	8007a0e <_vfiprintf_r+0x156>
 8007a80:	9105      	str	r1, [sp, #20]
 8007a82:	e7c4      	b.n	8007a0e <_vfiprintf_r+0x156>
 8007a84:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a88:	4604      	mov	r4, r0
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e7f0      	b.n	8007a70 <_vfiprintf_r+0x1b8>
 8007a8e:	ab03      	add	r3, sp, #12
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	462a      	mov	r2, r5
 8007a94:	4b12      	ldr	r3, [pc, #72]	@ (8007ae0 <_vfiprintf_r+0x228>)
 8007a96:	a904      	add	r1, sp, #16
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f7fd fba7 	bl	80051ec <_printf_float>
 8007a9e:	4607      	mov	r7, r0
 8007aa0:	1c78      	adds	r0, r7, #1
 8007aa2:	d1d6      	bne.n	8007a52 <_vfiprintf_r+0x19a>
 8007aa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007aa6:	07d9      	lsls	r1, r3, #31
 8007aa8:	d405      	bmi.n	8007ab6 <_vfiprintf_r+0x1fe>
 8007aaa:	89ab      	ldrh	r3, [r5, #12]
 8007aac:	059a      	lsls	r2, r3, #22
 8007aae:	d402      	bmi.n	8007ab6 <_vfiprintf_r+0x1fe>
 8007ab0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ab2:	f7fe f92b 	bl	8005d0c <__retarget_lock_release_recursive>
 8007ab6:	89ab      	ldrh	r3, [r5, #12]
 8007ab8:	065b      	lsls	r3, r3, #25
 8007aba:	f53f af1f 	bmi.w	80078fc <_vfiprintf_r+0x44>
 8007abe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ac0:	e71e      	b.n	8007900 <_vfiprintf_r+0x48>
 8007ac2:	ab03      	add	r3, sp, #12
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	462a      	mov	r2, r5
 8007ac8:	4b05      	ldr	r3, [pc, #20]	@ (8007ae0 <_vfiprintf_r+0x228>)
 8007aca:	a904      	add	r1, sp, #16
 8007acc:	4630      	mov	r0, r6
 8007ace:	f7fd fe25 	bl	800571c <_printf_i>
 8007ad2:	e7e4      	b.n	8007a9e <_vfiprintf_r+0x1e6>
 8007ad4:	08008568 	.word	0x08008568
 8007ad8:	08008572 	.word	0x08008572
 8007adc:	080051ed 	.word	0x080051ed
 8007ae0:	08007895 	.word	0x08007895
 8007ae4:	0800856e 	.word	0x0800856e

08007ae8 <__swbuf_r>:
 8007ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aea:	460e      	mov	r6, r1
 8007aec:	4614      	mov	r4, r2
 8007aee:	4605      	mov	r5, r0
 8007af0:	b118      	cbz	r0, 8007afa <__swbuf_r+0x12>
 8007af2:	6a03      	ldr	r3, [r0, #32]
 8007af4:	b90b      	cbnz	r3, 8007afa <__swbuf_r+0x12>
 8007af6:	f7fd ffbd 	bl	8005a74 <__sinit>
 8007afa:	69a3      	ldr	r3, [r4, #24]
 8007afc:	60a3      	str	r3, [r4, #8]
 8007afe:	89a3      	ldrh	r3, [r4, #12]
 8007b00:	071a      	lsls	r2, r3, #28
 8007b02:	d501      	bpl.n	8007b08 <__swbuf_r+0x20>
 8007b04:	6923      	ldr	r3, [r4, #16]
 8007b06:	b943      	cbnz	r3, 8007b1a <__swbuf_r+0x32>
 8007b08:	4621      	mov	r1, r4
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	f000 f82a 	bl	8007b64 <__swsetup_r>
 8007b10:	b118      	cbz	r0, 8007b1a <__swbuf_r+0x32>
 8007b12:	f04f 37ff 	mov.w	r7, #4294967295
 8007b16:	4638      	mov	r0, r7
 8007b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b1a:	6823      	ldr	r3, [r4, #0]
 8007b1c:	6922      	ldr	r2, [r4, #16]
 8007b1e:	1a98      	subs	r0, r3, r2
 8007b20:	6963      	ldr	r3, [r4, #20]
 8007b22:	b2f6      	uxtb	r6, r6
 8007b24:	4283      	cmp	r3, r0
 8007b26:	4637      	mov	r7, r6
 8007b28:	dc05      	bgt.n	8007b36 <__swbuf_r+0x4e>
 8007b2a:	4621      	mov	r1, r4
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	f7ff fd99 	bl	8007664 <_fflush_r>
 8007b32:	2800      	cmp	r0, #0
 8007b34:	d1ed      	bne.n	8007b12 <__swbuf_r+0x2a>
 8007b36:	68a3      	ldr	r3, [r4, #8]
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	60a3      	str	r3, [r4, #8]
 8007b3c:	6823      	ldr	r3, [r4, #0]
 8007b3e:	1c5a      	adds	r2, r3, #1
 8007b40:	6022      	str	r2, [r4, #0]
 8007b42:	701e      	strb	r6, [r3, #0]
 8007b44:	6962      	ldr	r2, [r4, #20]
 8007b46:	1c43      	adds	r3, r0, #1
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d004      	beq.n	8007b56 <__swbuf_r+0x6e>
 8007b4c:	89a3      	ldrh	r3, [r4, #12]
 8007b4e:	07db      	lsls	r3, r3, #31
 8007b50:	d5e1      	bpl.n	8007b16 <__swbuf_r+0x2e>
 8007b52:	2e0a      	cmp	r6, #10
 8007b54:	d1df      	bne.n	8007b16 <__swbuf_r+0x2e>
 8007b56:	4621      	mov	r1, r4
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f7ff fd83 	bl	8007664 <_fflush_r>
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d0d9      	beq.n	8007b16 <__swbuf_r+0x2e>
 8007b62:	e7d6      	b.n	8007b12 <__swbuf_r+0x2a>

08007b64 <__swsetup_r>:
 8007b64:	b538      	push	{r3, r4, r5, lr}
 8007b66:	4b29      	ldr	r3, [pc, #164]	@ (8007c0c <__swsetup_r+0xa8>)
 8007b68:	4605      	mov	r5, r0
 8007b6a:	6818      	ldr	r0, [r3, #0]
 8007b6c:	460c      	mov	r4, r1
 8007b6e:	b118      	cbz	r0, 8007b78 <__swsetup_r+0x14>
 8007b70:	6a03      	ldr	r3, [r0, #32]
 8007b72:	b90b      	cbnz	r3, 8007b78 <__swsetup_r+0x14>
 8007b74:	f7fd ff7e 	bl	8005a74 <__sinit>
 8007b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b7c:	0719      	lsls	r1, r3, #28
 8007b7e:	d422      	bmi.n	8007bc6 <__swsetup_r+0x62>
 8007b80:	06da      	lsls	r2, r3, #27
 8007b82:	d407      	bmi.n	8007b94 <__swsetup_r+0x30>
 8007b84:	2209      	movs	r2, #9
 8007b86:	602a      	str	r2, [r5, #0]
 8007b88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b8c:	81a3      	strh	r3, [r4, #12]
 8007b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b92:	e033      	b.n	8007bfc <__swsetup_r+0x98>
 8007b94:	0758      	lsls	r0, r3, #29
 8007b96:	d512      	bpl.n	8007bbe <__swsetup_r+0x5a>
 8007b98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b9a:	b141      	cbz	r1, 8007bae <__swsetup_r+0x4a>
 8007b9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ba0:	4299      	cmp	r1, r3
 8007ba2:	d002      	beq.n	8007baa <__swsetup_r+0x46>
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	f7fe feff 	bl	80069a8 <_free_r>
 8007baa:	2300      	movs	r3, #0
 8007bac:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bae:	89a3      	ldrh	r3, [r4, #12]
 8007bb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007bb4:	81a3      	strh	r3, [r4, #12]
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	6063      	str	r3, [r4, #4]
 8007bba:	6923      	ldr	r3, [r4, #16]
 8007bbc:	6023      	str	r3, [r4, #0]
 8007bbe:	89a3      	ldrh	r3, [r4, #12]
 8007bc0:	f043 0308 	orr.w	r3, r3, #8
 8007bc4:	81a3      	strh	r3, [r4, #12]
 8007bc6:	6923      	ldr	r3, [r4, #16]
 8007bc8:	b94b      	cbnz	r3, 8007bde <__swsetup_r+0x7a>
 8007bca:	89a3      	ldrh	r3, [r4, #12]
 8007bcc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007bd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bd4:	d003      	beq.n	8007bde <__swsetup_r+0x7a>
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	4628      	mov	r0, r5
 8007bda:	f000 f883 	bl	8007ce4 <__smakebuf_r>
 8007bde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007be2:	f013 0201 	ands.w	r2, r3, #1
 8007be6:	d00a      	beq.n	8007bfe <__swsetup_r+0x9a>
 8007be8:	2200      	movs	r2, #0
 8007bea:	60a2      	str	r2, [r4, #8]
 8007bec:	6962      	ldr	r2, [r4, #20]
 8007bee:	4252      	negs	r2, r2
 8007bf0:	61a2      	str	r2, [r4, #24]
 8007bf2:	6922      	ldr	r2, [r4, #16]
 8007bf4:	b942      	cbnz	r2, 8007c08 <__swsetup_r+0xa4>
 8007bf6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007bfa:	d1c5      	bne.n	8007b88 <__swsetup_r+0x24>
 8007bfc:	bd38      	pop	{r3, r4, r5, pc}
 8007bfe:	0799      	lsls	r1, r3, #30
 8007c00:	bf58      	it	pl
 8007c02:	6962      	ldrpl	r2, [r4, #20]
 8007c04:	60a2      	str	r2, [r4, #8]
 8007c06:	e7f4      	b.n	8007bf2 <__swsetup_r+0x8e>
 8007c08:	2000      	movs	r0, #0
 8007c0a:	e7f7      	b.n	8007bfc <__swsetup_r+0x98>
 8007c0c:	20000018 	.word	0x20000018

08007c10 <_raise_r>:
 8007c10:	291f      	cmp	r1, #31
 8007c12:	b538      	push	{r3, r4, r5, lr}
 8007c14:	4605      	mov	r5, r0
 8007c16:	460c      	mov	r4, r1
 8007c18:	d904      	bls.n	8007c24 <_raise_r+0x14>
 8007c1a:	2316      	movs	r3, #22
 8007c1c:	6003      	str	r3, [r0, #0]
 8007c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c22:	bd38      	pop	{r3, r4, r5, pc}
 8007c24:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007c26:	b112      	cbz	r2, 8007c2e <_raise_r+0x1e>
 8007c28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c2c:	b94b      	cbnz	r3, 8007c42 <_raise_r+0x32>
 8007c2e:	4628      	mov	r0, r5
 8007c30:	f000 f830 	bl	8007c94 <_getpid_r>
 8007c34:	4622      	mov	r2, r4
 8007c36:	4601      	mov	r1, r0
 8007c38:	4628      	mov	r0, r5
 8007c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c3e:	f000 b817 	b.w	8007c70 <_kill_r>
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d00a      	beq.n	8007c5c <_raise_r+0x4c>
 8007c46:	1c59      	adds	r1, r3, #1
 8007c48:	d103      	bne.n	8007c52 <_raise_r+0x42>
 8007c4a:	2316      	movs	r3, #22
 8007c4c:	6003      	str	r3, [r0, #0]
 8007c4e:	2001      	movs	r0, #1
 8007c50:	e7e7      	b.n	8007c22 <_raise_r+0x12>
 8007c52:	2100      	movs	r1, #0
 8007c54:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007c58:	4620      	mov	r0, r4
 8007c5a:	4798      	blx	r3
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	e7e0      	b.n	8007c22 <_raise_r+0x12>

08007c60 <raise>:
 8007c60:	4b02      	ldr	r3, [pc, #8]	@ (8007c6c <raise+0xc>)
 8007c62:	4601      	mov	r1, r0
 8007c64:	6818      	ldr	r0, [r3, #0]
 8007c66:	f7ff bfd3 	b.w	8007c10 <_raise_r>
 8007c6a:	bf00      	nop
 8007c6c:	20000018 	.word	0x20000018

08007c70 <_kill_r>:
 8007c70:	b538      	push	{r3, r4, r5, lr}
 8007c72:	4d07      	ldr	r5, [pc, #28]	@ (8007c90 <_kill_r+0x20>)
 8007c74:	2300      	movs	r3, #0
 8007c76:	4604      	mov	r4, r0
 8007c78:	4608      	mov	r0, r1
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	602b      	str	r3, [r5, #0]
 8007c7e:	f7fa f94a 	bl	8001f16 <_kill>
 8007c82:	1c43      	adds	r3, r0, #1
 8007c84:	d102      	bne.n	8007c8c <_kill_r+0x1c>
 8007c86:	682b      	ldr	r3, [r5, #0]
 8007c88:	b103      	cbz	r3, 8007c8c <_kill_r+0x1c>
 8007c8a:	6023      	str	r3, [r4, #0]
 8007c8c:	bd38      	pop	{r3, r4, r5, pc}
 8007c8e:	bf00      	nop
 8007c90:	20000480 	.word	0x20000480

08007c94 <_getpid_r>:
 8007c94:	f7fa b937 	b.w	8001f06 <_getpid>

08007c98 <__swhatbuf_r>:
 8007c98:	b570      	push	{r4, r5, r6, lr}
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca0:	2900      	cmp	r1, #0
 8007ca2:	b096      	sub	sp, #88	@ 0x58
 8007ca4:	4615      	mov	r5, r2
 8007ca6:	461e      	mov	r6, r3
 8007ca8:	da0d      	bge.n	8007cc6 <__swhatbuf_r+0x2e>
 8007caa:	89a3      	ldrh	r3, [r4, #12]
 8007cac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007cb0:	f04f 0100 	mov.w	r1, #0
 8007cb4:	bf14      	ite	ne
 8007cb6:	2340      	movne	r3, #64	@ 0x40
 8007cb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	6031      	str	r1, [r6, #0]
 8007cc0:	602b      	str	r3, [r5, #0]
 8007cc2:	b016      	add	sp, #88	@ 0x58
 8007cc4:	bd70      	pop	{r4, r5, r6, pc}
 8007cc6:	466a      	mov	r2, sp
 8007cc8:	f000 f848 	bl	8007d5c <_fstat_r>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	dbec      	blt.n	8007caa <__swhatbuf_r+0x12>
 8007cd0:	9901      	ldr	r1, [sp, #4]
 8007cd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007cd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007cda:	4259      	negs	r1, r3
 8007cdc:	4159      	adcs	r1, r3
 8007cde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007ce2:	e7eb      	b.n	8007cbc <__swhatbuf_r+0x24>

08007ce4 <__smakebuf_r>:
 8007ce4:	898b      	ldrh	r3, [r1, #12]
 8007ce6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ce8:	079d      	lsls	r5, r3, #30
 8007cea:	4606      	mov	r6, r0
 8007cec:	460c      	mov	r4, r1
 8007cee:	d507      	bpl.n	8007d00 <__smakebuf_r+0x1c>
 8007cf0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007cf4:	6023      	str	r3, [r4, #0]
 8007cf6:	6123      	str	r3, [r4, #16]
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	6163      	str	r3, [r4, #20]
 8007cfc:	b003      	add	sp, #12
 8007cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d00:	ab01      	add	r3, sp, #4
 8007d02:	466a      	mov	r2, sp
 8007d04:	f7ff ffc8 	bl	8007c98 <__swhatbuf_r>
 8007d08:	9f00      	ldr	r7, [sp, #0]
 8007d0a:	4605      	mov	r5, r0
 8007d0c:	4639      	mov	r1, r7
 8007d0e:	4630      	mov	r0, r6
 8007d10:	f7fe febe 	bl	8006a90 <_malloc_r>
 8007d14:	b948      	cbnz	r0, 8007d2a <__smakebuf_r+0x46>
 8007d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d1a:	059a      	lsls	r2, r3, #22
 8007d1c:	d4ee      	bmi.n	8007cfc <__smakebuf_r+0x18>
 8007d1e:	f023 0303 	bic.w	r3, r3, #3
 8007d22:	f043 0302 	orr.w	r3, r3, #2
 8007d26:	81a3      	strh	r3, [r4, #12]
 8007d28:	e7e2      	b.n	8007cf0 <__smakebuf_r+0xc>
 8007d2a:	89a3      	ldrh	r3, [r4, #12]
 8007d2c:	6020      	str	r0, [r4, #0]
 8007d2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d32:	81a3      	strh	r3, [r4, #12]
 8007d34:	9b01      	ldr	r3, [sp, #4]
 8007d36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007d3a:	b15b      	cbz	r3, 8007d54 <__smakebuf_r+0x70>
 8007d3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d40:	4630      	mov	r0, r6
 8007d42:	f000 f81d 	bl	8007d80 <_isatty_r>
 8007d46:	b128      	cbz	r0, 8007d54 <__smakebuf_r+0x70>
 8007d48:	89a3      	ldrh	r3, [r4, #12]
 8007d4a:	f023 0303 	bic.w	r3, r3, #3
 8007d4e:	f043 0301 	orr.w	r3, r3, #1
 8007d52:	81a3      	strh	r3, [r4, #12]
 8007d54:	89a3      	ldrh	r3, [r4, #12]
 8007d56:	431d      	orrs	r5, r3
 8007d58:	81a5      	strh	r5, [r4, #12]
 8007d5a:	e7cf      	b.n	8007cfc <__smakebuf_r+0x18>

08007d5c <_fstat_r>:
 8007d5c:	b538      	push	{r3, r4, r5, lr}
 8007d5e:	4d07      	ldr	r5, [pc, #28]	@ (8007d7c <_fstat_r+0x20>)
 8007d60:	2300      	movs	r3, #0
 8007d62:	4604      	mov	r4, r0
 8007d64:	4608      	mov	r0, r1
 8007d66:	4611      	mov	r1, r2
 8007d68:	602b      	str	r3, [r5, #0]
 8007d6a:	f7fa f934 	bl	8001fd6 <_fstat>
 8007d6e:	1c43      	adds	r3, r0, #1
 8007d70:	d102      	bne.n	8007d78 <_fstat_r+0x1c>
 8007d72:	682b      	ldr	r3, [r5, #0]
 8007d74:	b103      	cbz	r3, 8007d78 <_fstat_r+0x1c>
 8007d76:	6023      	str	r3, [r4, #0]
 8007d78:	bd38      	pop	{r3, r4, r5, pc}
 8007d7a:	bf00      	nop
 8007d7c:	20000480 	.word	0x20000480

08007d80 <_isatty_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4d06      	ldr	r5, [pc, #24]	@ (8007d9c <_isatty_r+0x1c>)
 8007d84:	2300      	movs	r3, #0
 8007d86:	4604      	mov	r4, r0
 8007d88:	4608      	mov	r0, r1
 8007d8a:	602b      	str	r3, [r5, #0]
 8007d8c:	f7fa f933 	bl	8001ff6 <_isatty>
 8007d90:	1c43      	adds	r3, r0, #1
 8007d92:	d102      	bne.n	8007d9a <_isatty_r+0x1a>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	b103      	cbz	r3, 8007d9a <_isatty_r+0x1a>
 8007d98:	6023      	str	r3, [r4, #0]
 8007d9a:	bd38      	pop	{r3, r4, r5, pc}
 8007d9c:	20000480 	.word	0x20000480

08007da0 <atan2f>:
 8007da0:	f000 b822 	b.w	8007de8 <__ieee754_atan2f>

08007da4 <sqrtf>:
 8007da4:	b508      	push	{r3, lr}
 8007da6:	ed2d 8b02 	vpush	{d8}
 8007daa:	eeb0 8a40 	vmov.f32	s16, s0
 8007dae:	f000 f817 	bl	8007de0 <__ieee754_sqrtf>
 8007db2:	eeb4 8a48 	vcmp.f32	s16, s16
 8007db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dba:	d60c      	bvs.n	8007dd6 <sqrtf+0x32>
 8007dbc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8007ddc <sqrtf+0x38>
 8007dc0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dc8:	d505      	bpl.n	8007dd6 <sqrtf+0x32>
 8007dca:	f7fd ff73 	bl	8005cb4 <__errno>
 8007dce:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007dd2:	2321      	movs	r3, #33	@ 0x21
 8007dd4:	6003      	str	r3, [r0, #0]
 8007dd6:	ecbd 8b02 	vpop	{d8}
 8007dda:	bd08      	pop	{r3, pc}
 8007ddc:	00000000 	.word	0x00000000

08007de0 <__ieee754_sqrtf>:
 8007de0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007de4:	4770      	bx	lr
	...

08007de8 <__ieee754_atan2f>:
 8007de8:	ee10 2a90 	vmov	r2, s1
 8007dec:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8007df0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8007df4:	b510      	push	{r4, lr}
 8007df6:	eef0 7a40 	vmov.f32	s15, s0
 8007dfa:	d806      	bhi.n	8007e0a <__ieee754_atan2f+0x22>
 8007dfc:	ee10 0a10 	vmov	r0, s0
 8007e00:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8007e04:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007e08:	d904      	bls.n	8007e14 <__ieee754_atan2f+0x2c>
 8007e0a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007e0e:	eeb0 0a67 	vmov.f32	s0, s15
 8007e12:	bd10      	pop	{r4, pc}
 8007e14:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8007e18:	d103      	bne.n	8007e22 <__ieee754_atan2f+0x3a>
 8007e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e1e:	f000 b883 	b.w	8007f28 <atanf>
 8007e22:	1794      	asrs	r4, r2, #30
 8007e24:	f004 0402 	and.w	r4, r4, #2
 8007e28:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007e2c:	b943      	cbnz	r3, 8007e40 <__ieee754_atan2f+0x58>
 8007e2e:	2c02      	cmp	r4, #2
 8007e30:	d05e      	beq.n	8007ef0 <__ieee754_atan2f+0x108>
 8007e32:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8007f04 <__ieee754_atan2f+0x11c>
 8007e36:	2c03      	cmp	r4, #3
 8007e38:	bf08      	it	eq
 8007e3a:	eef0 7a47 	vmoveq.f32	s15, s14
 8007e3e:	e7e6      	b.n	8007e0e <__ieee754_atan2f+0x26>
 8007e40:	b941      	cbnz	r1, 8007e54 <__ieee754_atan2f+0x6c>
 8007e42:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8007f08 <__ieee754_atan2f+0x120>
 8007e46:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8007f0c <__ieee754_atan2f+0x124>
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	bfb8      	it	lt
 8007e4e:	eef0 7a47 	vmovlt.f32	s15, s14
 8007e52:	e7dc      	b.n	8007e0e <__ieee754_atan2f+0x26>
 8007e54:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8007e58:	d110      	bne.n	8007e7c <__ieee754_atan2f+0x94>
 8007e5a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007e5e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007e62:	d107      	bne.n	8007e74 <__ieee754_atan2f+0x8c>
 8007e64:	2c02      	cmp	r4, #2
 8007e66:	d846      	bhi.n	8007ef6 <__ieee754_atan2f+0x10e>
 8007e68:	4b29      	ldr	r3, [pc, #164]	@ (8007f10 <__ieee754_atan2f+0x128>)
 8007e6a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007e6e:	edd3 7a00 	vldr	s15, [r3]
 8007e72:	e7cc      	b.n	8007e0e <__ieee754_atan2f+0x26>
 8007e74:	2c02      	cmp	r4, #2
 8007e76:	d841      	bhi.n	8007efc <__ieee754_atan2f+0x114>
 8007e78:	4b26      	ldr	r3, [pc, #152]	@ (8007f14 <__ieee754_atan2f+0x12c>)
 8007e7a:	e7f6      	b.n	8007e6a <__ieee754_atan2f+0x82>
 8007e7c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007e80:	d0df      	beq.n	8007e42 <__ieee754_atan2f+0x5a>
 8007e82:	1a5b      	subs	r3, r3, r1
 8007e84:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8007e88:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8007e8c:	da1a      	bge.n	8007ec4 <__ieee754_atan2f+0xdc>
 8007e8e:	2a00      	cmp	r2, #0
 8007e90:	da01      	bge.n	8007e96 <__ieee754_atan2f+0xae>
 8007e92:	313c      	adds	r1, #60	@ 0x3c
 8007e94:	db19      	blt.n	8007eca <__ieee754_atan2f+0xe2>
 8007e96:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8007e9a:	f000 f919 	bl	80080d0 <fabsf>
 8007e9e:	f000 f843 	bl	8007f28 <atanf>
 8007ea2:	eef0 7a40 	vmov.f32	s15, s0
 8007ea6:	2c01      	cmp	r4, #1
 8007ea8:	d012      	beq.n	8007ed0 <__ieee754_atan2f+0xe8>
 8007eaa:	2c02      	cmp	r4, #2
 8007eac:	d017      	beq.n	8007ede <__ieee754_atan2f+0xf6>
 8007eae:	2c00      	cmp	r4, #0
 8007eb0:	d0ad      	beq.n	8007e0e <__ieee754_atan2f+0x26>
 8007eb2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007f18 <__ieee754_atan2f+0x130>
 8007eb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007eba:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8007f1c <__ieee754_atan2f+0x134>
 8007ebe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ec2:	e7a4      	b.n	8007e0e <__ieee754_atan2f+0x26>
 8007ec4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8007f08 <__ieee754_atan2f+0x120>
 8007ec8:	e7ed      	b.n	8007ea6 <__ieee754_atan2f+0xbe>
 8007eca:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8007f20 <__ieee754_atan2f+0x138>
 8007ece:	e7ea      	b.n	8007ea6 <__ieee754_atan2f+0xbe>
 8007ed0:	ee17 3a90 	vmov	r3, s15
 8007ed4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007ed8:	ee07 3a90 	vmov	s15, r3
 8007edc:	e797      	b.n	8007e0e <__ieee754_atan2f+0x26>
 8007ede:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8007f18 <__ieee754_atan2f+0x130>
 8007ee2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ee6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8007f1c <__ieee754_atan2f+0x134>
 8007eea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007eee:	e78e      	b.n	8007e0e <__ieee754_atan2f+0x26>
 8007ef0:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8007f1c <__ieee754_atan2f+0x134>
 8007ef4:	e78b      	b.n	8007e0e <__ieee754_atan2f+0x26>
 8007ef6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8007f24 <__ieee754_atan2f+0x13c>
 8007efa:	e788      	b.n	8007e0e <__ieee754_atan2f+0x26>
 8007efc:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8007f20 <__ieee754_atan2f+0x138>
 8007f00:	e785      	b.n	8007e0e <__ieee754_atan2f+0x26>
 8007f02:	bf00      	nop
 8007f04:	c0490fdb 	.word	0xc0490fdb
 8007f08:	3fc90fdb 	.word	0x3fc90fdb
 8007f0c:	bfc90fdb 	.word	0xbfc90fdb
 8007f10:	080086cc 	.word	0x080086cc
 8007f14:	080086c0 	.word	0x080086c0
 8007f18:	33bbbd2e 	.word	0x33bbbd2e
 8007f1c:	40490fdb 	.word	0x40490fdb
 8007f20:	00000000 	.word	0x00000000
 8007f24:	3f490fdb 	.word	0x3f490fdb

08007f28 <atanf>:
 8007f28:	b538      	push	{r3, r4, r5, lr}
 8007f2a:	ee10 5a10 	vmov	r5, s0
 8007f2e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8007f32:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8007f36:	eef0 7a40 	vmov.f32	s15, s0
 8007f3a:	d310      	bcc.n	8007f5e <atanf+0x36>
 8007f3c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8007f40:	d904      	bls.n	8007f4c <atanf+0x24>
 8007f42:	ee70 7a00 	vadd.f32	s15, s0, s0
 8007f46:	eeb0 0a67 	vmov.f32	s0, s15
 8007f4a:	bd38      	pop	{r3, r4, r5, pc}
 8007f4c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8008084 <atanf+0x15c>
 8007f50:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8008088 <atanf+0x160>
 8007f54:	2d00      	cmp	r5, #0
 8007f56:	bfc8      	it	gt
 8007f58:	eef0 7a47 	vmovgt.f32	s15, s14
 8007f5c:	e7f3      	b.n	8007f46 <atanf+0x1e>
 8007f5e:	4b4b      	ldr	r3, [pc, #300]	@ (800808c <atanf+0x164>)
 8007f60:	429c      	cmp	r4, r3
 8007f62:	d810      	bhi.n	8007f86 <atanf+0x5e>
 8007f64:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8007f68:	d20a      	bcs.n	8007f80 <atanf+0x58>
 8007f6a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8008090 <atanf+0x168>
 8007f6e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f76:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f7e:	dce2      	bgt.n	8007f46 <atanf+0x1e>
 8007f80:	f04f 33ff 	mov.w	r3, #4294967295
 8007f84:	e013      	b.n	8007fae <atanf+0x86>
 8007f86:	f000 f8a3 	bl	80080d0 <fabsf>
 8007f8a:	4b42      	ldr	r3, [pc, #264]	@ (8008094 <atanf+0x16c>)
 8007f8c:	429c      	cmp	r4, r3
 8007f8e:	d84f      	bhi.n	8008030 <atanf+0x108>
 8007f90:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8007f94:	429c      	cmp	r4, r3
 8007f96:	d841      	bhi.n	800801c <atanf+0xf4>
 8007f98:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8007f9c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8007fa0:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007faa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007fae:	1c5a      	adds	r2, r3, #1
 8007fb0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007fb4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8008098 <atanf+0x170>
 8007fb8:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800809c <atanf+0x174>
 8007fbc:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80080a0 <atanf+0x178>
 8007fc0:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007fc4:	eee6 5a87 	vfma.f32	s11, s13, s14
 8007fc8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80080a4 <atanf+0x17c>
 8007fcc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007fd0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80080a8 <atanf+0x180>
 8007fd4:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007fd8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80080ac <atanf+0x184>
 8007fdc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007fe0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80080b0 <atanf+0x188>
 8007fe4:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007fe8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80080b4 <atanf+0x18c>
 8007fec:	eea6 5a87 	vfma.f32	s10, s13, s14
 8007ff0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80080b8 <atanf+0x190>
 8007ff4:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007ff8:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80080bc <atanf+0x194>
 8007ffc:	eea7 5a26 	vfma.f32	s10, s14, s13
 8008000:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80080c0 <atanf+0x198>
 8008004:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008008:	ee27 7a26 	vmul.f32	s14, s14, s13
 800800c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008010:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008014:	d121      	bne.n	800805a <atanf+0x132>
 8008016:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800801a:	e794      	b.n	8007f46 <atanf+0x1e>
 800801c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008020:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008024:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008028:	2301      	movs	r3, #1
 800802a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800802e:	e7be      	b.n	8007fae <atanf+0x86>
 8008030:	4b24      	ldr	r3, [pc, #144]	@ (80080c4 <atanf+0x19c>)
 8008032:	429c      	cmp	r4, r3
 8008034:	d80b      	bhi.n	800804e <atanf+0x126>
 8008036:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800803a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800803e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008042:	2302      	movs	r3, #2
 8008044:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800804c:	e7af      	b.n	8007fae <atanf+0x86>
 800804e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8008052:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008056:	2303      	movs	r3, #3
 8008058:	e7a9      	b.n	8007fae <atanf+0x86>
 800805a:	4a1b      	ldr	r2, [pc, #108]	@ (80080c8 <atanf+0x1a0>)
 800805c:	491b      	ldr	r1, [pc, #108]	@ (80080cc <atanf+0x1a4>)
 800805e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008062:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008066:	edd3 6a00 	vldr	s13, [r3]
 800806a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800806e:	2d00      	cmp	r5, #0
 8008070:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008074:	edd2 7a00 	vldr	s15, [r2]
 8008078:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800807c:	bfb8      	it	lt
 800807e:	eef1 7a67 	vneglt.f32	s15, s15
 8008082:	e760      	b.n	8007f46 <atanf+0x1e>
 8008084:	bfc90fdb 	.word	0xbfc90fdb
 8008088:	3fc90fdb 	.word	0x3fc90fdb
 800808c:	3edfffff 	.word	0x3edfffff
 8008090:	7149f2ca 	.word	0x7149f2ca
 8008094:	3f97ffff 	.word	0x3f97ffff
 8008098:	3c8569d7 	.word	0x3c8569d7
 800809c:	3d4bda59 	.word	0x3d4bda59
 80080a0:	bd6ef16b 	.word	0xbd6ef16b
 80080a4:	3d886b35 	.word	0x3d886b35
 80080a8:	3dba2e6e 	.word	0x3dba2e6e
 80080ac:	3e124925 	.word	0x3e124925
 80080b0:	3eaaaaab 	.word	0x3eaaaaab
 80080b4:	bd15a221 	.word	0xbd15a221
 80080b8:	bd9d8795 	.word	0xbd9d8795
 80080bc:	bde38e38 	.word	0xbde38e38
 80080c0:	be4ccccd 	.word	0xbe4ccccd
 80080c4:	401bffff 	.word	0x401bffff
 80080c8:	080086e8 	.word	0x080086e8
 80080cc:	080086d8 	.word	0x080086d8

080080d0 <fabsf>:
 80080d0:	ee10 3a10 	vmov	r3, s0
 80080d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080d8:	ee00 3a10 	vmov	s0, r3
 80080dc:	4770      	bx	lr
	...

080080e0 <_init>:
 80080e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e2:	bf00      	nop
 80080e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080e6:	bc08      	pop	{r3}
 80080e8:	469e      	mov	lr, r3
 80080ea:	4770      	bx	lr

080080ec <_fini>:
 80080ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ee:	bf00      	nop
 80080f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080f2:	bc08      	pop	{r3}
 80080f4:	469e      	mov	lr, r3
 80080f6:	4770      	bx	lr
