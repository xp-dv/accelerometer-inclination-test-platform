
Accelerometer_Inclination_Test_Platform.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f68  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  08008108  08008108  00009108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008708  08008708  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008708  08008708  00009708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008710  08008710  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008710  08008710  00009710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008714  08008714  00009714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008718  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  200001d4  080088ec  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  080088ec  0000a490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0bd  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e21  00000000  00000000  000182c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  0001a0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b52  00000000  00000000  0001af60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001775a  00000000  00000000  0001bab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc4c  00000000  00000000  0003320c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009260c  00000000  00000000  00042e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5464  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005068  00000000  00000000  000d54a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  000da510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080080f0 	.word	0x080080f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080080f0 	.word	0x080080f0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <adxl_tx>:
static void MX_SPI3_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

void adxl_tx(uint8_t address, uint8_t value) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	460a      	mov	r2, r1
 8000f52:	71fb      	strb	r3, [r7, #7]
 8000f54:	4613      	mov	r3, r2
 8000f56:	71bb      	strb	r3, [r7, #6]
  uint8_t data[2];
  data[0] = address | 0x40;  // multibyte write enabled
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	733b      	strb	r3, [r7, #12]
  data[1] = value;
 8000f62:	79bb      	ldrb	r3, [r7, #6]
 8000f64:	737b      	strb	r3, [r7, #13]
  HAL_GPIO_WritePin(ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_RESET); // pull the cs pin low to enable the slave
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f6c:	4809      	ldr	r0, [pc, #36]	@ (8000f94 <adxl_tx+0x4c>)
 8000f6e:	f001 fbe7 	bl	8002740 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, data, 2, 100); // transmit the address and data
 8000f72:	f107 010c 	add.w	r1, r7, #12
 8000f76:	2364      	movs	r3, #100	@ 0x64
 8000f78:	2202      	movs	r2, #2
 8000f7a:	4807      	ldr	r0, [pc, #28]	@ (8000f98 <adxl_tx+0x50>)
 8000f7c:	f002 f91b 	bl	80031b6 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_SET); // pull the cs pin high to disable the slave
 8000f80:	2201      	movs	r2, #1
 8000f82:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f86:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <adxl_tx+0x4c>)
 8000f88:	f001 fbda 	bl	8002740 <HAL_GPIO_WritePin>
}
 8000f8c:	bf00      	nop
 8000f8e:	3710      	adds	r7, #16
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40020400 	.word	0x40020400
 8000f98:	200001f0 	.word	0x200001f0

08000f9c <adxl_rx>:

void adxl_rx(uint8_t address) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
  address |= 0x80;  // read operation
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	71fb      	strb	r3, [r7, #7]
  address |= 0x40;  // multibyte read
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_RESET);  // pull the cs pin low to enable the slave
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fc0:	480c      	ldr	r0, [pc, #48]	@ (8000ff4 <adxl_rx+0x58>)
 8000fc2:	f001 fbbd 	bl	8002740 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi3, &address, 1, 100);  // send the address from where you want to read data
 8000fc6:	1df9      	adds	r1, r7, #7
 8000fc8:	2364      	movs	r3, #100	@ 0x64
 8000fca:	2201      	movs	r2, #1
 8000fcc:	480a      	ldr	r0, [pc, #40]	@ (8000ff8 <adxl_rx+0x5c>)
 8000fce:	f002 f8f2 	bl	80031b6 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi3, data_rec, 6, 100);  // read 6 BYTES of data
 8000fd2:	2364      	movs	r3, #100	@ 0x64
 8000fd4:	2206      	movs	r2, #6
 8000fd6:	4909      	ldr	r1, [pc, #36]	@ (8000ffc <adxl_rx+0x60>)
 8000fd8:	4807      	ldr	r0, [pc, #28]	@ (8000ff8 <adxl_rx+0x5c>)
 8000fda:	f002 fa2f 	bl	800343c <HAL_SPI_Receive>
  HAL_GPIO_WritePin(ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_SET);  // pull the cs pin high to disable the slave
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fe4:	4803      	ldr	r0, [pc, #12]	@ (8000ff4 <adxl_rx+0x58>)
 8000fe6:	f001 fbab 	bl	8002740 <HAL_GPIO_WritePin>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40020400 	.word	0x40020400
 8000ff8:	200001f0 	.word	0x200001f0
 8000ffc:	20000320 	.word	0x20000320

08001000 <adxl_init>:

void adxl_init(void) {
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  HAL_Delay(2000);
 8001004:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001008:	f001 f8f4 	bl	80021f4 <HAL_Delay>
  adxl_tx(0x31, 0x01);  // data_format range= +- 4g
 800100c:	2101      	movs	r1, #1
 800100e:	2031      	movs	r0, #49	@ 0x31
 8001010:	f7ff ff9a 	bl	8000f48 <adxl_tx>
  adxl_tx(0x2d, 0x00);  // reset all bits
 8001014:	2100      	movs	r1, #0
 8001016:	202d      	movs	r0, #45	@ 0x2d
 8001018:	f7ff ff96 	bl	8000f48 <adxl_tx>
  adxl_tx(0x2d, 0x08);  // power_cntl measure and wake up 8hz
 800101c:	2108      	movs	r1, #8
 800101e:	202d      	movs	r0, #45	@ 0x2d
 8001020:	f7ff ff92 	bl	8000f48 <adxl_tx>
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <adxl_id>:

void adxl_id(void) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
  uint8_t device_id_addr = 0x00; // Address of the device ID register
 800102e:	2300      	movs	r3, #0
 8001030:	77fb      	strb	r3, [r7, #31]
  uint8_t device_id = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	77bb      	strb	r3, [r7, #30]
  adxl_rx(device_id_addr); // Assuming this will populate 'data_rec' with the ID
 8001036:	7ffb      	ldrb	r3, [r7, #31]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ffaf 	bl	8000f9c <adxl_rx>

  device_id = data_rec[0]; // Assuming the ID is the first byte read
 800103e:	4b11      	ldr	r3, [pc, #68]	@ (8001084 <adxl_id+0x5c>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	77bb      	strb	r3, [r7, #30]
  char debug_message[30];
  sprintf(debug_message, "Device ID: 0x%X\r\n", device_id);
 8001044:	7fba      	ldrb	r2, [r7, #30]
 8001046:	463b      	mov	r3, r7
 8001048:	490f      	ldr	r1, [pc, #60]	@ (8001088 <adxl_id+0x60>)
 800104a:	4618      	mov	r0, r3
 800104c:	f004 fd82 	bl	8005b54 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)debug_message, strlen(debug_message), 100);
 8001050:	463b      	mov	r3, r7
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff f914 	bl	8000280 <strlen>
 8001058:	4603      	mov	r3, r0
 800105a:	b29a      	uxth	r2, r3
 800105c:	4639      	mov	r1, r7
 800105e:	2364      	movs	r3, #100	@ 0x64
 8001060:	480a      	ldr	r0, [pc, #40]	@ (800108c <adxl_id+0x64>)
 8001062:	f003 fc6d 	bl	8004940 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t*)debug_message, strlen(debug_message), 100);
 8001066:	463b      	mov	r3, r7
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff f909 	bl	8000280 <strlen>
 800106e:	4603      	mov	r3, r0
 8001070:	b29a      	uxth	r2, r3
 8001072:	4639      	mov	r1, r7
 8001074:	2364      	movs	r3, #100	@ 0x64
 8001076:	4806      	ldr	r0, [pc, #24]	@ (8001090 <adxl_id+0x68>)
 8001078:	f003 fc62 	bl	8004940 <HAL_UART_Transmit>
}
 800107c:	bf00      	nop
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000320 	.word	0x20000320
 8001088:	08008108 	.word	0x08008108
 800108c:	20000290 	.word	0x20000290
 8001090:	200002d8 	.word	0x200002d8
 8001094:	00000000 	.word	0x00000000

08001098 <adxl_read>:

void adxl_read(void) {
 8001098:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800109c:	ed2d 8b02 	vpush	{d8}
 80010a0:	b09a      	sub	sp, #104	@ 0x68
 80010a2:	af06      	add	r7, sp, #24
  adxl_rx(0x32); // Request data starting from the DATAX0 register
 80010a4:	2032      	movs	r0, #50	@ 0x32
 80010a6:	f7ff ff79 	bl	8000f9c <adxl_rx>
  // Convert the accelerometer values to 16-bit signed integers
  int16_t x_raw = (int16_t)((data_rec[1] << 8) | data_rec[0]);
 80010aa:	4b8b      	ldr	r3, [pc, #556]	@ (80012d8 <adxl_read+0x240>)
 80010ac:	785b      	ldrb	r3, [r3, #1]
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	b21a      	sxth	r2, r3
 80010b2:	4b89      	ldr	r3, [pc, #548]	@ (80012d8 <adxl_read+0x240>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	4313      	orrs	r3, r2
 80010ba:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  int16_t y_raw = (int16_t)((data_rec[3] << 8) | data_rec[2]);
 80010be:	4b86      	ldr	r3, [pc, #536]	@ (80012d8 <adxl_read+0x240>)
 80010c0:	78db      	ldrb	r3, [r3, #3]
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	4b84      	ldr	r3, [pc, #528]	@ (80012d8 <adxl_read+0x240>)
 80010c8:	789b      	ldrb	r3, [r3, #2]
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	4313      	orrs	r3, r2
 80010ce:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
  int16_t z_raw = (int16_t)((data_rec[5] << 8) | data_rec[4]);
 80010d2:	4b81      	ldr	r3, [pc, #516]	@ (80012d8 <adxl_read+0x240>)
 80010d4:	795b      	ldrb	r3, [r3, #5]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	4b7f      	ldr	r3, [pc, #508]	@ (80012d8 <adxl_read+0x240>)
 80010dc:	791b      	ldrb	r3, [r3, #4]
 80010de:	b21b      	sxth	r3, r3
 80010e0:	4313      	orrs	r3, r2
 80010e2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

  // Convert raw values to g's
  x_g = x_raw * ADXL_SCALE_FACTOR;
 80010e6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fa22 	bl	8000534 <__aeabi_i2d>
 80010f0:	a375      	add	r3, pc, #468	@ (adr r3, 80012c8 <adxl_read+0x230>)
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	f7ff fa87 	bl	8000608 <__aeabi_dmul>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4610      	mov	r0, r2
 8001100:	4619      	mov	r1, r3
 8001102:	f7ff fd59 	bl	8000bb8 <__aeabi_d2f>
 8001106:	4603      	mov	r3, r0
 8001108:	4a74      	ldr	r2, [pc, #464]	@ (80012dc <adxl_read+0x244>)
 800110a:	6013      	str	r3, [r2, #0]
  y_g = y_raw * ADXL_SCALE_FACTOR;
 800110c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fa0f 	bl	8000534 <__aeabi_i2d>
 8001116:	a36c      	add	r3, pc, #432	@ (adr r3, 80012c8 <adxl_read+0x230>)
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	f7ff fa74 	bl	8000608 <__aeabi_dmul>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	4610      	mov	r0, r2
 8001126:	4619      	mov	r1, r3
 8001128:	f7ff fd46 	bl	8000bb8 <__aeabi_d2f>
 800112c:	4603      	mov	r3, r0
 800112e:	4a6c      	ldr	r2, [pc, #432]	@ (80012e0 <adxl_read+0x248>)
 8001130:	6013      	str	r3, [r2, #0]
  z_g = z_raw * ADXL_SCALE_FACTOR;
 8001132:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff f9fc 	bl	8000534 <__aeabi_i2d>
 800113c:	a362      	add	r3, pc, #392	@ (adr r3, 80012c8 <adxl_read+0x230>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff fa61 	bl	8000608 <__aeabi_dmul>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4610      	mov	r0, r2
 800114c:	4619      	mov	r1, r3
 800114e:	f7ff fd33 	bl	8000bb8 <__aeabi_d2f>
 8001152:	4603      	mov	r3, r0
 8001154:	4a63      	ldr	r2, [pc, #396]	@ (80012e4 <adxl_read+0x24c>)
 8001156:	6013      	str	r3, [r2, #0]

  x_ang = atan2f(-y_g, sqrtf(x_g * x_g + z_g * z_g));
 8001158:	4b61      	ldr	r3, [pc, #388]	@ (80012e0 <adxl_read+0x248>)
 800115a:	edd3 7a00 	vldr	s15, [r3]
 800115e:	eeb1 8a67 	vneg.f32	s16, s15
 8001162:	4b5e      	ldr	r3, [pc, #376]	@ (80012dc <adxl_read+0x244>)
 8001164:	ed93 7a00 	vldr	s14, [r3]
 8001168:	4b5c      	ldr	r3, [pc, #368]	@ (80012dc <adxl_read+0x244>)
 800116a:	edd3 7a00 	vldr	s15, [r3]
 800116e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001172:	4b5c      	ldr	r3, [pc, #368]	@ (80012e4 <adxl_read+0x24c>)
 8001174:	edd3 6a00 	vldr	s13, [r3]
 8001178:	4b5a      	ldr	r3, [pc, #360]	@ (80012e4 <adxl_read+0x24c>)
 800117a:	edd3 7a00 	vldr	s15, [r3]
 800117e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001182:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001186:	eeb0 0a67 	vmov.f32	s0, s15
 800118a:	f006 fe13 	bl	8007db4 <sqrtf>
 800118e:	eef0 7a40 	vmov.f32	s15, s0
 8001192:	eef0 0a67 	vmov.f32	s1, s15
 8001196:	eeb0 0a48 	vmov.f32	s0, s16
 800119a:	f006 fe09 	bl	8007db0 <atan2f>
 800119e:	eef0 7a40 	vmov.f32	s15, s0
 80011a2:	4b51      	ldr	r3, [pc, #324]	@ (80012e8 <adxl_read+0x250>)
 80011a4:	edc3 7a00 	vstr	s15, [r3]
  y_ang = atan2f(-x_g, sqrtf(y_g * y_g + z_g * z_g));
 80011a8:	4b4c      	ldr	r3, [pc, #304]	@ (80012dc <adxl_read+0x244>)
 80011aa:	edd3 7a00 	vldr	s15, [r3]
 80011ae:	eeb1 8a67 	vneg.f32	s16, s15
 80011b2:	4b4b      	ldr	r3, [pc, #300]	@ (80012e0 <adxl_read+0x248>)
 80011b4:	ed93 7a00 	vldr	s14, [r3]
 80011b8:	4b49      	ldr	r3, [pc, #292]	@ (80012e0 <adxl_read+0x248>)
 80011ba:	edd3 7a00 	vldr	s15, [r3]
 80011be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011c2:	4b48      	ldr	r3, [pc, #288]	@ (80012e4 <adxl_read+0x24c>)
 80011c4:	edd3 6a00 	vldr	s13, [r3]
 80011c8:	4b46      	ldr	r3, [pc, #280]	@ (80012e4 <adxl_read+0x24c>)
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d6:	eeb0 0a67 	vmov.f32	s0, s15
 80011da:	f006 fdeb 	bl	8007db4 <sqrtf>
 80011de:	eef0 7a40 	vmov.f32	s15, s0
 80011e2:	eef0 0a67 	vmov.f32	s1, s15
 80011e6:	eeb0 0a48 	vmov.f32	s0, s16
 80011ea:	f006 fde1 	bl	8007db0 <atan2f>
 80011ee:	eef0 7a40 	vmov.f32	s15, s0
 80011f2:	4b3e      	ldr	r3, [pc, #248]	@ (80012ec <adxl_read+0x254>)
 80011f4:	edc3 7a00 	vstr	s15, [r3]
  // z_ang = atan2f(sqrtf(x_g * x_g + y_g * y_g), z_g);

  x_ang = x_ang * (180.0f / M_PI);
 80011f8:	4b3b      	ldr	r3, [pc, #236]	@ (80012e8 <adxl_read+0x250>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f9ab 	bl	8000558 <__aeabi_f2d>
 8001202:	a333      	add	r3, pc, #204	@ (adr r3, 80012d0 <adxl_read+0x238>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff f9fe 	bl	8000608 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fcd0 	bl	8000bb8 <__aeabi_d2f>
 8001218:	4603      	mov	r3, r0
 800121a:	4a33      	ldr	r2, [pc, #204]	@ (80012e8 <adxl_read+0x250>)
 800121c:	6013      	str	r3, [r2, #0]
  y_ang = y_ang * (180.0f / M_PI);
 800121e:	4b33      	ldr	r3, [pc, #204]	@ (80012ec <adxl_read+0x254>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f998 	bl	8000558 <__aeabi_f2d>
 8001228:	a329      	add	r3, pc, #164	@ (adr r3, 80012d0 <adxl_read+0x238>)
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	f7ff f9eb 	bl	8000608 <__aeabi_dmul>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fcbd 	bl	8000bb8 <__aeabi_d2f>
 800123e:	4603      	mov	r3, r0
 8001240:	4a2a      	ldr	r2, [pc, #168]	@ (80012ec <adxl_read+0x254>)
 8001242:	6013      	str	r3, [r2, #0]
  // z_ang = z_ang * (180.0f / M_PI);

  char uart_buf[64];
  int len = snprintf(uart_buf, sizeof(uart_buf), "X(°)=%0.2f, Y(°)=%0.2f, Z(g)=%0.2f\r\n", x_ang, y_ang, z_g);
 8001244:	4b28      	ldr	r3, [pc, #160]	@ (80012e8 <adxl_read+0x250>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f985 	bl	8000558 <__aeabi_f2d>
 800124e:	4604      	mov	r4, r0
 8001250:	460d      	mov	r5, r1
 8001252:	4b26      	ldr	r3, [pc, #152]	@ (80012ec <adxl_read+0x254>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f97e 	bl	8000558 <__aeabi_f2d>
 800125c:	4680      	mov	r8, r0
 800125e:	4689      	mov	r9, r1
 8001260:	4b20      	ldr	r3, [pc, #128]	@ (80012e4 <adxl_read+0x24c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f977 	bl	8000558 <__aeabi_f2d>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	1d38      	adds	r0, r7, #4
 8001270:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001274:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001278:	e9cd 4500 	strd	r4, r5, [sp]
 800127c:	4a1c      	ldr	r2, [pc, #112]	@ (80012f0 <adxl_read+0x258>)
 800127e:	2140      	movs	r1, #64	@ 0x40
 8001280:	f004 fc34 	bl	8005aec <sniprintf>
 8001284:	6478      	str	r0, [r7, #68]	@ 0x44
  if (len > 0 && len < sizeof(uart_buf)) {
 8001286:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001288:	2b00      	cmp	r3, #0
 800128a:	dd15      	ble.n	80012b8 <adxl_read+0x220>
 800128c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800128e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001290:	d812      	bhi.n	80012b8 <adxl_read+0x220>
  HAL_Delay(200); //*TODO Remove this delay when sample timer has been implemented
 8001292:	20c8      	movs	r0, #200	@ 0xc8
 8001294:	f000 ffae 	bl	80021f4 <HAL_Delay>
  HAL_UART_Transmit(&huart1, (uint8_t*)uart_buf, len, HAL_MAX_DELAY);
 8001298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800129a:	b29a      	uxth	r2, r3
 800129c:	1d39      	adds	r1, r7, #4
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	4814      	ldr	r0, [pc, #80]	@ (80012f4 <adxl_read+0x25c>)
 80012a4:	f003 fb4c 	bl	8004940 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t*)uart_buf, len, HAL_MAX_DELAY); // Send data
 80012a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	1d39      	adds	r1, r7, #4
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	4811      	ldr	r0, [pc, #68]	@ (80012f8 <adxl_read+0x260>)
 80012b4:	f003 fb44 	bl	8004940 <HAL_UART_Transmit>
  }
}
 80012b8:	bf00      	nop
 80012ba:	3750      	adds	r7, #80	@ 0x50
 80012bc:	46bd      	mov	sp, r7
 80012be:	ecbd 8b02 	vpop	{d8}
 80012c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012c6:	bf00      	nop
 80012c8:	c9afe1da 	.word	0xc9afe1da
 80012cc:	3f70f51a 	.word	0x3f70f51a
 80012d0:	1a63c1f8 	.word	0x1a63c1f8
 80012d4:	404ca5dc 	.word	0x404ca5dc
 80012d8:	20000320 	.word	0x20000320
 80012dc:	20000328 	.word	0x20000328
 80012e0:	2000032c 	.word	0x2000032c
 80012e4:	20000330 	.word	0x20000330
 80012e8:	20000334 	.word	0x20000334
 80012ec:	20000338 	.word	0x20000338
 80012f0:	0800811c 	.word	0x0800811c
 80012f4:	20000290 	.word	0x20000290
 80012f8:	200002d8 	.word	0x200002d8

080012fc <servo_test>:
//   // CCR2 = 75 + pos_y*(1/2.7); // Move y-axis servo
//   // HAL_Delay(1000); // Wait before moving again
// }

#ifdef TEST // The following code will only be compiled if TEST is defined in the header file
  void servo_test(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b09a      	sub	sp, #104	@ 0x68
 8001300:	af00      	add	r7, sp, #0
    char test_pos[100];
    int len;
    if (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET) {
 8001302:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001306:	48bb      	ldr	r0, [pc, #748]	@ (80015f4 <servo_test+0x2f8>)
 8001308:	f001 fa02 	bl	8002710 <HAL_GPIO_ReadPin>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	f040 820b 	bne.w	800172a <servo_test+0x42e>
      // Center Platform
      CCR_X = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_X; // 0°
 8001314:	4bb8      	ldr	r3, [pc, #736]	@ (80015f8 <servo_test+0x2fc>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f240 52cd 	movw	r2, #1485	@ 0x5cd
 800131c:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_Y; // 0°
 800131e:	4bb6      	ldr	r3, [pc, #728]	@ (80015f8 <servo_test+0x2fc>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f240 52c3 	movw	r2, #1475	@ 0x5c3
 8001326:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 8001328:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800132c:	f000 ff62 	bl	80021f4 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing 0° for X and Y axes:\r\n");
 8001330:	463b      	mov	r3, r7
 8001332:	4ab2      	ldr	r2, [pc, #712]	@ (80015fc <servo_test+0x300>)
 8001334:	2164      	movs	r1, #100	@ 0x64
 8001336:	4618      	mov	r0, r3
 8001338:	f004 fbd8 	bl	8005aec <sniprintf>
 800133c:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 800133e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001340:	b29a      	uxth	r2, r3
 8001342:	4639      	mov	r1, r7
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
 8001348:	48ad      	ldr	r0, [pc, #692]	@ (8001600 <servo_test+0x304>)
 800134a:	f003 faf9 	bl	8004940 <HAL_UART_Transmit>
      adxl_read();
 800134e:	f7ff fea3 	bl	8001098 <adxl_read>

      // Move X-Axis
      CCR_X = PULSE_WIDTH_NEG_90 + PULSE_WIDTH_OFFSET_X; // -90° or 45° (From PULSE_WIDTH_MIN)
 8001352:	4ba9      	ldr	r3, [pc, #676]	@ (80015f8 <servo_test+0x2fc>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f240 3233 	movw	r2, #819	@ 0x333
 800135a:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_Y; // 0° or 135°
 800135c:	4ba6      	ldr	r3, [pc, #664]	@ (80015f8 <servo_test+0x2fc>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f240 52c3 	movw	r2, #1475	@ 0x5c3
 8001364:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 8001366:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800136a:	f000 ff43 	bl	80021f4 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing -90° for X, 0° for Y axis:\r\n");
 800136e:	463b      	mov	r3, r7
 8001370:	4aa4      	ldr	r2, [pc, #656]	@ (8001604 <servo_test+0x308>)
 8001372:	2164      	movs	r1, #100	@ 0x64
 8001374:	4618      	mov	r0, r3
 8001376:	f004 fbb9 	bl	8005aec <sniprintf>
 800137a:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 800137c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800137e:	b29a      	uxth	r2, r3
 8001380:	4639      	mov	r1, r7
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	489e      	ldr	r0, [pc, #632]	@ (8001600 <servo_test+0x304>)
 8001388:	f003 fada 	bl	8004940 <HAL_UART_Transmit>
      adxl_read();
 800138c:	f7ff fe84 	bl	8001098 <adxl_read>
      CCR_X = PULSE_WIDTH_NEG_45 + PULSE_WIDTH_OFFSET_X; // -45° or 90° (From PULSE_WIDTH_MIN)
 8001390:	4b99      	ldr	r3, [pc, #612]	@ (80015f8 <servo_test+0x2fc>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 8001398:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_Y; // 0° or 135°
 800139a:	4b97      	ldr	r3, [pc, #604]	@ (80015f8 <servo_test+0x2fc>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f240 52c3 	movw	r2, #1475	@ 0x5c3
 80013a2:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 80013a4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80013a8:	f000 ff24 	bl	80021f4 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing -45° for X, 0° for Y axis:\r\n");
 80013ac:	463b      	mov	r3, r7
 80013ae:	4a96      	ldr	r2, [pc, #600]	@ (8001608 <servo_test+0x30c>)
 80013b0:	2164      	movs	r1, #100	@ 0x64
 80013b2:	4618      	mov	r0, r3
 80013b4:	f004 fb9a 	bl	8005aec <sniprintf>
 80013b8:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 80013ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80013bc:	b29a      	uxth	r2, r3
 80013be:	4639      	mov	r1, r7
 80013c0:	f04f 33ff 	mov.w	r3, #4294967295
 80013c4:	488e      	ldr	r0, [pc, #568]	@ (8001600 <servo_test+0x304>)
 80013c6:	f003 fabb 	bl	8004940 <HAL_UART_Transmit>
      adxl_read();
 80013ca:	f7ff fe65 	bl	8001098 <adxl_read>
      CCR_X = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_X; // 0° or 135°
 80013ce:	4b8a      	ldr	r3, [pc, #552]	@ (80015f8 <servo_test+0x2fc>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f240 52cd 	movw	r2, #1485	@ 0x5cd
 80013d6:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_Y; // 0° or 135°
 80013d8:	4b87      	ldr	r3, [pc, #540]	@ (80015f8 <servo_test+0x2fc>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f240 52c3 	movw	r2, #1475	@ 0x5c3
 80013e0:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 80013e2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80013e6:	f000 ff05 	bl	80021f4 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing 0° for X and Y axes:\r\n");
 80013ea:	463b      	mov	r3, r7
 80013ec:	4a83      	ldr	r2, [pc, #524]	@ (80015fc <servo_test+0x300>)
 80013ee:	2164      	movs	r1, #100	@ 0x64
 80013f0:	4618      	mov	r0, r3
 80013f2:	f004 fb7b 	bl	8005aec <sniprintf>
 80013f6:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 80013f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	4639      	mov	r1, r7
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	487f      	ldr	r0, [pc, #508]	@ (8001600 <servo_test+0x304>)
 8001404:	f003 fa9c 	bl	8004940 <HAL_UART_Transmit>
      adxl_read();
 8001408:	f7ff fe46 	bl	8001098 <adxl_read>
      CCR_X = PULSE_WIDTH_POS_45 + PULSE_WIDTH_OFFSET_X; // +45° or 180° (From PULSE_WIDTH_MIN)
 800140c:	4b7a      	ldr	r3, [pc, #488]	@ (80015f8 <servo_test+0x2fc>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f240 721a 	movw	r2, #1818	@ 0x71a
 8001414:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_Y; // 0° or 135°
 8001416:	4b78      	ldr	r3, [pc, #480]	@ (80015f8 <servo_test+0x2fc>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f240 52c3 	movw	r2, #1475	@ 0x5c3
 800141e:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 8001420:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001424:	f000 fee6 	bl	80021f4 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing +45° for X axis, 0° for Y axis:\r\n");
 8001428:	463b      	mov	r3, r7
 800142a:	4a78      	ldr	r2, [pc, #480]	@ (800160c <servo_test+0x310>)
 800142c:	2164      	movs	r1, #100	@ 0x64
 800142e:	4618      	mov	r0, r3
 8001430:	f004 fb5c 	bl	8005aec <sniprintf>
 8001434:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 8001436:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001438:	b29a      	uxth	r2, r3
 800143a:	4639      	mov	r1, r7
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	486f      	ldr	r0, [pc, #444]	@ (8001600 <servo_test+0x304>)
 8001442:	f003 fa7d 	bl	8004940 <HAL_UART_Transmit>
      adxl_read();
 8001446:	f7ff fe27 	bl	8001098 <adxl_read>
      CCR_X = PULSE_WIDTH_POS_90 + PULSE_WIDTH_OFFSET_X; // +90° or 225° (From PULSE_WIDTH_MIN)
 800144a:	4b6b      	ldr	r3, [pc, #428]	@ (80015f8 <servo_test+0x2fc>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f640 0267 	movw	r2, #2151	@ 0x867
 8001452:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_Y; // 0° or 135°
 8001454:	4b68      	ldr	r3, [pc, #416]	@ (80015f8 <servo_test+0x2fc>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f240 52c3 	movw	r2, #1475	@ 0x5c3
 800145c:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 800145e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001462:	f000 fec7 	bl	80021f4 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing +90° for X, 0° for Y axis:\r\n");
 8001466:	463b      	mov	r3, r7
 8001468:	4a69      	ldr	r2, [pc, #420]	@ (8001610 <servo_test+0x314>)
 800146a:	2164      	movs	r1, #100	@ 0x64
 800146c:	4618      	mov	r0, r3
 800146e:	f004 fb3d 	bl	8005aec <sniprintf>
 8001472:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 8001474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001476:	b29a      	uxth	r2, r3
 8001478:	4639      	mov	r1, r7
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	4860      	ldr	r0, [pc, #384]	@ (8001600 <servo_test+0x304>)
 8001480:	f003 fa5e 	bl	8004940 <HAL_UART_Transmit>
      adxl_read();
 8001484:	f7ff fe08 	bl	8001098 <adxl_read>

      // Move Y-Axis
      CCR_X = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_X; // 0° or 135°
 8001488:	4b5b      	ldr	r3, [pc, #364]	@ (80015f8 <servo_test+0x2fc>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f240 52cd 	movw	r2, #1485	@ 0x5cd
 8001490:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_NEG_90 + PULSE_WIDTH_OFFSET_Y; // -90° or 45° (From PULSE_WIDTH_MIN)
 8001492:	4b59      	ldr	r3, [pc, #356]	@ (80015f8 <servo_test+0x2fc>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f240 3229 	movw	r2, #809	@ 0x329
 800149a:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 800149c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80014a0:	f000 fea8 	bl	80021f4 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing 0° for X, -90° for Y axis:\r\n");
 80014a4:	463b      	mov	r3, r7
 80014a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001614 <servo_test+0x318>)
 80014a8:	2164      	movs	r1, #100	@ 0x64
 80014aa:	4618      	mov	r0, r3
 80014ac:	f004 fb1e 	bl	8005aec <sniprintf>
 80014b0:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 80014b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	4639      	mov	r1, r7
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
 80014bc:	4850      	ldr	r0, [pc, #320]	@ (8001600 <servo_test+0x304>)
 80014be:	f003 fa3f 	bl	8004940 <HAL_UART_Transmit>
      adxl_read();
 80014c2:	f7ff fde9 	bl	8001098 <adxl_read>
      CCR_X = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_X; // 0° or 135°
 80014c6:	4b4c      	ldr	r3, [pc, #304]	@ (80015f8 <servo_test+0x2fc>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f240 52cd 	movw	r2, #1485	@ 0x5cd
 80014ce:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_NEG_45 + PULSE_WIDTH_OFFSET_Y; // -45° or 90° (From PULSE_WIDTH_MIN)
 80014d0:	4b49      	ldr	r3, [pc, #292]	@ (80015f8 <servo_test+0x2fc>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f240 4276 	movw	r2, #1142	@ 0x476
 80014d8:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 80014da:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80014de:	f000 fe89 	bl	80021f4 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing 0° for X, -45° for Y axis:\r\n");
 80014e2:	463b      	mov	r3, r7
 80014e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001618 <servo_test+0x31c>)
 80014e6:	2164      	movs	r1, #100	@ 0x64
 80014e8:	4618      	mov	r0, r3
 80014ea:	f004 faff 	bl	8005aec <sniprintf>
 80014ee:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 80014f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	4639      	mov	r1, r7
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
 80014fa:	4841      	ldr	r0, [pc, #260]	@ (8001600 <servo_test+0x304>)
 80014fc:	f003 fa20 	bl	8004940 <HAL_UART_Transmit>
      adxl_read();
 8001500:	f7ff fdca 	bl	8001098 <adxl_read>
      CCR_X = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_X; // 0° or 135°
 8001504:	4b3c      	ldr	r3, [pc, #240]	@ (80015f8 <servo_test+0x2fc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f240 52cd 	movw	r2, #1485	@ 0x5cd
 800150c:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_Y; // 0° or 135°
 800150e:	4b3a      	ldr	r3, [pc, #232]	@ (80015f8 <servo_test+0x2fc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f240 52c3 	movw	r2, #1475	@ 0x5c3
 8001516:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 8001518:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800151c:	f000 fe6a 	bl	80021f4 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing 0° for X and Y axes:\r\n");
 8001520:	463b      	mov	r3, r7
 8001522:	4a36      	ldr	r2, [pc, #216]	@ (80015fc <servo_test+0x300>)
 8001524:	2164      	movs	r1, #100	@ 0x64
 8001526:	4618      	mov	r0, r3
 8001528:	f004 fae0 	bl	8005aec <sniprintf>
 800152c:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 800152e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001530:	b29a      	uxth	r2, r3
 8001532:	4639      	mov	r1, r7
 8001534:	f04f 33ff 	mov.w	r3, #4294967295
 8001538:	4831      	ldr	r0, [pc, #196]	@ (8001600 <servo_test+0x304>)
 800153a:	f003 fa01 	bl	8004940 <HAL_UART_Transmit>
      adxl_read();
 800153e:	f7ff fdab 	bl	8001098 <adxl_read>
      CCR_X = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_X; // 0° or 135°
 8001542:	4b2d      	ldr	r3, [pc, #180]	@ (80015f8 <servo_test+0x2fc>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f240 52cd 	movw	r2, #1485	@ 0x5cd
 800154a:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_POS_45 + PULSE_WIDTH_OFFSET_Y; // +45° or 180° (From PULSE_WIDTH_MIN)
 800154c:	4b2a      	ldr	r3, [pc, #168]	@ (80015f8 <servo_test+0x2fc>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f44f 62e2 	mov.w	r2, #1808	@ 0x710
 8001554:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 8001556:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800155a:	f000 fe4b 	bl	80021f4 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing 0° for X, +45° for Y axis:\r\n");
 800155e:	463b      	mov	r3, r7
 8001560:	4a2e      	ldr	r2, [pc, #184]	@ (800161c <servo_test+0x320>)
 8001562:	2164      	movs	r1, #100	@ 0x64
 8001564:	4618      	mov	r0, r3
 8001566:	f004 fac1 	bl	8005aec <sniprintf>
 800156a:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 800156c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800156e:	b29a      	uxth	r2, r3
 8001570:	4639      	mov	r1, r7
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
 8001576:	4822      	ldr	r0, [pc, #136]	@ (8001600 <servo_test+0x304>)
 8001578:	f003 f9e2 	bl	8004940 <HAL_UART_Transmit>
      adxl_read();
 800157c:	f7ff fd8c 	bl	8001098 <adxl_read>
      CCR_X = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_X; // 0° or 135°
 8001580:	4b1d      	ldr	r3, [pc, #116]	@ (80015f8 <servo_test+0x2fc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f240 52cd 	movw	r2, #1485	@ 0x5cd
 8001588:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_POS_90 + PULSE_WIDTH_OFFSET_Y; // +90° or 225° (From PULSE_WIDTH_MIN)
 800158a:	4b1b      	ldr	r3, [pc, #108]	@ (80015f8 <servo_test+0x2fc>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f640 025d 	movw	r2, #2141	@ 0x85d
 8001592:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 8001594:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001598:	f000 fe2c 	bl	80021f4 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing 0° for X, +90° for Y axis:\r\n");
 800159c:	463b      	mov	r3, r7
 800159e:	4a20      	ldr	r2, [pc, #128]	@ (8001620 <servo_test+0x324>)
 80015a0:	2164      	movs	r1, #100	@ 0x64
 80015a2:	4618      	mov	r0, r3
 80015a4:	f004 faa2 	bl	8005aec <sniprintf>
 80015a8:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 80015aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	4639      	mov	r1, r7
 80015b0:	f04f 33ff 	mov.w	r3, #4294967295
 80015b4:	4812      	ldr	r0, [pc, #72]	@ (8001600 <servo_test+0x304>)
 80015b6:	f003 f9c3 	bl	8004940 <HAL_UART_Transmit>
      adxl_read();
 80015ba:	f7ff fd6d 	bl	8001098 <adxl_read>

      // Move Both Axes
      CCR_X = PULSE_WIDTH_NEG_45 + PULSE_WIDTH_OFFSET_X; // -45°
 80015be:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <servo_test+0x2fc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 80015c6:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_NEG_45 + PULSE_WIDTH_OFFSET_Y; // -45°
 80015c8:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <servo_test+0x2fc>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f240 4276 	movw	r2, #1142	@ 0x476
 80015d0:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 80015d2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80015d6:	f000 fe0d 	bl	80021f4 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing -45° for X and Y axes:\r\n");
 80015da:	463b      	mov	r3, r7
 80015dc:	4a11      	ldr	r2, [pc, #68]	@ (8001624 <servo_test+0x328>)
 80015de:	2164      	movs	r1, #100	@ 0x64
 80015e0:	4618      	mov	r0, r3
 80015e2:	f004 fa83 	bl	8005aec <sniprintf>
 80015e6:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 80015e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	4639      	mov	r1, r7
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	e019      	b.n	8001628 <servo_test+0x32c>
 80015f4:	40020800 	.word	0x40020800
 80015f8:	20000248 	.word	0x20000248
 80015fc:	08008144 	.word	0x08008144
 8001600:	200002d8 	.word	0x200002d8
 8001604:	08008164 	.word	0x08008164
 8001608:	0800818c 	.word	0x0800818c
 800160c:	080081b4 	.word	0x080081b4
 8001610:	080081e0 	.word	0x080081e0
 8001614:	08008208 	.word	0x08008208
 8001618:	08008230 	.word	0x08008230
 800161c:	08008258 	.word	0x08008258
 8001620:	08008280 	.word	0x08008280
 8001624:	080082a8 	.word	0x080082a8
 8001628:	4842      	ldr	r0, [pc, #264]	@ (8001734 <servo_test+0x438>)
 800162a:	f003 f989 	bl	8004940 <HAL_UART_Transmit>
      adxl_read();
 800162e:	f7ff fd33 	bl	8001098 <adxl_read>
      CCR_X = PULSE_WIDTH_POS_45 + PULSE_WIDTH_OFFSET_X; // +45°
 8001632:	4b41      	ldr	r3, [pc, #260]	@ (8001738 <servo_test+0x43c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f240 721a 	movw	r2, #1818	@ 0x71a
 800163a:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_POS_45 + PULSE_WIDTH_OFFSET_Y; // +45°
 800163c:	4b3e      	ldr	r3, [pc, #248]	@ (8001738 <servo_test+0x43c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f44f 62e2 	mov.w	r2, #1808	@ 0x710
 8001644:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 8001646:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800164a:	f000 fdd3 	bl	80021f4 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing +45° for X and Y axes:\r\n");
 800164e:	463b      	mov	r3, r7
 8001650:	4a3a      	ldr	r2, [pc, #232]	@ (800173c <servo_test+0x440>)
 8001652:	2164      	movs	r1, #100	@ 0x64
 8001654:	4618      	mov	r0, r3
 8001656:	f004 fa49 	bl	8005aec <sniprintf>
 800165a:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 800165c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800165e:	b29a      	uxth	r2, r3
 8001660:	4639      	mov	r1, r7
 8001662:	f04f 33ff 	mov.w	r3, #4294967295
 8001666:	4833      	ldr	r0, [pc, #204]	@ (8001734 <servo_test+0x438>)
 8001668:	f003 f96a 	bl	8004940 <HAL_UART_Transmit>
      adxl_read();
 800166c:	f7ff fd14 	bl	8001098 <adxl_read>
      CCR_X = PULSE_WIDTH_POS_45 + PULSE_WIDTH_OFFSET_X; // +45°
 8001670:	4b31      	ldr	r3, [pc, #196]	@ (8001738 <servo_test+0x43c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f240 721a 	movw	r2, #1818	@ 0x71a
 8001678:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_NEG_45 + PULSE_WIDTH_OFFSET_Y; // -45°
 800167a:	4b2f      	ldr	r3, [pc, #188]	@ (8001738 <servo_test+0x43c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f240 4276 	movw	r2, #1142	@ 0x476
 8001682:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 8001684:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001688:	f000 fdb4 	bl	80021f4 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing +45° for X, -45° for Y axis:\r\n");
 800168c:	463b      	mov	r3, r7
 800168e:	4a2c      	ldr	r2, [pc, #176]	@ (8001740 <servo_test+0x444>)
 8001690:	2164      	movs	r1, #100	@ 0x64
 8001692:	4618      	mov	r0, r3
 8001694:	f004 fa2a 	bl	8005aec <sniprintf>
 8001698:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 800169a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800169c:	b29a      	uxth	r2, r3
 800169e:	4639      	mov	r1, r7
 80016a0:	f04f 33ff 	mov.w	r3, #4294967295
 80016a4:	4823      	ldr	r0, [pc, #140]	@ (8001734 <servo_test+0x438>)
 80016a6:	f003 f94b 	bl	8004940 <HAL_UART_Transmit>
      adxl_read();
 80016aa:	f7ff fcf5 	bl	8001098 <adxl_read>
      CCR_X = PULSE_WIDTH_NEG_45 + PULSE_WIDTH_OFFSET_X; // -45°
 80016ae:	4b22      	ldr	r3, [pc, #136]	@ (8001738 <servo_test+0x43c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f44f 6290 	mov.w	r2, #1152	@ 0x480
 80016b6:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_POS_45 + PULSE_WIDTH_OFFSET_Y; // +45°
 80016b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001738 <servo_test+0x43c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f44f 62e2 	mov.w	r2, #1808	@ 0x710
 80016c0:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 80016c2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80016c6:	f000 fd95 	bl	80021f4 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing -45° for X, +45° for Y axis:\r\n");
 80016ca:	463b      	mov	r3, r7
 80016cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001744 <servo_test+0x448>)
 80016ce:	2164      	movs	r1, #100	@ 0x64
 80016d0:	4618      	mov	r0, r3
 80016d2:	f004 fa0b 	bl	8005aec <sniprintf>
 80016d6:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 80016d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80016da:	b29a      	uxth	r2, r3
 80016dc:	4639      	mov	r1, r7
 80016de:	f04f 33ff 	mov.w	r3, #4294967295
 80016e2:	4814      	ldr	r0, [pc, #80]	@ (8001734 <servo_test+0x438>)
 80016e4:	f003 f92c 	bl	8004940 <HAL_UART_Transmit>
      adxl_read();
 80016e8:	f7ff fcd6 	bl	8001098 <adxl_read>
      CCR_X = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_X; // 0°
 80016ec:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <servo_test+0x43c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f240 52cd 	movw	r2, #1485	@ 0x5cd
 80016f4:	635a      	str	r2, [r3, #52]	@ 0x34
      CCR_Y = PULSE_WIDTH_0 + PULSE_WIDTH_OFFSET_Y; // 0°
 80016f6:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <servo_test+0x43c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f240 52c3 	movw	r2, #1475	@ 0x5c3
 80016fe:	639a      	str	r2, [r3, #56]	@ 0x38
      HAL_Delay(SERVO_TEST_DELAY);
 8001700:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001704:	f000 fd76 	bl	80021f4 <HAL_Delay>
      len = snprintf(test_pos, sizeof(test_pos), "Testing 0° for X and Y axes:\r\n");
 8001708:	463b      	mov	r3, r7
 800170a:	4a0f      	ldr	r2, [pc, #60]	@ (8001748 <servo_test+0x44c>)
 800170c:	2164      	movs	r1, #100	@ 0x64
 800170e:	4618      	mov	r0, r3
 8001710:	f004 f9ec 	bl	8005aec <sniprintf>
 8001714:	6678      	str	r0, [r7, #100]	@ 0x64
      HAL_UART_Transmit(&huart2, (uint8_t*)test_pos, len, HAL_MAX_DELAY);
 8001716:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001718:	b29a      	uxth	r2, r3
 800171a:	4639      	mov	r1, r7
 800171c:	f04f 33ff 	mov.w	r3, #4294967295
 8001720:	4804      	ldr	r0, [pc, #16]	@ (8001734 <servo_test+0x438>)
 8001722:	f003 f90d 	bl	8004940 <HAL_UART_Transmit>
      adxl_read();
 8001726:	f7ff fcb7 	bl	8001098 <adxl_read>
      // HAL_Delay(SERVO_TEST_DELAY);
      // CCR_X = SERVO_NEUTRAL; // Return X-Axis to Neutral
      // CCR_Y = SERVO_NEUTRAL; // Return Y-Axis to Neutral
      // HAL_Delay(SERVO_TEST_DELAY);
    }
  }
 800172a:	bf00      	nop
 800172c:	3768      	adds	r7, #104	@ 0x68
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200002d8 	.word	0x200002d8
 8001738:	20000248 	.word	0x20000248
 800173c:	080082cc 	.word	0x080082cc
 8001740:	080082f0 	.word	0x080082f0
 8001744:	0800831c 	.word	0x0800831c
 8001748:	08008144 	.word	0x08008144

0800174c <startup_handler>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Prototype Event Handlers */
eSystemState startup_handler(void) {
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  // System startup processes
  // Calibrate/center servos
  return WAITING_STATE;
 8001750:	2301      	movs	r3, #1
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <waiting_handler>:

eSystemState waiting_handler(void) {
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  //*TODO Detect and decode all incoming serial instructions to determine the next state

  // Else
  return WAITING_STATE;
 8001760:	2301      	movs	r3, #1
}
 8001762:	4618      	mov	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <define_profile_handler>:

eSystemState define_profile_handler(void) {
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  // Allow user to define and store a test profile
  return WAITING_STATE;
 8001770:	2301      	movs	r3, #1
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <run_profile_handler>:

eSystemState run_profile_handler(void) {
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  // Run test profile
  // Calls move servo function
  return WAITING_STATE;
 8001780:	2301      	movs	r3, #1
}
 8001782:	4618      	mov	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001792:	f000 fcbd 	bl	8002110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001796:	f000 f847 	bl	8001828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800179a:	f000 f9b7 	bl	8001b0c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800179e:	f000 f98b 	bl	8001ab8 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80017a2:	f000 f8a9 	bl	80018f8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80017a6:	f000 f95d 	bl	8001a64 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80017aa:	f000 f8db 	bl	8001964 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* PWM Timers */
  // Internal Clock (HCLK) = 100 MHz. If Prescaler = (100 - 1) & Max Timer Count = (20000 - 1), then f = 100 MHz / 100 = 1 MHz, T = 1 us, and PWM f = 1/(20000 * T) = 50 Hz
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80017ae:	2100      	movs	r1, #0
 80017b0:	481c      	ldr	r0, [pc, #112]	@ (8001824 <main+0x98>)
 80017b2:	f002 faf5 	bl	8003da0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80017b6:	2104      	movs	r1, #4
 80017b8:	481a      	ldr	r0, [pc, #104]	@ (8001824 <main+0x98>)
 80017ba:	f002 faf1 	bl	8003da0 <HAL_TIM_PWM_Start>
  //*TODO Servo Control and Accelerometer Sample Timer (Basically the system clock)
  // HAL_TIM_Base_Start(&htim1); // Internal Clock (APB2) = 84 MHz. If Prescaler = (84 - 1) & Max Timer Count = (2^16 - 1), then f = 84 MHz / 84 = 1 MHz, T = 1 us, and Max Delay = (2^16 - 1) * T = 65.535 ms

  eSystemState eNextstate = STARTUP_STATE;
 80017be:	2300      	movs	r3, #0
 80017c0:	71fb      	strb	r3, [r7, #7]
  adxl_init();
 80017c2:	f7ff fc1d 	bl	8001000 <adxl_init>
  adxl_id();
 80017c6:	f7ff fc2f 	bl	8001028 <adxl_id>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    switch (eNextstate) {
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d823      	bhi.n	8001818 <main+0x8c>
 80017d0:	a201      	add	r2, pc, #4	@ (adr r2, 80017d8 <main+0x4c>)
 80017d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d6:	bf00      	nop
 80017d8:	080017ed 	.word	0x080017ed
 80017dc:	080017f7 	.word	0x080017f7
 80017e0:	08001805 	.word	0x08001805
 80017e4:	08001819 	.word	0x08001819
 80017e8:	0800180f 	.word	0x0800180f
      case STARTUP_STATE:
          eNextstate = startup_handler();
 80017ec:	f7ff ffae 	bl	800174c <startup_handler>
 80017f0:	4603      	mov	r3, r0
 80017f2:	71fb      	strb	r3, [r7, #7]
          break;
 80017f4:	e015      	b.n	8001822 <main+0x96>
      case WAITING_STATE:
          #ifdef TEST // The following code will only be compiled if TEST is defined in the header file
            servo_test();
 80017f6:	f7ff fd81 	bl	80012fc <servo_test>
          #endif
          
          eNextstate = waiting_handler();
 80017fa:	f7ff ffaf 	bl	800175c <waiting_handler>
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
          break;
 8001802:	e00e      	b.n	8001822 <main+0x96>
      case DEFINE_PROFILE_STATE:
          eNextstate = define_profile_handler();
 8001804:	f7ff ffb2 	bl	800176c <define_profile_handler>
 8001808:	4603      	mov	r3, r0
 800180a:	71fb      	strb	r3, [r7, #7]
          break;
 800180c:	e009      	b.n	8001822 <main+0x96>
      case RUN_PROFILE_STATE:
          eNextstate = run_profile_handler();
 800180e:	f7ff ffb5 	bl	800177c <run_profile_handler>
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
          break;
 8001816:	e004      	b.n	8001822 <main+0x96>
      
      default:
          eNextstate = startup_handler();
 8001818:	f7ff ff98 	bl	800174c <startup_handler>
 800181c:	4603      	mov	r3, r0
 800181e:	71fb      	strb	r3, [r7, #7]
          break;
 8001820:	bf00      	nop
    switch (eNextstate) {
 8001822:	e7d2      	b.n	80017ca <main+0x3e>
 8001824:	20000248 	.word	0x20000248

08001828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b094      	sub	sp, #80	@ 0x50
 800182c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800182e:	f107 0320 	add.w	r3, r7, #32
 8001832:	2230      	movs	r2, #48	@ 0x30
 8001834:	2100      	movs	r1, #0
 8001836:	4618      	mov	r0, r3
 8001838:	f004 f9ef 	bl	8005c1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800184c:	2300      	movs	r3, #0
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	4b27      	ldr	r3, [pc, #156]	@ (80018f0 <SystemClock_Config+0xc8>)
 8001852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001854:	4a26      	ldr	r2, [pc, #152]	@ (80018f0 <SystemClock_Config+0xc8>)
 8001856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800185a:	6413      	str	r3, [r2, #64]	@ 0x40
 800185c:	4b24      	ldr	r3, [pc, #144]	@ (80018f0 <SystemClock_Config+0xc8>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001868:	2300      	movs	r3, #0
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	4b21      	ldr	r3, [pc, #132]	@ (80018f4 <SystemClock_Config+0xcc>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a20      	ldr	r2, [pc, #128]	@ (80018f4 <SystemClock_Config+0xcc>)
 8001872:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	4b1e      	ldr	r3, [pc, #120]	@ (80018f4 <SystemClock_Config+0xcc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001884:	2301      	movs	r3, #1
 8001886:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001888:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800188e:	2302      	movs	r3, #2
 8001890:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001892:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001896:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001898:	2304      	movs	r3, #4
 800189a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800189c:	2364      	movs	r3, #100	@ 0x64
 800189e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018a0:	2302      	movs	r3, #2
 80018a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018a4:	2304      	movs	r3, #4
 80018a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a8:	f107 0320 	add.w	r3, r7, #32
 80018ac:	4618      	mov	r0, r3
 80018ae:	f000 ff61 	bl	8002774 <HAL_RCC_OscConfig>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018b8:	f000 f9ae 	bl	8001c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018bc:	230f      	movs	r3, #15
 80018be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018c0:	2302      	movs	r3, #2
 80018c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018d2:	f107 030c 	add.w	r3, r7, #12
 80018d6:	2103      	movs	r1, #3
 80018d8:	4618      	mov	r0, r3
 80018da:	f001 f9c3 	bl	8002c64 <HAL_RCC_ClockConfig>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80018e4:	f000 f998 	bl	8001c18 <Error_Handler>
  }
}
 80018e8:	bf00      	nop
 80018ea:	3750      	adds	r7, #80	@ 0x50
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40007000 	.word	0x40007000

080018f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80018fc:	4b17      	ldr	r3, [pc, #92]	@ (800195c <MX_SPI3_Init+0x64>)
 80018fe:	4a18      	ldr	r2, [pc, #96]	@ (8001960 <MX_SPI3_Init+0x68>)
 8001900:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001902:	4b16      	ldr	r3, [pc, #88]	@ (800195c <MX_SPI3_Init+0x64>)
 8001904:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001908:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800190a:	4b14      	ldr	r3, [pc, #80]	@ (800195c <MX_SPI3_Init+0x64>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001910:	4b12      	ldr	r3, [pc, #72]	@ (800195c <MX_SPI3_Init+0x64>)
 8001912:	2200      	movs	r2, #0
 8001914:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001916:	4b11      	ldr	r3, [pc, #68]	@ (800195c <MX_SPI3_Init+0x64>)
 8001918:	2202      	movs	r2, #2
 800191a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800191c:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <MX_SPI3_Init+0x64>)
 800191e:	2201      	movs	r2, #1
 8001920:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001922:	4b0e      	ldr	r3, [pc, #56]	@ (800195c <MX_SPI3_Init+0x64>)
 8001924:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001928:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800192a:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <MX_SPI3_Init+0x64>)
 800192c:	2228      	movs	r2, #40	@ 0x28
 800192e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001930:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <MX_SPI3_Init+0x64>)
 8001932:	2200      	movs	r2, #0
 8001934:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001936:	4b09      	ldr	r3, [pc, #36]	@ (800195c <MX_SPI3_Init+0x64>)
 8001938:	2200      	movs	r2, #0
 800193a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800193c:	4b07      	ldr	r3, [pc, #28]	@ (800195c <MX_SPI3_Init+0x64>)
 800193e:	2200      	movs	r2, #0
 8001940:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <MX_SPI3_Init+0x64>)
 8001944:	220a      	movs	r2, #10
 8001946:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001948:	4804      	ldr	r0, [pc, #16]	@ (800195c <MX_SPI3_Init+0x64>)
 800194a:	f001 fbab 	bl	80030a4 <HAL_SPI_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001954:	f000 f960 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	200001f0 	.word	0x200001f0
 8001960:	40003c00 	.word	0x40003c00

08001964 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08e      	sub	sp, #56	@ 0x38
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800196a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001978:	f107 0320 	add.w	r3, r7, #32
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
 8001990:	615a      	str	r2, [r3, #20]
 8001992:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001994:	4b32      	ldr	r3, [pc, #200]	@ (8001a60 <MX_TIM2_Init+0xfc>)
 8001996:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800199a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100 - 1;
 800199c:	4b30      	ldr	r3, [pc, #192]	@ (8001a60 <MX_TIM2_Init+0xfc>)
 800199e:	2263      	movs	r2, #99	@ 0x63
 80019a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a60 <MX_TIM2_Init+0xfc>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000 - 1;
 80019a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a60 <MX_TIM2_Init+0xfc>)
 80019aa:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80019ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a60 <MX_TIM2_Init+0xfc>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a60 <MX_TIM2_Init+0xfc>)
 80019b8:	2280      	movs	r2, #128	@ 0x80
 80019ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019bc:	4828      	ldr	r0, [pc, #160]	@ (8001a60 <MX_TIM2_Init+0xfc>)
 80019be:	f002 f947 	bl	8003c50 <HAL_TIM_Base_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80019c8:	f000 f926 	bl	8001c18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019d6:	4619      	mov	r1, r3
 80019d8:	4821      	ldr	r0, [pc, #132]	@ (8001a60 <MX_TIM2_Init+0xfc>)
 80019da:	f002 fb53 	bl	8004084 <HAL_TIM_ConfigClockSource>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80019e4:	f000 f918 	bl	8001c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019e8:	481d      	ldr	r0, [pc, #116]	@ (8001a60 <MX_TIM2_Init+0xfc>)
 80019ea:	f002 f980 	bl	8003cee <HAL_TIM_PWM_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80019f4:	f000 f910 	bl	8001c18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f8:	2300      	movs	r3, #0
 80019fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a00:	f107 0320 	add.w	r3, r7, #32
 8001a04:	4619      	mov	r1, r3
 8001a06:	4816      	ldr	r0, [pc, #88]	@ (8001a60 <MX_TIM2_Init+0xfc>)
 8001a08:	f002 fedc 	bl	80047c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001a12:	f000 f901 	bl	8001c18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a16:	2360      	movs	r3, #96	@ 0x60
 8001a18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	2200      	movs	r2, #0
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480c      	ldr	r0, [pc, #48]	@ (8001a60 <MX_TIM2_Init+0xfc>)
 8001a2e:	f002 fa67 	bl	8003f00 <HAL_TIM_PWM_ConfigChannel>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001a38:	f000 f8ee 	bl	8001c18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	2204      	movs	r2, #4
 8001a40:	4619      	mov	r1, r3
 8001a42:	4807      	ldr	r0, [pc, #28]	@ (8001a60 <MX_TIM2_Init+0xfc>)
 8001a44:	f002 fa5c 	bl	8003f00 <HAL_TIM_PWM_ConfigChannel>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001a4e:	f000 f8e3 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a52:	4803      	ldr	r0, [pc, #12]	@ (8001a60 <MX_TIM2_Init+0xfc>)
 8001a54:	f000 f976 	bl	8001d44 <HAL_TIM_MspPostInit>

}
 8001a58:	bf00      	nop
 8001a5a:	3738      	adds	r7, #56	@ 0x38
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000248 	.word	0x20000248

08001a64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a68:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <MX_USART1_UART_Init+0x4c>)
 8001a6a:	4a12      	ldr	r2, [pc, #72]	@ (8001ab4 <MX_USART1_UART_Init+0x50>)
 8001a6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = BAUD_RATE;
 8001a6e:	4b10      	ldr	r3, [pc, #64]	@ (8001ab0 <MX_USART1_UART_Init+0x4c>)
 8001a70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab0 <MX_USART1_UART_Init+0x4c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <MX_USART1_UART_Init+0x4c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a82:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <MX_USART1_UART_Init+0x4c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a88:	4b09      	ldr	r3, [pc, #36]	@ (8001ab0 <MX_USART1_UART_Init+0x4c>)
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a8e:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <MX_USART1_UART_Init+0x4c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a94:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <MX_USART1_UART_Init+0x4c>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a9a:	4805      	ldr	r0, [pc, #20]	@ (8001ab0 <MX_USART1_UART_Init+0x4c>)
 8001a9c:	f002 ff00 	bl	80048a0 <HAL_UART_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001aa6:	f000 f8b7 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000290 	.word	0x20000290
 8001ab4:	40011000 	.word	0x40011000

08001ab8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001abc:	4b11      	ldr	r3, [pc, #68]	@ (8001b04 <MX_USART2_UART_Init+0x4c>)
 8001abe:	4a12      	ldr	r2, [pc, #72]	@ (8001b08 <MX_USART2_UART_Init+0x50>)
 8001ac0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = BAUD_RATE;
 8001ac2:	4b10      	ldr	r3, [pc, #64]	@ (8001b04 <MX_USART2_UART_Init+0x4c>)
 8001ac4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ac8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aca:	4b0e      	ldr	r3, [pc, #56]	@ (8001b04 <MX_USART2_UART_Init+0x4c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b04 <MX_USART2_UART_Init+0x4c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b04 <MX_USART2_UART_Init+0x4c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001adc:	4b09      	ldr	r3, [pc, #36]	@ (8001b04 <MX_USART2_UART_Init+0x4c>)
 8001ade:	220c      	movs	r2, #12
 8001ae0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ae2:	4b08      	ldr	r3, [pc, #32]	@ (8001b04 <MX_USART2_UART_Init+0x4c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <MX_USART2_UART_Init+0x4c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aee:	4805      	ldr	r0, [pc, #20]	@ (8001b04 <MX_USART2_UART_Init+0x4c>)
 8001af0:	f002 fed6 	bl	80048a0 <HAL_UART_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001afa:	f000 f88d 	bl	8001c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200002d8 	.word	0x200002d8
 8001b08:	40004400 	.word	0x40004400

08001b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	@ 0x28
 8001b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	60da      	str	r2, [r3, #12]
 8001b20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	4b38      	ldr	r3, [pc, #224]	@ (8001c08 <MX_GPIO_Init+0xfc>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	4a37      	ldr	r2, [pc, #220]	@ (8001c08 <MX_GPIO_Init+0xfc>)
 8001b2c:	f043 0304 	orr.w	r3, r3, #4
 8001b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b32:	4b35      	ldr	r3, [pc, #212]	@ (8001c08 <MX_GPIO_Init+0xfc>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	613b      	str	r3, [r7, #16]
 8001b3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	4b31      	ldr	r3, [pc, #196]	@ (8001c08 <MX_GPIO_Init+0xfc>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	4a30      	ldr	r2, [pc, #192]	@ (8001c08 <MX_GPIO_Init+0xfc>)
 8001b48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c08 <MX_GPIO_Init+0xfc>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c08 <MX_GPIO_Init+0xfc>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	4a29      	ldr	r2, [pc, #164]	@ (8001c08 <MX_GPIO_Init+0xfc>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6a:	4b27      	ldr	r3, [pc, #156]	@ (8001c08 <MX_GPIO_Init+0xfc>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	4b23      	ldr	r3, [pc, #140]	@ (8001c08 <MX_GPIO_Init+0xfc>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	4a22      	ldr	r2, [pc, #136]	@ (8001c08 <MX_GPIO_Init+0xfc>)
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b86:	4b20      	ldr	r3, [pc, #128]	@ (8001c08 <MX_GPIO_Init+0xfc>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2120      	movs	r1, #32
 8001b96:	481d      	ldr	r0, [pc, #116]	@ (8001c0c <MX_GPIO_Init+0x100>)
 8001b98:	f000 fdd2 	bl	8002740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADXL_CS_GPIO_Port, ADXL_CS_Pin, GPIO_PIN_RESET);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ba2:	481b      	ldr	r0, [pc, #108]	@ (8001c10 <MX_GPIO_Init+0x104>)
 8001ba4:	f000 fdcc 	bl	8002740 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ba8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4815      	ldr	r0, [pc, #84]	@ (8001c14 <MX_GPIO_Init+0x108>)
 8001bc0:	f000 fc22 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001bc4:	2320      	movs	r3, #32
 8001bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480c      	ldr	r0, [pc, #48]	@ (8001c0c <MX_GPIO_Init+0x100>)
 8001bdc:	f000 fc14 	bl	8002408 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADXL_CS_Pin */
  GPIO_InitStruct.Pin = ADXL_CS_Pin;
 8001be0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be6:	2301      	movs	r3, #1
 8001be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ADXL_CS_GPIO_Port, &GPIO_InitStruct);
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4805      	ldr	r0, [pc, #20]	@ (8001c10 <MX_GPIO_Init+0x104>)
 8001bfa:	f000 fc05 	bl	8002408 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bfe:	bf00      	nop
 8001c00:	3728      	adds	r7, #40	@ 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40020000 	.word	0x40020000
 8001c10:	40020400 	.word	0x40020400
 8001c14:	40020800 	.word	0x40020800

08001c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c1c:	b672      	cpsid	i
}
 8001c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <Error_Handler+0x8>

08001c24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <HAL_MspInit+0x4c>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	4a0f      	ldr	r2, [pc, #60]	@ (8001c70 <HAL_MspInit+0x4c>)
 8001c34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c70 <HAL_MspInit+0x4c>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <HAL_MspInit+0x4c>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	4a08      	ldr	r2, [pc, #32]	@ (8001c70 <HAL_MspInit+0x4c>)
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c56:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <HAL_MspInit+0x4c>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c62:	2007      	movs	r0, #7
 8001c64:	f000 fb9c 	bl	80023a0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40023800 	.word	0x40023800

08001c74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08a      	sub	sp, #40	@ 0x28
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a19      	ldr	r2, [pc, #100]	@ (8001cf8 <HAL_SPI_MspInit+0x84>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d12b      	bne.n	8001cee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	4b18      	ldr	r3, [pc, #96]	@ (8001cfc <HAL_SPI_MspInit+0x88>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	4a17      	ldr	r2, [pc, #92]	@ (8001cfc <HAL_SPI_MspInit+0x88>)
 8001ca0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca6:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <HAL_SPI_MspInit+0x88>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cae:	613b      	str	r3, [r7, #16]
 8001cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	4b11      	ldr	r3, [pc, #68]	@ (8001cfc <HAL_SPI_MspInit+0x88>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	4a10      	ldr	r2, [pc, #64]	@ (8001cfc <HAL_SPI_MspInit+0x88>)
 8001cbc:	f043 0302 	orr.w	r3, r3, #2
 8001cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001cfc <HAL_SPI_MspInit+0x88>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = ADXL_SCL_Pin|ADXL_SDO_Pin|ADXL_SDA_Pin;
 8001cce:	2338      	movs	r3, #56	@ 0x38
 8001cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cde:	2306      	movs	r3, #6
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4805      	ldr	r0, [pc, #20]	@ (8001d00 <HAL_SPI_MspInit+0x8c>)
 8001cea:	f000 fb8d 	bl	8002408 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001cee:	bf00      	nop
 8001cf0:	3728      	adds	r7, #40	@ 0x28
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40003c00 	.word	0x40003c00
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40020400 	.word	0x40020400

08001d04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d14:	d10d      	bne.n	8001d32 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <HAL_TIM_Base_MspInit+0x3c>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	4a08      	ldr	r2, [pc, #32]	@ (8001d40 <HAL_TIM_Base_MspInit+0x3c>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d26:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <HAL_TIM_Base_MspInit+0x3c>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d32:	bf00      	nop
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800

08001d44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d64:	d11d      	bne.n	8001da2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	4b10      	ldr	r3, [pc, #64]	@ (8001dac <HAL_TIM_MspPostInit+0x68>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	4a0f      	ldr	r2, [pc, #60]	@ (8001dac <HAL_TIM_MspPostInit+0x68>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d76:	4b0d      	ldr	r3, [pc, #52]	@ (8001dac <HAL_TIM_MspPostInit+0x68>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PWM_X_Pin|PWM_Y_Pin;
 8001d82:	2303      	movs	r3, #3
 8001d84:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d92:	2301      	movs	r3, #1
 8001d94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d96:	f107 030c 	add.w	r3, r7, #12
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4804      	ldr	r0, [pc, #16]	@ (8001db0 <HAL_TIM_MspPostInit+0x6c>)
 8001d9e:	f000 fb33 	bl	8002408 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001da2:	bf00      	nop
 8001da4:	3720      	adds	r7, #32
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40020000 	.word	0x40020000

08001db4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08c      	sub	sp, #48	@ 0x30
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a32      	ldr	r2, [pc, #200]	@ (8001e9c <HAL_UART_MspInit+0xe8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d12d      	bne.n	8001e32 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
 8001dda:	4b31      	ldr	r3, [pc, #196]	@ (8001ea0 <HAL_UART_MspInit+0xec>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dde:	4a30      	ldr	r2, [pc, #192]	@ (8001ea0 <HAL_UART_MspInit+0xec>)
 8001de0:	f043 0310 	orr.w	r3, r3, #16
 8001de4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001de6:	4b2e      	ldr	r3, [pc, #184]	@ (8001ea0 <HAL_UART_MspInit+0xec>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	61bb      	str	r3, [r7, #24]
 8001df0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea0 <HAL_UART_MspInit+0xec>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfa:	4a29      	ldr	r2, [pc, #164]	@ (8001ea0 <HAL_UART_MspInit+0xec>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e02:	4b27      	ldr	r3, [pc, #156]	@ (8001ea0 <HAL_UART_MspInit+0xec>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e0e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e20:	2307      	movs	r3, #7
 8001e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e24:	f107 031c 	add.w	r3, r7, #28
 8001e28:	4619      	mov	r1, r3
 8001e2a:	481e      	ldr	r0, [pc, #120]	@ (8001ea4 <HAL_UART_MspInit+0xf0>)
 8001e2c:	f000 faec 	bl	8002408 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e30:	e030      	b.n	8001e94 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a1c      	ldr	r2, [pc, #112]	@ (8001ea8 <HAL_UART_MspInit+0xf4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d12b      	bne.n	8001e94 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	4b17      	ldr	r3, [pc, #92]	@ (8001ea0 <HAL_UART_MspInit+0xec>)
 8001e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e44:	4a16      	ldr	r2, [pc, #88]	@ (8001ea0 <HAL_UART_MspInit+0xec>)
 8001e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ea0 <HAL_UART_MspInit+0xec>)
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <HAL_UART_MspInit+0xec>)
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e60:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea0 <HAL_UART_MspInit+0xec>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e68:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea0 <HAL_UART_MspInit+0xec>)
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e74:	230c      	movs	r3, #12
 8001e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e80:	2303      	movs	r3, #3
 8001e82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e84:	2307      	movs	r3, #7
 8001e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e88:	f107 031c 	add.w	r3, r7, #28
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4805      	ldr	r0, [pc, #20]	@ (8001ea4 <HAL_UART_MspInit+0xf0>)
 8001e90:	f000 faba 	bl	8002408 <HAL_GPIO_Init>
}
 8001e94:	bf00      	nop
 8001e96:	3730      	adds	r7, #48	@ 0x30
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40011000 	.word	0x40011000
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020000 	.word	0x40020000
 8001ea8:	40004400 	.word	0x40004400

08001eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eb0:	bf00      	nop
 8001eb2:	e7fd      	b.n	8001eb0 <NMI_Handler+0x4>

08001eb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb8:	bf00      	nop
 8001eba:	e7fd      	b.n	8001eb8 <HardFault_Handler+0x4>

08001ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ec0:	bf00      	nop
 8001ec2:	e7fd      	b.n	8001ec0 <MemManage_Handler+0x4>

08001ec4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec8:	bf00      	nop
 8001eca:	e7fd      	b.n	8001ec8 <BusFault_Handler+0x4>

08001ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <UsageFault_Handler+0x4>

08001ed4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f02:	f000 f957 	bl	80021b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	af00      	add	r7, sp, #0
  return 1;
 8001f0e:	2301      	movs	r3, #1
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <_kill>:

int _kill(int pid, int sig)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f24:	f003 fecc 	bl	8005cc0 <__errno>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2216      	movs	r2, #22
 8001f2c:	601a      	str	r2, [r3, #0]
  return -1;
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <_exit>:

void _exit (int status)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f42:	f04f 31ff 	mov.w	r1, #4294967295
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff ffe7 	bl	8001f1a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f4c:	bf00      	nop
 8001f4e:	e7fd      	b.n	8001f4c <_exit+0x12>

08001f50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	e00a      	b.n	8001f78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f62:	f3af 8000 	nop.w
 8001f66:	4601      	mov	r1, r0
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	60ba      	str	r2, [r7, #8]
 8001f6e:	b2ca      	uxtb	r2, r1
 8001f70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3301      	adds	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	dbf0      	blt.n	8001f62 <_read+0x12>
  }

  return len;
 8001f80:	687b      	ldr	r3, [r7, #4]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	e009      	b.n	8001fb0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	60ba      	str	r2, [r7, #8]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	3301      	adds	r3, #1
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	dbf1      	blt.n	8001f9c <_write+0x12>
  }
  return len;
 8001fb8:	687b      	ldr	r3, [r7, #4]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <_close>:

int _close(int file)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fea:	605a      	str	r2, [r3, #4]
  return 0;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <_isatty>:

int _isatty(int file)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002002:	2301      	movs	r3, #1
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002034:	4a14      	ldr	r2, [pc, #80]	@ (8002088 <_sbrk+0x5c>)
 8002036:	4b15      	ldr	r3, [pc, #84]	@ (800208c <_sbrk+0x60>)
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002040:	4b13      	ldr	r3, [pc, #76]	@ (8002090 <_sbrk+0x64>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d102      	bne.n	800204e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002048:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <_sbrk+0x64>)
 800204a:	4a12      	ldr	r2, [pc, #72]	@ (8002094 <_sbrk+0x68>)
 800204c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800204e:	4b10      	ldr	r3, [pc, #64]	@ (8002090 <_sbrk+0x64>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	429a      	cmp	r2, r3
 800205a:	d207      	bcs.n	800206c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800205c:	f003 fe30 	bl	8005cc0 <__errno>
 8002060:	4603      	mov	r3, r0
 8002062:	220c      	movs	r2, #12
 8002064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002066:	f04f 33ff 	mov.w	r3, #4294967295
 800206a:	e009      	b.n	8002080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800206c:	4b08      	ldr	r3, [pc, #32]	@ (8002090 <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002072:	4b07      	ldr	r3, [pc, #28]	@ (8002090 <_sbrk+0x64>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	4a05      	ldr	r2, [pc, #20]	@ (8002090 <_sbrk+0x64>)
 800207c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800207e:	68fb      	ldr	r3, [r7, #12]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20020000 	.word	0x20020000
 800208c:	00000400 	.word	0x00000400
 8002090:	2000033c 	.word	0x2000033c
 8002094:	20000490 	.word	0x20000490

08002098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800209c:	4b06      	ldr	r3, [pc, #24]	@ (80020b8 <SystemInit+0x20>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a2:	4a05      	ldr	r2, [pc, #20]	@ (80020b8 <SystemInit+0x20>)
 80020a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020c0:	480d      	ldr	r0, [pc, #52]	@ (80020f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020c2:	490e      	ldr	r1, [pc, #56]	@ (80020fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020c4:	4a0e      	ldr	r2, [pc, #56]	@ (8002100 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c8:	e002      	b.n	80020d0 <LoopCopyDataInit>

080020ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ce:	3304      	adds	r3, #4

080020d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d4:	d3f9      	bcc.n	80020ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002104 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020d8:	4c0b      	ldr	r4, [pc, #44]	@ (8002108 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020dc:	e001      	b.n	80020e2 <LoopFillZerobss>

080020de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e0:	3204      	adds	r2, #4

080020e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e4:	d3fb      	bcc.n	80020de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020e6:	f7ff ffd7 	bl	8002098 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ea:	f003 fdef 	bl	8005ccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ee:	f7ff fb4d 	bl	800178c <main>
  bx  lr    
 80020f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020fc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002100:	08008718 	.word	0x08008718
  ldr r2, =_sbss
 8002104:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002108:	20000490 	.word	0x20000490

0800210c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800210c:	e7fe      	b.n	800210c <ADC_IRQHandler>
	...

08002110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002114:	4b0e      	ldr	r3, [pc, #56]	@ (8002150 <HAL_Init+0x40>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a0d      	ldr	r2, [pc, #52]	@ (8002150 <HAL_Init+0x40>)
 800211a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800211e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002120:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <HAL_Init+0x40>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0a      	ldr	r2, [pc, #40]	@ (8002150 <HAL_Init+0x40>)
 8002126:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800212a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800212c:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <HAL_Init+0x40>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a07      	ldr	r2, [pc, #28]	@ (8002150 <HAL_Init+0x40>)
 8002132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002136:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002138:	2003      	movs	r0, #3
 800213a:	f000 f931 	bl	80023a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800213e:	2000      	movs	r0, #0
 8002140:	f000 f808 	bl	8002154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002144:	f7ff fd6e 	bl	8001c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40023c00 	.word	0x40023c00

08002154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800215c:	4b12      	ldr	r3, [pc, #72]	@ (80021a8 <HAL_InitTick+0x54>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b12      	ldr	r3, [pc, #72]	@ (80021ac <HAL_InitTick+0x58>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	4619      	mov	r1, r3
 8002166:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800216a:	fbb3 f3f1 	udiv	r3, r3, r1
 800216e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002172:	4618      	mov	r0, r3
 8002174:	f000 f93b 	bl	80023ee <HAL_SYSTICK_Config>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e00e      	b.n	80021a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b0f      	cmp	r3, #15
 8002186:	d80a      	bhi.n	800219e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002188:	2200      	movs	r2, #0
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	f04f 30ff 	mov.w	r0, #4294967295
 8002190:	f000 f911 	bl	80023b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002194:	4a06      	ldr	r2, [pc, #24]	@ (80021b0 <HAL_InitTick+0x5c>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
 800219c:	e000      	b.n	80021a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3708      	adds	r7, #8
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000000 	.word	0x20000000
 80021ac:	20000008 	.word	0x20000008
 80021b0:	20000004 	.word	0x20000004

080021b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b8:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <HAL_IncTick+0x20>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <HAL_IncTick+0x24>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4413      	add	r3, r2
 80021c4:	4a04      	ldr	r2, [pc, #16]	@ (80021d8 <HAL_IncTick+0x24>)
 80021c6:	6013      	str	r3, [r2, #0]
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20000008 	.word	0x20000008
 80021d8:	20000340 	.word	0x20000340

080021dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  return uwTick;
 80021e0:	4b03      	ldr	r3, [pc, #12]	@ (80021f0 <HAL_GetTick+0x14>)
 80021e2:	681b      	ldr	r3, [r3, #0]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	20000340 	.word	0x20000340

080021f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021fc:	f7ff ffee 	bl	80021dc <HAL_GetTick>
 8002200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220c:	d005      	beq.n	800221a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800220e:	4b0a      	ldr	r3, [pc, #40]	@ (8002238 <HAL_Delay+0x44>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	461a      	mov	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	4413      	add	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800221a:	bf00      	nop
 800221c:	f7ff ffde 	bl	80021dc <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	429a      	cmp	r2, r3
 800222a:	d8f7      	bhi.n	800221c <HAL_Delay+0x28>
  {
  }
}
 800222c:	bf00      	nop
 800222e:	bf00      	nop
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000008 	.word	0x20000008

0800223c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800224c:	4b0c      	ldr	r3, [pc, #48]	@ (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002258:	4013      	ands	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002264:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002268:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800226c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226e:	4a04      	ldr	r2, [pc, #16]	@ (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	60d3      	str	r3, [r2, #12]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002288:	4b04      	ldr	r3, [pc, #16]	@ (800229c <__NVIC_GetPriorityGrouping+0x18>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	0a1b      	lsrs	r3, r3, #8
 800228e:	f003 0307 	and.w	r3, r3, #7
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	6039      	str	r1, [r7, #0]
 80022aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	db0a      	blt.n	80022ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	490c      	ldr	r1, [pc, #48]	@ (80022ec <__NVIC_SetPriority+0x4c>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	0112      	lsls	r2, r2, #4
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	440b      	add	r3, r1
 80022c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c8:	e00a      	b.n	80022e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4908      	ldr	r1, [pc, #32]	@ (80022f0 <__NVIC_SetPriority+0x50>)
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	3b04      	subs	r3, #4
 80022d8:	0112      	lsls	r2, r2, #4
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	440b      	add	r3, r1
 80022de:	761a      	strb	r2, [r3, #24]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000e100 	.word	0xe000e100
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b089      	sub	sp, #36	@ 0x24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f1c3 0307 	rsb	r3, r3, #7
 800230e:	2b04      	cmp	r3, #4
 8002310:	bf28      	it	cs
 8002312:	2304      	movcs	r3, #4
 8002314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3304      	adds	r3, #4
 800231a:	2b06      	cmp	r3, #6
 800231c:	d902      	bls.n	8002324 <NVIC_EncodePriority+0x30>
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3b03      	subs	r3, #3
 8002322:	e000      	b.n	8002326 <NVIC_EncodePriority+0x32>
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002328:	f04f 32ff 	mov.w	r2, #4294967295
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43da      	mvns	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	401a      	ands	r2, r3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800233c:	f04f 31ff 	mov.w	r1, #4294967295
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa01 f303 	lsl.w	r3, r1, r3
 8002346:	43d9      	mvns	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234c:	4313      	orrs	r3, r2
         );
}
 800234e:	4618      	mov	r0, r3
 8002350:	3724      	adds	r7, #36	@ 0x24
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800236c:	d301      	bcc.n	8002372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800236e:	2301      	movs	r3, #1
 8002370:	e00f      	b.n	8002392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002372:	4a0a      	ldr	r2, [pc, #40]	@ (800239c <SysTick_Config+0x40>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800237a:	210f      	movs	r1, #15
 800237c:	f04f 30ff 	mov.w	r0, #4294967295
 8002380:	f7ff ff8e 	bl	80022a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002384:	4b05      	ldr	r3, [pc, #20]	@ (800239c <SysTick_Config+0x40>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800238a:	4b04      	ldr	r3, [pc, #16]	@ (800239c <SysTick_Config+0x40>)
 800238c:	2207      	movs	r2, #7
 800238e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	e000e010 	.word	0xe000e010

080023a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ff47 	bl	800223c <__NVIC_SetPriorityGrouping>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b086      	sub	sp, #24
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c8:	f7ff ff5c 	bl	8002284 <__NVIC_GetPriorityGrouping>
 80023cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	6978      	ldr	r0, [r7, #20]
 80023d4:	f7ff ff8e 	bl	80022f4 <NVIC_EncodePriority>
 80023d8:	4602      	mov	r2, r0
 80023da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff5d 	bl	80022a0 <__NVIC_SetPriority>
}
 80023e6:	bf00      	nop
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff ffb0 	bl	800235c <SysTick_Config>
 80023fc:	4603      	mov	r3, r0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	@ 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
 8002422:	e159      	b.n	80026d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002424:	2201      	movs	r2, #1
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	4013      	ands	r3, r2
 8002436:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	429a      	cmp	r2, r3
 800243e:	f040 8148 	bne.w	80026d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	2b01      	cmp	r3, #1
 800244c:	d005      	beq.n	800245a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002456:	2b02      	cmp	r3, #2
 8002458:	d130      	bne.n	80024bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	2203      	movs	r2, #3
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	43db      	mvns	r3, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4013      	ands	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002490:	2201      	movs	r2, #1
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	091b      	lsrs	r3, r3, #4
 80024a6:	f003 0201 	and.w	r2, r3, #1
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d017      	beq.n	80024f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	2203      	movs	r2, #3
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0303 	and.w	r3, r3, #3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d123      	bne.n	800254c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	08da      	lsrs	r2, r3, #3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3208      	adds	r2, #8
 800250c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	220f      	movs	r2, #15
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	691a      	ldr	r2, [r3, #16]
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	08da      	lsrs	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3208      	adds	r2, #8
 8002546:	69b9      	ldr	r1, [r7, #24]
 8002548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	2203      	movs	r2, #3
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	43db      	mvns	r3, r3
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4013      	ands	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0203 	and.w	r2, r3, #3
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	fa02 f303 	lsl.w	r3, r2, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 80a2 	beq.w	80026d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	4b57      	ldr	r3, [pc, #348]	@ (80026f0 <HAL_GPIO_Init+0x2e8>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	4a56      	ldr	r2, [pc, #344]	@ (80026f0 <HAL_GPIO_Init+0x2e8>)
 8002598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800259c:	6453      	str	r3, [r2, #68]	@ 0x44
 800259e:	4b54      	ldr	r3, [pc, #336]	@ (80026f0 <HAL_GPIO_Init+0x2e8>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025aa:	4a52      	ldr	r2, [pc, #328]	@ (80026f4 <HAL_GPIO_Init+0x2ec>)
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	089b      	lsrs	r3, r3, #2
 80025b0:	3302      	adds	r3, #2
 80025b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	220f      	movs	r2, #15
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a49      	ldr	r2, [pc, #292]	@ (80026f8 <HAL_GPIO_Init+0x2f0>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d019      	beq.n	800260a <HAL_GPIO_Init+0x202>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a48      	ldr	r2, [pc, #288]	@ (80026fc <HAL_GPIO_Init+0x2f4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d013      	beq.n	8002606 <HAL_GPIO_Init+0x1fe>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a47      	ldr	r2, [pc, #284]	@ (8002700 <HAL_GPIO_Init+0x2f8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00d      	beq.n	8002602 <HAL_GPIO_Init+0x1fa>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a46      	ldr	r2, [pc, #280]	@ (8002704 <HAL_GPIO_Init+0x2fc>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d007      	beq.n	80025fe <HAL_GPIO_Init+0x1f6>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a45      	ldr	r2, [pc, #276]	@ (8002708 <HAL_GPIO_Init+0x300>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d101      	bne.n	80025fa <HAL_GPIO_Init+0x1f2>
 80025f6:	2304      	movs	r3, #4
 80025f8:	e008      	b.n	800260c <HAL_GPIO_Init+0x204>
 80025fa:	2307      	movs	r3, #7
 80025fc:	e006      	b.n	800260c <HAL_GPIO_Init+0x204>
 80025fe:	2303      	movs	r3, #3
 8002600:	e004      	b.n	800260c <HAL_GPIO_Init+0x204>
 8002602:	2302      	movs	r3, #2
 8002604:	e002      	b.n	800260c <HAL_GPIO_Init+0x204>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <HAL_GPIO_Init+0x204>
 800260a:	2300      	movs	r3, #0
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	f002 0203 	and.w	r2, r2, #3
 8002612:	0092      	lsls	r2, r2, #2
 8002614:	4093      	lsls	r3, r2
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800261c:	4935      	ldr	r1, [pc, #212]	@ (80026f4 <HAL_GPIO_Init+0x2ec>)
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	089b      	lsrs	r3, r3, #2
 8002622:	3302      	adds	r3, #2
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800262a:	4b38      	ldr	r3, [pc, #224]	@ (800270c <HAL_GPIO_Init+0x304>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	43db      	mvns	r3, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4013      	ands	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800264e:	4a2f      	ldr	r2, [pc, #188]	@ (800270c <HAL_GPIO_Init+0x304>)
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002654:	4b2d      	ldr	r3, [pc, #180]	@ (800270c <HAL_GPIO_Init+0x304>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	43db      	mvns	r3, r3
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4013      	ands	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002670:	69ba      	ldr	r2, [r7, #24]
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002678:	4a24      	ldr	r2, [pc, #144]	@ (800270c <HAL_GPIO_Init+0x304>)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800267e:	4b23      	ldr	r3, [pc, #140]	@ (800270c <HAL_GPIO_Init+0x304>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	43db      	mvns	r3, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4013      	ands	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026a2:	4a1a      	ldr	r2, [pc, #104]	@ (800270c <HAL_GPIO_Init+0x304>)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a8:	4b18      	ldr	r3, [pc, #96]	@ (800270c <HAL_GPIO_Init+0x304>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026cc:	4a0f      	ldr	r2, [pc, #60]	@ (800270c <HAL_GPIO_Init+0x304>)
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	3301      	adds	r3, #1
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	2b0f      	cmp	r3, #15
 80026dc:	f67f aea2 	bls.w	8002424 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
 80026e4:	3724      	adds	r7, #36	@ 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40013800 	.word	0x40013800
 80026f8:	40020000 	.word	0x40020000
 80026fc:	40020400 	.word	0x40020400
 8002700:	40020800 	.word	0x40020800
 8002704:	40020c00 	.word	0x40020c00
 8002708:	40021000 	.word	0x40021000
 800270c:	40013c00 	.word	0x40013c00

08002710 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	460b      	mov	r3, r1
 800271a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	887b      	ldrh	r3, [r7, #2]
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d002      	beq.n	800272e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
 800272c:	e001      	b.n	8002732 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002732:	7bfb      	ldrb	r3, [r7, #15]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	460b      	mov	r3, r1
 800274a:	807b      	strh	r3, [r7, #2]
 800274c:	4613      	mov	r3, r2
 800274e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002750:	787b      	ldrb	r3, [r7, #1]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002756:	887a      	ldrh	r2, [r7, #2]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800275c:	e003      	b.n	8002766 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800275e:	887b      	ldrh	r3, [r7, #2]
 8002760:	041a      	lsls	r2, r3, #16
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	619a      	str	r2, [r3, #24]
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
	...

08002774 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e267      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d075      	beq.n	800287e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002792:	4b88      	ldr	r3, [pc, #544]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b04      	cmp	r3, #4
 800279c:	d00c      	beq.n	80027b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800279e:	4b85      	ldr	r3, [pc, #532]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d112      	bne.n	80027d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027aa:	4b82      	ldr	r3, [pc, #520]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027b6:	d10b      	bne.n	80027d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b8:	4b7e      	ldr	r3, [pc, #504]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d05b      	beq.n	800287c <HAL_RCC_OscConfig+0x108>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d157      	bne.n	800287c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e242      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027d8:	d106      	bne.n	80027e8 <HAL_RCC_OscConfig+0x74>
 80027da:	4b76      	ldr	r3, [pc, #472]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a75      	ldr	r2, [pc, #468]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 80027e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e4:	6013      	str	r3, [r2, #0]
 80027e6:	e01d      	b.n	8002824 <HAL_RCC_OscConfig+0xb0>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027f0:	d10c      	bne.n	800280c <HAL_RCC_OscConfig+0x98>
 80027f2:	4b70      	ldr	r3, [pc, #448]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a6f      	ldr	r2, [pc, #444]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 80027f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	4b6d      	ldr	r3, [pc, #436]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a6c      	ldr	r2, [pc, #432]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 8002804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	e00b      	b.n	8002824 <HAL_RCC_OscConfig+0xb0>
 800280c:	4b69      	ldr	r3, [pc, #420]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a68      	ldr	r2, [pc, #416]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 8002812:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	4b66      	ldr	r3, [pc, #408]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a65      	ldr	r2, [pc, #404]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 800281e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002822:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d013      	beq.n	8002854 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7ff fcd6 	bl	80021dc <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002834:	f7ff fcd2 	bl	80021dc <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b64      	cmp	r3, #100	@ 0x64
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e207      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002846:	4b5b      	ldr	r3, [pc, #364]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0xc0>
 8002852:	e014      	b.n	800287e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7ff fcc2 	bl	80021dc <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800285c:	f7ff fcbe 	bl	80021dc <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b64      	cmp	r3, #100	@ 0x64
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e1f3      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286e:	4b51      	ldr	r3, [pc, #324]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0xe8>
 800287a:	e000      	b.n	800287e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800287c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d063      	beq.n	8002952 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800288a:	4b4a      	ldr	r3, [pc, #296]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00b      	beq.n	80028ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002896:	4b47      	ldr	r3, [pc, #284]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d11c      	bne.n	80028dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028a2:	4b44      	ldr	r3, [pc, #272]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d116      	bne.n	80028dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ae:	4b41      	ldr	r3, [pc, #260]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d005      	beq.n	80028c6 <HAL_RCC_OscConfig+0x152>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d001      	beq.n	80028c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e1c7      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c6:	4b3b      	ldr	r3, [pc, #236]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	4937      	ldr	r1, [pc, #220]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028da:	e03a      	b.n	8002952 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d020      	beq.n	8002926 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028e4:	4b34      	ldr	r3, [pc, #208]	@ (80029b8 <HAL_RCC_OscConfig+0x244>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ea:	f7ff fc77 	bl	80021dc <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f2:	f7ff fc73 	bl	80021dc <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e1a8      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002904:	4b2b      	ldr	r3, [pc, #172]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0f0      	beq.n	80028f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002910:	4b28      	ldr	r3, [pc, #160]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4925      	ldr	r1, [pc, #148]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 8002920:	4313      	orrs	r3, r2
 8002922:	600b      	str	r3, [r1, #0]
 8002924:	e015      	b.n	8002952 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002926:	4b24      	ldr	r3, [pc, #144]	@ (80029b8 <HAL_RCC_OscConfig+0x244>)
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7ff fc56 	bl	80021dc <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002934:	f7ff fc52 	bl	80021dc <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e187      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002946:	4b1b      	ldr	r3, [pc, #108]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d036      	beq.n	80029cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d016      	beq.n	8002994 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002966:	4b15      	ldr	r3, [pc, #84]	@ (80029bc <HAL_RCC_OscConfig+0x248>)
 8002968:	2201      	movs	r2, #1
 800296a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296c:	f7ff fc36 	bl	80021dc <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002974:	f7ff fc32 	bl	80021dc <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e167      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002986:	4b0b      	ldr	r3, [pc, #44]	@ (80029b4 <HAL_RCC_OscConfig+0x240>)
 8002988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0x200>
 8002992:	e01b      	b.n	80029cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002994:	4b09      	ldr	r3, [pc, #36]	@ (80029bc <HAL_RCC_OscConfig+0x248>)
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299a:	f7ff fc1f 	bl	80021dc <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029a0:	e00e      	b.n	80029c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a2:	f7ff fc1b 	bl	80021dc <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d907      	bls.n	80029c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e150      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
 80029b4:	40023800 	.word	0x40023800
 80029b8:	42470000 	.word	0x42470000
 80029bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c0:	4b88      	ldr	r3, [pc, #544]	@ (8002be4 <HAL_RCC_OscConfig+0x470>)
 80029c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1ea      	bne.n	80029a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 8097 	beq.w	8002b08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029da:	2300      	movs	r3, #0
 80029dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029de:	4b81      	ldr	r3, [pc, #516]	@ (8002be4 <HAL_RCC_OscConfig+0x470>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10f      	bne.n	8002a0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	4b7d      	ldr	r3, [pc, #500]	@ (8002be4 <HAL_RCC_OscConfig+0x470>)
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	4a7c      	ldr	r2, [pc, #496]	@ (8002be4 <HAL_RCC_OscConfig+0x470>)
 80029f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029fa:	4b7a      	ldr	r3, [pc, #488]	@ (8002be4 <HAL_RCC_OscConfig+0x470>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a06:	2301      	movs	r3, #1
 8002a08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0a:	4b77      	ldr	r3, [pc, #476]	@ (8002be8 <HAL_RCC_OscConfig+0x474>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d118      	bne.n	8002a48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a16:	4b74      	ldr	r3, [pc, #464]	@ (8002be8 <HAL_RCC_OscConfig+0x474>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a73      	ldr	r2, [pc, #460]	@ (8002be8 <HAL_RCC_OscConfig+0x474>)
 8002a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a22:	f7ff fbdb 	bl	80021dc <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a2a:	f7ff fbd7 	bl	80021dc <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e10c      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3c:	4b6a      	ldr	r3, [pc, #424]	@ (8002be8 <HAL_RCC_OscConfig+0x474>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d106      	bne.n	8002a5e <HAL_RCC_OscConfig+0x2ea>
 8002a50:	4b64      	ldr	r3, [pc, #400]	@ (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a54:	4a63      	ldr	r2, [pc, #396]	@ (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002a56:	f043 0301 	orr.w	r3, r3, #1
 8002a5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a5c:	e01c      	b.n	8002a98 <HAL_RCC_OscConfig+0x324>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2b05      	cmp	r3, #5
 8002a64:	d10c      	bne.n	8002a80 <HAL_RCC_OscConfig+0x30c>
 8002a66:	4b5f      	ldr	r3, [pc, #380]	@ (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6a:	4a5e      	ldr	r2, [pc, #376]	@ (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002a6c:	f043 0304 	orr.w	r3, r3, #4
 8002a70:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a72:	4b5c      	ldr	r3, [pc, #368]	@ (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a76:	4a5b      	ldr	r2, [pc, #364]	@ (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a7e:	e00b      	b.n	8002a98 <HAL_RCC_OscConfig+0x324>
 8002a80:	4b58      	ldr	r3, [pc, #352]	@ (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a84:	4a57      	ldr	r2, [pc, #348]	@ (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002a86:	f023 0301 	bic.w	r3, r3, #1
 8002a8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a8c:	4b55      	ldr	r3, [pc, #340]	@ (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a90:	4a54      	ldr	r2, [pc, #336]	@ (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002a92:	f023 0304 	bic.w	r3, r3, #4
 8002a96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d015      	beq.n	8002acc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa0:	f7ff fb9c 	bl	80021dc <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa6:	e00a      	b.n	8002abe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa8:	f7ff fb98 	bl	80021dc <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e0cb      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002abe:	4b49      	ldr	r3, [pc, #292]	@ (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d0ee      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x334>
 8002aca:	e014      	b.n	8002af6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002acc:	f7ff fb86 	bl	80021dc <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad2:	e00a      	b.n	8002aea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad4:	f7ff fb82 	bl	80021dc <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e0b5      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aea:	4b3e      	ldr	r3, [pc, #248]	@ (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d1ee      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002af6:	7dfb      	ldrb	r3, [r7, #23]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d105      	bne.n	8002b08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002afc:	4b39      	ldr	r3, [pc, #228]	@ (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b00:	4a38      	ldr	r2, [pc, #224]	@ (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002b02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 80a1 	beq.w	8002c54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b12:	4b34      	ldr	r3, [pc, #208]	@ (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d05c      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d141      	bne.n	8002baa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b26:	4b31      	ldr	r3, [pc, #196]	@ (8002bec <HAL_RCC_OscConfig+0x478>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7ff fb56 	bl	80021dc <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b34:	f7ff fb52 	bl	80021dc <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e087      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b46:	4b27      	ldr	r3, [pc, #156]	@ (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69da      	ldr	r2, [r3, #28]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b60:	019b      	lsls	r3, r3, #6
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b68:	085b      	lsrs	r3, r3, #1
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	041b      	lsls	r3, r3, #16
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b74:	061b      	lsls	r3, r3, #24
 8002b76:	491b      	ldr	r1, [pc, #108]	@ (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bec <HAL_RCC_OscConfig+0x478>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b82:	f7ff fb2b 	bl	80021dc <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b8a:	f7ff fb27 	bl	80021dc <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e05c      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9c:	4b11      	ldr	r3, [pc, #68]	@ (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0f0      	beq.n	8002b8a <HAL_RCC_OscConfig+0x416>
 8002ba8:	e054      	b.n	8002c54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002baa:	4b10      	ldr	r3, [pc, #64]	@ (8002bec <HAL_RCC_OscConfig+0x478>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7ff fb14 	bl	80021dc <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7ff fb10 	bl	80021dc <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e045      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bca:	4b06      	ldr	r3, [pc, #24]	@ (8002be4 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x444>
 8002bd6:	e03d      	b.n	8002c54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d107      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e038      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40007000 	.word	0x40007000
 8002bec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c60 <HAL_RCC_OscConfig+0x4ec>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d028      	beq.n	8002c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d121      	bne.n	8002c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d11a      	bne.n	8002c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c1a:	68fa      	ldr	r2, [r7, #12]
 8002c1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c20:	4013      	ands	r3, r2
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d111      	bne.n	8002c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c36:	085b      	lsrs	r3, r3, #1
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d107      	bne.n	8002c50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800

08002c64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0cc      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c78:	4b68      	ldr	r3, [pc, #416]	@ (8002e1c <HAL_RCC_ClockConfig+0x1b8>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d90c      	bls.n	8002ca0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c86:	4b65      	ldr	r3, [pc, #404]	@ (8002e1c <HAL_RCC_ClockConfig+0x1b8>)
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8e:	4b63      	ldr	r3, [pc, #396]	@ (8002e1c <HAL_RCC_ClockConfig+0x1b8>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0b8      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d020      	beq.n	8002cee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cb8:	4b59      	ldr	r3, [pc, #356]	@ (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	4a58      	ldr	r2, [pc, #352]	@ (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cd0:	4b53      	ldr	r3, [pc, #332]	@ (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	4a52      	ldr	r2, [pc, #328]	@ (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cdc:	4b50      	ldr	r3, [pc, #320]	@ (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	494d      	ldr	r1, [pc, #308]	@ (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d044      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d107      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d02:	4b47      	ldr	r3, [pc, #284]	@ (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d119      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e07f      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d003      	beq.n	8002d22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	d107      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d22:	4b3f      	ldr	r3, [pc, #252]	@ (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d109      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e06f      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d32:	4b3b      	ldr	r3, [pc, #236]	@ (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e067      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d42:	4b37      	ldr	r3, [pc, #220]	@ (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f023 0203 	bic.w	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4934      	ldr	r1, [pc, #208]	@ (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d54:	f7ff fa42 	bl	80021dc <HAL_GetTick>
 8002d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5a:	e00a      	b.n	8002d72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5c:	f7ff fa3e 	bl	80021dc <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e04f      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	4b2b      	ldr	r3, [pc, #172]	@ (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 020c 	and.w	r2, r3, #12
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d1eb      	bne.n	8002d5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d84:	4b25      	ldr	r3, [pc, #148]	@ (8002e1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d20c      	bcs.n	8002dac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d92:	4b22      	ldr	r3, [pc, #136]	@ (8002e1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d9a:	4b20      	ldr	r3, [pc, #128]	@ (8002e1c <HAL_RCC_ClockConfig+0x1b8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d001      	beq.n	8002dac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e032      	b.n	8002e12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d008      	beq.n	8002dca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db8:	4b19      	ldr	r3, [pc, #100]	@ (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4916      	ldr	r1, [pc, #88]	@ (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dd6:	4b12      	ldr	r3, [pc, #72]	@ (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	490e      	ldr	r1, [pc, #56]	@ (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dea:	f000 f821 	bl	8002e30 <HAL_RCC_GetSysClockFreq>
 8002dee:	4602      	mov	r2, r0
 8002df0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e20 <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	091b      	lsrs	r3, r3, #4
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	490a      	ldr	r1, [pc, #40]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002dfc:	5ccb      	ldrb	r3, [r1, r3]
 8002dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002e02:	4a09      	ldr	r2, [pc, #36]	@ (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e06:	4b09      	ldr	r3, [pc, #36]	@ (8002e2c <HAL_RCC_ClockConfig+0x1c8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff f9a2 	bl	8002154 <HAL_InitTick>

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3710      	adds	r7, #16
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40023c00 	.word	0x40023c00
 8002e20:	40023800 	.word	0x40023800
 8002e24:	08008348 	.word	0x08008348
 8002e28:	20000000 	.word	0x20000000
 8002e2c:	20000004 	.word	0x20000004

08002e30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e34:	b094      	sub	sp, #80	@ 0x50
 8002e36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e40:	2300      	movs	r3, #0
 8002e42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e48:	4b79      	ldr	r3, [pc, #484]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	d00d      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0x40>
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	f200 80e1 	bhi.w	800301c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0x34>
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d003      	beq.n	8002e6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e62:	e0db      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e64:	4b73      	ldr	r3, [pc, #460]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e66:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002e68:	e0db      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e6a:	4b73      	ldr	r3, [pc, #460]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e6e:	e0d8      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e70:	4b6f      	ldr	r3, [pc, #444]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e78:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e7a:	4b6d      	ldr	r3, [pc, #436]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d063      	beq.n	8002f4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e86:	4b6a      	ldr	r3, [pc, #424]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	099b      	lsrs	r3, r3, #6
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e90:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e98:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ea2:	4622      	mov	r2, r4
 8002ea4:	462b      	mov	r3, r5
 8002ea6:	f04f 0000 	mov.w	r0, #0
 8002eaa:	f04f 0100 	mov.w	r1, #0
 8002eae:	0159      	lsls	r1, r3, #5
 8002eb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb4:	0150      	lsls	r0, r2, #5
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4621      	mov	r1, r4
 8002ebc:	1a51      	subs	r1, r2, r1
 8002ebe:	6139      	str	r1, [r7, #16]
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ed4:	4659      	mov	r1, fp
 8002ed6:	018b      	lsls	r3, r1, #6
 8002ed8:	4651      	mov	r1, sl
 8002eda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ede:	4651      	mov	r1, sl
 8002ee0:	018a      	lsls	r2, r1, #6
 8002ee2:	4651      	mov	r1, sl
 8002ee4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ee8:	4659      	mov	r1, fp
 8002eea:	eb63 0901 	sbc.w	r9, r3, r1
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002efa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002efe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f02:	4690      	mov	r8, r2
 8002f04:	4699      	mov	r9, r3
 8002f06:	4623      	mov	r3, r4
 8002f08:	eb18 0303 	adds.w	r3, r8, r3
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	462b      	mov	r3, r5
 8002f10:	eb49 0303 	adc.w	r3, r9, r3
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f22:	4629      	mov	r1, r5
 8002f24:	024b      	lsls	r3, r1, #9
 8002f26:	4621      	mov	r1, r4
 8002f28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f2c:	4621      	mov	r1, r4
 8002f2e:	024a      	lsls	r2, r1, #9
 8002f30:	4610      	mov	r0, r2
 8002f32:	4619      	mov	r1, r3
 8002f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f36:	2200      	movs	r2, #0
 8002f38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f40:	f7fd fe8a 	bl	8000c58 <__aeabi_uldivmod>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4613      	mov	r3, r2
 8002f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f4c:	e058      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4e:	4b38      	ldr	r3, [pc, #224]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	099b      	lsrs	r3, r3, #6
 8002f54:	2200      	movs	r2, #0
 8002f56:	4618      	mov	r0, r3
 8002f58:	4611      	mov	r1, r2
 8002f5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f5e:	623b      	str	r3, [r7, #32]
 8002f60:	2300      	movs	r3, #0
 8002f62:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f68:	4642      	mov	r2, r8
 8002f6a:	464b      	mov	r3, r9
 8002f6c:	f04f 0000 	mov.w	r0, #0
 8002f70:	f04f 0100 	mov.w	r1, #0
 8002f74:	0159      	lsls	r1, r3, #5
 8002f76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f7a:	0150      	lsls	r0, r2, #5
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4641      	mov	r1, r8
 8002f82:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f86:	4649      	mov	r1, r9
 8002f88:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fa0:	ebb2 040a 	subs.w	r4, r2, sl
 8002fa4:	eb63 050b 	sbc.w	r5, r3, fp
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	00eb      	lsls	r3, r5, #3
 8002fb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fb6:	00e2      	lsls	r2, r4, #3
 8002fb8:	4614      	mov	r4, r2
 8002fba:	461d      	mov	r5, r3
 8002fbc:	4643      	mov	r3, r8
 8002fbe:	18e3      	adds	r3, r4, r3
 8002fc0:	603b      	str	r3, [r7, #0]
 8002fc2:	464b      	mov	r3, r9
 8002fc4:	eb45 0303 	adc.w	r3, r5, r3
 8002fc8:	607b      	str	r3, [r7, #4]
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fd6:	4629      	mov	r1, r5
 8002fd8:	028b      	lsls	r3, r1, #10
 8002fda:	4621      	mov	r1, r4
 8002fdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	028a      	lsls	r2, r1, #10
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fea:	2200      	movs	r2, #0
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	61fa      	str	r2, [r7, #28]
 8002ff0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ff4:	f7fd fe30 	bl	8000c58 <__aeabi_uldivmod>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003000:	4b0b      	ldr	r3, [pc, #44]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x200>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	0c1b      	lsrs	r3, r3, #16
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	3301      	adds	r3, #1
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003010:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003014:	fbb2 f3f3 	udiv	r3, r2, r3
 8003018:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800301a:	e002      	b.n	8003022 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800301c:	4b05      	ldr	r3, [pc, #20]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x204>)
 800301e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003020:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003022:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003024:	4618      	mov	r0, r3
 8003026:	3750      	adds	r7, #80	@ 0x50
 8003028:	46bd      	mov	sp, r7
 800302a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800302e:	bf00      	nop
 8003030:	40023800 	.word	0x40023800
 8003034:	00f42400 	.word	0x00f42400
 8003038:	007a1200 	.word	0x007a1200

0800303c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003040:	4b03      	ldr	r3, [pc, #12]	@ (8003050 <HAL_RCC_GetHCLKFreq+0x14>)
 8003042:	681b      	ldr	r3, [r3, #0]
}
 8003044:	4618      	mov	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	20000000 	.word	0x20000000

08003054 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003058:	f7ff fff0 	bl	800303c <HAL_RCC_GetHCLKFreq>
 800305c:	4602      	mov	r2, r0
 800305e:	4b05      	ldr	r3, [pc, #20]	@ (8003074 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	0a9b      	lsrs	r3, r3, #10
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	4903      	ldr	r1, [pc, #12]	@ (8003078 <HAL_RCC_GetPCLK1Freq+0x24>)
 800306a:	5ccb      	ldrb	r3, [r1, r3]
 800306c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003070:	4618      	mov	r0, r3
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40023800 	.word	0x40023800
 8003078:	08008358 	.word	0x08008358

0800307c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003080:	f7ff ffdc 	bl	800303c <HAL_RCC_GetHCLKFreq>
 8003084:	4602      	mov	r2, r0
 8003086:	4b05      	ldr	r3, [pc, #20]	@ (800309c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	0b5b      	lsrs	r3, r3, #13
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	4903      	ldr	r1, [pc, #12]	@ (80030a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003092:	5ccb      	ldrb	r3, [r1, r3]
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003098:	4618      	mov	r0, r3
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40023800 	.word	0x40023800
 80030a0:	08008358 	.word	0x08008358

080030a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e07b      	b.n	80031ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d108      	bne.n	80030d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030c6:	d009      	beq.n	80030dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	61da      	str	r2, [r3, #28]
 80030ce:	e005      	b.n	80030dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fe fdbc 	bl	8001c74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003112:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003160:	ea42 0103 	orr.w	r1, r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003168:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	0c1b      	lsrs	r3, r3, #16
 800317a:	f003 0104 	and.w	r1, r3, #4
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003182:	f003 0210 	and.w	r2, r3, #16
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69da      	ldr	r2, [r3, #28]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800319c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b088      	sub	sp, #32
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	603b      	str	r3, [r7, #0]
 80031c2:	4613      	mov	r3, r2
 80031c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_SPI_Transmit+0x22>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e12d      	b.n	8003434 <HAL_SPI_Transmit+0x27e>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031e0:	f7fe fffc 	bl	80021dc <HAL_GetTick>
 80031e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80031e6:	88fb      	ldrh	r3, [r7, #6]
 80031e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d002      	beq.n	80031fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80031f6:	2302      	movs	r3, #2
 80031f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031fa:	e116      	b.n	800342a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <HAL_SPI_Transmit+0x52>
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d102      	bne.n	800320e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800320c:	e10d      	b.n	800342a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2203      	movs	r2, #3
 8003212:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	88fa      	ldrh	r2, [r7, #6]
 8003226:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	88fa      	ldrh	r2, [r7, #6]
 800322c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003254:	d10f      	bne.n	8003276 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003264:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003274:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003280:	2b40      	cmp	r3, #64	@ 0x40
 8003282:	d007      	beq.n	8003294 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003292:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800329c:	d14f      	bne.n	800333e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d002      	beq.n	80032ac <HAL_SPI_Transmit+0xf6>
 80032a6:	8afb      	ldrh	r3, [r7, #22]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d142      	bne.n	8003332 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032b0:	881a      	ldrh	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032bc:	1c9a      	adds	r2, r3, #2
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032d0:	e02f      	b.n	8003332 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d112      	bne.n	8003306 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e4:	881a      	ldrh	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f0:	1c9a      	adds	r2, r3, #2
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003304:	e015      	b.n	8003332 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003306:	f7fe ff69 	bl	80021dc <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d803      	bhi.n	800331e <HAL_SPI_Transmit+0x168>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d102      	bne.n	8003324 <HAL_SPI_Transmit+0x16e>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d106      	bne.n	8003332 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003330:	e07b      	b.n	800342a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003336:	b29b      	uxth	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d1ca      	bne.n	80032d2 <HAL_SPI_Transmit+0x11c>
 800333c:	e050      	b.n	80033e0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <HAL_SPI_Transmit+0x196>
 8003346:	8afb      	ldrh	r3, [r7, #22]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d144      	bne.n	80033d6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	330c      	adds	r3, #12
 8003356:	7812      	ldrb	r2, [r2, #0]
 8003358:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003372:	e030      	b.n	80033d6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b02      	cmp	r3, #2
 8003380:	d113      	bne.n	80033aa <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	330c      	adds	r3, #12
 800338c:	7812      	ldrb	r2, [r2, #0]
 800338e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80033a8:	e015      	b.n	80033d6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033aa:	f7fe ff17 	bl	80021dc <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d803      	bhi.n	80033c2 <HAL_SPI_Transmit+0x20c>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c0:	d102      	bne.n	80033c8 <HAL_SPI_Transmit+0x212>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d106      	bne.n	80033d6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80033d4:	e029      	b.n	800342a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033da:	b29b      	uxth	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1c9      	bne.n	8003374 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	6839      	ldr	r1, [r7, #0]
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 fbdf 	bl	8003ba8 <SPI_EndRxTxTransaction>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2220      	movs	r2, #32
 80033f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10a      	bne.n	8003414 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033fe:	2300      	movs	r3, #0
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	613b      	str	r3, [r7, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	613b      	str	r3, [r7, #16]
 8003412:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	77fb      	strb	r3, [r7, #31]
 8003420:	e003      	b.n	800342a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003432:	7ffb      	ldrb	r3, [r7, #31]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3720      	adds	r7, #32
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af02      	add	r7, sp, #8
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	4613      	mov	r3, r2
 800344a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800344c:	2300      	movs	r3, #0
 800344e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b01      	cmp	r3, #1
 800345a:	d002      	beq.n	8003462 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800345c:	2302      	movs	r3, #2
 800345e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003460:	e0fb      	b.n	800365a <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800346a:	d112      	bne.n	8003492 <HAL_SPI_Receive+0x56>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10e      	bne.n	8003492 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2204      	movs	r2, #4
 8003478:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800347c:	88fa      	ldrh	r2, [r7, #6]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	4613      	mov	r3, r2
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	68b9      	ldr	r1, [r7, #8]
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 f8ef 	bl	800366c <HAL_SPI_TransmitReceive>
 800348e:	4603      	mov	r3, r0
 8003490:	e0e8      	b.n	8003664 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_SPI_Receive+0x64>
 800349c:	2302      	movs	r3, #2
 800349e:	e0e1      	b.n	8003664 <HAL_SPI_Receive+0x228>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034a8:	f7fe fe98 	bl	80021dc <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <HAL_SPI_Receive+0x7e>
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d102      	bne.n	80034c0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80034be:	e0cc      	b.n	800365a <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2204      	movs	r2, #4
 80034c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	88fa      	ldrh	r2, [r7, #6]
 80034d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	88fa      	ldrh	r2, [r7, #6]
 80034de:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003506:	d10f      	bne.n	8003528 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003516:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003526:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003532:	2b40      	cmp	r3, #64	@ 0x40
 8003534:	d007      	beq.n	8003546 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003544:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d16a      	bne.n	8003624 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800354e:	e032      	b.n	80035b6 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b01      	cmp	r3, #1
 800355c:	d115      	bne.n	800358a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f103 020c 	add.w	r2, r3, #12
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356a:	7812      	ldrb	r2, [r2, #0]
 800356c:	b2d2      	uxtb	r2, r2
 800356e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800357e:	b29b      	uxth	r3, r3
 8003580:	3b01      	subs	r3, #1
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003588:	e015      	b.n	80035b6 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800358a:	f7fe fe27 	bl	80021dc <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	683a      	ldr	r2, [r7, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d803      	bhi.n	80035a2 <HAL_SPI_Receive+0x166>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d102      	bne.n	80035a8 <HAL_SPI_Receive+0x16c>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d106      	bne.n	80035b6 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80035b4:	e051      	b.n	800365a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1c7      	bne.n	8003550 <HAL_SPI_Receive+0x114>
 80035c0:	e035      	b.n	800362e <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d113      	bne.n	80035f8 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035da:	b292      	uxth	r2, r2
 80035dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e2:	1c9a      	adds	r2, r3, #2
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035f6:	e015      	b.n	8003624 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035f8:	f7fe fdf0 	bl	80021dc <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d803      	bhi.n	8003610 <HAL_SPI_Receive+0x1d4>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360e:	d102      	bne.n	8003616 <HAL_SPI_Receive+0x1da>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003622:	e01a      	b.n	800365a <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003628:	b29b      	uxth	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1c9      	bne.n	80035c2 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	6839      	ldr	r1, [r7, #0]
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 fa52 	bl	8003adc <SPI_EndRxTransaction>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d002      	beq.n	8003644 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2220      	movs	r2, #32
 8003642:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	75fb      	strb	r3, [r7, #23]
 8003650:	e003      	b.n	800365a <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003662:	7dfb      	ldrb	r3, [r7, #23]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08c      	sub	sp, #48	@ 0x30
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800367a:	2301      	movs	r3, #1
 800367c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_SPI_TransmitReceive+0x26>
 800368e:	2302      	movs	r3, #2
 8003690:	e198      	b.n	80039c4 <HAL_SPI_TransmitReceive+0x358>
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800369a:	f7fe fd9f 	bl	80021dc <HAL_GetTick>
 800369e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80036b0:	887b      	ldrh	r3, [r7, #2]
 80036b2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036b4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d00f      	beq.n	80036dc <HAL_SPI_TransmitReceive+0x70>
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036c2:	d107      	bne.n	80036d4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d103      	bne.n	80036d4 <HAL_SPI_TransmitReceive+0x68>
 80036cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d003      	beq.n	80036dc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80036d4:	2302      	movs	r3, #2
 80036d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80036da:	e16d      	b.n	80039b8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <HAL_SPI_TransmitReceive+0x82>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <HAL_SPI_TransmitReceive+0x82>
 80036e8:	887b      	ldrh	r3, [r7, #2]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d103      	bne.n	80036f6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80036f4:	e160      	b.n	80039b8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d003      	beq.n	800370a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2205      	movs	r2, #5
 8003706:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	887a      	ldrh	r2, [r7, #2]
 800371a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	887a      	ldrh	r2, [r7, #2]
 8003720:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	887a      	ldrh	r2, [r7, #2]
 800372c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	887a      	ldrh	r2, [r7, #2]
 8003732:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800374a:	2b40      	cmp	r3, #64	@ 0x40
 800374c:	d007      	beq.n	800375e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800375c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003766:	d17c      	bne.n	8003862 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <HAL_SPI_TransmitReceive+0x10a>
 8003770:	8b7b      	ldrh	r3, [r7, #26]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d16a      	bne.n	800384c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377a:	881a      	ldrh	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003786:	1c9a      	adds	r2, r3, #2
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003790:	b29b      	uxth	r3, r3
 8003792:	3b01      	subs	r3, #1
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800379a:	e057      	b.n	800384c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d11b      	bne.n	80037e2 <HAL_SPI_TransmitReceive+0x176>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d016      	beq.n	80037e2 <HAL_SPI_TransmitReceive+0x176>
 80037b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d113      	bne.n	80037e2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037be:	881a      	ldrh	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ca:	1c9a      	adds	r2, r3, #2
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d119      	bne.n	8003824 <HAL_SPI_TransmitReceive+0x1b8>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d014      	beq.n	8003824 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003804:	b292      	uxth	r2, r2
 8003806:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380c:	1c9a      	adds	r2, r3, #2
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003816:	b29b      	uxth	r3, r3
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003820:	2301      	movs	r3, #1
 8003822:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003824:	f7fe fcda 	bl	80021dc <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003830:	429a      	cmp	r2, r3
 8003832:	d80b      	bhi.n	800384c <HAL_SPI_TransmitReceive+0x1e0>
 8003834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383a:	d007      	beq.n	800384c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800384a:	e0b5      	b.n	80039b8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1a2      	bne.n	800379c <HAL_SPI_TransmitReceive+0x130>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d19d      	bne.n	800379c <HAL_SPI_TransmitReceive+0x130>
 8003860:	e080      	b.n	8003964 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d002      	beq.n	8003870 <HAL_SPI_TransmitReceive+0x204>
 800386a:	8b7b      	ldrh	r3, [r7, #26]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d16f      	bne.n	8003950 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	330c      	adds	r3, #12
 800387a:	7812      	ldrb	r2, [r2, #0]
 800387c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003896:	e05b      	b.n	8003950 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d11c      	bne.n	80038e0 <HAL_SPI_TransmitReceive+0x274>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d017      	beq.n	80038e0 <HAL_SPI_TransmitReceive+0x274>
 80038b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d114      	bne.n	80038e0 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	330c      	adds	r3, #12
 80038c0:	7812      	ldrb	r2, [r2, #0]
 80038c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d119      	bne.n	8003922 <HAL_SPI_TransmitReceive+0x2b6>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d014      	beq.n	8003922 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003902:	b2d2      	uxtb	r2, r2
 8003904:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003914:	b29b      	uxth	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	b29a      	uxth	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800391e:	2301      	movs	r3, #1
 8003920:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003922:	f7fe fc5b 	bl	80021dc <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800392e:	429a      	cmp	r2, r3
 8003930:	d803      	bhi.n	800393a <HAL_SPI_TransmitReceive+0x2ce>
 8003932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003938:	d102      	bne.n	8003940 <HAL_SPI_TransmitReceive+0x2d4>
 800393a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800393c:	2b00      	cmp	r3, #0
 800393e:	d107      	bne.n	8003950 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800394e:	e033      	b.n	80039b8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d19e      	bne.n	8003898 <HAL_SPI_TransmitReceive+0x22c>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800395e:	b29b      	uxth	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d199      	bne.n	8003898 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003966:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 f91d 	bl	8003ba8 <SPI_EndRxTxTransaction>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d006      	beq.n	8003982 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003980:	e01a      	b.n	80039b8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10a      	bne.n	80039a0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	617b      	str	r3, [r7, #20]
 800399e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d003      	beq.n	80039b0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ae:	e003      	b.n	80039b8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80039c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3730      	adds	r7, #48	@ 0x30
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b088      	sub	sp, #32
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	603b      	str	r3, [r7, #0]
 80039d8:	4613      	mov	r3, r2
 80039da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039dc:	f7fe fbfe 	bl	80021dc <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e4:	1a9b      	subs	r3, r3, r2
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	4413      	add	r3, r2
 80039ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039ec:	f7fe fbf6 	bl	80021dc <HAL_GetTick>
 80039f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039f2:	4b39      	ldr	r3, [pc, #228]	@ (8003ad8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	015b      	lsls	r3, r3, #5
 80039f8:	0d1b      	lsrs	r3, r3, #20
 80039fa:	69fa      	ldr	r2, [r7, #28]
 80039fc:	fb02 f303 	mul.w	r3, r2, r3
 8003a00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a02:	e054      	b.n	8003aae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0a:	d050      	beq.n	8003aae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a0c:	f7fe fbe6 	bl	80021dc <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	69fa      	ldr	r2, [r7, #28]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d902      	bls.n	8003a22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d13d      	bne.n	8003a9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a3a:	d111      	bne.n	8003a60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a44:	d004      	beq.n	8003a50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a4e:	d107      	bne.n	8003a60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a68:	d10f      	bne.n	8003a8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e017      	b.n	8003ace <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	bf0c      	ite	eq
 8003abe:	2301      	moveq	r3, #1
 8003ac0:	2300      	movne	r3, #0
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d19b      	bne.n	8003a04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3720      	adds	r7, #32
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20000000 	.word	0x20000000

08003adc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003af0:	d111      	bne.n	8003b16 <SPI_EndRxTransaction+0x3a>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003afa:	d004      	beq.n	8003b06 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b04:	d107      	bne.n	8003b16 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b14:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b1e:	d12a      	bne.n	8003b76 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b28:	d012      	beq.n	8003b50 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	2200      	movs	r2, #0
 8003b32:	2180      	movs	r1, #128	@ 0x80
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f7ff ff49 	bl	80039cc <SPI_WaitFlagStateUntilTimeout>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d02d      	beq.n	8003b9c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b44:	f043 0220 	orr.w	r2, r3, #32
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e026      	b.n	8003b9e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2200      	movs	r2, #0
 8003b58:	2101      	movs	r1, #1
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f7ff ff36 	bl	80039cc <SPI_WaitFlagStateUntilTimeout>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d01a      	beq.n	8003b9c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b6a:	f043 0220 	orr.w	r2, r3, #32
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e013      	b.n	8003b9e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2101      	movs	r1, #1
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f7ff ff23 	bl	80039cc <SPI_WaitFlagStateUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d007      	beq.n	8003b9c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b90:	f043 0220 	orr.w	r2, r3, #32
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e000      	b.n	8003b9e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b088      	sub	sp, #32
 8003bac:	af02      	add	r7, sp, #8
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	2102      	movs	r1, #2
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f7ff ff04 	bl	80039cc <SPI_WaitFlagStateUntilTimeout>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d007      	beq.n	8003bda <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bce:	f043 0220 	orr.w	r2, r3, #32
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e032      	b.n	8003c40 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bda:	4b1b      	ldr	r3, [pc, #108]	@ (8003c48 <SPI_EndRxTxTransaction+0xa0>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a1b      	ldr	r2, [pc, #108]	@ (8003c4c <SPI_EndRxTxTransaction+0xa4>)
 8003be0:	fba2 2303 	umull	r2, r3, r2, r3
 8003be4:	0d5b      	lsrs	r3, r3, #21
 8003be6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bf8:	d112      	bne.n	8003c20 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2200      	movs	r2, #0
 8003c02:	2180      	movs	r1, #128	@ 0x80
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f7ff fee1 	bl	80039cc <SPI_WaitFlagStateUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d016      	beq.n	8003c3e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c14:	f043 0220 	orr.w	r2, r3, #32
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e00f      	b.n	8003c40 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00a      	beq.n	8003c3c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c36:	2b80      	cmp	r3, #128	@ 0x80
 8003c38:	d0f2      	beq.n	8003c20 <SPI_EndRxTxTransaction+0x78>
 8003c3a:	e000      	b.n	8003c3e <SPI_EndRxTxTransaction+0x96>
        break;
 8003c3c:	bf00      	nop
  }

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	20000000 	.word	0x20000000
 8003c4c:	165e9f81 	.word	0x165e9f81

08003c50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e041      	b.n	8003ce6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7fe f844 	bl	8001d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4610      	mov	r0, r2
 8003c90:	f000 fac0 	bl	8004214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e041      	b.n	8003d84 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d106      	bne.n	8003d1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f839 	bl	8003d8c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	f000 fa71 	bl	8004214 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d109      	bne.n	8003dc4 <HAL_TIM_PWM_Start+0x24>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	bf14      	ite	ne
 8003dbc:	2301      	movne	r3, #1
 8003dbe:	2300      	moveq	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	e022      	b.n	8003e0a <HAL_TIM_PWM_Start+0x6a>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d109      	bne.n	8003dde <HAL_TIM_PWM_Start+0x3e>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	bf14      	ite	ne
 8003dd6:	2301      	movne	r3, #1
 8003dd8:	2300      	moveq	r3, #0
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	e015      	b.n	8003e0a <HAL_TIM_PWM_Start+0x6a>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d109      	bne.n	8003df8 <HAL_TIM_PWM_Start+0x58>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	bf14      	ite	ne
 8003df0:	2301      	movne	r3, #1
 8003df2:	2300      	moveq	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	e008      	b.n	8003e0a <HAL_TIM_PWM_Start+0x6a>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	bf14      	ite	ne
 8003e04:	2301      	movne	r3, #1
 8003e06:	2300      	moveq	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d001      	beq.n	8003e12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e068      	b.n	8003ee4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d104      	bne.n	8003e22 <HAL_TIM_PWM_Start+0x82>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e20:	e013      	b.n	8003e4a <HAL_TIM_PWM_Start+0xaa>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d104      	bne.n	8003e32 <HAL_TIM_PWM_Start+0x92>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e30:	e00b      	b.n	8003e4a <HAL_TIM_PWM_Start+0xaa>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d104      	bne.n	8003e42 <HAL_TIM_PWM_Start+0xa2>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e40:	e003      	b.n	8003e4a <HAL_TIM_PWM_Start+0xaa>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2202      	movs	r2, #2
 8003e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	6839      	ldr	r1, [r7, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fc90 	bl	8004778 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a23      	ldr	r2, [pc, #140]	@ (8003eec <HAL_TIM_PWM_Start+0x14c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d107      	bne.n	8003e72 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e70:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a1d      	ldr	r2, [pc, #116]	@ (8003eec <HAL_TIM_PWM_Start+0x14c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d018      	beq.n	8003eae <HAL_TIM_PWM_Start+0x10e>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e84:	d013      	beq.n	8003eae <HAL_TIM_PWM_Start+0x10e>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a19      	ldr	r2, [pc, #100]	@ (8003ef0 <HAL_TIM_PWM_Start+0x150>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00e      	beq.n	8003eae <HAL_TIM_PWM_Start+0x10e>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a17      	ldr	r2, [pc, #92]	@ (8003ef4 <HAL_TIM_PWM_Start+0x154>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d009      	beq.n	8003eae <HAL_TIM_PWM_Start+0x10e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a16      	ldr	r2, [pc, #88]	@ (8003ef8 <HAL_TIM_PWM_Start+0x158>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d004      	beq.n	8003eae <HAL_TIM_PWM_Start+0x10e>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a14      	ldr	r2, [pc, #80]	@ (8003efc <HAL_TIM_PWM_Start+0x15c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d111      	bne.n	8003ed2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2b06      	cmp	r3, #6
 8003ebe:	d010      	beq.n	8003ee2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0201 	orr.w	r2, r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed0:	e007      	b.n	8003ee2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 0201 	orr.w	r2, r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40010000 	.word	0x40010000
 8003ef0:	40000400 	.word	0x40000400
 8003ef4:	40000800 	.word	0x40000800
 8003ef8:	40000c00 	.word	0x40000c00
 8003efc:	40014000 	.word	0x40014000

08003f00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d101      	bne.n	8003f1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	e0ae      	b.n	800407c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b0c      	cmp	r3, #12
 8003f2a:	f200 809f 	bhi.w	800406c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f34:	08003f69 	.word	0x08003f69
 8003f38:	0800406d 	.word	0x0800406d
 8003f3c:	0800406d 	.word	0x0800406d
 8003f40:	0800406d 	.word	0x0800406d
 8003f44:	08003fa9 	.word	0x08003fa9
 8003f48:	0800406d 	.word	0x0800406d
 8003f4c:	0800406d 	.word	0x0800406d
 8003f50:	0800406d 	.word	0x0800406d
 8003f54:	08003feb 	.word	0x08003feb
 8003f58:	0800406d 	.word	0x0800406d
 8003f5c:	0800406d 	.word	0x0800406d
 8003f60:	0800406d 	.word	0x0800406d
 8003f64:	0800402b 	.word	0x0800402b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68b9      	ldr	r1, [r7, #8]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 f9dc 	bl	800432c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699a      	ldr	r2, [r3, #24]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0208 	orr.w	r2, r2, #8
 8003f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699a      	ldr	r2, [r3, #24]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f022 0204 	bic.w	r2, r2, #4
 8003f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6999      	ldr	r1, [r3, #24]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	619a      	str	r2, [r3, #24]
      break;
 8003fa6:	e064      	b.n	8004072 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fa22 	bl	80043f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699a      	ldr	r2, [r3, #24]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699a      	ldr	r2, [r3, #24]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6999      	ldr	r1, [r3, #24]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	021a      	lsls	r2, r3, #8
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	619a      	str	r2, [r3, #24]
      break;
 8003fe8:	e043      	b.n	8004072 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68b9      	ldr	r1, [r7, #8]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fa6d 	bl	80044d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	69da      	ldr	r2, [r3, #28]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0208 	orr.w	r2, r2, #8
 8004004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	69da      	ldr	r2, [r3, #28]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0204 	bic.w	r2, r2, #4
 8004014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	69d9      	ldr	r1, [r3, #28]
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	691a      	ldr	r2, [r3, #16]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	61da      	str	r2, [r3, #28]
      break;
 8004028:	e023      	b.n	8004072 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68b9      	ldr	r1, [r7, #8]
 8004030:	4618      	mov	r0, r3
 8004032:	f000 fab7 	bl	80045a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69da      	ldr	r2, [r3, #28]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69da      	ldr	r2, [r3, #28]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69d9      	ldr	r1, [r3, #28]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	021a      	lsls	r2, r3, #8
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	61da      	str	r2, [r3, #28]
      break;
 800406a:	e002      	b.n	8004072 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	75fb      	strb	r3, [r7, #23]
      break;
 8004070:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800407a:	7dfb      	ldrb	r3, [r7, #23]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_TIM_ConfigClockSource+0x1c>
 800409c:	2302      	movs	r3, #2
 800409e:	e0b4      	b.n	800420a <HAL_TIM_ConfigClockSource+0x186>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80040be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040d8:	d03e      	beq.n	8004158 <HAL_TIM_ConfigClockSource+0xd4>
 80040da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040de:	f200 8087 	bhi.w	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
 80040e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040e6:	f000 8086 	beq.w	80041f6 <HAL_TIM_ConfigClockSource+0x172>
 80040ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040ee:	d87f      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
 80040f0:	2b70      	cmp	r3, #112	@ 0x70
 80040f2:	d01a      	beq.n	800412a <HAL_TIM_ConfigClockSource+0xa6>
 80040f4:	2b70      	cmp	r3, #112	@ 0x70
 80040f6:	d87b      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
 80040f8:	2b60      	cmp	r3, #96	@ 0x60
 80040fa:	d050      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x11a>
 80040fc:	2b60      	cmp	r3, #96	@ 0x60
 80040fe:	d877      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004100:	2b50      	cmp	r3, #80	@ 0x50
 8004102:	d03c      	beq.n	800417e <HAL_TIM_ConfigClockSource+0xfa>
 8004104:	2b50      	cmp	r3, #80	@ 0x50
 8004106:	d873      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004108:	2b40      	cmp	r3, #64	@ 0x40
 800410a:	d058      	beq.n	80041be <HAL_TIM_ConfigClockSource+0x13a>
 800410c:	2b40      	cmp	r3, #64	@ 0x40
 800410e:	d86f      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004110:	2b30      	cmp	r3, #48	@ 0x30
 8004112:	d064      	beq.n	80041de <HAL_TIM_ConfigClockSource+0x15a>
 8004114:	2b30      	cmp	r3, #48	@ 0x30
 8004116:	d86b      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004118:	2b20      	cmp	r3, #32
 800411a:	d060      	beq.n	80041de <HAL_TIM_ConfigClockSource+0x15a>
 800411c:	2b20      	cmp	r3, #32
 800411e:	d867      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
 8004120:	2b00      	cmp	r3, #0
 8004122:	d05c      	beq.n	80041de <HAL_TIM_ConfigClockSource+0x15a>
 8004124:	2b10      	cmp	r3, #16
 8004126:	d05a      	beq.n	80041de <HAL_TIM_ConfigClockSource+0x15a>
 8004128:	e062      	b.n	80041f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800413a:	f000 fafd 	bl	8004738 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800414c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	609a      	str	r2, [r3, #8]
      break;
 8004156:	e04f      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004168:	f000 fae6 	bl	8004738 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800417a:	609a      	str	r2, [r3, #8]
      break;
 800417c:	e03c      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800418a:	461a      	mov	r2, r3
 800418c:	f000 fa5a 	bl	8004644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2150      	movs	r1, #80	@ 0x50
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fab3 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 800419c:	e02c      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041aa:	461a      	mov	r2, r3
 80041ac:	f000 fa79 	bl	80046a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2160      	movs	r1, #96	@ 0x60
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 faa3 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 80041bc:	e01c      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ca:	461a      	mov	r2, r3
 80041cc:	f000 fa3a 	bl	8004644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2140      	movs	r1, #64	@ 0x40
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fa93 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 80041dc:	e00c      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4619      	mov	r1, r3
 80041e8:	4610      	mov	r0, r2
 80041ea:	f000 fa8a 	bl	8004702 <TIM_ITRx_SetConfig>
      break;
 80041ee:	e003      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
      break;
 80041f4:	e000      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004208:	7bfb      	ldrb	r3, [r7, #15]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
	...

08004214 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a3a      	ldr	r2, [pc, #232]	@ (8004310 <TIM_Base_SetConfig+0xfc>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00f      	beq.n	800424c <TIM_Base_SetConfig+0x38>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004232:	d00b      	beq.n	800424c <TIM_Base_SetConfig+0x38>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a37      	ldr	r2, [pc, #220]	@ (8004314 <TIM_Base_SetConfig+0x100>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d007      	beq.n	800424c <TIM_Base_SetConfig+0x38>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a36      	ldr	r2, [pc, #216]	@ (8004318 <TIM_Base_SetConfig+0x104>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d003      	beq.n	800424c <TIM_Base_SetConfig+0x38>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a35      	ldr	r2, [pc, #212]	@ (800431c <TIM_Base_SetConfig+0x108>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d108      	bne.n	800425e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a2b      	ldr	r2, [pc, #172]	@ (8004310 <TIM_Base_SetConfig+0xfc>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d01b      	beq.n	800429e <TIM_Base_SetConfig+0x8a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800426c:	d017      	beq.n	800429e <TIM_Base_SetConfig+0x8a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a28      	ldr	r2, [pc, #160]	@ (8004314 <TIM_Base_SetConfig+0x100>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <TIM_Base_SetConfig+0x8a>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a27      	ldr	r2, [pc, #156]	@ (8004318 <TIM_Base_SetConfig+0x104>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00f      	beq.n	800429e <TIM_Base_SetConfig+0x8a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a26      	ldr	r2, [pc, #152]	@ (800431c <TIM_Base_SetConfig+0x108>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00b      	beq.n	800429e <TIM_Base_SetConfig+0x8a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a25      	ldr	r2, [pc, #148]	@ (8004320 <TIM_Base_SetConfig+0x10c>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d007      	beq.n	800429e <TIM_Base_SetConfig+0x8a>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a24      	ldr	r2, [pc, #144]	@ (8004324 <TIM_Base_SetConfig+0x110>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d003      	beq.n	800429e <TIM_Base_SetConfig+0x8a>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a23      	ldr	r2, [pc, #140]	@ (8004328 <TIM_Base_SetConfig+0x114>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d108      	bne.n	80042b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a0e      	ldr	r2, [pc, #56]	@ (8004310 <TIM_Base_SetConfig+0xfc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d103      	bne.n	80042e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d105      	bne.n	8004302 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f023 0201 	bic.w	r2, r3, #1
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	611a      	str	r2, [r3, #16]
  }
}
 8004302:	bf00      	nop
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	40010000 	.word	0x40010000
 8004314:	40000400 	.word	0x40000400
 8004318:	40000800 	.word	0x40000800
 800431c:	40000c00 	.word	0x40000c00
 8004320:	40014000 	.word	0x40014000
 8004324:	40014400 	.word	0x40014400
 8004328:	40014800 	.word	0x40014800

0800432c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	f023 0201 	bic.w	r2, r3, #1
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800435a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f023 0303 	bic.w	r3, r3, #3
 8004362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f023 0302 	bic.w	r3, r3, #2
 8004374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a1c      	ldr	r2, [pc, #112]	@ (80043f4 <TIM_OC1_SetConfig+0xc8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d10c      	bne.n	80043a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f023 0308 	bic.w	r3, r3, #8
 800438e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	4313      	orrs	r3, r2
 8004398:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f023 0304 	bic.w	r3, r3, #4
 80043a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a13      	ldr	r2, [pc, #76]	@ (80043f4 <TIM_OC1_SetConfig+0xc8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d111      	bne.n	80043ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	621a      	str	r2, [r3, #32]
}
 80043e8:	bf00      	nop
 80043ea:	371c      	adds	r7, #28
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	40010000 	.word	0x40010000

080043f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b087      	sub	sp, #28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	f023 0210 	bic.w	r2, r3, #16
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800442e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	021b      	lsls	r3, r3, #8
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	4313      	orrs	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f023 0320 	bic.w	r3, r3, #32
 8004442:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a1e      	ldr	r2, [pc, #120]	@ (80044cc <TIM_OC2_SetConfig+0xd4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d10d      	bne.n	8004474 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800445e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004472:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a15      	ldr	r2, [pc, #84]	@ (80044cc <TIM_OC2_SetConfig+0xd4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d113      	bne.n	80044a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004482:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800448a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	4313      	orrs	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	621a      	str	r2, [r3, #32]
}
 80044be:	bf00      	nop
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40010000 	.word	0x40010000

080044d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f023 0303 	bic.w	r3, r3, #3
 8004506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	4313      	orrs	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	021b      	lsls	r3, r3, #8
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a1d      	ldr	r2, [pc, #116]	@ (80045a0 <TIM_OC3_SetConfig+0xd0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d10d      	bne.n	800454a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004534:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	021b      	lsls	r3, r3, #8
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	4313      	orrs	r3, r2
 8004540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a14      	ldr	r2, [pc, #80]	@ (80045a0 <TIM_OC3_SetConfig+0xd0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d113      	bne.n	800457a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	621a      	str	r2, [r3, #32]
}
 8004594:	bf00      	nop
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	40010000 	.word	0x40010000

080045a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	021b      	lsls	r3, r3, #8
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	031b      	lsls	r3, r3, #12
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a10      	ldr	r2, [pc, #64]	@ (8004640 <TIM_OC4_SetConfig+0x9c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d109      	bne.n	8004618 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800460a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	019b      	lsls	r3, r3, #6
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	4313      	orrs	r3, r2
 8004616:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	621a      	str	r2, [r3, #32]
}
 8004632:	bf00      	nop
 8004634:	371c      	adds	r7, #28
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	40010000 	.word	0x40010000

08004644 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004644:	b480      	push	{r7}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	f023 0201 	bic.w	r2, r3, #1
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800466e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f023 030a 	bic.w	r3, r3, #10
 8004680:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4313      	orrs	r3, r2
 8004688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	621a      	str	r2, [r3, #32]
}
 8004696:	bf00      	nop
 8004698:	371c      	adds	r7, #28
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046a2:	b480      	push	{r7}
 80046a4:	b087      	sub	sp, #28
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	60f8      	str	r0, [r7, #12]
 80046aa:	60b9      	str	r1, [r7, #8]
 80046ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f023 0210 	bic.w	r2, r3, #16
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	031b      	lsls	r3, r3, #12
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	621a      	str	r2, [r3, #32]
}
 80046f6:	bf00      	nop
 80046f8:	371c      	adds	r7, #28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004702:	b480      	push	{r7}
 8004704:	b085      	sub	sp, #20
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004718:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	f043 0307 	orr.w	r3, r3, #7
 8004724:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	609a      	str	r2, [r3, #8]
}
 800472c:	bf00      	nop
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004752:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	021a      	lsls	r2, r3, #8
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	431a      	orrs	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4313      	orrs	r3, r2
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	609a      	str	r2, [r3, #8]
}
 800476c:	bf00      	nop
 800476e:	371c      	adds	r7, #28
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	f003 031f 	and.w	r3, r3, #31
 800478a:	2201      	movs	r2, #1
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6a1a      	ldr	r2, [r3, #32]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	43db      	mvns	r3, r3
 800479a:	401a      	ands	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a1a      	ldr	r2, [r3, #32]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f003 031f 	and.w	r3, r3, #31
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	fa01 f303 	lsl.w	r3, r1, r3
 80047b0:	431a      	orrs	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	621a      	str	r2, [r3, #32]
}
 80047b6:	bf00      	nop
 80047b8:	371c      	adds	r7, #28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d101      	bne.n	80047dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047d8:	2302      	movs	r3, #2
 80047da:	e050      	b.n	800487e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004802:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1c      	ldr	r2, [pc, #112]	@ (800488c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d018      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004828:	d013      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a18      	ldr	r2, [pc, #96]	@ (8004890 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d00e      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a16      	ldr	r2, [pc, #88]	@ (8004894 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d009      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a15      	ldr	r2, [pc, #84]	@ (8004898 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d004      	beq.n	8004852 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a13      	ldr	r2, [pc, #76]	@ (800489c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d10c      	bne.n	800486c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004858:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	4313      	orrs	r3, r2
 8004862:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	40010000 	.word	0x40010000
 8004890:	40000400 	.word	0x40000400
 8004894:	40000800 	.word	0x40000800
 8004898:	40000c00 	.word	0x40000c00
 800489c:	40014000 	.word	0x40014000

080048a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e042      	b.n	8004938 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fd fa74 	bl	8001db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2224      	movs	r2, #36	@ 0x24
 80048d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f973 	bl	8004bd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691a      	ldr	r2, [r3, #16]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695a      	ldr	r2, [r3, #20]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004908:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68da      	ldr	r2, [r3, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004918:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2220      	movs	r2, #32
 800492c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08a      	sub	sp, #40	@ 0x28
 8004944:	af02      	add	r7, sp, #8
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	4613      	mov	r3, r2
 800494e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b20      	cmp	r3, #32
 800495e:	d175      	bne.n	8004a4c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d002      	beq.n	800496c <HAL_UART_Transmit+0x2c>
 8004966:	88fb      	ldrh	r3, [r7, #6]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e06e      	b.n	8004a4e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2221      	movs	r2, #33	@ 0x21
 800497a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800497e:	f7fd fc2d 	bl	80021dc <HAL_GetTick>
 8004982:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	88fa      	ldrh	r2, [r7, #6]
 8004988:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	88fa      	ldrh	r2, [r7, #6]
 800498e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004998:	d108      	bne.n	80049ac <HAL_UART_Transmit+0x6c>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d104      	bne.n	80049ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	61bb      	str	r3, [r7, #24]
 80049aa:	e003      	b.n	80049b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049b4:	e02e      	b.n	8004a14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2200      	movs	r2, #0
 80049be:	2180      	movs	r1, #128	@ 0x80
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 f848 	bl	8004a56 <UART_WaitOnFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d005      	beq.n	80049d8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e03a      	b.n	8004a4e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10b      	bne.n	80049f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	3302      	adds	r3, #2
 80049f2:	61bb      	str	r3, [r7, #24]
 80049f4:	e007      	b.n	8004a06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	781a      	ldrb	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	3301      	adds	r3, #1
 8004a04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1cb      	bne.n	80049b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	2200      	movs	r2, #0
 8004a26:	2140      	movs	r1, #64	@ 0x40
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f814 	bl	8004a56 <UART_WaitOnFlagUntilTimeout>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e006      	b.n	8004a4e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	e000      	b.n	8004a4e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a4c:	2302      	movs	r3, #2
  }
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3720      	adds	r7, #32
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b086      	sub	sp, #24
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	603b      	str	r3, [r7, #0]
 8004a62:	4613      	mov	r3, r2
 8004a64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a66:	e03b      	b.n	8004ae0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6e:	d037      	beq.n	8004ae0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a70:	f7fd fbb4 	bl	80021dc <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	6a3a      	ldr	r2, [r7, #32]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d302      	bcc.n	8004a86 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e03a      	b.n	8004b00 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d023      	beq.n	8004ae0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b80      	cmp	r3, #128	@ 0x80
 8004a9c:	d020      	beq.n	8004ae0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	2b40      	cmp	r3, #64	@ 0x40
 8004aa2:	d01d      	beq.n	8004ae0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d116      	bne.n	8004ae0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	617b      	str	r3, [r7, #20]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 f81d 	bl	8004b08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2208      	movs	r2, #8
 8004ad2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e00f      	b.n	8004b00 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	bf0c      	ite	eq
 8004af0:	2301      	moveq	r3, #1
 8004af2:	2300      	movne	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	461a      	mov	r2, r3
 8004af8:	79fb      	ldrb	r3, [r7, #7]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d0b4      	beq.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b095      	sub	sp, #84	@ 0x54
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	330c      	adds	r3, #12
 8004b16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b1a:	e853 3f00 	ldrex	r3, [r3]
 8004b1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	330c      	adds	r3, #12
 8004b2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b30:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b38:	e841 2300 	strex	r3, r2, [r1]
 8004b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e5      	bne.n	8004b10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3314      	adds	r3, #20
 8004b4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	e853 3f00 	ldrex	r3, [r3]
 8004b52:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	f023 0301 	bic.w	r3, r3, #1
 8004b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3314      	adds	r3, #20
 8004b62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b6c:	e841 2300 	strex	r3, r2, [r1]
 8004b70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1e5      	bne.n	8004b44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d119      	bne.n	8004bb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	330c      	adds	r3, #12
 8004b86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	e853 3f00 	ldrex	r3, [r3]
 8004b8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f023 0310 	bic.w	r3, r3, #16
 8004b96:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	330c      	adds	r3, #12
 8004b9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ba0:	61ba      	str	r2, [r7, #24]
 8004ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba4:	6979      	ldr	r1, [r7, #20]
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	e841 2300 	strex	r3, r2, [r1]
 8004bac:	613b      	str	r3, [r7, #16]
   return(result);
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e5      	bne.n	8004b80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004bc2:	bf00      	nop
 8004bc4:	3754      	adds	r7, #84	@ 0x54
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
	...

08004bd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bd4:	b0c0      	sub	sp, #256	@ 0x100
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bec:	68d9      	ldr	r1, [r3, #12]
 8004bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	ea40 0301 	orr.w	r3, r0, r1
 8004bf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	431a      	orrs	r2, r3
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c28:	f021 010c 	bic.w	r1, r1, #12
 8004c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c36:	430b      	orrs	r3, r1
 8004c38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c4a:	6999      	ldr	r1, [r3, #24]
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	ea40 0301 	orr.w	r3, r0, r1
 8004c56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	4b8f      	ldr	r3, [pc, #572]	@ (8004e9c <UART_SetConfig+0x2cc>)
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d005      	beq.n	8004c70 <UART_SetConfig+0xa0>
 8004c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	4b8d      	ldr	r3, [pc, #564]	@ (8004ea0 <UART_SetConfig+0x2d0>)
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d104      	bne.n	8004c7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c70:	f7fe fa04 	bl	800307c <HAL_RCC_GetPCLK2Freq>
 8004c74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c78:	e003      	b.n	8004c82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c7a:	f7fe f9eb 	bl	8003054 <HAL_RCC_GetPCLK1Freq>
 8004c7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c86:	69db      	ldr	r3, [r3, #28]
 8004c88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c8c:	f040 810c 	bne.w	8004ea8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c94:	2200      	movs	r2, #0
 8004c96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004ca2:	4622      	mov	r2, r4
 8004ca4:	462b      	mov	r3, r5
 8004ca6:	1891      	adds	r1, r2, r2
 8004ca8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004caa:	415b      	adcs	r3, r3
 8004cac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004cb2:	4621      	mov	r1, r4
 8004cb4:	eb12 0801 	adds.w	r8, r2, r1
 8004cb8:	4629      	mov	r1, r5
 8004cba:	eb43 0901 	adc.w	r9, r3, r1
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	f04f 0300 	mov.w	r3, #0
 8004cc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cd2:	4690      	mov	r8, r2
 8004cd4:	4699      	mov	r9, r3
 8004cd6:	4623      	mov	r3, r4
 8004cd8:	eb18 0303 	adds.w	r3, r8, r3
 8004cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ce0:	462b      	mov	r3, r5
 8004ce2:	eb49 0303 	adc.w	r3, r9, r3
 8004ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004cf6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004cfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004cfe:	460b      	mov	r3, r1
 8004d00:	18db      	adds	r3, r3, r3
 8004d02:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d04:	4613      	mov	r3, r2
 8004d06:	eb42 0303 	adc.w	r3, r2, r3
 8004d0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d14:	f7fb ffa0 	bl	8000c58 <__aeabi_uldivmod>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4b61      	ldr	r3, [pc, #388]	@ (8004ea4 <UART_SetConfig+0x2d4>)
 8004d1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d22:	095b      	lsrs	r3, r3, #5
 8004d24:	011c      	lsls	r4, r3, #4
 8004d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d38:	4642      	mov	r2, r8
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	1891      	adds	r1, r2, r2
 8004d3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d40:	415b      	adcs	r3, r3
 8004d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d48:	4641      	mov	r1, r8
 8004d4a:	eb12 0a01 	adds.w	sl, r2, r1
 8004d4e:	4649      	mov	r1, r9
 8004d50:	eb43 0b01 	adc.w	fp, r3, r1
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d68:	4692      	mov	sl, r2
 8004d6a:	469b      	mov	fp, r3
 8004d6c:	4643      	mov	r3, r8
 8004d6e:	eb1a 0303 	adds.w	r3, sl, r3
 8004d72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d76:	464b      	mov	r3, r9
 8004d78:	eb4b 0303 	adc.w	r3, fp, r3
 8004d7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d94:	460b      	mov	r3, r1
 8004d96:	18db      	adds	r3, r3, r3
 8004d98:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	eb42 0303 	adc.w	r3, r2, r3
 8004da0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004da2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004da6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004daa:	f7fb ff55 	bl	8000c58 <__aeabi_uldivmod>
 8004dae:	4602      	mov	r2, r0
 8004db0:	460b      	mov	r3, r1
 8004db2:	4611      	mov	r1, r2
 8004db4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ea4 <UART_SetConfig+0x2d4>)
 8004db6:	fba3 2301 	umull	r2, r3, r3, r1
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	2264      	movs	r2, #100	@ 0x64
 8004dbe:	fb02 f303 	mul.w	r3, r2, r3
 8004dc2:	1acb      	subs	r3, r1, r3
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004dca:	4b36      	ldr	r3, [pc, #216]	@ (8004ea4 <UART_SetConfig+0x2d4>)
 8004dcc:	fba3 2302 	umull	r2, r3, r3, r2
 8004dd0:	095b      	lsrs	r3, r3, #5
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004dd8:	441c      	add	r4, r3
 8004dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dde:	2200      	movs	r2, #0
 8004de0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004de4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004de8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004dec:	4642      	mov	r2, r8
 8004dee:	464b      	mov	r3, r9
 8004df0:	1891      	adds	r1, r2, r2
 8004df2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004df4:	415b      	adcs	r3, r3
 8004df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004df8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004dfc:	4641      	mov	r1, r8
 8004dfe:	1851      	adds	r1, r2, r1
 8004e00:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e02:	4649      	mov	r1, r9
 8004e04:	414b      	adcs	r3, r1
 8004e06:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e14:	4659      	mov	r1, fp
 8004e16:	00cb      	lsls	r3, r1, #3
 8004e18:	4651      	mov	r1, sl
 8004e1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e1e:	4651      	mov	r1, sl
 8004e20:	00ca      	lsls	r2, r1, #3
 8004e22:	4610      	mov	r0, r2
 8004e24:	4619      	mov	r1, r3
 8004e26:	4603      	mov	r3, r0
 8004e28:	4642      	mov	r2, r8
 8004e2a:	189b      	adds	r3, r3, r2
 8004e2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e30:	464b      	mov	r3, r9
 8004e32:	460a      	mov	r2, r1
 8004e34:	eb42 0303 	adc.w	r3, r2, r3
 8004e38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e50:	460b      	mov	r3, r1
 8004e52:	18db      	adds	r3, r3, r3
 8004e54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e56:	4613      	mov	r3, r2
 8004e58:	eb42 0303 	adc.w	r3, r2, r3
 8004e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e66:	f7fb fef7 	bl	8000c58 <__aeabi_uldivmod>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea4 <UART_SetConfig+0x2d4>)
 8004e70:	fba3 1302 	umull	r1, r3, r3, r2
 8004e74:	095b      	lsrs	r3, r3, #5
 8004e76:	2164      	movs	r1, #100	@ 0x64
 8004e78:	fb01 f303 	mul.w	r3, r1, r3
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	3332      	adds	r3, #50	@ 0x32
 8004e82:	4a08      	ldr	r2, [pc, #32]	@ (8004ea4 <UART_SetConfig+0x2d4>)
 8004e84:	fba2 2303 	umull	r2, r3, r2, r3
 8004e88:	095b      	lsrs	r3, r3, #5
 8004e8a:	f003 0207 	and.w	r2, r3, #7
 8004e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4422      	add	r2, r4
 8004e96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e98:	e106      	b.n	80050a8 <UART_SetConfig+0x4d8>
 8004e9a:	bf00      	nop
 8004e9c:	40011000 	.word	0x40011000
 8004ea0:	40011400 	.word	0x40011400
 8004ea4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eac:	2200      	movs	r2, #0
 8004eae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004eb2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004eb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004eba:	4642      	mov	r2, r8
 8004ebc:	464b      	mov	r3, r9
 8004ebe:	1891      	adds	r1, r2, r2
 8004ec0:	6239      	str	r1, [r7, #32]
 8004ec2:	415b      	adcs	r3, r3
 8004ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ec6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004eca:	4641      	mov	r1, r8
 8004ecc:	1854      	adds	r4, r2, r1
 8004ece:	4649      	mov	r1, r9
 8004ed0:	eb43 0501 	adc.w	r5, r3, r1
 8004ed4:	f04f 0200 	mov.w	r2, #0
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	00eb      	lsls	r3, r5, #3
 8004ede:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ee2:	00e2      	lsls	r2, r4, #3
 8004ee4:	4614      	mov	r4, r2
 8004ee6:	461d      	mov	r5, r3
 8004ee8:	4643      	mov	r3, r8
 8004eea:	18e3      	adds	r3, r4, r3
 8004eec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ef0:	464b      	mov	r3, r9
 8004ef2:	eb45 0303 	adc.w	r3, r5, r3
 8004ef6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f0a:	f04f 0200 	mov.w	r2, #0
 8004f0e:	f04f 0300 	mov.w	r3, #0
 8004f12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f16:	4629      	mov	r1, r5
 8004f18:	008b      	lsls	r3, r1, #2
 8004f1a:	4621      	mov	r1, r4
 8004f1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f20:	4621      	mov	r1, r4
 8004f22:	008a      	lsls	r2, r1, #2
 8004f24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f28:	f7fb fe96 	bl	8000c58 <__aeabi_uldivmod>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4b60      	ldr	r3, [pc, #384]	@ (80050b4 <UART_SetConfig+0x4e4>)
 8004f32:	fba3 2302 	umull	r2, r3, r3, r2
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	011c      	lsls	r4, r3, #4
 8004f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f4c:	4642      	mov	r2, r8
 8004f4e:	464b      	mov	r3, r9
 8004f50:	1891      	adds	r1, r2, r2
 8004f52:	61b9      	str	r1, [r7, #24]
 8004f54:	415b      	adcs	r3, r3
 8004f56:	61fb      	str	r3, [r7, #28]
 8004f58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f5c:	4641      	mov	r1, r8
 8004f5e:	1851      	adds	r1, r2, r1
 8004f60:	6139      	str	r1, [r7, #16]
 8004f62:	4649      	mov	r1, r9
 8004f64:	414b      	adcs	r3, r1
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	f04f 0300 	mov.w	r3, #0
 8004f70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f74:	4659      	mov	r1, fp
 8004f76:	00cb      	lsls	r3, r1, #3
 8004f78:	4651      	mov	r1, sl
 8004f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f7e:	4651      	mov	r1, sl
 8004f80:	00ca      	lsls	r2, r1, #3
 8004f82:	4610      	mov	r0, r2
 8004f84:	4619      	mov	r1, r3
 8004f86:	4603      	mov	r3, r0
 8004f88:	4642      	mov	r2, r8
 8004f8a:	189b      	adds	r3, r3, r2
 8004f8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f90:	464b      	mov	r3, r9
 8004f92:	460a      	mov	r2, r1
 8004f94:	eb42 0303 	adc.w	r3, r2, r3
 8004f98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fa6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004fb4:	4649      	mov	r1, r9
 8004fb6:	008b      	lsls	r3, r1, #2
 8004fb8:	4641      	mov	r1, r8
 8004fba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fbe:	4641      	mov	r1, r8
 8004fc0:	008a      	lsls	r2, r1, #2
 8004fc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004fc6:	f7fb fe47 	bl	8000c58 <__aeabi_uldivmod>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	4611      	mov	r1, r2
 8004fd0:	4b38      	ldr	r3, [pc, #224]	@ (80050b4 <UART_SetConfig+0x4e4>)
 8004fd2:	fba3 2301 	umull	r2, r3, r3, r1
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	2264      	movs	r2, #100	@ 0x64
 8004fda:	fb02 f303 	mul.w	r3, r2, r3
 8004fde:	1acb      	subs	r3, r1, r3
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	3332      	adds	r3, #50	@ 0x32
 8004fe4:	4a33      	ldr	r2, [pc, #204]	@ (80050b4 <UART_SetConfig+0x4e4>)
 8004fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fea:	095b      	lsrs	r3, r3, #5
 8004fec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ff0:	441c      	add	r4, r3
 8004ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ffa:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ffc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005000:	4642      	mov	r2, r8
 8005002:	464b      	mov	r3, r9
 8005004:	1891      	adds	r1, r2, r2
 8005006:	60b9      	str	r1, [r7, #8]
 8005008:	415b      	adcs	r3, r3
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005010:	4641      	mov	r1, r8
 8005012:	1851      	adds	r1, r2, r1
 8005014:	6039      	str	r1, [r7, #0]
 8005016:	4649      	mov	r1, r9
 8005018:	414b      	adcs	r3, r1
 800501a:	607b      	str	r3, [r7, #4]
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	f04f 0300 	mov.w	r3, #0
 8005024:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005028:	4659      	mov	r1, fp
 800502a:	00cb      	lsls	r3, r1, #3
 800502c:	4651      	mov	r1, sl
 800502e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005032:	4651      	mov	r1, sl
 8005034:	00ca      	lsls	r2, r1, #3
 8005036:	4610      	mov	r0, r2
 8005038:	4619      	mov	r1, r3
 800503a:	4603      	mov	r3, r0
 800503c:	4642      	mov	r2, r8
 800503e:	189b      	adds	r3, r3, r2
 8005040:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005042:	464b      	mov	r3, r9
 8005044:	460a      	mov	r2, r1
 8005046:	eb42 0303 	adc.w	r3, r2, r3
 800504a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800504c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	663b      	str	r3, [r7, #96]	@ 0x60
 8005056:	667a      	str	r2, [r7, #100]	@ 0x64
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	f04f 0300 	mov.w	r3, #0
 8005060:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005064:	4649      	mov	r1, r9
 8005066:	008b      	lsls	r3, r1, #2
 8005068:	4641      	mov	r1, r8
 800506a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800506e:	4641      	mov	r1, r8
 8005070:	008a      	lsls	r2, r1, #2
 8005072:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005076:	f7fb fdef 	bl	8000c58 <__aeabi_uldivmod>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4b0d      	ldr	r3, [pc, #52]	@ (80050b4 <UART_SetConfig+0x4e4>)
 8005080:	fba3 1302 	umull	r1, r3, r3, r2
 8005084:	095b      	lsrs	r3, r3, #5
 8005086:	2164      	movs	r1, #100	@ 0x64
 8005088:	fb01 f303 	mul.w	r3, r1, r3
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	3332      	adds	r3, #50	@ 0x32
 8005092:	4a08      	ldr	r2, [pc, #32]	@ (80050b4 <UART_SetConfig+0x4e4>)
 8005094:	fba2 2303 	umull	r2, r3, r2, r3
 8005098:	095b      	lsrs	r3, r3, #5
 800509a:	f003 020f 	and.w	r2, r3, #15
 800509e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4422      	add	r2, r4
 80050a6:	609a      	str	r2, [r3, #8]
}
 80050a8:	bf00      	nop
 80050aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80050ae:	46bd      	mov	sp, r7
 80050b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050b4:	51eb851f 	.word	0x51eb851f

080050b8 <__cvt>:
 80050b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050bc:	ec57 6b10 	vmov	r6, r7, d0
 80050c0:	2f00      	cmp	r7, #0
 80050c2:	460c      	mov	r4, r1
 80050c4:	4619      	mov	r1, r3
 80050c6:	463b      	mov	r3, r7
 80050c8:	bfbb      	ittet	lt
 80050ca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80050ce:	461f      	movlt	r7, r3
 80050d0:	2300      	movge	r3, #0
 80050d2:	232d      	movlt	r3, #45	@ 0x2d
 80050d4:	700b      	strb	r3, [r1, #0]
 80050d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80050d8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80050dc:	4691      	mov	r9, r2
 80050de:	f023 0820 	bic.w	r8, r3, #32
 80050e2:	bfbc      	itt	lt
 80050e4:	4632      	movlt	r2, r6
 80050e6:	4616      	movlt	r6, r2
 80050e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80050ec:	d005      	beq.n	80050fa <__cvt+0x42>
 80050ee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80050f2:	d100      	bne.n	80050f6 <__cvt+0x3e>
 80050f4:	3401      	adds	r4, #1
 80050f6:	2102      	movs	r1, #2
 80050f8:	e000      	b.n	80050fc <__cvt+0x44>
 80050fa:	2103      	movs	r1, #3
 80050fc:	ab03      	add	r3, sp, #12
 80050fe:	9301      	str	r3, [sp, #4]
 8005100:	ab02      	add	r3, sp, #8
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	ec47 6b10 	vmov	d0, r6, r7
 8005108:	4653      	mov	r3, sl
 800510a:	4622      	mov	r2, r4
 800510c:	f000 fe90 	bl	8005e30 <_dtoa_r>
 8005110:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005114:	4605      	mov	r5, r0
 8005116:	d119      	bne.n	800514c <__cvt+0x94>
 8005118:	f019 0f01 	tst.w	r9, #1
 800511c:	d00e      	beq.n	800513c <__cvt+0x84>
 800511e:	eb00 0904 	add.w	r9, r0, r4
 8005122:	2200      	movs	r2, #0
 8005124:	2300      	movs	r3, #0
 8005126:	4630      	mov	r0, r6
 8005128:	4639      	mov	r1, r7
 800512a:	f7fb fcd5 	bl	8000ad8 <__aeabi_dcmpeq>
 800512e:	b108      	cbz	r0, 8005134 <__cvt+0x7c>
 8005130:	f8cd 900c 	str.w	r9, [sp, #12]
 8005134:	2230      	movs	r2, #48	@ 0x30
 8005136:	9b03      	ldr	r3, [sp, #12]
 8005138:	454b      	cmp	r3, r9
 800513a:	d31e      	bcc.n	800517a <__cvt+0xc2>
 800513c:	9b03      	ldr	r3, [sp, #12]
 800513e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005140:	1b5b      	subs	r3, r3, r5
 8005142:	4628      	mov	r0, r5
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	b004      	add	sp, #16
 8005148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800514c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005150:	eb00 0904 	add.w	r9, r0, r4
 8005154:	d1e5      	bne.n	8005122 <__cvt+0x6a>
 8005156:	7803      	ldrb	r3, [r0, #0]
 8005158:	2b30      	cmp	r3, #48	@ 0x30
 800515a:	d10a      	bne.n	8005172 <__cvt+0xba>
 800515c:	2200      	movs	r2, #0
 800515e:	2300      	movs	r3, #0
 8005160:	4630      	mov	r0, r6
 8005162:	4639      	mov	r1, r7
 8005164:	f7fb fcb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005168:	b918      	cbnz	r0, 8005172 <__cvt+0xba>
 800516a:	f1c4 0401 	rsb	r4, r4, #1
 800516e:	f8ca 4000 	str.w	r4, [sl]
 8005172:	f8da 3000 	ldr.w	r3, [sl]
 8005176:	4499      	add	r9, r3
 8005178:	e7d3      	b.n	8005122 <__cvt+0x6a>
 800517a:	1c59      	adds	r1, r3, #1
 800517c:	9103      	str	r1, [sp, #12]
 800517e:	701a      	strb	r2, [r3, #0]
 8005180:	e7d9      	b.n	8005136 <__cvt+0x7e>

08005182 <__exponent>:
 8005182:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005184:	2900      	cmp	r1, #0
 8005186:	bfba      	itte	lt
 8005188:	4249      	neglt	r1, r1
 800518a:	232d      	movlt	r3, #45	@ 0x2d
 800518c:	232b      	movge	r3, #43	@ 0x2b
 800518e:	2909      	cmp	r1, #9
 8005190:	7002      	strb	r2, [r0, #0]
 8005192:	7043      	strb	r3, [r0, #1]
 8005194:	dd29      	ble.n	80051ea <__exponent+0x68>
 8005196:	f10d 0307 	add.w	r3, sp, #7
 800519a:	461d      	mov	r5, r3
 800519c:	270a      	movs	r7, #10
 800519e:	461a      	mov	r2, r3
 80051a0:	fbb1 f6f7 	udiv	r6, r1, r7
 80051a4:	fb07 1416 	mls	r4, r7, r6, r1
 80051a8:	3430      	adds	r4, #48	@ 0x30
 80051aa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80051ae:	460c      	mov	r4, r1
 80051b0:	2c63      	cmp	r4, #99	@ 0x63
 80051b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80051b6:	4631      	mov	r1, r6
 80051b8:	dcf1      	bgt.n	800519e <__exponent+0x1c>
 80051ba:	3130      	adds	r1, #48	@ 0x30
 80051bc:	1e94      	subs	r4, r2, #2
 80051be:	f803 1c01 	strb.w	r1, [r3, #-1]
 80051c2:	1c41      	adds	r1, r0, #1
 80051c4:	4623      	mov	r3, r4
 80051c6:	42ab      	cmp	r3, r5
 80051c8:	d30a      	bcc.n	80051e0 <__exponent+0x5e>
 80051ca:	f10d 0309 	add.w	r3, sp, #9
 80051ce:	1a9b      	subs	r3, r3, r2
 80051d0:	42ac      	cmp	r4, r5
 80051d2:	bf88      	it	hi
 80051d4:	2300      	movhi	r3, #0
 80051d6:	3302      	adds	r3, #2
 80051d8:	4403      	add	r3, r0
 80051da:	1a18      	subs	r0, r3, r0
 80051dc:	b003      	add	sp, #12
 80051de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051e0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80051e4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80051e8:	e7ed      	b.n	80051c6 <__exponent+0x44>
 80051ea:	2330      	movs	r3, #48	@ 0x30
 80051ec:	3130      	adds	r1, #48	@ 0x30
 80051ee:	7083      	strb	r3, [r0, #2]
 80051f0:	70c1      	strb	r1, [r0, #3]
 80051f2:	1d03      	adds	r3, r0, #4
 80051f4:	e7f1      	b.n	80051da <__exponent+0x58>
	...

080051f8 <_printf_float>:
 80051f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051fc:	b08d      	sub	sp, #52	@ 0x34
 80051fe:	460c      	mov	r4, r1
 8005200:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005204:	4616      	mov	r6, r2
 8005206:	461f      	mov	r7, r3
 8005208:	4605      	mov	r5, r0
 800520a:	f000 fd0f 	bl	8005c2c <_localeconv_r>
 800520e:	6803      	ldr	r3, [r0, #0]
 8005210:	9304      	str	r3, [sp, #16]
 8005212:	4618      	mov	r0, r3
 8005214:	f7fb f834 	bl	8000280 <strlen>
 8005218:	2300      	movs	r3, #0
 800521a:	930a      	str	r3, [sp, #40]	@ 0x28
 800521c:	f8d8 3000 	ldr.w	r3, [r8]
 8005220:	9005      	str	r0, [sp, #20]
 8005222:	3307      	adds	r3, #7
 8005224:	f023 0307 	bic.w	r3, r3, #7
 8005228:	f103 0208 	add.w	r2, r3, #8
 800522c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005230:	f8d4 b000 	ldr.w	fp, [r4]
 8005234:	f8c8 2000 	str.w	r2, [r8]
 8005238:	e9d3 8900 	ldrd	r8, r9, [r3]
 800523c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005240:	9307      	str	r3, [sp, #28]
 8005242:	f8cd 8018 	str.w	r8, [sp, #24]
 8005246:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800524a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800524e:	4b9c      	ldr	r3, [pc, #624]	@ (80054c0 <_printf_float+0x2c8>)
 8005250:	f04f 32ff 	mov.w	r2, #4294967295
 8005254:	f7fb fc72 	bl	8000b3c <__aeabi_dcmpun>
 8005258:	bb70      	cbnz	r0, 80052b8 <_printf_float+0xc0>
 800525a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800525e:	4b98      	ldr	r3, [pc, #608]	@ (80054c0 <_printf_float+0x2c8>)
 8005260:	f04f 32ff 	mov.w	r2, #4294967295
 8005264:	f7fb fc4c 	bl	8000b00 <__aeabi_dcmple>
 8005268:	bb30      	cbnz	r0, 80052b8 <_printf_float+0xc0>
 800526a:	2200      	movs	r2, #0
 800526c:	2300      	movs	r3, #0
 800526e:	4640      	mov	r0, r8
 8005270:	4649      	mov	r1, r9
 8005272:	f7fb fc3b 	bl	8000aec <__aeabi_dcmplt>
 8005276:	b110      	cbz	r0, 800527e <_printf_float+0x86>
 8005278:	232d      	movs	r3, #45	@ 0x2d
 800527a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800527e:	4a91      	ldr	r2, [pc, #580]	@ (80054c4 <_printf_float+0x2cc>)
 8005280:	4b91      	ldr	r3, [pc, #580]	@ (80054c8 <_printf_float+0x2d0>)
 8005282:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005286:	bf94      	ite	ls
 8005288:	4690      	movls	r8, r2
 800528a:	4698      	movhi	r8, r3
 800528c:	2303      	movs	r3, #3
 800528e:	6123      	str	r3, [r4, #16]
 8005290:	f02b 0304 	bic.w	r3, fp, #4
 8005294:	6023      	str	r3, [r4, #0]
 8005296:	f04f 0900 	mov.w	r9, #0
 800529a:	9700      	str	r7, [sp, #0]
 800529c:	4633      	mov	r3, r6
 800529e:	aa0b      	add	r2, sp, #44	@ 0x2c
 80052a0:	4621      	mov	r1, r4
 80052a2:	4628      	mov	r0, r5
 80052a4:	f000 f9d2 	bl	800564c <_printf_common>
 80052a8:	3001      	adds	r0, #1
 80052aa:	f040 808d 	bne.w	80053c8 <_printf_float+0x1d0>
 80052ae:	f04f 30ff 	mov.w	r0, #4294967295
 80052b2:	b00d      	add	sp, #52	@ 0x34
 80052b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052b8:	4642      	mov	r2, r8
 80052ba:	464b      	mov	r3, r9
 80052bc:	4640      	mov	r0, r8
 80052be:	4649      	mov	r1, r9
 80052c0:	f7fb fc3c 	bl	8000b3c <__aeabi_dcmpun>
 80052c4:	b140      	cbz	r0, 80052d8 <_printf_float+0xe0>
 80052c6:	464b      	mov	r3, r9
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	bfbc      	itt	lt
 80052cc:	232d      	movlt	r3, #45	@ 0x2d
 80052ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80052d2:	4a7e      	ldr	r2, [pc, #504]	@ (80054cc <_printf_float+0x2d4>)
 80052d4:	4b7e      	ldr	r3, [pc, #504]	@ (80054d0 <_printf_float+0x2d8>)
 80052d6:	e7d4      	b.n	8005282 <_printf_float+0x8a>
 80052d8:	6863      	ldr	r3, [r4, #4]
 80052da:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80052de:	9206      	str	r2, [sp, #24]
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	d13b      	bne.n	800535c <_printf_float+0x164>
 80052e4:	2306      	movs	r3, #6
 80052e6:	6063      	str	r3, [r4, #4]
 80052e8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80052ec:	2300      	movs	r3, #0
 80052ee:	6022      	str	r2, [r4, #0]
 80052f0:	9303      	str	r3, [sp, #12]
 80052f2:	ab0a      	add	r3, sp, #40	@ 0x28
 80052f4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80052f8:	ab09      	add	r3, sp, #36	@ 0x24
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	6861      	ldr	r1, [r4, #4]
 80052fe:	ec49 8b10 	vmov	d0, r8, r9
 8005302:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005306:	4628      	mov	r0, r5
 8005308:	f7ff fed6 	bl	80050b8 <__cvt>
 800530c:	9b06      	ldr	r3, [sp, #24]
 800530e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005310:	2b47      	cmp	r3, #71	@ 0x47
 8005312:	4680      	mov	r8, r0
 8005314:	d129      	bne.n	800536a <_printf_float+0x172>
 8005316:	1cc8      	adds	r0, r1, #3
 8005318:	db02      	blt.n	8005320 <_printf_float+0x128>
 800531a:	6863      	ldr	r3, [r4, #4]
 800531c:	4299      	cmp	r1, r3
 800531e:	dd41      	ble.n	80053a4 <_printf_float+0x1ac>
 8005320:	f1aa 0a02 	sub.w	sl, sl, #2
 8005324:	fa5f fa8a 	uxtb.w	sl, sl
 8005328:	3901      	subs	r1, #1
 800532a:	4652      	mov	r2, sl
 800532c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005330:	9109      	str	r1, [sp, #36]	@ 0x24
 8005332:	f7ff ff26 	bl	8005182 <__exponent>
 8005336:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005338:	1813      	adds	r3, r2, r0
 800533a:	2a01      	cmp	r2, #1
 800533c:	4681      	mov	r9, r0
 800533e:	6123      	str	r3, [r4, #16]
 8005340:	dc02      	bgt.n	8005348 <_printf_float+0x150>
 8005342:	6822      	ldr	r2, [r4, #0]
 8005344:	07d2      	lsls	r2, r2, #31
 8005346:	d501      	bpl.n	800534c <_printf_float+0x154>
 8005348:	3301      	adds	r3, #1
 800534a:	6123      	str	r3, [r4, #16]
 800534c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0a2      	beq.n	800529a <_printf_float+0xa2>
 8005354:	232d      	movs	r3, #45	@ 0x2d
 8005356:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800535a:	e79e      	b.n	800529a <_printf_float+0xa2>
 800535c:	9a06      	ldr	r2, [sp, #24]
 800535e:	2a47      	cmp	r2, #71	@ 0x47
 8005360:	d1c2      	bne.n	80052e8 <_printf_float+0xf0>
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1c0      	bne.n	80052e8 <_printf_float+0xf0>
 8005366:	2301      	movs	r3, #1
 8005368:	e7bd      	b.n	80052e6 <_printf_float+0xee>
 800536a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800536e:	d9db      	bls.n	8005328 <_printf_float+0x130>
 8005370:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005374:	d118      	bne.n	80053a8 <_printf_float+0x1b0>
 8005376:	2900      	cmp	r1, #0
 8005378:	6863      	ldr	r3, [r4, #4]
 800537a:	dd0b      	ble.n	8005394 <_printf_float+0x19c>
 800537c:	6121      	str	r1, [r4, #16]
 800537e:	b913      	cbnz	r3, 8005386 <_printf_float+0x18e>
 8005380:	6822      	ldr	r2, [r4, #0]
 8005382:	07d0      	lsls	r0, r2, #31
 8005384:	d502      	bpl.n	800538c <_printf_float+0x194>
 8005386:	3301      	adds	r3, #1
 8005388:	440b      	add	r3, r1
 800538a:	6123      	str	r3, [r4, #16]
 800538c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800538e:	f04f 0900 	mov.w	r9, #0
 8005392:	e7db      	b.n	800534c <_printf_float+0x154>
 8005394:	b913      	cbnz	r3, 800539c <_printf_float+0x1a4>
 8005396:	6822      	ldr	r2, [r4, #0]
 8005398:	07d2      	lsls	r2, r2, #31
 800539a:	d501      	bpl.n	80053a0 <_printf_float+0x1a8>
 800539c:	3302      	adds	r3, #2
 800539e:	e7f4      	b.n	800538a <_printf_float+0x192>
 80053a0:	2301      	movs	r3, #1
 80053a2:	e7f2      	b.n	800538a <_printf_float+0x192>
 80053a4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80053a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80053aa:	4299      	cmp	r1, r3
 80053ac:	db05      	blt.n	80053ba <_printf_float+0x1c2>
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	6121      	str	r1, [r4, #16]
 80053b2:	07d8      	lsls	r0, r3, #31
 80053b4:	d5ea      	bpl.n	800538c <_printf_float+0x194>
 80053b6:	1c4b      	adds	r3, r1, #1
 80053b8:	e7e7      	b.n	800538a <_printf_float+0x192>
 80053ba:	2900      	cmp	r1, #0
 80053bc:	bfd4      	ite	le
 80053be:	f1c1 0202 	rsble	r2, r1, #2
 80053c2:	2201      	movgt	r2, #1
 80053c4:	4413      	add	r3, r2
 80053c6:	e7e0      	b.n	800538a <_printf_float+0x192>
 80053c8:	6823      	ldr	r3, [r4, #0]
 80053ca:	055a      	lsls	r2, r3, #21
 80053cc:	d407      	bmi.n	80053de <_printf_float+0x1e6>
 80053ce:	6923      	ldr	r3, [r4, #16]
 80053d0:	4642      	mov	r2, r8
 80053d2:	4631      	mov	r1, r6
 80053d4:	4628      	mov	r0, r5
 80053d6:	47b8      	blx	r7
 80053d8:	3001      	adds	r0, #1
 80053da:	d12b      	bne.n	8005434 <_printf_float+0x23c>
 80053dc:	e767      	b.n	80052ae <_printf_float+0xb6>
 80053de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80053e2:	f240 80dd 	bls.w	80055a0 <_printf_float+0x3a8>
 80053e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80053ea:	2200      	movs	r2, #0
 80053ec:	2300      	movs	r3, #0
 80053ee:	f7fb fb73 	bl	8000ad8 <__aeabi_dcmpeq>
 80053f2:	2800      	cmp	r0, #0
 80053f4:	d033      	beq.n	800545e <_printf_float+0x266>
 80053f6:	4a37      	ldr	r2, [pc, #220]	@ (80054d4 <_printf_float+0x2dc>)
 80053f8:	2301      	movs	r3, #1
 80053fa:	4631      	mov	r1, r6
 80053fc:	4628      	mov	r0, r5
 80053fe:	47b8      	blx	r7
 8005400:	3001      	adds	r0, #1
 8005402:	f43f af54 	beq.w	80052ae <_printf_float+0xb6>
 8005406:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800540a:	4543      	cmp	r3, r8
 800540c:	db02      	blt.n	8005414 <_printf_float+0x21c>
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	07d8      	lsls	r0, r3, #31
 8005412:	d50f      	bpl.n	8005434 <_printf_float+0x23c>
 8005414:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005418:	4631      	mov	r1, r6
 800541a:	4628      	mov	r0, r5
 800541c:	47b8      	blx	r7
 800541e:	3001      	adds	r0, #1
 8005420:	f43f af45 	beq.w	80052ae <_printf_float+0xb6>
 8005424:	f04f 0900 	mov.w	r9, #0
 8005428:	f108 38ff 	add.w	r8, r8, #4294967295
 800542c:	f104 0a1a 	add.w	sl, r4, #26
 8005430:	45c8      	cmp	r8, r9
 8005432:	dc09      	bgt.n	8005448 <_printf_float+0x250>
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	079b      	lsls	r3, r3, #30
 8005438:	f100 8103 	bmi.w	8005642 <_printf_float+0x44a>
 800543c:	68e0      	ldr	r0, [r4, #12]
 800543e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005440:	4298      	cmp	r0, r3
 8005442:	bfb8      	it	lt
 8005444:	4618      	movlt	r0, r3
 8005446:	e734      	b.n	80052b2 <_printf_float+0xba>
 8005448:	2301      	movs	r3, #1
 800544a:	4652      	mov	r2, sl
 800544c:	4631      	mov	r1, r6
 800544e:	4628      	mov	r0, r5
 8005450:	47b8      	blx	r7
 8005452:	3001      	adds	r0, #1
 8005454:	f43f af2b 	beq.w	80052ae <_printf_float+0xb6>
 8005458:	f109 0901 	add.w	r9, r9, #1
 800545c:	e7e8      	b.n	8005430 <_printf_float+0x238>
 800545e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005460:	2b00      	cmp	r3, #0
 8005462:	dc39      	bgt.n	80054d8 <_printf_float+0x2e0>
 8005464:	4a1b      	ldr	r2, [pc, #108]	@ (80054d4 <_printf_float+0x2dc>)
 8005466:	2301      	movs	r3, #1
 8005468:	4631      	mov	r1, r6
 800546a:	4628      	mov	r0, r5
 800546c:	47b8      	blx	r7
 800546e:	3001      	adds	r0, #1
 8005470:	f43f af1d 	beq.w	80052ae <_printf_float+0xb6>
 8005474:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005478:	ea59 0303 	orrs.w	r3, r9, r3
 800547c:	d102      	bne.n	8005484 <_printf_float+0x28c>
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	07d9      	lsls	r1, r3, #31
 8005482:	d5d7      	bpl.n	8005434 <_printf_float+0x23c>
 8005484:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005488:	4631      	mov	r1, r6
 800548a:	4628      	mov	r0, r5
 800548c:	47b8      	blx	r7
 800548e:	3001      	adds	r0, #1
 8005490:	f43f af0d 	beq.w	80052ae <_printf_float+0xb6>
 8005494:	f04f 0a00 	mov.w	sl, #0
 8005498:	f104 0b1a 	add.w	fp, r4, #26
 800549c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800549e:	425b      	negs	r3, r3
 80054a0:	4553      	cmp	r3, sl
 80054a2:	dc01      	bgt.n	80054a8 <_printf_float+0x2b0>
 80054a4:	464b      	mov	r3, r9
 80054a6:	e793      	b.n	80053d0 <_printf_float+0x1d8>
 80054a8:	2301      	movs	r3, #1
 80054aa:	465a      	mov	r2, fp
 80054ac:	4631      	mov	r1, r6
 80054ae:	4628      	mov	r0, r5
 80054b0:	47b8      	blx	r7
 80054b2:	3001      	adds	r0, #1
 80054b4:	f43f aefb 	beq.w	80052ae <_printf_float+0xb6>
 80054b8:	f10a 0a01 	add.w	sl, sl, #1
 80054bc:	e7ee      	b.n	800549c <_printf_float+0x2a4>
 80054be:	bf00      	nop
 80054c0:	7fefffff 	.word	0x7fefffff
 80054c4:	08008360 	.word	0x08008360
 80054c8:	08008364 	.word	0x08008364
 80054cc:	08008368 	.word	0x08008368
 80054d0:	0800836c 	.word	0x0800836c
 80054d4:	08008370 	.word	0x08008370
 80054d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80054da:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80054de:	4553      	cmp	r3, sl
 80054e0:	bfa8      	it	ge
 80054e2:	4653      	movge	r3, sl
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	4699      	mov	r9, r3
 80054e8:	dc36      	bgt.n	8005558 <_printf_float+0x360>
 80054ea:	f04f 0b00 	mov.w	fp, #0
 80054ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054f2:	f104 021a 	add.w	r2, r4, #26
 80054f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80054f8:	9306      	str	r3, [sp, #24]
 80054fa:	eba3 0309 	sub.w	r3, r3, r9
 80054fe:	455b      	cmp	r3, fp
 8005500:	dc31      	bgt.n	8005566 <_printf_float+0x36e>
 8005502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005504:	459a      	cmp	sl, r3
 8005506:	dc3a      	bgt.n	800557e <_printf_float+0x386>
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	07da      	lsls	r2, r3, #31
 800550c:	d437      	bmi.n	800557e <_printf_float+0x386>
 800550e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005510:	ebaa 0903 	sub.w	r9, sl, r3
 8005514:	9b06      	ldr	r3, [sp, #24]
 8005516:	ebaa 0303 	sub.w	r3, sl, r3
 800551a:	4599      	cmp	r9, r3
 800551c:	bfa8      	it	ge
 800551e:	4699      	movge	r9, r3
 8005520:	f1b9 0f00 	cmp.w	r9, #0
 8005524:	dc33      	bgt.n	800558e <_printf_float+0x396>
 8005526:	f04f 0800 	mov.w	r8, #0
 800552a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800552e:	f104 0b1a 	add.w	fp, r4, #26
 8005532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005534:	ebaa 0303 	sub.w	r3, sl, r3
 8005538:	eba3 0309 	sub.w	r3, r3, r9
 800553c:	4543      	cmp	r3, r8
 800553e:	f77f af79 	ble.w	8005434 <_printf_float+0x23c>
 8005542:	2301      	movs	r3, #1
 8005544:	465a      	mov	r2, fp
 8005546:	4631      	mov	r1, r6
 8005548:	4628      	mov	r0, r5
 800554a:	47b8      	blx	r7
 800554c:	3001      	adds	r0, #1
 800554e:	f43f aeae 	beq.w	80052ae <_printf_float+0xb6>
 8005552:	f108 0801 	add.w	r8, r8, #1
 8005556:	e7ec      	b.n	8005532 <_printf_float+0x33a>
 8005558:	4642      	mov	r2, r8
 800555a:	4631      	mov	r1, r6
 800555c:	4628      	mov	r0, r5
 800555e:	47b8      	blx	r7
 8005560:	3001      	adds	r0, #1
 8005562:	d1c2      	bne.n	80054ea <_printf_float+0x2f2>
 8005564:	e6a3      	b.n	80052ae <_printf_float+0xb6>
 8005566:	2301      	movs	r3, #1
 8005568:	4631      	mov	r1, r6
 800556a:	4628      	mov	r0, r5
 800556c:	9206      	str	r2, [sp, #24]
 800556e:	47b8      	blx	r7
 8005570:	3001      	adds	r0, #1
 8005572:	f43f ae9c 	beq.w	80052ae <_printf_float+0xb6>
 8005576:	9a06      	ldr	r2, [sp, #24]
 8005578:	f10b 0b01 	add.w	fp, fp, #1
 800557c:	e7bb      	b.n	80054f6 <_printf_float+0x2fe>
 800557e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005582:	4631      	mov	r1, r6
 8005584:	4628      	mov	r0, r5
 8005586:	47b8      	blx	r7
 8005588:	3001      	adds	r0, #1
 800558a:	d1c0      	bne.n	800550e <_printf_float+0x316>
 800558c:	e68f      	b.n	80052ae <_printf_float+0xb6>
 800558e:	9a06      	ldr	r2, [sp, #24]
 8005590:	464b      	mov	r3, r9
 8005592:	4442      	add	r2, r8
 8005594:	4631      	mov	r1, r6
 8005596:	4628      	mov	r0, r5
 8005598:	47b8      	blx	r7
 800559a:	3001      	adds	r0, #1
 800559c:	d1c3      	bne.n	8005526 <_printf_float+0x32e>
 800559e:	e686      	b.n	80052ae <_printf_float+0xb6>
 80055a0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80055a4:	f1ba 0f01 	cmp.w	sl, #1
 80055a8:	dc01      	bgt.n	80055ae <_printf_float+0x3b6>
 80055aa:	07db      	lsls	r3, r3, #31
 80055ac:	d536      	bpl.n	800561c <_printf_float+0x424>
 80055ae:	2301      	movs	r3, #1
 80055b0:	4642      	mov	r2, r8
 80055b2:	4631      	mov	r1, r6
 80055b4:	4628      	mov	r0, r5
 80055b6:	47b8      	blx	r7
 80055b8:	3001      	adds	r0, #1
 80055ba:	f43f ae78 	beq.w	80052ae <_printf_float+0xb6>
 80055be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055c2:	4631      	mov	r1, r6
 80055c4:	4628      	mov	r0, r5
 80055c6:	47b8      	blx	r7
 80055c8:	3001      	adds	r0, #1
 80055ca:	f43f ae70 	beq.w	80052ae <_printf_float+0xb6>
 80055ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80055d2:	2200      	movs	r2, #0
 80055d4:	2300      	movs	r3, #0
 80055d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055da:	f7fb fa7d 	bl	8000ad8 <__aeabi_dcmpeq>
 80055de:	b9c0      	cbnz	r0, 8005612 <_printf_float+0x41a>
 80055e0:	4653      	mov	r3, sl
 80055e2:	f108 0201 	add.w	r2, r8, #1
 80055e6:	4631      	mov	r1, r6
 80055e8:	4628      	mov	r0, r5
 80055ea:	47b8      	blx	r7
 80055ec:	3001      	adds	r0, #1
 80055ee:	d10c      	bne.n	800560a <_printf_float+0x412>
 80055f0:	e65d      	b.n	80052ae <_printf_float+0xb6>
 80055f2:	2301      	movs	r3, #1
 80055f4:	465a      	mov	r2, fp
 80055f6:	4631      	mov	r1, r6
 80055f8:	4628      	mov	r0, r5
 80055fa:	47b8      	blx	r7
 80055fc:	3001      	adds	r0, #1
 80055fe:	f43f ae56 	beq.w	80052ae <_printf_float+0xb6>
 8005602:	f108 0801 	add.w	r8, r8, #1
 8005606:	45d0      	cmp	r8, sl
 8005608:	dbf3      	blt.n	80055f2 <_printf_float+0x3fa>
 800560a:	464b      	mov	r3, r9
 800560c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005610:	e6df      	b.n	80053d2 <_printf_float+0x1da>
 8005612:	f04f 0800 	mov.w	r8, #0
 8005616:	f104 0b1a 	add.w	fp, r4, #26
 800561a:	e7f4      	b.n	8005606 <_printf_float+0x40e>
 800561c:	2301      	movs	r3, #1
 800561e:	4642      	mov	r2, r8
 8005620:	e7e1      	b.n	80055e6 <_printf_float+0x3ee>
 8005622:	2301      	movs	r3, #1
 8005624:	464a      	mov	r2, r9
 8005626:	4631      	mov	r1, r6
 8005628:	4628      	mov	r0, r5
 800562a:	47b8      	blx	r7
 800562c:	3001      	adds	r0, #1
 800562e:	f43f ae3e 	beq.w	80052ae <_printf_float+0xb6>
 8005632:	f108 0801 	add.w	r8, r8, #1
 8005636:	68e3      	ldr	r3, [r4, #12]
 8005638:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800563a:	1a5b      	subs	r3, r3, r1
 800563c:	4543      	cmp	r3, r8
 800563e:	dcf0      	bgt.n	8005622 <_printf_float+0x42a>
 8005640:	e6fc      	b.n	800543c <_printf_float+0x244>
 8005642:	f04f 0800 	mov.w	r8, #0
 8005646:	f104 0919 	add.w	r9, r4, #25
 800564a:	e7f4      	b.n	8005636 <_printf_float+0x43e>

0800564c <_printf_common>:
 800564c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005650:	4616      	mov	r6, r2
 8005652:	4698      	mov	r8, r3
 8005654:	688a      	ldr	r2, [r1, #8]
 8005656:	690b      	ldr	r3, [r1, #16]
 8005658:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800565c:	4293      	cmp	r3, r2
 800565e:	bfb8      	it	lt
 8005660:	4613      	movlt	r3, r2
 8005662:	6033      	str	r3, [r6, #0]
 8005664:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005668:	4607      	mov	r7, r0
 800566a:	460c      	mov	r4, r1
 800566c:	b10a      	cbz	r2, 8005672 <_printf_common+0x26>
 800566e:	3301      	adds	r3, #1
 8005670:	6033      	str	r3, [r6, #0]
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	0699      	lsls	r1, r3, #26
 8005676:	bf42      	ittt	mi
 8005678:	6833      	ldrmi	r3, [r6, #0]
 800567a:	3302      	addmi	r3, #2
 800567c:	6033      	strmi	r3, [r6, #0]
 800567e:	6825      	ldr	r5, [r4, #0]
 8005680:	f015 0506 	ands.w	r5, r5, #6
 8005684:	d106      	bne.n	8005694 <_printf_common+0x48>
 8005686:	f104 0a19 	add.w	sl, r4, #25
 800568a:	68e3      	ldr	r3, [r4, #12]
 800568c:	6832      	ldr	r2, [r6, #0]
 800568e:	1a9b      	subs	r3, r3, r2
 8005690:	42ab      	cmp	r3, r5
 8005692:	dc26      	bgt.n	80056e2 <_printf_common+0x96>
 8005694:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005698:	6822      	ldr	r2, [r4, #0]
 800569a:	3b00      	subs	r3, #0
 800569c:	bf18      	it	ne
 800569e:	2301      	movne	r3, #1
 80056a0:	0692      	lsls	r2, r2, #26
 80056a2:	d42b      	bmi.n	80056fc <_printf_common+0xb0>
 80056a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80056a8:	4641      	mov	r1, r8
 80056aa:	4638      	mov	r0, r7
 80056ac:	47c8      	blx	r9
 80056ae:	3001      	adds	r0, #1
 80056b0:	d01e      	beq.n	80056f0 <_printf_common+0xa4>
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	6922      	ldr	r2, [r4, #16]
 80056b6:	f003 0306 	and.w	r3, r3, #6
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	bf02      	ittt	eq
 80056be:	68e5      	ldreq	r5, [r4, #12]
 80056c0:	6833      	ldreq	r3, [r6, #0]
 80056c2:	1aed      	subeq	r5, r5, r3
 80056c4:	68a3      	ldr	r3, [r4, #8]
 80056c6:	bf0c      	ite	eq
 80056c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056cc:	2500      	movne	r5, #0
 80056ce:	4293      	cmp	r3, r2
 80056d0:	bfc4      	itt	gt
 80056d2:	1a9b      	subgt	r3, r3, r2
 80056d4:	18ed      	addgt	r5, r5, r3
 80056d6:	2600      	movs	r6, #0
 80056d8:	341a      	adds	r4, #26
 80056da:	42b5      	cmp	r5, r6
 80056dc:	d11a      	bne.n	8005714 <_printf_common+0xc8>
 80056de:	2000      	movs	r0, #0
 80056e0:	e008      	b.n	80056f4 <_printf_common+0xa8>
 80056e2:	2301      	movs	r3, #1
 80056e4:	4652      	mov	r2, sl
 80056e6:	4641      	mov	r1, r8
 80056e8:	4638      	mov	r0, r7
 80056ea:	47c8      	blx	r9
 80056ec:	3001      	adds	r0, #1
 80056ee:	d103      	bne.n	80056f8 <_printf_common+0xac>
 80056f0:	f04f 30ff 	mov.w	r0, #4294967295
 80056f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f8:	3501      	adds	r5, #1
 80056fa:	e7c6      	b.n	800568a <_printf_common+0x3e>
 80056fc:	18e1      	adds	r1, r4, r3
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	2030      	movs	r0, #48	@ 0x30
 8005702:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005706:	4422      	add	r2, r4
 8005708:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800570c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005710:	3302      	adds	r3, #2
 8005712:	e7c7      	b.n	80056a4 <_printf_common+0x58>
 8005714:	2301      	movs	r3, #1
 8005716:	4622      	mov	r2, r4
 8005718:	4641      	mov	r1, r8
 800571a:	4638      	mov	r0, r7
 800571c:	47c8      	blx	r9
 800571e:	3001      	adds	r0, #1
 8005720:	d0e6      	beq.n	80056f0 <_printf_common+0xa4>
 8005722:	3601      	adds	r6, #1
 8005724:	e7d9      	b.n	80056da <_printf_common+0x8e>
	...

08005728 <_printf_i>:
 8005728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800572c:	7e0f      	ldrb	r7, [r1, #24]
 800572e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005730:	2f78      	cmp	r7, #120	@ 0x78
 8005732:	4691      	mov	r9, r2
 8005734:	4680      	mov	r8, r0
 8005736:	460c      	mov	r4, r1
 8005738:	469a      	mov	sl, r3
 800573a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800573e:	d807      	bhi.n	8005750 <_printf_i+0x28>
 8005740:	2f62      	cmp	r7, #98	@ 0x62
 8005742:	d80a      	bhi.n	800575a <_printf_i+0x32>
 8005744:	2f00      	cmp	r7, #0
 8005746:	f000 80d2 	beq.w	80058ee <_printf_i+0x1c6>
 800574a:	2f58      	cmp	r7, #88	@ 0x58
 800574c:	f000 80b9 	beq.w	80058c2 <_printf_i+0x19a>
 8005750:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005754:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005758:	e03a      	b.n	80057d0 <_printf_i+0xa8>
 800575a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800575e:	2b15      	cmp	r3, #21
 8005760:	d8f6      	bhi.n	8005750 <_printf_i+0x28>
 8005762:	a101      	add	r1, pc, #4	@ (adr r1, 8005768 <_printf_i+0x40>)
 8005764:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005768:	080057c1 	.word	0x080057c1
 800576c:	080057d5 	.word	0x080057d5
 8005770:	08005751 	.word	0x08005751
 8005774:	08005751 	.word	0x08005751
 8005778:	08005751 	.word	0x08005751
 800577c:	08005751 	.word	0x08005751
 8005780:	080057d5 	.word	0x080057d5
 8005784:	08005751 	.word	0x08005751
 8005788:	08005751 	.word	0x08005751
 800578c:	08005751 	.word	0x08005751
 8005790:	08005751 	.word	0x08005751
 8005794:	080058d5 	.word	0x080058d5
 8005798:	080057ff 	.word	0x080057ff
 800579c:	0800588f 	.word	0x0800588f
 80057a0:	08005751 	.word	0x08005751
 80057a4:	08005751 	.word	0x08005751
 80057a8:	080058f7 	.word	0x080058f7
 80057ac:	08005751 	.word	0x08005751
 80057b0:	080057ff 	.word	0x080057ff
 80057b4:	08005751 	.word	0x08005751
 80057b8:	08005751 	.word	0x08005751
 80057bc:	08005897 	.word	0x08005897
 80057c0:	6833      	ldr	r3, [r6, #0]
 80057c2:	1d1a      	adds	r2, r3, #4
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	6032      	str	r2, [r6, #0]
 80057c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80057d0:	2301      	movs	r3, #1
 80057d2:	e09d      	b.n	8005910 <_printf_i+0x1e8>
 80057d4:	6833      	ldr	r3, [r6, #0]
 80057d6:	6820      	ldr	r0, [r4, #0]
 80057d8:	1d19      	adds	r1, r3, #4
 80057da:	6031      	str	r1, [r6, #0]
 80057dc:	0606      	lsls	r6, r0, #24
 80057de:	d501      	bpl.n	80057e4 <_printf_i+0xbc>
 80057e0:	681d      	ldr	r5, [r3, #0]
 80057e2:	e003      	b.n	80057ec <_printf_i+0xc4>
 80057e4:	0645      	lsls	r5, r0, #25
 80057e6:	d5fb      	bpl.n	80057e0 <_printf_i+0xb8>
 80057e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80057ec:	2d00      	cmp	r5, #0
 80057ee:	da03      	bge.n	80057f8 <_printf_i+0xd0>
 80057f0:	232d      	movs	r3, #45	@ 0x2d
 80057f2:	426d      	negs	r5, r5
 80057f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057f8:	4859      	ldr	r0, [pc, #356]	@ (8005960 <_printf_i+0x238>)
 80057fa:	230a      	movs	r3, #10
 80057fc:	e011      	b.n	8005822 <_printf_i+0xfa>
 80057fe:	6821      	ldr	r1, [r4, #0]
 8005800:	6833      	ldr	r3, [r6, #0]
 8005802:	0608      	lsls	r0, r1, #24
 8005804:	f853 5b04 	ldr.w	r5, [r3], #4
 8005808:	d402      	bmi.n	8005810 <_printf_i+0xe8>
 800580a:	0649      	lsls	r1, r1, #25
 800580c:	bf48      	it	mi
 800580e:	b2ad      	uxthmi	r5, r5
 8005810:	2f6f      	cmp	r7, #111	@ 0x6f
 8005812:	4853      	ldr	r0, [pc, #332]	@ (8005960 <_printf_i+0x238>)
 8005814:	6033      	str	r3, [r6, #0]
 8005816:	bf14      	ite	ne
 8005818:	230a      	movne	r3, #10
 800581a:	2308      	moveq	r3, #8
 800581c:	2100      	movs	r1, #0
 800581e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005822:	6866      	ldr	r6, [r4, #4]
 8005824:	60a6      	str	r6, [r4, #8]
 8005826:	2e00      	cmp	r6, #0
 8005828:	bfa2      	ittt	ge
 800582a:	6821      	ldrge	r1, [r4, #0]
 800582c:	f021 0104 	bicge.w	r1, r1, #4
 8005830:	6021      	strge	r1, [r4, #0]
 8005832:	b90d      	cbnz	r5, 8005838 <_printf_i+0x110>
 8005834:	2e00      	cmp	r6, #0
 8005836:	d04b      	beq.n	80058d0 <_printf_i+0x1a8>
 8005838:	4616      	mov	r6, r2
 800583a:	fbb5 f1f3 	udiv	r1, r5, r3
 800583e:	fb03 5711 	mls	r7, r3, r1, r5
 8005842:	5dc7      	ldrb	r7, [r0, r7]
 8005844:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005848:	462f      	mov	r7, r5
 800584a:	42bb      	cmp	r3, r7
 800584c:	460d      	mov	r5, r1
 800584e:	d9f4      	bls.n	800583a <_printf_i+0x112>
 8005850:	2b08      	cmp	r3, #8
 8005852:	d10b      	bne.n	800586c <_printf_i+0x144>
 8005854:	6823      	ldr	r3, [r4, #0]
 8005856:	07df      	lsls	r7, r3, #31
 8005858:	d508      	bpl.n	800586c <_printf_i+0x144>
 800585a:	6923      	ldr	r3, [r4, #16]
 800585c:	6861      	ldr	r1, [r4, #4]
 800585e:	4299      	cmp	r1, r3
 8005860:	bfde      	ittt	le
 8005862:	2330      	movle	r3, #48	@ 0x30
 8005864:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005868:	f106 36ff 	addle.w	r6, r6, #4294967295
 800586c:	1b92      	subs	r2, r2, r6
 800586e:	6122      	str	r2, [r4, #16]
 8005870:	f8cd a000 	str.w	sl, [sp]
 8005874:	464b      	mov	r3, r9
 8005876:	aa03      	add	r2, sp, #12
 8005878:	4621      	mov	r1, r4
 800587a:	4640      	mov	r0, r8
 800587c:	f7ff fee6 	bl	800564c <_printf_common>
 8005880:	3001      	adds	r0, #1
 8005882:	d14a      	bne.n	800591a <_printf_i+0x1f2>
 8005884:	f04f 30ff 	mov.w	r0, #4294967295
 8005888:	b004      	add	sp, #16
 800588a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800588e:	6823      	ldr	r3, [r4, #0]
 8005890:	f043 0320 	orr.w	r3, r3, #32
 8005894:	6023      	str	r3, [r4, #0]
 8005896:	4833      	ldr	r0, [pc, #204]	@ (8005964 <_printf_i+0x23c>)
 8005898:	2778      	movs	r7, #120	@ 0x78
 800589a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800589e:	6823      	ldr	r3, [r4, #0]
 80058a0:	6831      	ldr	r1, [r6, #0]
 80058a2:	061f      	lsls	r7, r3, #24
 80058a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80058a8:	d402      	bmi.n	80058b0 <_printf_i+0x188>
 80058aa:	065f      	lsls	r7, r3, #25
 80058ac:	bf48      	it	mi
 80058ae:	b2ad      	uxthmi	r5, r5
 80058b0:	6031      	str	r1, [r6, #0]
 80058b2:	07d9      	lsls	r1, r3, #31
 80058b4:	bf44      	itt	mi
 80058b6:	f043 0320 	orrmi.w	r3, r3, #32
 80058ba:	6023      	strmi	r3, [r4, #0]
 80058bc:	b11d      	cbz	r5, 80058c6 <_printf_i+0x19e>
 80058be:	2310      	movs	r3, #16
 80058c0:	e7ac      	b.n	800581c <_printf_i+0xf4>
 80058c2:	4827      	ldr	r0, [pc, #156]	@ (8005960 <_printf_i+0x238>)
 80058c4:	e7e9      	b.n	800589a <_printf_i+0x172>
 80058c6:	6823      	ldr	r3, [r4, #0]
 80058c8:	f023 0320 	bic.w	r3, r3, #32
 80058cc:	6023      	str	r3, [r4, #0]
 80058ce:	e7f6      	b.n	80058be <_printf_i+0x196>
 80058d0:	4616      	mov	r6, r2
 80058d2:	e7bd      	b.n	8005850 <_printf_i+0x128>
 80058d4:	6833      	ldr	r3, [r6, #0]
 80058d6:	6825      	ldr	r5, [r4, #0]
 80058d8:	6961      	ldr	r1, [r4, #20]
 80058da:	1d18      	adds	r0, r3, #4
 80058dc:	6030      	str	r0, [r6, #0]
 80058de:	062e      	lsls	r6, r5, #24
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	d501      	bpl.n	80058e8 <_printf_i+0x1c0>
 80058e4:	6019      	str	r1, [r3, #0]
 80058e6:	e002      	b.n	80058ee <_printf_i+0x1c6>
 80058e8:	0668      	lsls	r0, r5, #25
 80058ea:	d5fb      	bpl.n	80058e4 <_printf_i+0x1bc>
 80058ec:	8019      	strh	r1, [r3, #0]
 80058ee:	2300      	movs	r3, #0
 80058f0:	6123      	str	r3, [r4, #16]
 80058f2:	4616      	mov	r6, r2
 80058f4:	e7bc      	b.n	8005870 <_printf_i+0x148>
 80058f6:	6833      	ldr	r3, [r6, #0]
 80058f8:	1d1a      	adds	r2, r3, #4
 80058fa:	6032      	str	r2, [r6, #0]
 80058fc:	681e      	ldr	r6, [r3, #0]
 80058fe:	6862      	ldr	r2, [r4, #4]
 8005900:	2100      	movs	r1, #0
 8005902:	4630      	mov	r0, r6
 8005904:	f7fa fc6c 	bl	80001e0 <memchr>
 8005908:	b108      	cbz	r0, 800590e <_printf_i+0x1e6>
 800590a:	1b80      	subs	r0, r0, r6
 800590c:	6060      	str	r0, [r4, #4]
 800590e:	6863      	ldr	r3, [r4, #4]
 8005910:	6123      	str	r3, [r4, #16]
 8005912:	2300      	movs	r3, #0
 8005914:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005918:	e7aa      	b.n	8005870 <_printf_i+0x148>
 800591a:	6923      	ldr	r3, [r4, #16]
 800591c:	4632      	mov	r2, r6
 800591e:	4649      	mov	r1, r9
 8005920:	4640      	mov	r0, r8
 8005922:	47d0      	blx	sl
 8005924:	3001      	adds	r0, #1
 8005926:	d0ad      	beq.n	8005884 <_printf_i+0x15c>
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	079b      	lsls	r3, r3, #30
 800592c:	d413      	bmi.n	8005956 <_printf_i+0x22e>
 800592e:	68e0      	ldr	r0, [r4, #12]
 8005930:	9b03      	ldr	r3, [sp, #12]
 8005932:	4298      	cmp	r0, r3
 8005934:	bfb8      	it	lt
 8005936:	4618      	movlt	r0, r3
 8005938:	e7a6      	b.n	8005888 <_printf_i+0x160>
 800593a:	2301      	movs	r3, #1
 800593c:	4632      	mov	r2, r6
 800593e:	4649      	mov	r1, r9
 8005940:	4640      	mov	r0, r8
 8005942:	47d0      	blx	sl
 8005944:	3001      	adds	r0, #1
 8005946:	d09d      	beq.n	8005884 <_printf_i+0x15c>
 8005948:	3501      	adds	r5, #1
 800594a:	68e3      	ldr	r3, [r4, #12]
 800594c:	9903      	ldr	r1, [sp, #12]
 800594e:	1a5b      	subs	r3, r3, r1
 8005950:	42ab      	cmp	r3, r5
 8005952:	dcf2      	bgt.n	800593a <_printf_i+0x212>
 8005954:	e7eb      	b.n	800592e <_printf_i+0x206>
 8005956:	2500      	movs	r5, #0
 8005958:	f104 0619 	add.w	r6, r4, #25
 800595c:	e7f5      	b.n	800594a <_printf_i+0x222>
 800595e:	bf00      	nop
 8005960:	08008372 	.word	0x08008372
 8005964:	08008383 	.word	0x08008383

08005968 <std>:
 8005968:	2300      	movs	r3, #0
 800596a:	b510      	push	{r4, lr}
 800596c:	4604      	mov	r4, r0
 800596e:	e9c0 3300 	strd	r3, r3, [r0]
 8005972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005976:	6083      	str	r3, [r0, #8]
 8005978:	8181      	strh	r1, [r0, #12]
 800597a:	6643      	str	r3, [r0, #100]	@ 0x64
 800597c:	81c2      	strh	r2, [r0, #14]
 800597e:	6183      	str	r3, [r0, #24]
 8005980:	4619      	mov	r1, r3
 8005982:	2208      	movs	r2, #8
 8005984:	305c      	adds	r0, #92	@ 0x5c
 8005986:	f000 f948 	bl	8005c1a <memset>
 800598a:	4b0d      	ldr	r3, [pc, #52]	@ (80059c0 <std+0x58>)
 800598c:	6263      	str	r3, [r4, #36]	@ 0x24
 800598e:	4b0d      	ldr	r3, [pc, #52]	@ (80059c4 <std+0x5c>)
 8005990:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005992:	4b0d      	ldr	r3, [pc, #52]	@ (80059c8 <std+0x60>)
 8005994:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005996:	4b0d      	ldr	r3, [pc, #52]	@ (80059cc <std+0x64>)
 8005998:	6323      	str	r3, [r4, #48]	@ 0x30
 800599a:	4b0d      	ldr	r3, [pc, #52]	@ (80059d0 <std+0x68>)
 800599c:	6224      	str	r4, [r4, #32]
 800599e:	429c      	cmp	r4, r3
 80059a0:	d006      	beq.n	80059b0 <std+0x48>
 80059a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80059a6:	4294      	cmp	r4, r2
 80059a8:	d002      	beq.n	80059b0 <std+0x48>
 80059aa:	33d0      	adds	r3, #208	@ 0xd0
 80059ac:	429c      	cmp	r4, r3
 80059ae:	d105      	bne.n	80059bc <std+0x54>
 80059b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80059b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059b8:	f000 b9ac 	b.w	8005d14 <__retarget_lock_init_recursive>
 80059bc:	bd10      	pop	{r4, pc}
 80059be:	bf00      	nop
 80059c0:	08005b95 	.word	0x08005b95
 80059c4:	08005bb7 	.word	0x08005bb7
 80059c8:	08005bef 	.word	0x08005bef
 80059cc:	08005c13 	.word	0x08005c13
 80059d0:	20000344 	.word	0x20000344

080059d4 <stdio_exit_handler>:
 80059d4:	4a02      	ldr	r2, [pc, #8]	@ (80059e0 <stdio_exit_handler+0xc>)
 80059d6:	4903      	ldr	r1, [pc, #12]	@ (80059e4 <stdio_exit_handler+0x10>)
 80059d8:	4803      	ldr	r0, [pc, #12]	@ (80059e8 <stdio_exit_handler+0x14>)
 80059da:	f000 b869 	b.w	8005ab0 <_fwalk_sglue>
 80059de:	bf00      	nop
 80059e0:	2000000c 	.word	0x2000000c
 80059e4:	08007675 	.word	0x08007675
 80059e8:	2000001c 	.word	0x2000001c

080059ec <cleanup_stdio>:
 80059ec:	6841      	ldr	r1, [r0, #4]
 80059ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005a20 <cleanup_stdio+0x34>)
 80059f0:	4299      	cmp	r1, r3
 80059f2:	b510      	push	{r4, lr}
 80059f4:	4604      	mov	r4, r0
 80059f6:	d001      	beq.n	80059fc <cleanup_stdio+0x10>
 80059f8:	f001 fe3c 	bl	8007674 <_fflush_r>
 80059fc:	68a1      	ldr	r1, [r4, #8]
 80059fe:	4b09      	ldr	r3, [pc, #36]	@ (8005a24 <cleanup_stdio+0x38>)
 8005a00:	4299      	cmp	r1, r3
 8005a02:	d002      	beq.n	8005a0a <cleanup_stdio+0x1e>
 8005a04:	4620      	mov	r0, r4
 8005a06:	f001 fe35 	bl	8007674 <_fflush_r>
 8005a0a:	68e1      	ldr	r1, [r4, #12]
 8005a0c:	4b06      	ldr	r3, [pc, #24]	@ (8005a28 <cleanup_stdio+0x3c>)
 8005a0e:	4299      	cmp	r1, r3
 8005a10:	d004      	beq.n	8005a1c <cleanup_stdio+0x30>
 8005a12:	4620      	mov	r0, r4
 8005a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a18:	f001 be2c 	b.w	8007674 <_fflush_r>
 8005a1c:	bd10      	pop	{r4, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000344 	.word	0x20000344
 8005a24:	200003ac 	.word	0x200003ac
 8005a28:	20000414 	.word	0x20000414

08005a2c <global_stdio_init.part.0>:
 8005a2c:	b510      	push	{r4, lr}
 8005a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a5c <global_stdio_init.part.0+0x30>)
 8005a30:	4c0b      	ldr	r4, [pc, #44]	@ (8005a60 <global_stdio_init.part.0+0x34>)
 8005a32:	4a0c      	ldr	r2, [pc, #48]	@ (8005a64 <global_stdio_init.part.0+0x38>)
 8005a34:	601a      	str	r2, [r3, #0]
 8005a36:	4620      	mov	r0, r4
 8005a38:	2200      	movs	r2, #0
 8005a3a:	2104      	movs	r1, #4
 8005a3c:	f7ff ff94 	bl	8005968 <std>
 8005a40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a44:	2201      	movs	r2, #1
 8005a46:	2109      	movs	r1, #9
 8005a48:	f7ff ff8e 	bl	8005968 <std>
 8005a4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a50:	2202      	movs	r2, #2
 8005a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a56:	2112      	movs	r1, #18
 8005a58:	f7ff bf86 	b.w	8005968 <std>
 8005a5c:	2000047c 	.word	0x2000047c
 8005a60:	20000344 	.word	0x20000344
 8005a64:	080059d5 	.word	0x080059d5

08005a68 <__sfp_lock_acquire>:
 8005a68:	4801      	ldr	r0, [pc, #4]	@ (8005a70 <__sfp_lock_acquire+0x8>)
 8005a6a:	f000 b954 	b.w	8005d16 <__retarget_lock_acquire_recursive>
 8005a6e:	bf00      	nop
 8005a70:	20000485 	.word	0x20000485

08005a74 <__sfp_lock_release>:
 8005a74:	4801      	ldr	r0, [pc, #4]	@ (8005a7c <__sfp_lock_release+0x8>)
 8005a76:	f000 b94f 	b.w	8005d18 <__retarget_lock_release_recursive>
 8005a7a:	bf00      	nop
 8005a7c:	20000485 	.word	0x20000485

08005a80 <__sinit>:
 8005a80:	b510      	push	{r4, lr}
 8005a82:	4604      	mov	r4, r0
 8005a84:	f7ff fff0 	bl	8005a68 <__sfp_lock_acquire>
 8005a88:	6a23      	ldr	r3, [r4, #32]
 8005a8a:	b11b      	cbz	r3, 8005a94 <__sinit+0x14>
 8005a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a90:	f7ff bff0 	b.w	8005a74 <__sfp_lock_release>
 8005a94:	4b04      	ldr	r3, [pc, #16]	@ (8005aa8 <__sinit+0x28>)
 8005a96:	6223      	str	r3, [r4, #32]
 8005a98:	4b04      	ldr	r3, [pc, #16]	@ (8005aac <__sinit+0x2c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1f5      	bne.n	8005a8c <__sinit+0xc>
 8005aa0:	f7ff ffc4 	bl	8005a2c <global_stdio_init.part.0>
 8005aa4:	e7f2      	b.n	8005a8c <__sinit+0xc>
 8005aa6:	bf00      	nop
 8005aa8:	080059ed 	.word	0x080059ed
 8005aac:	2000047c 	.word	0x2000047c

08005ab0 <_fwalk_sglue>:
 8005ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ab4:	4607      	mov	r7, r0
 8005ab6:	4688      	mov	r8, r1
 8005ab8:	4614      	mov	r4, r2
 8005aba:	2600      	movs	r6, #0
 8005abc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ac0:	f1b9 0901 	subs.w	r9, r9, #1
 8005ac4:	d505      	bpl.n	8005ad2 <_fwalk_sglue+0x22>
 8005ac6:	6824      	ldr	r4, [r4, #0]
 8005ac8:	2c00      	cmp	r4, #0
 8005aca:	d1f7      	bne.n	8005abc <_fwalk_sglue+0xc>
 8005acc:	4630      	mov	r0, r6
 8005ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ad2:	89ab      	ldrh	r3, [r5, #12]
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d907      	bls.n	8005ae8 <_fwalk_sglue+0x38>
 8005ad8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005adc:	3301      	adds	r3, #1
 8005ade:	d003      	beq.n	8005ae8 <_fwalk_sglue+0x38>
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	4638      	mov	r0, r7
 8005ae4:	47c0      	blx	r8
 8005ae6:	4306      	orrs	r6, r0
 8005ae8:	3568      	adds	r5, #104	@ 0x68
 8005aea:	e7e9      	b.n	8005ac0 <_fwalk_sglue+0x10>

08005aec <sniprintf>:
 8005aec:	b40c      	push	{r2, r3}
 8005aee:	b530      	push	{r4, r5, lr}
 8005af0:	4b17      	ldr	r3, [pc, #92]	@ (8005b50 <sniprintf+0x64>)
 8005af2:	1e0c      	subs	r4, r1, #0
 8005af4:	681d      	ldr	r5, [r3, #0]
 8005af6:	b09d      	sub	sp, #116	@ 0x74
 8005af8:	da08      	bge.n	8005b0c <sniprintf+0x20>
 8005afa:	238b      	movs	r3, #139	@ 0x8b
 8005afc:	602b      	str	r3, [r5, #0]
 8005afe:	f04f 30ff 	mov.w	r0, #4294967295
 8005b02:	b01d      	add	sp, #116	@ 0x74
 8005b04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b08:	b002      	add	sp, #8
 8005b0a:	4770      	bx	lr
 8005b0c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005b10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005b14:	bf14      	ite	ne
 8005b16:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005b1a:	4623      	moveq	r3, r4
 8005b1c:	9304      	str	r3, [sp, #16]
 8005b1e:	9307      	str	r3, [sp, #28]
 8005b20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005b24:	9002      	str	r0, [sp, #8]
 8005b26:	9006      	str	r0, [sp, #24]
 8005b28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b2c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005b2e:	ab21      	add	r3, sp, #132	@ 0x84
 8005b30:	a902      	add	r1, sp, #8
 8005b32:	4628      	mov	r0, r5
 8005b34:	9301      	str	r3, [sp, #4]
 8005b36:	f001 fc1d 	bl	8007374 <_svfiprintf_r>
 8005b3a:	1c43      	adds	r3, r0, #1
 8005b3c:	bfbc      	itt	lt
 8005b3e:	238b      	movlt	r3, #139	@ 0x8b
 8005b40:	602b      	strlt	r3, [r5, #0]
 8005b42:	2c00      	cmp	r4, #0
 8005b44:	d0dd      	beq.n	8005b02 <sniprintf+0x16>
 8005b46:	9b02      	ldr	r3, [sp, #8]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	701a      	strb	r2, [r3, #0]
 8005b4c:	e7d9      	b.n	8005b02 <sniprintf+0x16>
 8005b4e:	bf00      	nop
 8005b50:	20000018 	.word	0x20000018

08005b54 <siprintf>:
 8005b54:	b40e      	push	{r1, r2, r3}
 8005b56:	b500      	push	{lr}
 8005b58:	b09c      	sub	sp, #112	@ 0x70
 8005b5a:	ab1d      	add	r3, sp, #116	@ 0x74
 8005b5c:	9002      	str	r0, [sp, #8]
 8005b5e:	9006      	str	r0, [sp, #24]
 8005b60:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005b64:	4809      	ldr	r0, [pc, #36]	@ (8005b8c <siprintf+0x38>)
 8005b66:	9107      	str	r1, [sp, #28]
 8005b68:	9104      	str	r1, [sp, #16]
 8005b6a:	4909      	ldr	r1, [pc, #36]	@ (8005b90 <siprintf+0x3c>)
 8005b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b70:	9105      	str	r1, [sp, #20]
 8005b72:	6800      	ldr	r0, [r0, #0]
 8005b74:	9301      	str	r3, [sp, #4]
 8005b76:	a902      	add	r1, sp, #8
 8005b78:	f001 fbfc 	bl	8007374 <_svfiprintf_r>
 8005b7c:	9b02      	ldr	r3, [sp, #8]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	701a      	strb	r2, [r3, #0]
 8005b82:	b01c      	add	sp, #112	@ 0x70
 8005b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b88:	b003      	add	sp, #12
 8005b8a:	4770      	bx	lr
 8005b8c:	20000018 	.word	0x20000018
 8005b90:	ffff0208 	.word	0xffff0208

08005b94 <__sread>:
 8005b94:	b510      	push	{r4, lr}
 8005b96:	460c      	mov	r4, r1
 8005b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b9c:	f000 f86c 	bl	8005c78 <_read_r>
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	bfab      	itete	ge
 8005ba4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005ba6:	89a3      	ldrhlt	r3, [r4, #12]
 8005ba8:	181b      	addge	r3, r3, r0
 8005baa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005bae:	bfac      	ite	ge
 8005bb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005bb2:	81a3      	strhlt	r3, [r4, #12]
 8005bb4:	bd10      	pop	{r4, pc}

08005bb6 <__swrite>:
 8005bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bba:	461f      	mov	r7, r3
 8005bbc:	898b      	ldrh	r3, [r1, #12]
 8005bbe:	05db      	lsls	r3, r3, #23
 8005bc0:	4605      	mov	r5, r0
 8005bc2:	460c      	mov	r4, r1
 8005bc4:	4616      	mov	r6, r2
 8005bc6:	d505      	bpl.n	8005bd4 <__swrite+0x1e>
 8005bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bcc:	2302      	movs	r3, #2
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f000 f840 	bl	8005c54 <_lseek_r>
 8005bd4:	89a3      	ldrh	r3, [r4, #12]
 8005bd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005bde:	81a3      	strh	r3, [r4, #12]
 8005be0:	4632      	mov	r2, r6
 8005be2:	463b      	mov	r3, r7
 8005be4:	4628      	mov	r0, r5
 8005be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bea:	f000 b857 	b.w	8005c9c <_write_r>

08005bee <__sseek>:
 8005bee:	b510      	push	{r4, lr}
 8005bf0:	460c      	mov	r4, r1
 8005bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf6:	f000 f82d 	bl	8005c54 <_lseek_r>
 8005bfa:	1c43      	adds	r3, r0, #1
 8005bfc:	89a3      	ldrh	r3, [r4, #12]
 8005bfe:	bf15      	itete	ne
 8005c00:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c0a:	81a3      	strheq	r3, [r4, #12]
 8005c0c:	bf18      	it	ne
 8005c0e:	81a3      	strhne	r3, [r4, #12]
 8005c10:	bd10      	pop	{r4, pc}

08005c12 <__sclose>:
 8005c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c16:	f000 b80d 	b.w	8005c34 <_close_r>

08005c1a <memset>:
 8005c1a:	4402      	add	r2, r0
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d100      	bne.n	8005c24 <memset+0xa>
 8005c22:	4770      	bx	lr
 8005c24:	f803 1b01 	strb.w	r1, [r3], #1
 8005c28:	e7f9      	b.n	8005c1e <memset+0x4>
	...

08005c2c <_localeconv_r>:
 8005c2c:	4800      	ldr	r0, [pc, #0]	@ (8005c30 <_localeconv_r+0x4>)
 8005c2e:	4770      	bx	lr
 8005c30:	20000158 	.word	0x20000158

08005c34 <_close_r>:
 8005c34:	b538      	push	{r3, r4, r5, lr}
 8005c36:	4d06      	ldr	r5, [pc, #24]	@ (8005c50 <_close_r+0x1c>)
 8005c38:	2300      	movs	r3, #0
 8005c3a:	4604      	mov	r4, r0
 8005c3c:	4608      	mov	r0, r1
 8005c3e:	602b      	str	r3, [r5, #0]
 8005c40:	f7fc f9bf 	bl	8001fc2 <_close>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d102      	bne.n	8005c4e <_close_r+0x1a>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	b103      	cbz	r3, 8005c4e <_close_r+0x1a>
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	bd38      	pop	{r3, r4, r5, pc}
 8005c50:	20000480 	.word	0x20000480

08005c54 <_lseek_r>:
 8005c54:	b538      	push	{r3, r4, r5, lr}
 8005c56:	4d07      	ldr	r5, [pc, #28]	@ (8005c74 <_lseek_r+0x20>)
 8005c58:	4604      	mov	r4, r0
 8005c5a:	4608      	mov	r0, r1
 8005c5c:	4611      	mov	r1, r2
 8005c5e:	2200      	movs	r2, #0
 8005c60:	602a      	str	r2, [r5, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	f7fc f9d4 	bl	8002010 <_lseek>
 8005c68:	1c43      	adds	r3, r0, #1
 8005c6a:	d102      	bne.n	8005c72 <_lseek_r+0x1e>
 8005c6c:	682b      	ldr	r3, [r5, #0]
 8005c6e:	b103      	cbz	r3, 8005c72 <_lseek_r+0x1e>
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	bd38      	pop	{r3, r4, r5, pc}
 8005c74:	20000480 	.word	0x20000480

08005c78 <_read_r>:
 8005c78:	b538      	push	{r3, r4, r5, lr}
 8005c7a:	4d07      	ldr	r5, [pc, #28]	@ (8005c98 <_read_r+0x20>)
 8005c7c:	4604      	mov	r4, r0
 8005c7e:	4608      	mov	r0, r1
 8005c80:	4611      	mov	r1, r2
 8005c82:	2200      	movs	r2, #0
 8005c84:	602a      	str	r2, [r5, #0]
 8005c86:	461a      	mov	r2, r3
 8005c88:	f7fc f962 	bl	8001f50 <_read>
 8005c8c:	1c43      	adds	r3, r0, #1
 8005c8e:	d102      	bne.n	8005c96 <_read_r+0x1e>
 8005c90:	682b      	ldr	r3, [r5, #0]
 8005c92:	b103      	cbz	r3, 8005c96 <_read_r+0x1e>
 8005c94:	6023      	str	r3, [r4, #0]
 8005c96:	bd38      	pop	{r3, r4, r5, pc}
 8005c98:	20000480 	.word	0x20000480

08005c9c <_write_r>:
 8005c9c:	b538      	push	{r3, r4, r5, lr}
 8005c9e:	4d07      	ldr	r5, [pc, #28]	@ (8005cbc <_write_r+0x20>)
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	4608      	mov	r0, r1
 8005ca4:	4611      	mov	r1, r2
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	602a      	str	r2, [r5, #0]
 8005caa:	461a      	mov	r2, r3
 8005cac:	f7fc f96d 	bl	8001f8a <_write>
 8005cb0:	1c43      	adds	r3, r0, #1
 8005cb2:	d102      	bne.n	8005cba <_write_r+0x1e>
 8005cb4:	682b      	ldr	r3, [r5, #0]
 8005cb6:	b103      	cbz	r3, 8005cba <_write_r+0x1e>
 8005cb8:	6023      	str	r3, [r4, #0]
 8005cba:	bd38      	pop	{r3, r4, r5, pc}
 8005cbc:	20000480 	.word	0x20000480

08005cc0 <__errno>:
 8005cc0:	4b01      	ldr	r3, [pc, #4]	@ (8005cc8 <__errno+0x8>)
 8005cc2:	6818      	ldr	r0, [r3, #0]
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	20000018 	.word	0x20000018

08005ccc <__libc_init_array>:
 8005ccc:	b570      	push	{r4, r5, r6, lr}
 8005cce:	4d0d      	ldr	r5, [pc, #52]	@ (8005d04 <__libc_init_array+0x38>)
 8005cd0:	4c0d      	ldr	r4, [pc, #52]	@ (8005d08 <__libc_init_array+0x3c>)
 8005cd2:	1b64      	subs	r4, r4, r5
 8005cd4:	10a4      	asrs	r4, r4, #2
 8005cd6:	2600      	movs	r6, #0
 8005cd8:	42a6      	cmp	r6, r4
 8005cda:	d109      	bne.n	8005cf0 <__libc_init_array+0x24>
 8005cdc:	4d0b      	ldr	r5, [pc, #44]	@ (8005d0c <__libc_init_array+0x40>)
 8005cde:	4c0c      	ldr	r4, [pc, #48]	@ (8005d10 <__libc_init_array+0x44>)
 8005ce0:	f002 fa06 	bl	80080f0 <_init>
 8005ce4:	1b64      	subs	r4, r4, r5
 8005ce6:	10a4      	asrs	r4, r4, #2
 8005ce8:	2600      	movs	r6, #0
 8005cea:	42a6      	cmp	r6, r4
 8005cec:	d105      	bne.n	8005cfa <__libc_init_array+0x2e>
 8005cee:	bd70      	pop	{r4, r5, r6, pc}
 8005cf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cf4:	4798      	blx	r3
 8005cf6:	3601      	adds	r6, #1
 8005cf8:	e7ee      	b.n	8005cd8 <__libc_init_array+0xc>
 8005cfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cfe:	4798      	blx	r3
 8005d00:	3601      	adds	r6, #1
 8005d02:	e7f2      	b.n	8005cea <__libc_init_array+0x1e>
 8005d04:	08008710 	.word	0x08008710
 8005d08:	08008710 	.word	0x08008710
 8005d0c:	08008710 	.word	0x08008710
 8005d10:	08008714 	.word	0x08008714

08005d14 <__retarget_lock_init_recursive>:
 8005d14:	4770      	bx	lr

08005d16 <__retarget_lock_acquire_recursive>:
 8005d16:	4770      	bx	lr

08005d18 <__retarget_lock_release_recursive>:
 8005d18:	4770      	bx	lr

08005d1a <quorem>:
 8005d1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d1e:	6903      	ldr	r3, [r0, #16]
 8005d20:	690c      	ldr	r4, [r1, #16]
 8005d22:	42a3      	cmp	r3, r4
 8005d24:	4607      	mov	r7, r0
 8005d26:	db7e      	blt.n	8005e26 <quorem+0x10c>
 8005d28:	3c01      	subs	r4, #1
 8005d2a:	f101 0814 	add.w	r8, r1, #20
 8005d2e:	00a3      	lsls	r3, r4, #2
 8005d30:	f100 0514 	add.w	r5, r0, #20
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d3a:	9301      	str	r3, [sp, #4]
 8005d3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d44:	3301      	adds	r3, #1
 8005d46:	429a      	cmp	r2, r3
 8005d48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d50:	d32e      	bcc.n	8005db0 <quorem+0x96>
 8005d52:	f04f 0a00 	mov.w	sl, #0
 8005d56:	46c4      	mov	ip, r8
 8005d58:	46ae      	mov	lr, r5
 8005d5a:	46d3      	mov	fp, sl
 8005d5c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005d60:	b298      	uxth	r0, r3
 8005d62:	fb06 a000 	mla	r0, r6, r0, sl
 8005d66:	0c02      	lsrs	r2, r0, #16
 8005d68:	0c1b      	lsrs	r3, r3, #16
 8005d6a:	fb06 2303 	mla	r3, r6, r3, r2
 8005d6e:	f8de 2000 	ldr.w	r2, [lr]
 8005d72:	b280      	uxth	r0, r0
 8005d74:	b292      	uxth	r2, r2
 8005d76:	1a12      	subs	r2, r2, r0
 8005d78:	445a      	add	r2, fp
 8005d7a:	f8de 0000 	ldr.w	r0, [lr]
 8005d7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005d88:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005d8c:	b292      	uxth	r2, r2
 8005d8e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005d92:	45e1      	cmp	r9, ip
 8005d94:	f84e 2b04 	str.w	r2, [lr], #4
 8005d98:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005d9c:	d2de      	bcs.n	8005d5c <quorem+0x42>
 8005d9e:	9b00      	ldr	r3, [sp, #0]
 8005da0:	58eb      	ldr	r3, [r5, r3]
 8005da2:	b92b      	cbnz	r3, 8005db0 <quorem+0x96>
 8005da4:	9b01      	ldr	r3, [sp, #4]
 8005da6:	3b04      	subs	r3, #4
 8005da8:	429d      	cmp	r5, r3
 8005daa:	461a      	mov	r2, r3
 8005dac:	d32f      	bcc.n	8005e0e <quorem+0xf4>
 8005dae:	613c      	str	r4, [r7, #16]
 8005db0:	4638      	mov	r0, r7
 8005db2:	f001 f97b 	bl	80070ac <__mcmp>
 8005db6:	2800      	cmp	r0, #0
 8005db8:	db25      	blt.n	8005e06 <quorem+0xec>
 8005dba:	4629      	mov	r1, r5
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	f858 2b04 	ldr.w	r2, [r8], #4
 8005dc2:	f8d1 c000 	ldr.w	ip, [r1]
 8005dc6:	fa1f fe82 	uxth.w	lr, r2
 8005dca:	fa1f f38c 	uxth.w	r3, ip
 8005dce:	eba3 030e 	sub.w	r3, r3, lr
 8005dd2:	4403      	add	r3, r0
 8005dd4:	0c12      	lsrs	r2, r2, #16
 8005dd6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005dda:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005de4:	45c1      	cmp	r9, r8
 8005de6:	f841 3b04 	str.w	r3, [r1], #4
 8005dea:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005dee:	d2e6      	bcs.n	8005dbe <quorem+0xa4>
 8005df0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005df4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005df8:	b922      	cbnz	r2, 8005e04 <quorem+0xea>
 8005dfa:	3b04      	subs	r3, #4
 8005dfc:	429d      	cmp	r5, r3
 8005dfe:	461a      	mov	r2, r3
 8005e00:	d30b      	bcc.n	8005e1a <quorem+0x100>
 8005e02:	613c      	str	r4, [r7, #16]
 8005e04:	3601      	adds	r6, #1
 8005e06:	4630      	mov	r0, r6
 8005e08:	b003      	add	sp, #12
 8005e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e0e:	6812      	ldr	r2, [r2, #0]
 8005e10:	3b04      	subs	r3, #4
 8005e12:	2a00      	cmp	r2, #0
 8005e14:	d1cb      	bne.n	8005dae <quorem+0x94>
 8005e16:	3c01      	subs	r4, #1
 8005e18:	e7c6      	b.n	8005da8 <quorem+0x8e>
 8005e1a:	6812      	ldr	r2, [r2, #0]
 8005e1c:	3b04      	subs	r3, #4
 8005e1e:	2a00      	cmp	r2, #0
 8005e20:	d1ef      	bne.n	8005e02 <quorem+0xe8>
 8005e22:	3c01      	subs	r4, #1
 8005e24:	e7ea      	b.n	8005dfc <quorem+0xe2>
 8005e26:	2000      	movs	r0, #0
 8005e28:	e7ee      	b.n	8005e08 <quorem+0xee>
 8005e2a:	0000      	movs	r0, r0
 8005e2c:	0000      	movs	r0, r0
	...

08005e30 <_dtoa_r>:
 8005e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e34:	69c7      	ldr	r7, [r0, #28]
 8005e36:	b099      	sub	sp, #100	@ 0x64
 8005e38:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005e3c:	ec55 4b10 	vmov	r4, r5, d0
 8005e40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005e42:	9109      	str	r1, [sp, #36]	@ 0x24
 8005e44:	4683      	mov	fp, r0
 8005e46:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005e4a:	b97f      	cbnz	r7, 8005e6c <_dtoa_r+0x3c>
 8005e4c:	2010      	movs	r0, #16
 8005e4e:	f000 fdfd 	bl	8006a4c <malloc>
 8005e52:	4602      	mov	r2, r0
 8005e54:	f8cb 001c 	str.w	r0, [fp, #28]
 8005e58:	b920      	cbnz	r0, 8005e64 <_dtoa_r+0x34>
 8005e5a:	4ba7      	ldr	r3, [pc, #668]	@ (80060f8 <_dtoa_r+0x2c8>)
 8005e5c:	21ef      	movs	r1, #239	@ 0xef
 8005e5e:	48a7      	ldr	r0, [pc, #668]	@ (80060fc <_dtoa_r+0x2cc>)
 8005e60:	f001 fc68 	bl	8007734 <__assert_func>
 8005e64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005e68:	6007      	str	r7, [r0, #0]
 8005e6a:	60c7      	str	r7, [r0, #12]
 8005e6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e70:	6819      	ldr	r1, [r3, #0]
 8005e72:	b159      	cbz	r1, 8005e8c <_dtoa_r+0x5c>
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	604a      	str	r2, [r1, #4]
 8005e78:	2301      	movs	r3, #1
 8005e7a:	4093      	lsls	r3, r2
 8005e7c:	608b      	str	r3, [r1, #8]
 8005e7e:	4658      	mov	r0, fp
 8005e80:	f000 feda 	bl	8006c38 <_Bfree>
 8005e84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	1e2b      	subs	r3, r5, #0
 8005e8e:	bfb9      	ittee	lt
 8005e90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005e94:	9303      	strlt	r3, [sp, #12]
 8005e96:	2300      	movge	r3, #0
 8005e98:	6033      	strge	r3, [r6, #0]
 8005e9a:	9f03      	ldr	r7, [sp, #12]
 8005e9c:	4b98      	ldr	r3, [pc, #608]	@ (8006100 <_dtoa_r+0x2d0>)
 8005e9e:	bfbc      	itt	lt
 8005ea0:	2201      	movlt	r2, #1
 8005ea2:	6032      	strlt	r2, [r6, #0]
 8005ea4:	43bb      	bics	r3, r7
 8005ea6:	d112      	bne.n	8005ece <_dtoa_r+0x9e>
 8005ea8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005eaa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005eb4:	4323      	orrs	r3, r4
 8005eb6:	f000 854d 	beq.w	8006954 <_dtoa_r+0xb24>
 8005eba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005ebc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006114 <_dtoa_r+0x2e4>
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 854f 	beq.w	8006964 <_dtoa_r+0xb34>
 8005ec6:	f10a 0303 	add.w	r3, sl, #3
 8005eca:	f000 bd49 	b.w	8006960 <_dtoa_r+0xb30>
 8005ece:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	ec51 0b17 	vmov	r0, r1, d7
 8005ed8:	2300      	movs	r3, #0
 8005eda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005ede:	f7fa fdfb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ee2:	4680      	mov	r8, r0
 8005ee4:	b158      	cbz	r0, 8005efe <_dtoa_r+0xce>
 8005ee6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005ee8:	2301      	movs	r3, #1
 8005eea:	6013      	str	r3, [r2, #0]
 8005eec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005eee:	b113      	cbz	r3, 8005ef6 <_dtoa_r+0xc6>
 8005ef0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005ef2:	4b84      	ldr	r3, [pc, #528]	@ (8006104 <_dtoa_r+0x2d4>)
 8005ef4:	6013      	str	r3, [r2, #0]
 8005ef6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006118 <_dtoa_r+0x2e8>
 8005efa:	f000 bd33 	b.w	8006964 <_dtoa_r+0xb34>
 8005efe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005f02:	aa16      	add	r2, sp, #88	@ 0x58
 8005f04:	a917      	add	r1, sp, #92	@ 0x5c
 8005f06:	4658      	mov	r0, fp
 8005f08:	f001 f980 	bl	800720c <__d2b>
 8005f0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005f10:	4681      	mov	r9, r0
 8005f12:	2e00      	cmp	r6, #0
 8005f14:	d077      	beq.n	8006006 <_dtoa_r+0x1d6>
 8005f16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005f28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005f2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005f30:	4619      	mov	r1, r3
 8005f32:	2200      	movs	r2, #0
 8005f34:	4b74      	ldr	r3, [pc, #464]	@ (8006108 <_dtoa_r+0x2d8>)
 8005f36:	f7fa f9af 	bl	8000298 <__aeabi_dsub>
 8005f3a:	a369      	add	r3, pc, #420	@ (adr r3, 80060e0 <_dtoa_r+0x2b0>)
 8005f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f40:	f7fa fb62 	bl	8000608 <__aeabi_dmul>
 8005f44:	a368      	add	r3, pc, #416	@ (adr r3, 80060e8 <_dtoa_r+0x2b8>)
 8005f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4a:	f7fa f9a7 	bl	800029c <__adddf3>
 8005f4e:	4604      	mov	r4, r0
 8005f50:	4630      	mov	r0, r6
 8005f52:	460d      	mov	r5, r1
 8005f54:	f7fa faee 	bl	8000534 <__aeabi_i2d>
 8005f58:	a365      	add	r3, pc, #404	@ (adr r3, 80060f0 <_dtoa_r+0x2c0>)
 8005f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5e:	f7fa fb53 	bl	8000608 <__aeabi_dmul>
 8005f62:	4602      	mov	r2, r0
 8005f64:	460b      	mov	r3, r1
 8005f66:	4620      	mov	r0, r4
 8005f68:	4629      	mov	r1, r5
 8005f6a:	f7fa f997 	bl	800029c <__adddf3>
 8005f6e:	4604      	mov	r4, r0
 8005f70:	460d      	mov	r5, r1
 8005f72:	f7fa fdf9 	bl	8000b68 <__aeabi_d2iz>
 8005f76:	2200      	movs	r2, #0
 8005f78:	4607      	mov	r7, r0
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	4629      	mov	r1, r5
 8005f80:	f7fa fdb4 	bl	8000aec <__aeabi_dcmplt>
 8005f84:	b140      	cbz	r0, 8005f98 <_dtoa_r+0x168>
 8005f86:	4638      	mov	r0, r7
 8005f88:	f7fa fad4 	bl	8000534 <__aeabi_i2d>
 8005f8c:	4622      	mov	r2, r4
 8005f8e:	462b      	mov	r3, r5
 8005f90:	f7fa fda2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f94:	b900      	cbnz	r0, 8005f98 <_dtoa_r+0x168>
 8005f96:	3f01      	subs	r7, #1
 8005f98:	2f16      	cmp	r7, #22
 8005f9a:	d851      	bhi.n	8006040 <_dtoa_r+0x210>
 8005f9c:	4b5b      	ldr	r3, [pc, #364]	@ (800610c <_dtoa_r+0x2dc>)
 8005f9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005faa:	f7fa fd9f 	bl	8000aec <__aeabi_dcmplt>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d048      	beq.n	8006044 <_dtoa_r+0x214>
 8005fb2:	3f01      	subs	r7, #1
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	9312      	str	r3, [sp, #72]	@ 0x48
 8005fb8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005fba:	1b9b      	subs	r3, r3, r6
 8005fbc:	1e5a      	subs	r2, r3, #1
 8005fbe:	bf44      	itt	mi
 8005fc0:	f1c3 0801 	rsbmi	r8, r3, #1
 8005fc4:	2300      	movmi	r3, #0
 8005fc6:	9208      	str	r2, [sp, #32]
 8005fc8:	bf54      	ite	pl
 8005fca:	f04f 0800 	movpl.w	r8, #0
 8005fce:	9308      	strmi	r3, [sp, #32]
 8005fd0:	2f00      	cmp	r7, #0
 8005fd2:	db39      	blt.n	8006048 <_dtoa_r+0x218>
 8005fd4:	9b08      	ldr	r3, [sp, #32]
 8005fd6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005fd8:	443b      	add	r3, r7
 8005fda:	9308      	str	r3, [sp, #32]
 8005fdc:	2300      	movs	r3, #0
 8005fde:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fe2:	2b09      	cmp	r3, #9
 8005fe4:	d864      	bhi.n	80060b0 <_dtoa_r+0x280>
 8005fe6:	2b05      	cmp	r3, #5
 8005fe8:	bfc4      	itt	gt
 8005fea:	3b04      	subgt	r3, #4
 8005fec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ff0:	f1a3 0302 	sub.w	r3, r3, #2
 8005ff4:	bfcc      	ite	gt
 8005ff6:	2400      	movgt	r4, #0
 8005ff8:	2401      	movle	r4, #1
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d863      	bhi.n	80060c6 <_dtoa_r+0x296>
 8005ffe:	e8df f003 	tbb	[pc, r3]
 8006002:	372a      	.short	0x372a
 8006004:	5535      	.short	0x5535
 8006006:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800600a:	441e      	add	r6, r3
 800600c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006010:	2b20      	cmp	r3, #32
 8006012:	bfc1      	itttt	gt
 8006014:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006018:	409f      	lslgt	r7, r3
 800601a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800601e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006022:	bfd6      	itet	le
 8006024:	f1c3 0320 	rsble	r3, r3, #32
 8006028:	ea47 0003 	orrgt.w	r0, r7, r3
 800602c:	fa04 f003 	lslle.w	r0, r4, r3
 8006030:	f7fa fa70 	bl	8000514 <__aeabi_ui2d>
 8006034:	2201      	movs	r2, #1
 8006036:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800603a:	3e01      	subs	r6, #1
 800603c:	9214      	str	r2, [sp, #80]	@ 0x50
 800603e:	e777      	b.n	8005f30 <_dtoa_r+0x100>
 8006040:	2301      	movs	r3, #1
 8006042:	e7b8      	b.n	8005fb6 <_dtoa_r+0x186>
 8006044:	9012      	str	r0, [sp, #72]	@ 0x48
 8006046:	e7b7      	b.n	8005fb8 <_dtoa_r+0x188>
 8006048:	427b      	negs	r3, r7
 800604a:	930a      	str	r3, [sp, #40]	@ 0x28
 800604c:	2300      	movs	r3, #0
 800604e:	eba8 0807 	sub.w	r8, r8, r7
 8006052:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006054:	e7c4      	b.n	8005fe0 <_dtoa_r+0x1b0>
 8006056:	2300      	movs	r3, #0
 8006058:	930b      	str	r3, [sp, #44]	@ 0x2c
 800605a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800605c:	2b00      	cmp	r3, #0
 800605e:	dc35      	bgt.n	80060cc <_dtoa_r+0x29c>
 8006060:	2301      	movs	r3, #1
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	9307      	str	r3, [sp, #28]
 8006066:	461a      	mov	r2, r3
 8006068:	920e      	str	r2, [sp, #56]	@ 0x38
 800606a:	e00b      	b.n	8006084 <_dtoa_r+0x254>
 800606c:	2301      	movs	r3, #1
 800606e:	e7f3      	b.n	8006058 <_dtoa_r+0x228>
 8006070:	2300      	movs	r3, #0
 8006072:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006074:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006076:	18fb      	adds	r3, r7, r3
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	3301      	adds	r3, #1
 800607c:	2b01      	cmp	r3, #1
 800607e:	9307      	str	r3, [sp, #28]
 8006080:	bfb8      	it	lt
 8006082:	2301      	movlt	r3, #1
 8006084:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006088:	2100      	movs	r1, #0
 800608a:	2204      	movs	r2, #4
 800608c:	f102 0514 	add.w	r5, r2, #20
 8006090:	429d      	cmp	r5, r3
 8006092:	d91f      	bls.n	80060d4 <_dtoa_r+0x2a4>
 8006094:	6041      	str	r1, [r0, #4]
 8006096:	4658      	mov	r0, fp
 8006098:	f000 fd8e 	bl	8006bb8 <_Balloc>
 800609c:	4682      	mov	sl, r0
 800609e:	2800      	cmp	r0, #0
 80060a0:	d13c      	bne.n	800611c <_dtoa_r+0x2ec>
 80060a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006110 <_dtoa_r+0x2e0>)
 80060a4:	4602      	mov	r2, r0
 80060a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80060aa:	e6d8      	b.n	8005e5e <_dtoa_r+0x2e>
 80060ac:	2301      	movs	r3, #1
 80060ae:	e7e0      	b.n	8006072 <_dtoa_r+0x242>
 80060b0:	2401      	movs	r4, #1
 80060b2:	2300      	movs	r3, #0
 80060b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80060b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80060b8:	f04f 33ff 	mov.w	r3, #4294967295
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	9307      	str	r3, [sp, #28]
 80060c0:	2200      	movs	r2, #0
 80060c2:	2312      	movs	r3, #18
 80060c4:	e7d0      	b.n	8006068 <_dtoa_r+0x238>
 80060c6:	2301      	movs	r3, #1
 80060c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060ca:	e7f5      	b.n	80060b8 <_dtoa_r+0x288>
 80060cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	9307      	str	r3, [sp, #28]
 80060d2:	e7d7      	b.n	8006084 <_dtoa_r+0x254>
 80060d4:	3101      	adds	r1, #1
 80060d6:	0052      	lsls	r2, r2, #1
 80060d8:	e7d8      	b.n	800608c <_dtoa_r+0x25c>
 80060da:	bf00      	nop
 80060dc:	f3af 8000 	nop.w
 80060e0:	636f4361 	.word	0x636f4361
 80060e4:	3fd287a7 	.word	0x3fd287a7
 80060e8:	8b60c8b3 	.word	0x8b60c8b3
 80060ec:	3fc68a28 	.word	0x3fc68a28
 80060f0:	509f79fb 	.word	0x509f79fb
 80060f4:	3fd34413 	.word	0x3fd34413
 80060f8:	080083a1 	.word	0x080083a1
 80060fc:	080083b8 	.word	0x080083b8
 8006100:	7ff00000 	.word	0x7ff00000
 8006104:	08008371 	.word	0x08008371
 8006108:	3ff80000 	.word	0x3ff80000
 800610c:	080084b0 	.word	0x080084b0
 8006110:	08008410 	.word	0x08008410
 8006114:	0800839d 	.word	0x0800839d
 8006118:	08008370 	.word	0x08008370
 800611c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006120:	6018      	str	r0, [r3, #0]
 8006122:	9b07      	ldr	r3, [sp, #28]
 8006124:	2b0e      	cmp	r3, #14
 8006126:	f200 80a4 	bhi.w	8006272 <_dtoa_r+0x442>
 800612a:	2c00      	cmp	r4, #0
 800612c:	f000 80a1 	beq.w	8006272 <_dtoa_r+0x442>
 8006130:	2f00      	cmp	r7, #0
 8006132:	dd33      	ble.n	800619c <_dtoa_r+0x36c>
 8006134:	4bad      	ldr	r3, [pc, #692]	@ (80063ec <_dtoa_r+0x5bc>)
 8006136:	f007 020f 	and.w	r2, r7, #15
 800613a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800613e:	ed93 7b00 	vldr	d7, [r3]
 8006142:	05f8      	lsls	r0, r7, #23
 8006144:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006148:	ea4f 1427 	mov.w	r4, r7, asr #4
 800614c:	d516      	bpl.n	800617c <_dtoa_r+0x34c>
 800614e:	4ba8      	ldr	r3, [pc, #672]	@ (80063f0 <_dtoa_r+0x5c0>)
 8006150:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006154:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006158:	f7fa fb80 	bl	800085c <__aeabi_ddiv>
 800615c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006160:	f004 040f 	and.w	r4, r4, #15
 8006164:	2603      	movs	r6, #3
 8006166:	4da2      	ldr	r5, [pc, #648]	@ (80063f0 <_dtoa_r+0x5c0>)
 8006168:	b954      	cbnz	r4, 8006180 <_dtoa_r+0x350>
 800616a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800616e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006172:	f7fa fb73 	bl	800085c <__aeabi_ddiv>
 8006176:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800617a:	e028      	b.n	80061ce <_dtoa_r+0x39e>
 800617c:	2602      	movs	r6, #2
 800617e:	e7f2      	b.n	8006166 <_dtoa_r+0x336>
 8006180:	07e1      	lsls	r1, r4, #31
 8006182:	d508      	bpl.n	8006196 <_dtoa_r+0x366>
 8006184:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006188:	e9d5 2300 	ldrd	r2, r3, [r5]
 800618c:	f7fa fa3c 	bl	8000608 <__aeabi_dmul>
 8006190:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006194:	3601      	adds	r6, #1
 8006196:	1064      	asrs	r4, r4, #1
 8006198:	3508      	adds	r5, #8
 800619a:	e7e5      	b.n	8006168 <_dtoa_r+0x338>
 800619c:	f000 80d2 	beq.w	8006344 <_dtoa_r+0x514>
 80061a0:	427c      	negs	r4, r7
 80061a2:	4b92      	ldr	r3, [pc, #584]	@ (80063ec <_dtoa_r+0x5bc>)
 80061a4:	4d92      	ldr	r5, [pc, #584]	@ (80063f0 <_dtoa_r+0x5c0>)
 80061a6:	f004 020f 	and.w	r2, r4, #15
 80061aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061b6:	f7fa fa27 	bl	8000608 <__aeabi_dmul>
 80061ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061be:	1124      	asrs	r4, r4, #4
 80061c0:	2300      	movs	r3, #0
 80061c2:	2602      	movs	r6, #2
 80061c4:	2c00      	cmp	r4, #0
 80061c6:	f040 80b2 	bne.w	800632e <_dtoa_r+0x4fe>
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1d3      	bne.n	8006176 <_dtoa_r+0x346>
 80061ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80061d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 80b7 	beq.w	8006348 <_dtoa_r+0x518>
 80061da:	4b86      	ldr	r3, [pc, #536]	@ (80063f4 <_dtoa_r+0x5c4>)
 80061dc:	2200      	movs	r2, #0
 80061de:	4620      	mov	r0, r4
 80061e0:	4629      	mov	r1, r5
 80061e2:	f7fa fc83 	bl	8000aec <__aeabi_dcmplt>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	f000 80ae 	beq.w	8006348 <_dtoa_r+0x518>
 80061ec:	9b07      	ldr	r3, [sp, #28]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f000 80aa 	beq.w	8006348 <_dtoa_r+0x518>
 80061f4:	9b00      	ldr	r3, [sp, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	dd37      	ble.n	800626a <_dtoa_r+0x43a>
 80061fa:	1e7b      	subs	r3, r7, #1
 80061fc:	9304      	str	r3, [sp, #16]
 80061fe:	4620      	mov	r0, r4
 8006200:	4b7d      	ldr	r3, [pc, #500]	@ (80063f8 <_dtoa_r+0x5c8>)
 8006202:	2200      	movs	r2, #0
 8006204:	4629      	mov	r1, r5
 8006206:	f7fa f9ff 	bl	8000608 <__aeabi_dmul>
 800620a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800620e:	9c00      	ldr	r4, [sp, #0]
 8006210:	3601      	adds	r6, #1
 8006212:	4630      	mov	r0, r6
 8006214:	f7fa f98e 	bl	8000534 <__aeabi_i2d>
 8006218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800621c:	f7fa f9f4 	bl	8000608 <__aeabi_dmul>
 8006220:	4b76      	ldr	r3, [pc, #472]	@ (80063fc <_dtoa_r+0x5cc>)
 8006222:	2200      	movs	r2, #0
 8006224:	f7fa f83a 	bl	800029c <__adddf3>
 8006228:	4605      	mov	r5, r0
 800622a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800622e:	2c00      	cmp	r4, #0
 8006230:	f040 808d 	bne.w	800634e <_dtoa_r+0x51e>
 8006234:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006238:	4b71      	ldr	r3, [pc, #452]	@ (8006400 <_dtoa_r+0x5d0>)
 800623a:	2200      	movs	r2, #0
 800623c:	f7fa f82c 	bl	8000298 <__aeabi_dsub>
 8006240:	4602      	mov	r2, r0
 8006242:	460b      	mov	r3, r1
 8006244:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006248:	462a      	mov	r2, r5
 800624a:	4633      	mov	r3, r6
 800624c:	f7fa fc6c 	bl	8000b28 <__aeabi_dcmpgt>
 8006250:	2800      	cmp	r0, #0
 8006252:	f040 828b 	bne.w	800676c <_dtoa_r+0x93c>
 8006256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800625a:	462a      	mov	r2, r5
 800625c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006260:	f7fa fc44 	bl	8000aec <__aeabi_dcmplt>
 8006264:	2800      	cmp	r0, #0
 8006266:	f040 8128 	bne.w	80064ba <_dtoa_r+0x68a>
 800626a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800626e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006272:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006274:	2b00      	cmp	r3, #0
 8006276:	f2c0 815a 	blt.w	800652e <_dtoa_r+0x6fe>
 800627a:	2f0e      	cmp	r7, #14
 800627c:	f300 8157 	bgt.w	800652e <_dtoa_r+0x6fe>
 8006280:	4b5a      	ldr	r3, [pc, #360]	@ (80063ec <_dtoa_r+0x5bc>)
 8006282:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006286:	ed93 7b00 	vldr	d7, [r3]
 800628a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800628c:	2b00      	cmp	r3, #0
 800628e:	ed8d 7b00 	vstr	d7, [sp]
 8006292:	da03      	bge.n	800629c <_dtoa_r+0x46c>
 8006294:	9b07      	ldr	r3, [sp, #28]
 8006296:	2b00      	cmp	r3, #0
 8006298:	f340 8101 	ble.w	800649e <_dtoa_r+0x66e>
 800629c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80062a0:	4656      	mov	r6, sl
 80062a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062a6:	4620      	mov	r0, r4
 80062a8:	4629      	mov	r1, r5
 80062aa:	f7fa fad7 	bl	800085c <__aeabi_ddiv>
 80062ae:	f7fa fc5b 	bl	8000b68 <__aeabi_d2iz>
 80062b2:	4680      	mov	r8, r0
 80062b4:	f7fa f93e 	bl	8000534 <__aeabi_i2d>
 80062b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062bc:	f7fa f9a4 	bl	8000608 <__aeabi_dmul>
 80062c0:	4602      	mov	r2, r0
 80062c2:	460b      	mov	r3, r1
 80062c4:	4620      	mov	r0, r4
 80062c6:	4629      	mov	r1, r5
 80062c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80062cc:	f7f9 ffe4 	bl	8000298 <__aeabi_dsub>
 80062d0:	f806 4b01 	strb.w	r4, [r6], #1
 80062d4:	9d07      	ldr	r5, [sp, #28]
 80062d6:	eba6 040a 	sub.w	r4, r6, sl
 80062da:	42a5      	cmp	r5, r4
 80062dc:	4602      	mov	r2, r0
 80062de:	460b      	mov	r3, r1
 80062e0:	f040 8117 	bne.w	8006512 <_dtoa_r+0x6e2>
 80062e4:	f7f9 ffda 	bl	800029c <__adddf3>
 80062e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062ec:	4604      	mov	r4, r0
 80062ee:	460d      	mov	r5, r1
 80062f0:	f7fa fc1a 	bl	8000b28 <__aeabi_dcmpgt>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	f040 80f9 	bne.w	80064ec <_dtoa_r+0x6bc>
 80062fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062fe:	4620      	mov	r0, r4
 8006300:	4629      	mov	r1, r5
 8006302:	f7fa fbe9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006306:	b118      	cbz	r0, 8006310 <_dtoa_r+0x4e0>
 8006308:	f018 0f01 	tst.w	r8, #1
 800630c:	f040 80ee 	bne.w	80064ec <_dtoa_r+0x6bc>
 8006310:	4649      	mov	r1, r9
 8006312:	4658      	mov	r0, fp
 8006314:	f000 fc90 	bl	8006c38 <_Bfree>
 8006318:	2300      	movs	r3, #0
 800631a:	7033      	strb	r3, [r6, #0]
 800631c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800631e:	3701      	adds	r7, #1
 8006320:	601f      	str	r7, [r3, #0]
 8006322:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 831d 	beq.w	8006964 <_dtoa_r+0xb34>
 800632a:	601e      	str	r6, [r3, #0]
 800632c:	e31a      	b.n	8006964 <_dtoa_r+0xb34>
 800632e:	07e2      	lsls	r2, r4, #31
 8006330:	d505      	bpl.n	800633e <_dtoa_r+0x50e>
 8006332:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006336:	f7fa f967 	bl	8000608 <__aeabi_dmul>
 800633a:	3601      	adds	r6, #1
 800633c:	2301      	movs	r3, #1
 800633e:	1064      	asrs	r4, r4, #1
 8006340:	3508      	adds	r5, #8
 8006342:	e73f      	b.n	80061c4 <_dtoa_r+0x394>
 8006344:	2602      	movs	r6, #2
 8006346:	e742      	b.n	80061ce <_dtoa_r+0x39e>
 8006348:	9c07      	ldr	r4, [sp, #28]
 800634a:	9704      	str	r7, [sp, #16]
 800634c:	e761      	b.n	8006212 <_dtoa_r+0x3e2>
 800634e:	4b27      	ldr	r3, [pc, #156]	@ (80063ec <_dtoa_r+0x5bc>)
 8006350:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006352:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006356:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800635a:	4454      	add	r4, sl
 800635c:	2900      	cmp	r1, #0
 800635e:	d053      	beq.n	8006408 <_dtoa_r+0x5d8>
 8006360:	4928      	ldr	r1, [pc, #160]	@ (8006404 <_dtoa_r+0x5d4>)
 8006362:	2000      	movs	r0, #0
 8006364:	f7fa fa7a 	bl	800085c <__aeabi_ddiv>
 8006368:	4633      	mov	r3, r6
 800636a:	462a      	mov	r2, r5
 800636c:	f7f9 ff94 	bl	8000298 <__aeabi_dsub>
 8006370:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006374:	4656      	mov	r6, sl
 8006376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800637a:	f7fa fbf5 	bl	8000b68 <__aeabi_d2iz>
 800637e:	4605      	mov	r5, r0
 8006380:	f7fa f8d8 	bl	8000534 <__aeabi_i2d>
 8006384:	4602      	mov	r2, r0
 8006386:	460b      	mov	r3, r1
 8006388:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800638c:	f7f9 ff84 	bl	8000298 <__aeabi_dsub>
 8006390:	3530      	adds	r5, #48	@ 0x30
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800639a:	f806 5b01 	strb.w	r5, [r6], #1
 800639e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063a2:	f7fa fba3 	bl	8000aec <__aeabi_dcmplt>
 80063a6:	2800      	cmp	r0, #0
 80063a8:	d171      	bne.n	800648e <_dtoa_r+0x65e>
 80063aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063ae:	4911      	ldr	r1, [pc, #68]	@ (80063f4 <_dtoa_r+0x5c4>)
 80063b0:	2000      	movs	r0, #0
 80063b2:	f7f9 ff71 	bl	8000298 <__aeabi_dsub>
 80063b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063ba:	f7fa fb97 	bl	8000aec <__aeabi_dcmplt>
 80063be:	2800      	cmp	r0, #0
 80063c0:	f040 8095 	bne.w	80064ee <_dtoa_r+0x6be>
 80063c4:	42a6      	cmp	r6, r4
 80063c6:	f43f af50 	beq.w	800626a <_dtoa_r+0x43a>
 80063ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80063ce:	4b0a      	ldr	r3, [pc, #40]	@ (80063f8 <_dtoa_r+0x5c8>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	f7fa f919 	bl	8000608 <__aeabi_dmul>
 80063d6:	4b08      	ldr	r3, [pc, #32]	@ (80063f8 <_dtoa_r+0x5c8>)
 80063d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063dc:	2200      	movs	r2, #0
 80063de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063e2:	f7fa f911 	bl	8000608 <__aeabi_dmul>
 80063e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063ea:	e7c4      	b.n	8006376 <_dtoa_r+0x546>
 80063ec:	080084b0 	.word	0x080084b0
 80063f0:	08008488 	.word	0x08008488
 80063f4:	3ff00000 	.word	0x3ff00000
 80063f8:	40240000 	.word	0x40240000
 80063fc:	401c0000 	.word	0x401c0000
 8006400:	40140000 	.word	0x40140000
 8006404:	3fe00000 	.word	0x3fe00000
 8006408:	4631      	mov	r1, r6
 800640a:	4628      	mov	r0, r5
 800640c:	f7fa f8fc 	bl	8000608 <__aeabi_dmul>
 8006410:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006414:	9415      	str	r4, [sp, #84]	@ 0x54
 8006416:	4656      	mov	r6, sl
 8006418:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800641c:	f7fa fba4 	bl	8000b68 <__aeabi_d2iz>
 8006420:	4605      	mov	r5, r0
 8006422:	f7fa f887 	bl	8000534 <__aeabi_i2d>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800642e:	f7f9 ff33 	bl	8000298 <__aeabi_dsub>
 8006432:	3530      	adds	r5, #48	@ 0x30
 8006434:	f806 5b01 	strb.w	r5, [r6], #1
 8006438:	4602      	mov	r2, r0
 800643a:	460b      	mov	r3, r1
 800643c:	42a6      	cmp	r6, r4
 800643e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006442:	f04f 0200 	mov.w	r2, #0
 8006446:	d124      	bne.n	8006492 <_dtoa_r+0x662>
 8006448:	4bac      	ldr	r3, [pc, #688]	@ (80066fc <_dtoa_r+0x8cc>)
 800644a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800644e:	f7f9 ff25 	bl	800029c <__adddf3>
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800645a:	f7fa fb65 	bl	8000b28 <__aeabi_dcmpgt>
 800645e:	2800      	cmp	r0, #0
 8006460:	d145      	bne.n	80064ee <_dtoa_r+0x6be>
 8006462:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006466:	49a5      	ldr	r1, [pc, #660]	@ (80066fc <_dtoa_r+0x8cc>)
 8006468:	2000      	movs	r0, #0
 800646a:	f7f9 ff15 	bl	8000298 <__aeabi_dsub>
 800646e:	4602      	mov	r2, r0
 8006470:	460b      	mov	r3, r1
 8006472:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006476:	f7fa fb39 	bl	8000aec <__aeabi_dcmplt>
 800647a:	2800      	cmp	r0, #0
 800647c:	f43f aef5 	beq.w	800626a <_dtoa_r+0x43a>
 8006480:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006482:	1e73      	subs	r3, r6, #1
 8006484:	9315      	str	r3, [sp, #84]	@ 0x54
 8006486:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800648a:	2b30      	cmp	r3, #48	@ 0x30
 800648c:	d0f8      	beq.n	8006480 <_dtoa_r+0x650>
 800648e:	9f04      	ldr	r7, [sp, #16]
 8006490:	e73e      	b.n	8006310 <_dtoa_r+0x4e0>
 8006492:	4b9b      	ldr	r3, [pc, #620]	@ (8006700 <_dtoa_r+0x8d0>)
 8006494:	f7fa f8b8 	bl	8000608 <__aeabi_dmul>
 8006498:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800649c:	e7bc      	b.n	8006418 <_dtoa_r+0x5e8>
 800649e:	d10c      	bne.n	80064ba <_dtoa_r+0x68a>
 80064a0:	4b98      	ldr	r3, [pc, #608]	@ (8006704 <_dtoa_r+0x8d4>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064a8:	f7fa f8ae 	bl	8000608 <__aeabi_dmul>
 80064ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064b0:	f7fa fb30 	bl	8000b14 <__aeabi_dcmpge>
 80064b4:	2800      	cmp	r0, #0
 80064b6:	f000 8157 	beq.w	8006768 <_dtoa_r+0x938>
 80064ba:	2400      	movs	r4, #0
 80064bc:	4625      	mov	r5, r4
 80064be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064c0:	43db      	mvns	r3, r3
 80064c2:	9304      	str	r3, [sp, #16]
 80064c4:	4656      	mov	r6, sl
 80064c6:	2700      	movs	r7, #0
 80064c8:	4621      	mov	r1, r4
 80064ca:	4658      	mov	r0, fp
 80064cc:	f000 fbb4 	bl	8006c38 <_Bfree>
 80064d0:	2d00      	cmp	r5, #0
 80064d2:	d0dc      	beq.n	800648e <_dtoa_r+0x65e>
 80064d4:	b12f      	cbz	r7, 80064e2 <_dtoa_r+0x6b2>
 80064d6:	42af      	cmp	r7, r5
 80064d8:	d003      	beq.n	80064e2 <_dtoa_r+0x6b2>
 80064da:	4639      	mov	r1, r7
 80064dc:	4658      	mov	r0, fp
 80064de:	f000 fbab 	bl	8006c38 <_Bfree>
 80064e2:	4629      	mov	r1, r5
 80064e4:	4658      	mov	r0, fp
 80064e6:	f000 fba7 	bl	8006c38 <_Bfree>
 80064ea:	e7d0      	b.n	800648e <_dtoa_r+0x65e>
 80064ec:	9704      	str	r7, [sp, #16]
 80064ee:	4633      	mov	r3, r6
 80064f0:	461e      	mov	r6, r3
 80064f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80064f6:	2a39      	cmp	r2, #57	@ 0x39
 80064f8:	d107      	bne.n	800650a <_dtoa_r+0x6da>
 80064fa:	459a      	cmp	sl, r3
 80064fc:	d1f8      	bne.n	80064f0 <_dtoa_r+0x6c0>
 80064fe:	9a04      	ldr	r2, [sp, #16]
 8006500:	3201      	adds	r2, #1
 8006502:	9204      	str	r2, [sp, #16]
 8006504:	2230      	movs	r2, #48	@ 0x30
 8006506:	f88a 2000 	strb.w	r2, [sl]
 800650a:	781a      	ldrb	r2, [r3, #0]
 800650c:	3201      	adds	r2, #1
 800650e:	701a      	strb	r2, [r3, #0]
 8006510:	e7bd      	b.n	800648e <_dtoa_r+0x65e>
 8006512:	4b7b      	ldr	r3, [pc, #492]	@ (8006700 <_dtoa_r+0x8d0>)
 8006514:	2200      	movs	r2, #0
 8006516:	f7fa f877 	bl	8000608 <__aeabi_dmul>
 800651a:	2200      	movs	r2, #0
 800651c:	2300      	movs	r3, #0
 800651e:	4604      	mov	r4, r0
 8006520:	460d      	mov	r5, r1
 8006522:	f7fa fad9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006526:	2800      	cmp	r0, #0
 8006528:	f43f aebb 	beq.w	80062a2 <_dtoa_r+0x472>
 800652c:	e6f0      	b.n	8006310 <_dtoa_r+0x4e0>
 800652e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006530:	2a00      	cmp	r2, #0
 8006532:	f000 80db 	beq.w	80066ec <_dtoa_r+0x8bc>
 8006536:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006538:	2a01      	cmp	r2, #1
 800653a:	f300 80bf 	bgt.w	80066bc <_dtoa_r+0x88c>
 800653e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006540:	2a00      	cmp	r2, #0
 8006542:	f000 80b7 	beq.w	80066b4 <_dtoa_r+0x884>
 8006546:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800654a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800654c:	4646      	mov	r6, r8
 800654e:	9a08      	ldr	r2, [sp, #32]
 8006550:	2101      	movs	r1, #1
 8006552:	441a      	add	r2, r3
 8006554:	4658      	mov	r0, fp
 8006556:	4498      	add	r8, r3
 8006558:	9208      	str	r2, [sp, #32]
 800655a:	f000 fc21 	bl	8006da0 <__i2b>
 800655e:	4605      	mov	r5, r0
 8006560:	b15e      	cbz	r6, 800657a <_dtoa_r+0x74a>
 8006562:	9b08      	ldr	r3, [sp, #32]
 8006564:	2b00      	cmp	r3, #0
 8006566:	dd08      	ble.n	800657a <_dtoa_r+0x74a>
 8006568:	42b3      	cmp	r3, r6
 800656a:	9a08      	ldr	r2, [sp, #32]
 800656c:	bfa8      	it	ge
 800656e:	4633      	movge	r3, r6
 8006570:	eba8 0803 	sub.w	r8, r8, r3
 8006574:	1af6      	subs	r6, r6, r3
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	9308      	str	r3, [sp, #32]
 800657a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800657c:	b1f3      	cbz	r3, 80065bc <_dtoa_r+0x78c>
 800657e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 80b7 	beq.w	80066f4 <_dtoa_r+0x8c4>
 8006586:	b18c      	cbz	r4, 80065ac <_dtoa_r+0x77c>
 8006588:	4629      	mov	r1, r5
 800658a:	4622      	mov	r2, r4
 800658c:	4658      	mov	r0, fp
 800658e:	f000 fcc7 	bl	8006f20 <__pow5mult>
 8006592:	464a      	mov	r2, r9
 8006594:	4601      	mov	r1, r0
 8006596:	4605      	mov	r5, r0
 8006598:	4658      	mov	r0, fp
 800659a:	f000 fc17 	bl	8006dcc <__multiply>
 800659e:	4649      	mov	r1, r9
 80065a0:	9004      	str	r0, [sp, #16]
 80065a2:	4658      	mov	r0, fp
 80065a4:	f000 fb48 	bl	8006c38 <_Bfree>
 80065a8:	9b04      	ldr	r3, [sp, #16]
 80065aa:	4699      	mov	r9, r3
 80065ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065ae:	1b1a      	subs	r2, r3, r4
 80065b0:	d004      	beq.n	80065bc <_dtoa_r+0x78c>
 80065b2:	4649      	mov	r1, r9
 80065b4:	4658      	mov	r0, fp
 80065b6:	f000 fcb3 	bl	8006f20 <__pow5mult>
 80065ba:	4681      	mov	r9, r0
 80065bc:	2101      	movs	r1, #1
 80065be:	4658      	mov	r0, fp
 80065c0:	f000 fbee 	bl	8006da0 <__i2b>
 80065c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065c6:	4604      	mov	r4, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 81cf 	beq.w	800696c <_dtoa_r+0xb3c>
 80065ce:	461a      	mov	r2, r3
 80065d0:	4601      	mov	r1, r0
 80065d2:	4658      	mov	r0, fp
 80065d4:	f000 fca4 	bl	8006f20 <__pow5mult>
 80065d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065da:	2b01      	cmp	r3, #1
 80065dc:	4604      	mov	r4, r0
 80065de:	f300 8095 	bgt.w	800670c <_dtoa_r+0x8dc>
 80065e2:	9b02      	ldr	r3, [sp, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f040 8087 	bne.w	80066f8 <_dtoa_r+0x8c8>
 80065ea:	9b03      	ldr	r3, [sp, #12]
 80065ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f040 8089 	bne.w	8006708 <_dtoa_r+0x8d8>
 80065f6:	9b03      	ldr	r3, [sp, #12]
 80065f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80065fc:	0d1b      	lsrs	r3, r3, #20
 80065fe:	051b      	lsls	r3, r3, #20
 8006600:	b12b      	cbz	r3, 800660e <_dtoa_r+0x7de>
 8006602:	9b08      	ldr	r3, [sp, #32]
 8006604:	3301      	adds	r3, #1
 8006606:	9308      	str	r3, [sp, #32]
 8006608:	f108 0801 	add.w	r8, r8, #1
 800660c:	2301      	movs	r3, #1
 800660e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006610:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006612:	2b00      	cmp	r3, #0
 8006614:	f000 81b0 	beq.w	8006978 <_dtoa_r+0xb48>
 8006618:	6923      	ldr	r3, [r4, #16]
 800661a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800661e:	6918      	ldr	r0, [r3, #16]
 8006620:	f000 fb72 	bl	8006d08 <__hi0bits>
 8006624:	f1c0 0020 	rsb	r0, r0, #32
 8006628:	9b08      	ldr	r3, [sp, #32]
 800662a:	4418      	add	r0, r3
 800662c:	f010 001f 	ands.w	r0, r0, #31
 8006630:	d077      	beq.n	8006722 <_dtoa_r+0x8f2>
 8006632:	f1c0 0320 	rsb	r3, r0, #32
 8006636:	2b04      	cmp	r3, #4
 8006638:	dd6b      	ble.n	8006712 <_dtoa_r+0x8e2>
 800663a:	9b08      	ldr	r3, [sp, #32]
 800663c:	f1c0 001c 	rsb	r0, r0, #28
 8006640:	4403      	add	r3, r0
 8006642:	4480      	add	r8, r0
 8006644:	4406      	add	r6, r0
 8006646:	9308      	str	r3, [sp, #32]
 8006648:	f1b8 0f00 	cmp.w	r8, #0
 800664c:	dd05      	ble.n	800665a <_dtoa_r+0x82a>
 800664e:	4649      	mov	r1, r9
 8006650:	4642      	mov	r2, r8
 8006652:	4658      	mov	r0, fp
 8006654:	f000 fcbe 	bl	8006fd4 <__lshift>
 8006658:	4681      	mov	r9, r0
 800665a:	9b08      	ldr	r3, [sp, #32]
 800665c:	2b00      	cmp	r3, #0
 800665e:	dd05      	ble.n	800666c <_dtoa_r+0x83c>
 8006660:	4621      	mov	r1, r4
 8006662:	461a      	mov	r2, r3
 8006664:	4658      	mov	r0, fp
 8006666:	f000 fcb5 	bl	8006fd4 <__lshift>
 800666a:	4604      	mov	r4, r0
 800666c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800666e:	2b00      	cmp	r3, #0
 8006670:	d059      	beq.n	8006726 <_dtoa_r+0x8f6>
 8006672:	4621      	mov	r1, r4
 8006674:	4648      	mov	r0, r9
 8006676:	f000 fd19 	bl	80070ac <__mcmp>
 800667a:	2800      	cmp	r0, #0
 800667c:	da53      	bge.n	8006726 <_dtoa_r+0x8f6>
 800667e:	1e7b      	subs	r3, r7, #1
 8006680:	9304      	str	r3, [sp, #16]
 8006682:	4649      	mov	r1, r9
 8006684:	2300      	movs	r3, #0
 8006686:	220a      	movs	r2, #10
 8006688:	4658      	mov	r0, fp
 800668a:	f000 faf7 	bl	8006c7c <__multadd>
 800668e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006690:	4681      	mov	r9, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 8172 	beq.w	800697c <_dtoa_r+0xb4c>
 8006698:	2300      	movs	r3, #0
 800669a:	4629      	mov	r1, r5
 800669c:	220a      	movs	r2, #10
 800669e:	4658      	mov	r0, fp
 80066a0:	f000 faec 	bl	8006c7c <__multadd>
 80066a4:	9b00      	ldr	r3, [sp, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	4605      	mov	r5, r0
 80066aa:	dc67      	bgt.n	800677c <_dtoa_r+0x94c>
 80066ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066ae:	2b02      	cmp	r3, #2
 80066b0:	dc41      	bgt.n	8006736 <_dtoa_r+0x906>
 80066b2:	e063      	b.n	800677c <_dtoa_r+0x94c>
 80066b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80066b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80066ba:	e746      	b.n	800654a <_dtoa_r+0x71a>
 80066bc:	9b07      	ldr	r3, [sp, #28]
 80066be:	1e5c      	subs	r4, r3, #1
 80066c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066c2:	42a3      	cmp	r3, r4
 80066c4:	bfbf      	itttt	lt
 80066c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80066c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80066ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80066cc:	1ae3      	sublt	r3, r4, r3
 80066ce:	bfb4      	ite	lt
 80066d0:	18d2      	addlt	r2, r2, r3
 80066d2:	1b1c      	subge	r4, r3, r4
 80066d4:	9b07      	ldr	r3, [sp, #28]
 80066d6:	bfbc      	itt	lt
 80066d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80066da:	2400      	movlt	r4, #0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	bfb5      	itete	lt
 80066e0:	eba8 0603 	sublt.w	r6, r8, r3
 80066e4:	9b07      	ldrge	r3, [sp, #28]
 80066e6:	2300      	movlt	r3, #0
 80066e8:	4646      	movge	r6, r8
 80066ea:	e730      	b.n	800654e <_dtoa_r+0x71e>
 80066ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80066ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80066f0:	4646      	mov	r6, r8
 80066f2:	e735      	b.n	8006560 <_dtoa_r+0x730>
 80066f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066f6:	e75c      	b.n	80065b2 <_dtoa_r+0x782>
 80066f8:	2300      	movs	r3, #0
 80066fa:	e788      	b.n	800660e <_dtoa_r+0x7de>
 80066fc:	3fe00000 	.word	0x3fe00000
 8006700:	40240000 	.word	0x40240000
 8006704:	40140000 	.word	0x40140000
 8006708:	9b02      	ldr	r3, [sp, #8]
 800670a:	e780      	b.n	800660e <_dtoa_r+0x7de>
 800670c:	2300      	movs	r3, #0
 800670e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006710:	e782      	b.n	8006618 <_dtoa_r+0x7e8>
 8006712:	d099      	beq.n	8006648 <_dtoa_r+0x818>
 8006714:	9a08      	ldr	r2, [sp, #32]
 8006716:	331c      	adds	r3, #28
 8006718:	441a      	add	r2, r3
 800671a:	4498      	add	r8, r3
 800671c:	441e      	add	r6, r3
 800671e:	9208      	str	r2, [sp, #32]
 8006720:	e792      	b.n	8006648 <_dtoa_r+0x818>
 8006722:	4603      	mov	r3, r0
 8006724:	e7f6      	b.n	8006714 <_dtoa_r+0x8e4>
 8006726:	9b07      	ldr	r3, [sp, #28]
 8006728:	9704      	str	r7, [sp, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	dc20      	bgt.n	8006770 <_dtoa_r+0x940>
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006732:	2b02      	cmp	r3, #2
 8006734:	dd1e      	ble.n	8006774 <_dtoa_r+0x944>
 8006736:	9b00      	ldr	r3, [sp, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	f47f aec0 	bne.w	80064be <_dtoa_r+0x68e>
 800673e:	4621      	mov	r1, r4
 8006740:	2205      	movs	r2, #5
 8006742:	4658      	mov	r0, fp
 8006744:	f000 fa9a 	bl	8006c7c <__multadd>
 8006748:	4601      	mov	r1, r0
 800674a:	4604      	mov	r4, r0
 800674c:	4648      	mov	r0, r9
 800674e:	f000 fcad 	bl	80070ac <__mcmp>
 8006752:	2800      	cmp	r0, #0
 8006754:	f77f aeb3 	ble.w	80064be <_dtoa_r+0x68e>
 8006758:	4656      	mov	r6, sl
 800675a:	2331      	movs	r3, #49	@ 0x31
 800675c:	f806 3b01 	strb.w	r3, [r6], #1
 8006760:	9b04      	ldr	r3, [sp, #16]
 8006762:	3301      	adds	r3, #1
 8006764:	9304      	str	r3, [sp, #16]
 8006766:	e6ae      	b.n	80064c6 <_dtoa_r+0x696>
 8006768:	9c07      	ldr	r4, [sp, #28]
 800676a:	9704      	str	r7, [sp, #16]
 800676c:	4625      	mov	r5, r4
 800676e:	e7f3      	b.n	8006758 <_dtoa_r+0x928>
 8006770:	9b07      	ldr	r3, [sp, #28]
 8006772:	9300      	str	r3, [sp, #0]
 8006774:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 8104 	beq.w	8006984 <_dtoa_r+0xb54>
 800677c:	2e00      	cmp	r6, #0
 800677e:	dd05      	ble.n	800678c <_dtoa_r+0x95c>
 8006780:	4629      	mov	r1, r5
 8006782:	4632      	mov	r2, r6
 8006784:	4658      	mov	r0, fp
 8006786:	f000 fc25 	bl	8006fd4 <__lshift>
 800678a:	4605      	mov	r5, r0
 800678c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800678e:	2b00      	cmp	r3, #0
 8006790:	d05a      	beq.n	8006848 <_dtoa_r+0xa18>
 8006792:	6869      	ldr	r1, [r5, #4]
 8006794:	4658      	mov	r0, fp
 8006796:	f000 fa0f 	bl	8006bb8 <_Balloc>
 800679a:	4606      	mov	r6, r0
 800679c:	b928      	cbnz	r0, 80067aa <_dtoa_r+0x97a>
 800679e:	4b84      	ldr	r3, [pc, #528]	@ (80069b0 <_dtoa_r+0xb80>)
 80067a0:	4602      	mov	r2, r0
 80067a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80067a6:	f7ff bb5a 	b.w	8005e5e <_dtoa_r+0x2e>
 80067aa:	692a      	ldr	r2, [r5, #16]
 80067ac:	3202      	adds	r2, #2
 80067ae:	0092      	lsls	r2, r2, #2
 80067b0:	f105 010c 	add.w	r1, r5, #12
 80067b4:	300c      	adds	r0, #12
 80067b6:	f000 ffaf 	bl	8007718 <memcpy>
 80067ba:	2201      	movs	r2, #1
 80067bc:	4631      	mov	r1, r6
 80067be:	4658      	mov	r0, fp
 80067c0:	f000 fc08 	bl	8006fd4 <__lshift>
 80067c4:	f10a 0301 	add.w	r3, sl, #1
 80067c8:	9307      	str	r3, [sp, #28]
 80067ca:	9b00      	ldr	r3, [sp, #0]
 80067cc:	4453      	add	r3, sl
 80067ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067d0:	9b02      	ldr	r3, [sp, #8]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	462f      	mov	r7, r5
 80067d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80067da:	4605      	mov	r5, r0
 80067dc:	9b07      	ldr	r3, [sp, #28]
 80067de:	4621      	mov	r1, r4
 80067e0:	3b01      	subs	r3, #1
 80067e2:	4648      	mov	r0, r9
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	f7ff fa98 	bl	8005d1a <quorem>
 80067ea:	4639      	mov	r1, r7
 80067ec:	9002      	str	r0, [sp, #8]
 80067ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80067f2:	4648      	mov	r0, r9
 80067f4:	f000 fc5a 	bl	80070ac <__mcmp>
 80067f8:	462a      	mov	r2, r5
 80067fa:	9008      	str	r0, [sp, #32]
 80067fc:	4621      	mov	r1, r4
 80067fe:	4658      	mov	r0, fp
 8006800:	f000 fc70 	bl	80070e4 <__mdiff>
 8006804:	68c2      	ldr	r2, [r0, #12]
 8006806:	4606      	mov	r6, r0
 8006808:	bb02      	cbnz	r2, 800684c <_dtoa_r+0xa1c>
 800680a:	4601      	mov	r1, r0
 800680c:	4648      	mov	r0, r9
 800680e:	f000 fc4d 	bl	80070ac <__mcmp>
 8006812:	4602      	mov	r2, r0
 8006814:	4631      	mov	r1, r6
 8006816:	4658      	mov	r0, fp
 8006818:	920e      	str	r2, [sp, #56]	@ 0x38
 800681a:	f000 fa0d 	bl	8006c38 <_Bfree>
 800681e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006820:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006822:	9e07      	ldr	r6, [sp, #28]
 8006824:	ea43 0102 	orr.w	r1, r3, r2
 8006828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800682a:	4319      	orrs	r1, r3
 800682c:	d110      	bne.n	8006850 <_dtoa_r+0xa20>
 800682e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006832:	d029      	beq.n	8006888 <_dtoa_r+0xa58>
 8006834:	9b08      	ldr	r3, [sp, #32]
 8006836:	2b00      	cmp	r3, #0
 8006838:	dd02      	ble.n	8006840 <_dtoa_r+0xa10>
 800683a:	9b02      	ldr	r3, [sp, #8]
 800683c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006840:	9b00      	ldr	r3, [sp, #0]
 8006842:	f883 8000 	strb.w	r8, [r3]
 8006846:	e63f      	b.n	80064c8 <_dtoa_r+0x698>
 8006848:	4628      	mov	r0, r5
 800684a:	e7bb      	b.n	80067c4 <_dtoa_r+0x994>
 800684c:	2201      	movs	r2, #1
 800684e:	e7e1      	b.n	8006814 <_dtoa_r+0x9e4>
 8006850:	9b08      	ldr	r3, [sp, #32]
 8006852:	2b00      	cmp	r3, #0
 8006854:	db04      	blt.n	8006860 <_dtoa_r+0xa30>
 8006856:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006858:	430b      	orrs	r3, r1
 800685a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800685c:	430b      	orrs	r3, r1
 800685e:	d120      	bne.n	80068a2 <_dtoa_r+0xa72>
 8006860:	2a00      	cmp	r2, #0
 8006862:	dded      	ble.n	8006840 <_dtoa_r+0xa10>
 8006864:	4649      	mov	r1, r9
 8006866:	2201      	movs	r2, #1
 8006868:	4658      	mov	r0, fp
 800686a:	f000 fbb3 	bl	8006fd4 <__lshift>
 800686e:	4621      	mov	r1, r4
 8006870:	4681      	mov	r9, r0
 8006872:	f000 fc1b 	bl	80070ac <__mcmp>
 8006876:	2800      	cmp	r0, #0
 8006878:	dc03      	bgt.n	8006882 <_dtoa_r+0xa52>
 800687a:	d1e1      	bne.n	8006840 <_dtoa_r+0xa10>
 800687c:	f018 0f01 	tst.w	r8, #1
 8006880:	d0de      	beq.n	8006840 <_dtoa_r+0xa10>
 8006882:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006886:	d1d8      	bne.n	800683a <_dtoa_r+0xa0a>
 8006888:	9a00      	ldr	r2, [sp, #0]
 800688a:	2339      	movs	r3, #57	@ 0x39
 800688c:	7013      	strb	r3, [r2, #0]
 800688e:	4633      	mov	r3, r6
 8006890:	461e      	mov	r6, r3
 8006892:	3b01      	subs	r3, #1
 8006894:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006898:	2a39      	cmp	r2, #57	@ 0x39
 800689a:	d052      	beq.n	8006942 <_dtoa_r+0xb12>
 800689c:	3201      	adds	r2, #1
 800689e:	701a      	strb	r2, [r3, #0]
 80068a0:	e612      	b.n	80064c8 <_dtoa_r+0x698>
 80068a2:	2a00      	cmp	r2, #0
 80068a4:	dd07      	ble.n	80068b6 <_dtoa_r+0xa86>
 80068a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80068aa:	d0ed      	beq.n	8006888 <_dtoa_r+0xa58>
 80068ac:	9a00      	ldr	r2, [sp, #0]
 80068ae:	f108 0301 	add.w	r3, r8, #1
 80068b2:	7013      	strb	r3, [r2, #0]
 80068b4:	e608      	b.n	80064c8 <_dtoa_r+0x698>
 80068b6:	9b07      	ldr	r3, [sp, #28]
 80068b8:	9a07      	ldr	r2, [sp, #28]
 80068ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80068be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d028      	beq.n	8006916 <_dtoa_r+0xae6>
 80068c4:	4649      	mov	r1, r9
 80068c6:	2300      	movs	r3, #0
 80068c8:	220a      	movs	r2, #10
 80068ca:	4658      	mov	r0, fp
 80068cc:	f000 f9d6 	bl	8006c7c <__multadd>
 80068d0:	42af      	cmp	r7, r5
 80068d2:	4681      	mov	r9, r0
 80068d4:	f04f 0300 	mov.w	r3, #0
 80068d8:	f04f 020a 	mov.w	r2, #10
 80068dc:	4639      	mov	r1, r7
 80068de:	4658      	mov	r0, fp
 80068e0:	d107      	bne.n	80068f2 <_dtoa_r+0xac2>
 80068e2:	f000 f9cb 	bl	8006c7c <__multadd>
 80068e6:	4607      	mov	r7, r0
 80068e8:	4605      	mov	r5, r0
 80068ea:	9b07      	ldr	r3, [sp, #28]
 80068ec:	3301      	adds	r3, #1
 80068ee:	9307      	str	r3, [sp, #28]
 80068f0:	e774      	b.n	80067dc <_dtoa_r+0x9ac>
 80068f2:	f000 f9c3 	bl	8006c7c <__multadd>
 80068f6:	4629      	mov	r1, r5
 80068f8:	4607      	mov	r7, r0
 80068fa:	2300      	movs	r3, #0
 80068fc:	220a      	movs	r2, #10
 80068fe:	4658      	mov	r0, fp
 8006900:	f000 f9bc 	bl	8006c7c <__multadd>
 8006904:	4605      	mov	r5, r0
 8006906:	e7f0      	b.n	80068ea <_dtoa_r+0xaba>
 8006908:	9b00      	ldr	r3, [sp, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	bfcc      	ite	gt
 800690e:	461e      	movgt	r6, r3
 8006910:	2601      	movle	r6, #1
 8006912:	4456      	add	r6, sl
 8006914:	2700      	movs	r7, #0
 8006916:	4649      	mov	r1, r9
 8006918:	2201      	movs	r2, #1
 800691a:	4658      	mov	r0, fp
 800691c:	f000 fb5a 	bl	8006fd4 <__lshift>
 8006920:	4621      	mov	r1, r4
 8006922:	4681      	mov	r9, r0
 8006924:	f000 fbc2 	bl	80070ac <__mcmp>
 8006928:	2800      	cmp	r0, #0
 800692a:	dcb0      	bgt.n	800688e <_dtoa_r+0xa5e>
 800692c:	d102      	bne.n	8006934 <_dtoa_r+0xb04>
 800692e:	f018 0f01 	tst.w	r8, #1
 8006932:	d1ac      	bne.n	800688e <_dtoa_r+0xa5e>
 8006934:	4633      	mov	r3, r6
 8006936:	461e      	mov	r6, r3
 8006938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800693c:	2a30      	cmp	r2, #48	@ 0x30
 800693e:	d0fa      	beq.n	8006936 <_dtoa_r+0xb06>
 8006940:	e5c2      	b.n	80064c8 <_dtoa_r+0x698>
 8006942:	459a      	cmp	sl, r3
 8006944:	d1a4      	bne.n	8006890 <_dtoa_r+0xa60>
 8006946:	9b04      	ldr	r3, [sp, #16]
 8006948:	3301      	adds	r3, #1
 800694a:	9304      	str	r3, [sp, #16]
 800694c:	2331      	movs	r3, #49	@ 0x31
 800694e:	f88a 3000 	strb.w	r3, [sl]
 8006952:	e5b9      	b.n	80064c8 <_dtoa_r+0x698>
 8006954:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006956:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80069b4 <_dtoa_r+0xb84>
 800695a:	b11b      	cbz	r3, 8006964 <_dtoa_r+0xb34>
 800695c:	f10a 0308 	add.w	r3, sl, #8
 8006960:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006962:	6013      	str	r3, [r2, #0]
 8006964:	4650      	mov	r0, sl
 8006966:	b019      	add	sp, #100	@ 0x64
 8006968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800696c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800696e:	2b01      	cmp	r3, #1
 8006970:	f77f ae37 	ble.w	80065e2 <_dtoa_r+0x7b2>
 8006974:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006976:	930a      	str	r3, [sp, #40]	@ 0x28
 8006978:	2001      	movs	r0, #1
 800697a:	e655      	b.n	8006628 <_dtoa_r+0x7f8>
 800697c:	9b00      	ldr	r3, [sp, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	f77f aed6 	ble.w	8006730 <_dtoa_r+0x900>
 8006984:	4656      	mov	r6, sl
 8006986:	4621      	mov	r1, r4
 8006988:	4648      	mov	r0, r9
 800698a:	f7ff f9c6 	bl	8005d1a <quorem>
 800698e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006992:	f806 8b01 	strb.w	r8, [r6], #1
 8006996:	9b00      	ldr	r3, [sp, #0]
 8006998:	eba6 020a 	sub.w	r2, r6, sl
 800699c:	4293      	cmp	r3, r2
 800699e:	ddb3      	ble.n	8006908 <_dtoa_r+0xad8>
 80069a0:	4649      	mov	r1, r9
 80069a2:	2300      	movs	r3, #0
 80069a4:	220a      	movs	r2, #10
 80069a6:	4658      	mov	r0, fp
 80069a8:	f000 f968 	bl	8006c7c <__multadd>
 80069ac:	4681      	mov	r9, r0
 80069ae:	e7ea      	b.n	8006986 <_dtoa_r+0xb56>
 80069b0:	08008410 	.word	0x08008410
 80069b4:	08008394 	.word	0x08008394

080069b8 <_free_r>:
 80069b8:	b538      	push	{r3, r4, r5, lr}
 80069ba:	4605      	mov	r5, r0
 80069bc:	2900      	cmp	r1, #0
 80069be:	d041      	beq.n	8006a44 <_free_r+0x8c>
 80069c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069c4:	1f0c      	subs	r4, r1, #4
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	bfb8      	it	lt
 80069ca:	18e4      	addlt	r4, r4, r3
 80069cc:	f000 f8e8 	bl	8006ba0 <__malloc_lock>
 80069d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a48 <_free_r+0x90>)
 80069d2:	6813      	ldr	r3, [r2, #0]
 80069d4:	b933      	cbnz	r3, 80069e4 <_free_r+0x2c>
 80069d6:	6063      	str	r3, [r4, #4]
 80069d8:	6014      	str	r4, [r2, #0]
 80069da:	4628      	mov	r0, r5
 80069dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069e0:	f000 b8e4 	b.w	8006bac <__malloc_unlock>
 80069e4:	42a3      	cmp	r3, r4
 80069e6:	d908      	bls.n	80069fa <_free_r+0x42>
 80069e8:	6820      	ldr	r0, [r4, #0]
 80069ea:	1821      	adds	r1, r4, r0
 80069ec:	428b      	cmp	r3, r1
 80069ee:	bf01      	itttt	eq
 80069f0:	6819      	ldreq	r1, [r3, #0]
 80069f2:	685b      	ldreq	r3, [r3, #4]
 80069f4:	1809      	addeq	r1, r1, r0
 80069f6:	6021      	streq	r1, [r4, #0]
 80069f8:	e7ed      	b.n	80069d6 <_free_r+0x1e>
 80069fa:	461a      	mov	r2, r3
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	b10b      	cbz	r3, 8006a04 <_free_r+0x4c>
 8006a00:	42a3      	cmp	r3, r4
 8006a02:	d9fa      	bls.n	80069fa <_free_r+0x42>
 8006a04:	6811      	ldr	r1, [r2, #0]
 8006a06:	1850      	adds	r0, r2, r1
 8006a08:	42a0      	cmp	r0, r4
 8006a0a:	d10b      	bne.n	8006a24 <_free_r+0x6c>
 8006a0c:	6820      	ldr	r0, [r4, #0]
 8006a0e:	4401      	add	r1, r0
 8006a10:	1850      	adds	r0, r2, r1
 8006a12:	4283      	cmp	r3, r0
 8006a14:	6011      	str	r1, [r2, #0]
 8006a16:	d1e0      	bne.n	80069da <_free_r+0x22>
 8006a18:	6818      	ldr	r0, [r3, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	6053      	str	r3, [r2, #4]
 8006a1e:	4408      	add	r0, r1
 8006a20:	6010      	str	r0, [r2, #0]
 8006a22:	e7da      	b.n	80069da <_free_r+0x22>
 8006a24:	d902      	bls.n	8006a2c <_free_r+0x74>
 8006a26:	230c      	movs	r3, #12
 8006a28:	602b      	str	r3, [r5, #0]
 8006a2a:	e7d6      	b.n	80069da <_free_r+0x22>
 8006a2c:	6820      	ldr	r0, [r4, #0]
 8006a2e:	1821      	adds	r1, r4, r0
 8006a30:	428b      	cmp	r3, r1
 8006a32:	bf04      	itt	eq
 8006a34:	6819      	ldreq	r1, [r3, #0]
 8006a36:	685b      	ldreq	r3, [r3, #4]
 8006a38:	6063      	str	r3, [r4, #4]
 8006a3a:	bf04      	itt	eq
 8006a3c:	1809      	addeq	r1, r1, r0
 8006a3e:	6021      	streq	r1, [r4, #0]
 8006a40:	6054      	str	r4, [r2, #4]
 8006a42:	e7ca      	b.n	80069da <_free_r+0x22>
 8006a44:	bd38      	pop	{r3, r4, r5, pc}
 8006a46:	bf00      	nop
 8006a48:	2000048c 	.word	0x2000048c

08006a4c <malloc>:
 8006a4c:	4b02      	ldr	r3, [pc, #8]	@ (8006a58 <malloc+0xc>)
 8006a4e:	4601      	mov	r1, r0
 8006a50:	6818      	ldr	r0, [r3, #0]
 8006a52:	f000 b825 	b.w	8006aa0 <_malloc_r>
 8006a56:	bf00      	nop
 8006a58:	20000018 	.word	0x20000018

08006a5c <sbrk_aligned>:
 8006a5c:	b570      	push	{r4, r5, r6, lr}
 8006a5e:	4e0f      	ldr	r6, [pc, #60]	@ (8006a9c <sbrk_aligned+0x40>)
 8006a60:	460c      	mov	r4, r1
 8006a62:	6831      	ldr	r1, [r6, #0]
 8006a64:	4605      	mov	r5, r0
 8006a66:	b911      	cbnz	r1, 8006a6e <sbrk_aligned+0x12>
 8006a68:	f000 fe46 	bl	80076f8 <_sbrk_r>
 8006a6c:	6030      	str	r0, [r6, #0]
 8006a6e:	4621      	mov	r1, r4
 8006a70:	4628      	mov	r0, r5
 8006a72:	f000 fe41 	bl	80076f8 <_sbrk_r>
 8006a76:	1c43      	adds	r3, r0, #1
 8006a78:	d103      	bne.n	8006a82 <sbrk_aligned+0x26>
 8006a7a:	f04f 34ff 	mov.w	r4, #4294967295
 8006a7e:	4620      	mov	r0, r4
 8006a80:	bd70      	pop	{r4, r5, r6, pc}
 8006a82:	1cc4      	adds	r4, r0, #3
 8006a84:	f024 0403 	bic.w	r4, r4, #3
 8006a88:	42a0      	cmp	r0, r4
 8006a8a:	d0f8      	beq.n	8006a7e <sbrk_aligned+0x22>
 8006a8c:	1a21      	subs	r1, r4, r0
 8006a8e:	4628      	mov	r0, r5
 8006a90:	f000 fe32 	bl	80076f8 <_sbrk_r>
 8006a94:	3001      	adds	r0, #1
 8006a96:	d1f2      	bne.n	8006a7e <sbrk_aligned+0x22>
 8006a98:	e7ef      	b.n	8006a7a <sbrk_aligned+0x1e>
 8006a9a:	bf00      	nop
 8006a9c:	20000488 	.word	0x20000488

08006aa0 <_malloc_r>:
 8006aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aa4:	1ccd      	adds	r5, r1, #3
 8006aa6:	f025 0503 	bic.w	r5, r5, #3
 8006aaa:	3508      	adds	r5, #8
 8006aac:	2d0c      	cmp	r5, #12
 8006aae:	bf38      	it	cc
 8006ab0:	250c      	movcc	r5, #12
 8006ab2:	2d00      	cmp	r5, #0
 8006ab4:	4606      	mov	r6, r0
 8006ab6:	db01      	blt.n	8006abc <_malloc_r+0x1c>
 8006ab8:	42a9      	cmp	r1, r5
 8006aba:	d904      	bls.n	8006ac6 <_malloc_r+0x26>
 8006abc:	230c      	movs	r3, #12
 8006abe:	6033      	str	r3, [r6, #0]
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ac6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b9c <_malloc_r+0xfc>
 8006aca:	f000 f869 	bl	8006ba0 <__malloc_lock>
 8006ace:	f8d8 3000 	ldr.w	r3, [r8]
 8006ad2:	461c      	mov	r4, r3
 8006ad4:	bb44      	cbnz	r4, 8006b28 <_malloc_r+0x88>
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	4630      	mov	r0, r6
 8006ada:	f7ff ffbf 	bl	8006a5c <sbrk_aligned>
 8006ade:	1c43      	adds	r3, r0, #1
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	d158      	bne.n	8006b96 <_malloc_r+0xf6>
 8006ae4:	f8d8 4000 	ldr.w	r4, [r8]
 8006ae8:	4627      	mov	r7, r4
 8006aea:	2f00      	cmp	r7, #0
 8006aec:	d143      	bne.n	8006b76 <_malloc_r+0xd6>
 8006aee:	2c00      	cmp	r4, #0
 8006af0:	d04b      	beq.n	8006b8a <_malloc_r+0xea>
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	4639      	mov	r1, r7
 8006af6:	4630      	mov	r0, r6
 8006af8:	eb04 0903 	add.w	r9, r4, r3
 8006afc:	f000 fdfc 	bl	80076f8 <_sbrk_r>
 8006b00:	4581      	cmp	r9, r0
 8006b02:	d142      	bne.n	8006b8a <_malloc_r+0xea>
 8006b04:	6821      	ldr	r1, [r4, #0]
 8006b06:	1a6d      	subs	r5, r5, r1
 8006b08:	4629      	mov	r1, r5
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	f7ff ffa6 	bl	8006a5c <sbrk_aligned>
 8006b10:	3001      	adds	r0, #1
 8006b12:	d03a      	beq.n	8006b8a <_malloc_r+0xea>
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	442b      	add	r3, r5
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	bb62      	cbnz	r2, 8006b7c <_malloc_r+0xdc>
 8006b22:	f8c8 7000 	str.w	r7, [r8]
 8006b26:	e00f      	b.n	8006b48 <_malloc_r+0xa8>
 8006b28:	6822      	ldr	r2, [r4, #0]
 8006b2a:	1b52      	subs	r2, r2, r5
 8006b2c:	d420      	bmi.n	8006b70 <_malloc_r+0xd0>
 8006b2e:	2a0b      	cmp	r2, #11
 8006b30:	d917      	bls.n	8006b62 <_malloc_r+0xc2>
 8006b32:	1961      	adds	r1, r4, r5
 8006b34:	42a3      	cmp	r3, r4
 8006b36:	6025      	str	r5, [r4, #0]
 8006b38:	bf18      	it	ne
 8006b3a:	6059      	strne	r1, [r3, #4]
 8006b3c:	6863      	ldr	r3, [r4, #4]
 8006b3e:	bf08      	it	eq
 8006b40:	f8c8 1000 	streq.w	r1, [r8]
 8006b44:	5162      	str	r2, [r4, r5]
 8006b46:	604b      	str	r3, [r1, #4]
 8006b48:	4630      	mov	r0, r6
 8006b4a:	f000 f82f 	bl	8006bac <__malloc_unlock>
 8006b4e:	f104 000b 	add.w	r0, r4, #11
 8006b52:	1d23      	adds	r3, r4, #4
 8006b54:	f020 0007 	bic.w	r0, r0, #7
 8006b58:	1ac2      	subs	r2, r0, r3
 8006b5a:	bf1c      	itt	ne
 8006b5c:	1a1b      	subne	r3, r3, r0
 8006b5e:	50a3      	strne	r3, [r4, r2]
 8006b60:	e7af      	b.n	8006ac2 <_malloc_r+0x22>
 8006b62:	6862      	ldr	r2, [r4, #4]
 8006b64:	42a3      	cmp	r3, r4
 8006b66:	bf0c      	ite	eq
 8006b68:	f8c8 2000 	streq.w	r2, [r8]
 8006b6c:	605a      	strne	r2, [r3, #4]
 8006b6e:	e7eb      	b.n	8006b48 <_malloc_r+0xa8>
 8006b70:	4623      	mov	r3, r4
 8006b72:	6864      	ldr	r4, [r4, #4]
 8006b74:	e7ae      	b.n	8006ad4 <_malloc_r+0x34>
 8006b76:	463c      	mov	r4, r7
 8006b78:	687f      	ldr	r7, [r7, #4]
 8006b7a:	e7b6      	b.n	8006aea <_malloc_r+0x4a>
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	42a3      	cmp	r3, r4
 8006b82:	d1fb      	bne.n	8006b7c <_malloc_r+0xdc>
 8006b84:	2300      	movs	r3, #0
 8006b86:	6053      	str	r3, [r2, #4]
 8006b88:	e7de      	b.n	8006b48 <_malloc_r+0xa8>
 8006b8a:	230c      	movs	r3, #12
 8006b8c:	6033      	str	r3, [r6, #0]
 8006b8e:	4630      	mov	r0, r6
 8006b90:	f000 f80c 	bl	8006bac <__malloc_unlock>
 8006b94:	e794      	b.n	8006ac0 <_malloc_r+0x20>
 8006b96:	6005      	str	r5, [r0, #0]
 8006b98:	e7d6      	b.n	8006b48 <_malloc_r+0xa8>
 8006b9a:	bf00      	nop
 8006b9c:	2000048c 	.word	0x2000048c

08006ba0 <__malloc_lock>:
 8006ba0:	4801      	ldr	r0, [pc, #4]	@ (8006ba8 <__malloc_lock+0x8>)
 8006ba2:	f7ff b8b8 	b.w	8005d16 <__retarget_lock_acquire_recursive>
 8006ba6:	bf00      	nop
 8006ba8:	20000484 	.word	0x20000484

08006bac <__malloc_unlock>:
 8006bac:	4801      	ldr	r0, [pc, #4]	@ (8006bb4 <__malloc_unlock+0x8>)
 8006bae:	f7ff b8b3 	b.w	8005d18 <__retarget_lock_release_recursive>
 8006bb2:	bf00      	nop
 8006bb4:	20000484 	.word	0x20000484

08006bb8 <_Balloc>:
 8006bb8:	b570      	push	{r4, r5, r6, lr}
 8006bba:	69c6      	ldr	r6, [r0, #28]
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	460d      	mov	r5, r1
 8006bc0:	b976      	cbnz	r6, 8006be0 <_Balloc+0x28>
 8006bc2:	2010      	movs	r0, #16
 8006bc4:	f7ff ff42 	bl	8006a4c <malloc>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	61e0      	str	r0, [r4, #28]
 8006bcc:	b920      	cbnz	r0, 8006bd8 <_Balloc+0x20>
 8006bce:	4b18      	ldr	r3, [pc, #96]	@ (8006c30 <_Balloc+0x78>)
 8006bd0:	4818      	ldr	r0, [pc, #96]	@ (8006c34 <_Balloc+0x7c>)
 8006bd2:	216b      	movs	r1, #107	@ 0x6b
 8006bd4:	f000 fdae 	bl	8007734 <__assert_func>
 8006bd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006bdc:	6006      	str	r6, [r0, #0]
 8006bde:	60c6      	str	r6, [r0, #12]
 8006be0:	69e6      	ldr	r6, [r4, #28]
 8006be2:	68f3      	ldr	r3, [r6, #12]
 8006be4:	b183      	cbz	r3, 8006c08 <_Balloc+0x50>
 8006be6:	69e3      	ldr	r3, [r4, #28]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006bee:	b9b8      	cbnz	r0, 8006c20 <_Balloc+0x68>
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	fa01 f605 	lsl.w	r6, r1, r5
 8006bf6:	1d72      	adds	r2, r6, #5
 8006bf8:	0092      	lsls	r2, r2, #2
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	f000 fdb8 	bl	8007770 <_calloc_r>
 8006c00:	b160      	cbz	r0, 8006c1c <_Balloc+0x64>
 8006c02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c06:	e00e      	b.n	8006c26 <_Balloc+0x6e>
 8006c08:	2221      	movs	r2, #33	@ 0x21
 8006c0a:	2104      	movs	r1, #4
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	f000 fdaf 	bl	8007770 <_calloc_r>
 8006c12:	69e3      	ldr	r3, [r4, #28]
 8006c14:	60f0      	str	r0, [r6, #12]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1e4      	bne.n	8006be6 <_Balloc+0x2e>
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	bd70      	pop	{r4, r5, r6, pc}
 8006c20:	6802      	ldr	r2, [r0, #0]
 8006c22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c26:	2300      	movs	r3, #0
 8006c28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c2c:	e7f7      	b.n	8006c1e <_Balloc+0x66>
 8006c2e:	bf00      	nop
 8006c30:	080083a1 	.word	0x080083a1
 8006c34:	08008421 	.word	0x08008421

08006c38 <_Bfree>:
 8006c38:	b570      	push	{r4, r5, r6, lr}
 8006c3a:	69c6      	ldr	r6, [r0, #28]
 8006c3c:	4605      	mov	r5, r0
 8006c3e:	460c      	mov	r4, r1
 8006c40:	b976      	cbnz	r6, 8006c60 <_Bfree+0x28>
 8006c42:	2010      	movs	r0, #16
 8006c44:	f7ff ff02 	bl	8006a4c <malloc>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	61e8      	str	r0, [r5, #28]
 8006c4c:	b920      	cbnz	r0, 8006c58 <_Bfree+0x20>
 8006c4e:	4b09      	ldr	r3, [pc, #36]	@ (8006c74 <_Bfree+0x3c>)
 8006c50:	4809      	ldr	r0, [pc, #36]	@ (8006c78 <_Bfree+0x40>)
 8006c52:	218f      	movs	r1, #143	@ 0x8f
 8006c54:	f000 fd6e 	bl	8007734 <__assert_func>
 8006c58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c5c:	6006      	str	r6, [r0, #0]
 8006c5e:	60c6      	str	r6, [r0, #12]
 8006c60:	b13c      	cbz	r4, 8006c72 <_Bfree+0x3a>
 8006c62:	69eb      	ldr	r3, [r5, #28]
 8006c64:	6862      	ldr	r2, [r4, #4]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c6c:	6021      	str	r1, [r4, #0]
 8006c6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c72:	bd70      	pop	{r4, r5, r6, pc}
 8006c74:	080083a1 	.word	0x080083a1
 8006c78:	08008421 	.word	0x08008421

08006c7c <__multadd>:
 8006c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c80:	690d      	ldr	r5, [r1, #16]
 8006c82:	4607      	mov	r7, r0
 8006c84:	460c      	mov	r4, r1
 8006c86:	461e      	mov	r6, r3
 8006c88:	f101 0c14 	add.w	ip, r1, #20
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	f8dc 3000 	ldr.w	r3, [ip]
 8006c92:	b299      	uxth	r1, r3
 8006c94:	fb02 6101 	mla	r1, r2, r1, r6
 8006c98:	0c1e      	lsrs	r6, r3, #16
 8006c9a:	0c0b      	lsrs	r3, r1, #16
 8006c9c:	fb02 3306 	mla	r3, r2, r6, r3
 8006ca0:	b289      	uxth	r1, r1
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ca8:	4285      	cmp	r5, r0
 8006caa:	f84c 1b04 	str.w	r1, [ip], #4
 8006cae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006cb2:	dcec      	bgt.n	8006c8e <__multadd+0x12>
 8006cb4:	b30e      	cbz	r6, 8006cfa <__multadd+0x7e>
 8006cb6:	68a3      	ldr	r3, [r4, #8]
 8006cb8:	42ab      	cmp	r3, r5
 8006cba:	dc19      	bgt.n	8006cf0 <__multadd+0x74>
 8006cbc:	6861      	ldr	r1, [r4, #4]
 8006cbe:	4638      	mov	r0, r7
 8006cc0:	3101      	adds	r1, #1
 8006cc2:	f7ff ff79 	bl	8006bb8 <_Balloc>
 8006cc6:	4680      	mov	r8, r0
 8006cc8:	b928      	cbnz	r0, 8006cd6 <__multadd+0x5a>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8006d00 <__multadd+0x84>)
 8006cce:	480d      	ldr	r0, [pc, #52]	@ (8006d04 <__multadd+0x88>)
 8006cd0:	21ba      	movs	r1, #186	@ 0xba
 8006cd2:	f000 fd2f 	bl	8007734 <__assert_func>
 8006cd6:	6922      	ldr	r2, [r4, #16]
 8006cd8:	3202      	adds	r2, #2
 8006cda:	f104 010c 	add.w	r1, r4, #12
 8006cde:	0092      	lsls	r2, r2, #2
 8006ce0:	300c      	adds	r0, #12
 8006ce2:	f000 fd19 	bl	8007718 <memcpy>
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	4638      	mov	r0, r7
 8006cea:	f7ff ffa5 	bl	8006c38 <_Bfree>
 8006cee:	4644      	mov	r4, r8
 8006cf0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006cf4:	3501      	adds	r5, #1
 8006cf6:	615e      	str	r6, [r3, #20]
 8006cf8:	6125      	str	r5, [r4, #16]
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d00:	08008410 	.word	0x08008410
 8006d04:	08008421 	.word	0x08008421

08006d08 <__hi0bits>:
 8006d08:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	bf36      	itet	cc
 8006d10:	0403      	lslcc	r3, r0, #16
 8006d12:	2000      	movcs	r0, #0
 8006d14:	2010      	movcc	r0, #16
 8006d16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d1a:	bf3c      	itt	cc
 8006d1c:	021b      	lslcc	r3, r3, #8
 8006d1e:	3008      	addcc	r0, #8
 8006d20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d24:	bf3c      	itt	cc
 8006d26:	011b      	lslcc	r3, r3, #4
 8006d28:	3004      	addcc	r0, #4
 8006d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d2e:	bf3c      	itt	cc
 8006d30:	009b      	lslcc	r3, r3, #2
 8006d32:	3002      	addcc	r0, #2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	db05      	blt.n	8006d44 <__hi0bits+0x3c>
 8006d38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006d3c:	f100 0001 	add.w	r0, r0, #1
 8006d40:	bf08      	it	eq
 8006d42:	2020      	moveq	r0, #32
 8006d44:	4770      	bx	lr

08006d46 <__lo0bits>:
 8006d46:	6803      	ldr	r3, [r0, #0]
 8006d48:	4602      	mov	r2, r0
 8006d4a:	f013 0007 	ands.w	r0, r3, #7
 8006d4e:	d00b      	beq.n	8006d68 <__lo0bits+0x22>
 8006d50:	07d9      	lsls	r1, r3, #31
 8006d52:	d421      	bmi.n	8006d98 <__lo0bits+0x52>
 8006d54:	0798      	lsls	r0, r3, #30
 8006d56:	bf49      	itett	mi
 8006d58:	085b      	lsrmi	r3, r3, #1
 8006d5a:	089b      	lsrpl	r3, r3, #2
 8006d5c:	2001      	movmi	r0, #1
 8006d5e:	6013      	strmi	r3, [r2, #0]
 8006d60:	bf5c      	itt	pl
 8006d62:	6013      	strpl	r3, [r2, #0]
 8006d64:	2002      	movpl	r0, #2
 8006d66:	4770      	bx	lr
 8006d68:	b299      	uxth	r1, r3
 8006d6a:	b909      	cbnz	r1, 8006d70 <__lo0bits+0x2a>
 8006d6c:	0c1b      	lsrs	r3, r3, #16
 8006d6e:	2010      	movs	r0, #16
 8006d70:	b2d9      	uxtb	r1, r3
 8006d72:	b909      	cbnz	r1, 8006d78 <__lo0bits+0x32>
 8006d74:	3008      	adds	r0, #8
 8006d76:	0a1b      	lsrs	r3, r3, #8
 8006d78:	0719      	lsls	r1, r3, #28
 8006d7a:	bf04      	itt	eq
 8006d7c:	091b      	lsreq	r3, r3, #4
 8006d7e:	3004      	addeq	r0, #4
 8006d80:	0799      	lsls	r1, r3, #30
 8006d82:	bf04      	itt	eq
 8006d84:	089b      	lsreq	r3, r3, #2
 8006d86:	3002      	addeq	r0, #2
 8006d88:	07d9      	lsls	r1, r3, #31
 8006d8a:	d403      	bmi.n	8006d94 <__lo0bits+0x4e>
 8006d8c:	085b      	lsrs	r3, r3, #1
 8006d8e:	f100 0001 	add.w	r0, r0, #1
 8006d92:	d003      	beq.n	8006d9c <__lo0bits+0x56>
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	4770      	bx	lr
 8006d98:	2000      	movs	r0, #0
 8006d9a:	4770      	bx	lr
 8006d9c:	2020      	movs	r0, #32
 8006d9e:	4770      	bx	lr

08006da0 <__i2b>:
 8006da0:	b510      	push	{r4, lr}
 8006da2:	460c      	mov	r4, r1
 8006da4:	2101      	movs	r1, #1
 8006da6:	f7ff ff07 	bl	8006bb8 <_Balloc>
 8006daa:	4602      	mov	r2, r0
 8006dac:	b928      	cbnz	r0, 8006dba <__i2b+0x1a>
 8006dae:	4b05      	ldr	r3, [pc, #20]	@ (8006dc4 <__i2b+0x24>)
 8006db0:	4805      	ldr	r0, [pc, #20]	@ (8006dc8 <__i2b+0x28>)
 8006db2:	f240 1145 	movw	r1, #325	@ 0x145
 8006db6:	f000 fcbd 	bl	8007734 <__assert_func>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	6144      	str	r4, [r0, #20]
 8006dbe:	6103      	str	r3, [r0, #16]
 8006dc0:	bd10      	pop	{r4, pc}
 8006dc2:	bf00      	nop
 8006dc4:	08008410 	.word	0x08008410
 8006dc8:	08008421 	.word	0x08008421

08006dcc <__multiply>:
 8006dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd0:	4614      	mov	r4, r2
 8006dd2:	690a      	ldr	r2, [r1, #16]
 8006dd4:	6923      	ldr	r3, [r4, #16]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	bfa8      	it	ge
 8006dda:	4623      	movge	r3, r4
 8006ddc:	460f      	mov	r7, r1
 8006dde:	bfa4      	itt	ge
 8006de0:	460c      	movge	r4, r1
 8006de2:	461f      	movge	r7, r3
 8006de4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006de8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006dec:	68a3      	ldr	r3, [r4, #8]
 8006dee:	6861      	ldr	r1, [r4, #4]
 8006df0:	eb0a 0609 	add.w	r6, sl, r9
 8006df4:	42b3      	cmp	r3, r6
 8006df6:	b085      	sub	sp, #20
 8006df8:	bfb8      	it	lt
 8006dfa:	3101      	addlt	r1, #1
 8006dfc:	f7ff fedc 	bl	8006bb8 <_Balloc>
 8006e00:	b930      	cbnz	r0, 8006e10 <__multiply+0x44>
 8006e02:	4602      	mov	r2, r0
 8006e04:	4b44      	ldr	r3, [pc, #272]	@ (8006f18 <__multiply+0x14c>)
 8006e06:	4845      	ldr	r0, [pc, #276]	@ (8006f1c <__multiply+0x150>)
 8006e08:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006e0c:	f000 fc92 	bl	8007734 <__assert_func>
 8006e10:	f100 0514 	add.w	r5, r0, #20
 8006e14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006e18:	462b      	mov	r3, r5
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	4543      	cmp	r3, r8
 8006e1e:	d321      	bcc.n	8006e64 <__multiply+0x98>
 8006e20:	f107 0114 	add.w	r1, r7, #20
 8006e24:	f104 0214 	add.w	r2, r4, #20
 8006e28:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006e2c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006e30:	9302      	str	r3, [sp, #8]
 8006e32:	1b13      	subs	r3, r2, r4
 8006e34:	3b15      	subs	r3, #21
 8006e36:	f023 0303 	bic.w	r3, r3, #3
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	f104 0715 	add.w	r7, r4, #21
 8006e40:	42ba      	cmp	r2, r7
 8006e42:	bf38      	it	cc
 8006e44:	2304      	movcc	r3, #4
 8006e46:	9301      	str	r3, [sp, #4]
 8006e48:	9b02      	ldr	r3, [sp, #8]
 8006e4a:	9103      	str	r1, [sp, #12]
 8006e4c:	428b      	cmp	r3, r1
 8006e4e:	d80c      	bhi.n	8006e6a <__multiply+0x9e>
 8006e50:	2e00      	cmp	r6, #0
 8006e52:	dd03      	ble.n	8006e5c <__multiply+0x90>
 8006e54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d05b      	beq.n	8006f14 <__multiply+0x148>
 8006e5c:	6106      	str	r6, [r0, #16]
 8006e5e:	b005      	add	sp, #20
 8006e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e64:	f843 2b04 	str.w	r2, [r3], #4
 8006e68:	e7d8      	b.n	8006e1c <__multiply+0x50>
 8006e6a:	f8b1 a000 	ldrh.w	sl, [r1]
 8006e6e:	f1ba 0f00 	cmp.w	sl, #0
 8006e72:	d024      	beq.n	8006ebe <__multiply+0xf2>
 8006e74:	f104 0e14 	add.w	lr, r4, #20
 8006e78:	46a9      	mov	r9, r5
 8006e7a:	f04f 0c00 	mov.w	ip, #0
 8006e7e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006e82:	f8d9 3000 	ldr.w	r3, [r9]
 8006e86:	fa1f fb87 	uxth.w	fp, r7
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006e90:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006e94:	f8d9 7000 	ldr.w	r7, [r9]
 8006e98:	4463      	add	r3, ip
 8006e9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006e9e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006ea2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006eac:	4572      	cmp	r2, lr
 8006eae:	f849 3b04 	str.w	r3, [r9], #4
 8006eb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006eb6:	d8e2      	bhi.n	8006e7e <__multiply+0xb2>
 8006eb8:	9b01      	ldr	r3, [sp, #4]
 8006eba:	f845 c003 	str.w	ip, [r5, r3]
 8006ebe:	9b03      	ldr	r3, [sp, #12]
 8006ec0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006ec4:	3104      	adds	r1, #4
 8006ec6:	f1b9 0f00 	cmp.w	r9, #0
 8006eca:	d021      	beq.n	8006f10 <__multiply+0x144>
 8006ecc:	682b      	ldr	r3, [r5, #0]
 8006ece:	f104 0c14 	add.w	ip, r4, #20
 8006ed2:	46ae      	mov	lr, r5
 8006ed4:	f04f 0a00 	mov.w	sl, #0
 8006ed8:	f8bc b000 	ldrh.w	fp, [ip]
 8006edc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006ee0:	fb09 770b 	mla	r7, r9, fp, r7
 8006ee4:	4457      	add	r7, sl
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006eec:	f84e 3b04 	str.w	r3, [lr], #4
 8006ef0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006ef4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ef8:	f8be 3000 	ldrh.w	r3, [lr]
 8006efc:	fb09 330a 	mla	r3, r9, sl, r3
 8006f00:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006f04:	4562      	cmp	r2, ip
 8006f06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f0a:	d8e5      	bhi.n	8006ed8 <__multiply+0x10c>
 8006f0c:	9f01      	ldr	r7, [sp, #4]
 8006f0e:	51eb      	str	r3, [r5, r7]
 8006f10:	3504      	adds	r5, #4
 8006f12:	e799      	b.n	8006e48 <__multiply+0x7c>
 8006f14:	3e01      	subs	r6, #1
 8006f16:	e79b      	b.n	8006e50 <__multiply+0x84>
 8006f18:	08008410 	.word	0x08008410
 8006f1c:	08008421 	.word	0x08008421

08006f20 <__pow5mult>:
 8006f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f24:	4615      	mov	r5, r2
 8006f26:	f012 0203 	ands.w	r2, r2, #3
 8006f2a:	4607      	mov	r7, r0
 8006f2c:	460e      	mov	r6, r1
 8006f2e:	d007      	beq.n	8006f40 <__pow5mult+0x20>
 8006f30:	4c25      	ldr	r4, [pc, #148]	@ (8006fc8 <__pow5mult+0xa8>)
 8006f32:	3a01      	subs	r2, #1
 8006f34:	2300      	movs	r3, #0
 8006f36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f3a:	f7ff fe9f 	bl	8006c7c <__multadd>
 8006f3e:	4606      	mov	r6, r0
 8006f40:	10ad      	asrs	r5, r5, #2
 8006f42:	d03d      	beq.n	8006fc0 <__pow5mult+0xa0>
 8006f44:	69fc      	ldr	r4, [r7, #28]
 8006f46:	b97c      	cbnz	r4, 8006f68 <__pow5mult+0x48>
 8006f48:	2010      	movs	r0, #16
 8006f4a:	f7ff fd7f 	bl	8006a4c <malloc>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	61f8      	str	r0, [r7, #28]
 8006f52:	b928      	cbnz	r0, 8006f60 <__pow5mult+0x40>
 8006f54:	4b1d      	ldr	r3, [pc, #116]	@ (8006fcc <__pow5mult+0xac>)
 8006f56:	481e      	ldr	r0, [pc, #120]	@ (8006fd0 <__pow5mult+0xb0>)
 8006f58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006f5c:	f000 fbea 	bl	8007734 <__assert_func>
 8006f60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f64:	6004      	str	r4, [r0, #0]
 8006f66:	60c4      	str	r4, [r0, #12]
 8006f68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006f6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f70:	b94c      	cbnz	r4, 8006f86 <__pow5mult+0x66>
 8006f72:	f240 2171 	movw	r1, #625	@ 0x271
 8006f76:	4638      	mov	r0, r7
 8006f78:	f7ff ff12 	bl	8006da0 <__i2b>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f82:	4604      	mov	r4, r0
 8006f84:	6003      	str	r3, [r0, #0]
 8006f86:	f04f 0900 	mov.w	r9, #0
 8006f8a:	07eb      	lsls	r3, r5, #31
 8006f8c:	d50a      	bpl.n	8006fa4 <__pow5mult+0x84>
 8006f8e:	4631      	mov	r1, r6
 8006f90:	4622      	mov	r2, r4
 8006f92:	4638      	mov	r0, r7
 8006f94:	f7ff ff1a 	bl	8006dcc <__multiply>
 8006f98:	4631      	mov	r1, r6
 8006f9a:	4680      	mov	r8, r0
 8006f9c:	4638      	mov	r0, r7
 8006f9e:	f7ff fe4b 	bl	8006c38 <_Bfree>
 8006fa2:	4646      	mov	r6, r8
 8006fa4:	106d      	asrs	r5, r5, #1
 8006fa6:	d00b      	beq.n	8006fc0 <__pow5mult+0xa0>
 8006fa8:	6820      	ldr	r0, [r4, #0]
 8006faa:	b938      	cbnz	r0, 8006fbc <__pow5mult+0x9c>
 8006fac:	4622      	mov	r2, r4
 8006fae:	4621      	mov	r1, r4
 8006fb0:	4638      	mov	r0, r7
 8006fb2:	f7ff ff0b 	bl	8006dcc <__multiply>
 8006fb6:	6020      	str	r0, [r4, #0]
 8006fb8:	f8c0 9000 	str.w	r9, [r0]
 8006fbc:	4604      	mov	r4, r0
 8006fbe:	e7e4      	b.n	8006f8a <__pow5mult+0x6a>
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fc6:	bf00      	nop
 8006fc8:	0800847c 	.word	0x0800847c
 8006fcc:	080083a1 	.word	0x080083a1
 8006fd0:	08008421 	.word	0x08008421

08006fd4 <__lshift>:
 8006fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd8:	460c      	mov	r4, r1
 8006fda:	6849      	ldr	r1, [r1, #4]
 8006fdc:	6923      	ldr	r3, [r4, #16]
 8006fde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006fe2:	68a3      	ldr	r3, [r4, #8]
 8006fe4:	4607      	mov	r7, r0
 8006fe6:	4691      	mov	r9, r2
 8006fe8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006fec:	f108 0601 	add.w	r6, r8, #1
 8006ff0:	42b3      	cmp	r3, r6
 8006ff2:	db0b      	blt.n	800700c <__lshift+0x38>
 8006ff4:	4638      	mov	r0, r7
 8006ff6:	f7ff fddf 	bl	8006bb8 <_Balloc>
 8006ffa:	4605      	mov	r5, r0
 8006ffc:	b948      	cbnz	r0, 8007012 <__lshift+0x3e>
 8006ffe:	4602      	mov	r2, r0
 8007000:	4b28      	ldr	r3, [pc, #160]	@ (80070a4 <__lshift+0xd0>)
 8007002:	4829      	ldr	r0, [pc, #164]	@ (80070a8 <__lshift+0xd4>)
 8007004:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007008:	f000 fb94 	bl	8007734 <__assert_func>
 800700c:	3101      	adds	r1, #1
 800700e:	005b      	lsls	r3, r3, #1
 8007010:	e7ee      	b.n	8006ff0 <__lshift+0x1c>
 8007012:	2300      	movs	r3, #0
 8007014:	f100 0114 	add.w	r1, r0, #20
 8007018:	f100 0210 	add.w	r2, r0, #16
 800701c:	4618      	mov	r0, r3
 800701e:	4553      	cmp	r3, sl
 8007020:	db33      	blt.n	800708a <__lshift+0xb6>
 8007022:	6920      	ldr	r0, [r4, #16]
 8007024:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007028:	f104 0314 	add.w	r3, r4, #20
 800702c:	f019 091f 	ands.w	r9, r9, #31
 8007030:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007034:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007038:	d02b      	beq.n	8007092 <__lshift+0xbe>
 800703a:	f1c9 0e20 	rsb	lr, r9, #32
 800703e:	468a      	mov	sl, r1
 8007040:	2200      	movs	r2, #0
 8007042:	6818      	ldr	r0, [r3, #0]
 8007044:	fa00 f009 	lsl.w	r0, r0, r9
 8007048:	4310      	orrs	r0, r2
 800704a:	f84a 0b04 	str.w	r0, [sl], #4
 800704e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007052:	459c      	cmp	ip, r3
 8007054:	fa22 f20e 	lsr.w	r2, r2, lr
 8007058:	d8f3      	bhi.n	8007042 <__lshift+0x6e>
 800705a:	ebac 0304 	sub.w	r3, ip, r4
 800705e:	3b15      	subs	r3, #21
 8007060:	f023 0303 	bic.w	r3, r3, #3
 8007064:	3304      	adds	r3, #4
 8007066:	f104 0015 	add.w	r0, r4, #21
 800706a:	4584      	cmp	ip, r0
 800706c:	bf38      	it	cc
 800706e:	2304      	movcc	r3, #4
 8007070:	50ca      	str	r2, [r1, r3]
 8007072:	b10a      	cbz	r2, 8007078 <__lshift+0xa4>
 8007074:	f108 0602 	add.w	r6, r8, #2
 8007078:	3e01      	subs	r6, #1
 800707a:	4638      	mov	r0, r7
 800707c:	612e      	str	r6, [r5, #16]
 800707e:	4621      	mov	r1, r4
 8007080:	f7ff fdda 	bl	8006c38 <_Bfree>
 8007084:	4628      	mov	r0, r5
 8007086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800708a:	f842 0f04 	str.w	r0, [r2, #4]!
 800708e:	3301      	adds	r3, #1
 8007090:	e7c5      	b.n	800701e <__lshift+0x4a>
 8007092:	3904      	subs	r1, #4
 8007094:	f853 2b04 	ldr.w	r2, [r3], #4
 8007098:	f841 2f04 	str.w	r2, [r1, #4]!
 800709c:	459c      	cmp	ip, r3
 800709e:	d8f9      	bhi.n	8007094 <__lshift+0xc0>
 80070a0:	e7ea      	b.n	8007078 <__lshift+0xa4>
 80070a2:	bf00      	nop
 80070a4:	08008410 	.word	0x08008410
 80070a8:	08008421 	.word	0x08008421

080070ac <__mcmp>:
 80070ac:	690a      	ldr	r2, [r1, #16]
 80070ae:	4603      	mov	r3, r0
 80070b0:	6900      	ldr	r0, [r0, #16]
 80070b2:	1a80      	subs	r0, r0, r2
 80070b4:	b530      	push	{r4, r5, lr}
 80070b6:	d10e      	bne.n	80070d6 <__mcmp+0x2a>
 80070b8:	3314      	adds	r3, #20
 80070ba:	3114      	adds	r1, #20
 80070bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80070c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80070c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80070c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80070cc:	4295      	cmp	r5, r2
 80070ce:	d003      	beq.n	80070d8 <__mcmp+0x2c>
 80070d0:	d205      	bcs.n	80070de <__mcmp+0x32>
 80070d2:	f04f 30ff 	mov.w	r0, #4294967295
 80070d6:	bd30      	pop	{r4, r5, pc}
 80070d8:	42a3      	cmp	r3, r4
 80070da:	d3f3      	bcc.n	80070c4 <__mcmp+0x18>
 80070dc:	e7fb      	b.n	80070d6 <__mcmp+0x2a>
 80070de:	2001      	movs	r0, #1
 80070e0:	e7f9      	b.n	80070d6 <__mcmp+0x2a>
	...

080070e4 <__mdiff>:
 80070e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e8:	4689      	mov	r9, r1
 80070ea:	4606      	mov	r6, r0
 80070ec:	4611      	mov	r1, r2
 80070ee:	4648      	mov	r0, r9
 80070f0:	4614      	mov	r4, r2
 80070f2:	f7ff ffdb 	bl	80070ac <__mcmp>
 80070f6:	1e05      	subs	r5, r0, #0
 80070f8:	d112      	bne.n	8007120 <__mdiff+0x3c>
 80070fa:	4629      	mov	r1, r5
 80070fc:	4630      	mov	r0, r6
 80070fe:	f7ff fd5b 	bl	8006bb8 <_Balloc>
 8007102:	4602      	mov	r2, r0
 8007104:	b928      	cbnz	r0, 8007112 <__mdiff+0x2e>
 8007106:	4b3f      	ldr	r3, [pc, #252]	@ (8007204 <__mdiff+0x120>)
 8007108:	f240 2137 	movw	r1, #567	@ 0x237
 800710c:	483e      	ldr	r0, [pc, #248]	@ (8007208 <__mdiff+0x124>)
 800710e:	f000 fb11 	bl	8007734 <__assert_func>
 8007112:	2301      	movs	r3, #1
 8007114:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007118:	4610      	mov	r0, r2
 800711a:	b003      	add	sp, #12
 800711c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007120:	bfbc      	itt	lt
 8007122:	464b      	movlt	r3, r9
 8007124:	46a1      	movlt	r9, r4
 8007126:	4630      	mov	r0, r6
 8007128:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800712c:	bfba      	itte	lt
 800712e:	461c      	movlt	r4, r3
 8007130:	2501      	movlt	r5, #1
 8007132:	2500      	movge	r5, #0
 8007134:	f7ff fd40 	bl	8006bb8 <_Balloc>
 8007138:	4602      	mov	r2, r0
 800713a:	b918      	cbnz	r0, 8007144 <__mdiff+0x60>
 800713c:	4b31      	ldr	r3, [pc, #196]	@ (8007204 <__mdiff+0x120>)
 800713e:	f240 2145 	movw	r1, #581	@ 0x245
 8007142:	e7e3      	b.n	800710c <__mdiff+0x28>
 8007144:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007148:	6926      	ldr	r6, [r4, #16]
 800714a:	60c5      	str	r5, [r0, #12]
 800714c:	f109 0310 	add.w	r3, r9, #16
 8007150:	f109 0514 	add.w	r5, r9, #20
 8007154:	f104 0e14 	add.w	lr, r4, #20
 8007158:	f100 0b14 	add.w	fp, r0, #20
 800715c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007160:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007164:	9301      	str	r3, [sp, #4]
 8007166:	46d9      	mov	r9, fp
 8007168:	f04f 0c00 	mov.w	ip, #0
 800716c:	9b01      	ldr	r3, [sp, #4]
 800716e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007172:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007176:	9301      	str	r3, [sp, #4]
 8007178:	fa1f f38a 	uxth.w	r3, sl
 800717c:	4619      	mov	r1, r3
 800717e:	b283      	uxth	r3, r0
 8007180:	1acb      	subs	r3, r1, r3
 8007182:	0c00      	lsrs	r0, r0, #16
 8007184:	4463      	add	r3, ip
 8007186:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800718a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800718e:	b29b      	uxth	r3, r3
 8007190:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007194:	4576      	cmp	r6, lr
 8007196:	f849 3b04 	str.w	r3, [r9], #4
 800719a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800719e:	d8e5      	bhi.n	800716c <__mdiff+0x88>
 80071a0:	1b33      	subs	r3, r6, r4
 80071a2:	3b15      	subs	r3, #21
 80071a4:	f023 0303 	bic.w	r3, r3, #3
 80071a8:	3415      	adds	r4, #21
 80071aa:	3304      	adds	r3, #4
 80071ac:	42a6      	cmp	r6, r4
 80071ae:	bf38      	it	cc
 80071b0:	2304      	movcc	r3, #4
 80071b2:	441d      	add	r5, r3
 80071b4:	445b      	add	r3, fp
 80071b6:	461e      	mov	r6, r3
 80071b8:	462c      	mov	r4, r5
 80071ba:	4544      	cmp	r4, r8
 80071bc:	d30e      	bcc.n	80071dc <__mdiff+0xf8>
 80071be:	f108 0103 	add.w	r1, r8, #3
 80071c2:	1b49      	subs	r1, r1, r5
 80071c4:	f021 0103 	bic.w	r1, r1, #3
 80071c8:	3d03      	subs	r5, #3
 80071ca:	45a8      	cmp	r8, r5
 80071cc:	bf38      	it	cc
 80071ce:	2100      	movcc	r1, #0
 80071d0:	440b      	add	r3, r1
 80071d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80071d6:	b191      	cbz	r1, 80071fe <__mdiff+0x11a>
 80071d8:	6117      	str	r7, [r2, #16]
 80071da:	e79d      	b.n	8007118 <__mdiff+0x34>
 80071dc:	f854 1b04 	ldr.w	r1, [r4], #4
 80071e0:	46e6      	mov	lr, ip
 80071e2:	0c08      	lsrs	r0, r1, #16
 80071e4:	fa1c fc81 	uxtah	ip, ip, r1
 80071e8:	4471      	add	r1, lr
 80071ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80071ee:	b289      	uxth	r1, r1
 80071f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80071f4:	f846 1b04 	str.w	r1, [r6], #4
 80071f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80071fc:	e7dd      	b.n	80071ba <__mdiff+0xd6>
 80071fe:	3f01      	subs	r7, #1
 8007200:	e7e7      	b.n	80071d2 <__mdiff+0xee>
 8007202:	bf00      	nop
 8007204:	08008410 	.word	0x08008410
 8007208:	08008421 	.word	0x08008421

0800720c <__d2b>:
 800720c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007210:	460f      	mov	r7, r1
 8007212:	2101      	movs	r1, #1
 8007214:	ec59 8b10 	vmov	r8, r9, d0
 8007218:	4616      	mov	r6, r2
 800721a:	f7ff fccd 	bl	8006bb8 <_Balloc>
 800721e:	4604      	mov	r4, r0
 8007220:	b930      	cbnz	r0, 8007230 <__d2b+0x24>
 8007222:	4602      	mov	r2, r0
 8007224:	4b23      	ldr	r3, [pc, #140]	@ (80072b4 <__d2b+0xa8>)
 8007226:	4824      	ldr	r0, [pc, #144]	@ (80072b8 <__d2b+0xac>)
 8007228:	f240 310f 	movw	r1, #783	@ 0x30f
 800722c:	f000 fa82 	bl	8007734 <__assert_func>
 8007230:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007234:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007238:	b10d      	cbz	r5, 800723e <__d2b+0x32>
 800723a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800723e:	9301      	str	r3, [sp, #4]
 8007240:	f1b8 0300 	subs.w	r3, r8, #0
 8007244:	d023      	beq.n	800728e <__d2b+0x82>
 8007246:	4668      	mov	r0, sp
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	f7ff fd7c 	bl	8006d46 <__lo0bits>
 800724e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007252:	b1d0      	cbz	r0, 800728a <__d2b+0x7e>
 8007254:	f1c0 0320 	rsb	r3, r0, #32
 8007258:	fa02 f303 	lsl.w	r3, r2, r3
 800725c:	430b      	orrs	r3, r1
 800725e:	40c2      	lsrs	r2, r0
 8007260:	6163      	str	r3, [r4, #20]
 8007262:	9201      	str	r2, [sp, #4]
 8007264:	9b01      	ldr	r3, [sp, #4]
 8007266:	61a3      	str	r3, [r4, #24]
 8007268:	2b00      	cmp	r3, #0
 800726a:	bf0c      	ite	eq
 800726c:	2201      	moveq	r2, #1
 800726e:	2202      	movne	r2, #2
 8007270:	6122      	str	r2, [r4, #16]
 8007272:	b1a5      	cbz	r5, 800729e <__d2b+0x92>
 8007274:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007278:	4405      	add	r5, r0
 800727a:	603d      	str	r5, [r7, #0]
 800727c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007280:	6030      	str	r0, [r6, #0]
 8007282:	4620      	mov	r0, r4
 8007284:	b003      	add	sp, #12
 8007286:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800728a:	6161      	str	r1, [r4, #20]
 800728c:	e7ea      	b.n	8007264 <__d2b+0x58>
 800728e:	a801      	add	r0, sp, #4
 8007290:	f7ff fd59 	bl	8006d46 <__lo0bits>
 8007294:	9b01      	ldr	r3, [sp, #4]
 8007296:	6163      	str	r3, [r4, #20]
 8007298:	3020      	adds	r0, #32
 800729a:	2201      	movs	r2, #1
 800729c:	e7e8      	b.n	8007270 <__d2b+0x64>
 800729e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80072a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80072a6:	6038      	str	r0, [r7, #0]
 80072a8:	6918      	ldr	r0, [r3, #16]
 80072aa:	f7ff fd2d 	bl	8006d08 <__hi0bits>
 80072ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80072b2:	e7e5      	b.n	8007280 <__d2b+0x74>
 80072b4:	08008410 	.word	0x08008410
 80072b8:	08008421 	.word	0x08008421

080072bc <__ssputs_r>:
 80072bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072c0:	688e      	ldr	r6, [r1, #8]
 80072c2:	461f      	mov	r7, r3
 80072c4:	42be      	cmp	r6, r7
 80072c6:	680b      	ldr	r3, [r1, #0]
 80072c8:	4682      	mov	sl, r0
 80072ca:	460c      	mov	r4, r1
 80072cc:	4690      	mov	r8, r2
 80072ce:	d82d      	bhi.n	800732c <__ssputs_r+0x70>
 80072d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80072d8:	d026      	beq.n	8007328 <__ssputs_r+0x6c>
 80072da:	6965      	ldr	r5, [r4, #20]
 80072dc:	6909      	ldr	r1, [r1, #16]
 80072de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072e2:	eba3 0901 	sub.w	r9, r3, r1
 80072e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072ea:	1c7b      	adds	r3, r7, #1
 80072ec:	444b      	add	r3, r9
 80072ee:	106d      	asrs	r5, r5, #1
 80072f0:	429d      	cmp	r5, r3
 80072f2:	bf38      	it	cc
 80072f4:	461d      	movcc	r5, r3
 80072f6:	0553      	lsls	r3, r2, #21
 80072f8:	d527      	bpl.n	800734a <__ssputs_r+0x8e>
 80072fa:	4629      	mov	r1, r5
 80072fc:	f7ff fbd0 	bl	8006aa0 <_malloc_r>
 8007300:	4606      	mov	r6, r0
 8007302:	b360      	cbz	r0, 800735e <__ssputs_r+0xa2>
 8007304:	6921      	ldr	r1, [r4, #16]
 8007306:	464a      	mov	r2, r9
 8007308:	f000 fa06 	bl	8007718 <memcpy>
 800730c:	89a3      	ldrh	r3, [r4, #12]
 800730e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007316:	81a3      	strh	r3, [r4, #12]
 8007318:	6126      	str	r6, [r4, #16]
 800731a:	6165      	str	r5, [r4, #20]
 800731c:	444e      	add	r6, r9
 800731e:	eba5 0509 	sub.w	r5, r5, r9
 8007322:	6026      	str	r6, [r4, #0]
 8007324:	60a5      	str	r5, [r4, #8]
 8007326:	463e      	mov	r6, r7
 8007328:	42be      	cmp	r6, r7
 800732a:	d900      	bls.n	800732e <__ssputs_r+0x72>
 800732c:	463e      	mov	r6, r7
 800732e:	6820      	ldr	r0, [r4, #0]
 8007330:	4632      	mov	r2, r6
 8007332:	4641      	mov	r1, r8
 8007334:	f000 f9c6 	bl	80076c4 <memmove>
 8007338:	68a3      	ldr	r3, [r4, #8]
 800733a:	1b9b      	subs	r3, r3, r6
 800733c:	60a3      	str	r3, [r4, #8]
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	4433      	add	r3, r6
 8007342:	6023      	str	r3, [r4, #0]
 8007344:	2000      	movs	r0, #0
 8007346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800734a:	462a      	mov	r2, r5
 800734c:	f000 fa36 	bl	80077bc <_realloc_r>
 8007350:	4606      	mov	r6, r0
 8007352:	2800      	cmp	r0, #0
 8007354:	d1e0      	bne.n	8007318 <__ssputs_r+0x5c>
 8007356:	6921      	ldr	r1, [r4, #16]
 8007358:	4650      	mov	r0, sl
 800735a:	f7ff fb2d 	bl	80069b8 <_free_r>
 800735e:	230c      	movs	r3, #12
 8007360:	f8ca 3000 	str.w	r3, [sl]
 8007364:	89a3      	ldrh	r3, [r4, #12]
 8007366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800736a:	81a3      	strh	r3, [r4, #12]
 800736c:	f04f 30ff 	mov.w	r0, #4294967295
 8007370:	e7e9      	b.n	8007346 <__ssputs_r+0x8a>
	...

08007374 <_svfiprintf_r>:
 8007374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007378:	4698      	mov	r8, r3
 800737a:	898b      	ldrh	r3, [r1, #12]
 800737c:	061b      	lsls	r3, r3, #24
 800737e:	b09d      	sub	sp, #116	@ 0x74
 8007380:	4607      	mov	r7, r0
 8007382:	460d      	mov	r5, r1
 8007384:	4614      	mov	r4, r2
 8007386:	d510      	bpl.n	80073aa <_svfiprintf_r+0x36>
 8007388:	690b      	ldr	r3, [r1, #16]
 800738a:	b973      	cbnz	r3, 80073aa <_svfiprintf_r+0x36>
 800738c:	2140      	movs	r1, #64	@ 0x40
 800738e:	f7ff fb87 	bl	8006aa0 <_malloc_r>
 8007392:	6028      	str	r0, [r5, #0]
 8007394:	6128      	str	r0, [r5, #16]
 8007396:	b930      	cbnz	r0, 80073a6 <_svfiprintf_r+0x32>
 8007398:	230c      	movs	r3, #12
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	f04f 30ff 	mov.w	r0, #4294967295
 80073a0:	b01d      	add	sp, #116	@ 0x74
 80073a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a6:	2340      	movs	r3, #64	@ 0x40
 80073a8:	616b      	str	r3, [r5, #20]
 80073aa:	2300      	movs	r3, #0
 80073ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80073ae:	2320      	movs	r3, #32
 80073b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80073b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80073b8:	2330      	movs	r3, #48	@ 0x30
 80073ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007558 <_svfiprintf_r+0x1e4>
 80073be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073c2:	f04f 0901 	mov.w	r9, #1
 80073c6:	4623      	mov	r3, r4
 80073c8:	469a      	mov	sl, r3
 80073ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073ce:	b10a      	cbz	r2, 80073d4 <_svfiprintf_r+0x60>
 80073d0:	2a25      	cmp	r2, #37	@ 0x25
 80073d2:	d1f9      	bne.n	80073c8 <_svfiprintf_r+0x54>
 80073d4:	ebba 0b04 	subs.w	fp, sl, r4
 80073d8:	d00b      	beq.n	80073f2 <_svfiprintf_r+0x7e>
 80073da:	465b      	mov	r3, fp
 80073dc:	4622      	mov	r2, r4
 80073de:	4629      	mov	r1, r5
 80073e0:	4638      	mov	r0, r7
 80073e2:	f7ff ff6b 	bl	80072bc <__ssputs_r>
 80073e6:	3001      	adds	r0, #1
 80073e8:	f000 80a7 	beq.w	800753a <_svfiprintf_r+0x1c6>
 80073ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073ee:	445a      	add	r2, fp
 80073f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80073f2:	f89a 3000 	ldrb.w	r3, [sl]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	f000 809f 	beq.w	800753a <_svfiprintf_r+0x1c6>
 80073fc:	2300      	movs	r3, #0
 80073fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007402:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007406:	f10a 0a01 	add.w	sl, sl, #1
 800740a:	9304      	str	r3, [sp, #16]
 800740c:	9307      	str	r3, [sp, #28]
 800740e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007412:	931a      	str	r3, [sp, #104]	@ 0x68
 8007414:	4654      	mov	r4, sl
 8007416:	2205      	movs	r2, #5
 8007418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800741c:	484e      	ldr	r0, [pc, #312]	@ (8007558 <_svfiprintf_r+0x1e4>)
 800741e:	f7f8 fedf 	bl	80001e0 <memchr>
 8007422:	9a04      	ldr	r2, [sp, #16]
 8007424:	b9d8      	cbnz	r0, 800745e <_svfiprintf_r+0xea>
 8007426:	06d0      	lsls	r0, r2, #27
 8007428:	bf44      	itt	mi
 800742a:	2320      	movmi	r3, #32
 800742c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007430:	0711      	lsls	r1, r2, #28
 8007432:	bf44      	itt	mi
 8007434:	232b      	movmi	r3, #43	@ 0x2b
 8007436:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800743a:	f89a 3000 	ldrb.w	r3, [sl]
 800743e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007440:	d015      	beq.n	800746e <_svfiprintf_r+0xfa>
 8007442:	9a07      	ldr	r2, [sp, #28]
 8007444:	4654      	mov	r4, sl
 8007446:	2000      	movs	r0, #0
 8007448:	f04f 0c0a 	mov.w	ip, #10
 800744c:	4621      	mov	r1, r4
 800744e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007452:	3b30      	subs	r3, #48	@ 0x30
 8007454:	2b09      	cmp	r3, #9
 8007456:	d94b      	bls.n	80074f0 <_svfiprintf_r+0x17c>
 8007458:	b1b0      	cbz	r0, 8007488 <_svfiprintf_r+0x114>
 800745a:	9207      	str	r2, [sp, #28]
 800745c:	e014      	b.n	8007488 <_svfiprintf_r+0x114>
 800745e:	eba0 0308 	sub.w	r3, r0, r8
 8007462:	fa09 f303 	lsl.w	r3, r9, r3
 8007466:	4313      	orrs	r3, r2
 8007468:	9304      	str	r3, [sp, #16]
 800746a:	46a2      	mov	sl, r4
 800746c:	e7d2      	b.n	8007414 <_svfiprintf_r+0xa0>
 800746e:	9b03      	ldr	r3, [sp, #12]
 8007470:	1d19      	adds	r1, r3, #4
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	9103      	str	r1, [sp, #12]
 8007476:	2b00      	cmp	r3, #0
 8007478:	bfbb      	ittet	lt
 800747a:	425b      	neglt	r3, r3
 800747c:	f042 0202 	orrlt.w	r2, r2, #2
 8007480:	9307      	strge	r3, [sp, #28]
 8007482:	9307      	strlt	r3, [sp, #28]
 8007484:	bfb8      	it	lt
 8007486:	9204      	strlt	r2, [sp, #16]
 8007488:	7823      	ldrb	r3, [r4, #0]
 800748a:	2b2e      	cmp	r3, #46	@ 0x2e
 800748c:	d10a      	bne.n	80074a4 <_svfiprintf_r+0x130>
 800748e:	7863      	ldrb	r3, [r4, #1]
 8007490:	2b2a      	cmp	r3, #42	@ 0x2a
 8007492:	d132      	bne.n	80074fa <_svfiprintf_r+0x186>
 8007494:	9b03      	ldr	r3, [sp, #12]
 8007496:	1d1a      	adds	r2, r3, #4
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	9203      	str	r2, [sp, #12]
 800749c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80074a0:	3402      	adds	r4, #2
 80074a2:	9305      	str	r3, [sp, #20]
 80074a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007568 <_svfiprintf_r+0x1f4>
 80074a8:	7821      	ldrb	r1, [r4, #0]
 80074aa:	2203      	movs	r2, #3
 80074ac:	4650      	mov	r0, sl
 80074ae:	f7f8 fe97 	bl	80001e0 <memchr>
 80074b2:	b138      	cbz	r0, 80074c4 <_svfiprintf_r+0x150>
 80074b4:	9b04      	ldr	r3, [sp, #16]
 80074b6:	eba0 000a 	sub.w	r0, r0, sl
 80074ba:	2240      	movs	r2, #64	@ 0x40
 80074bc:	4082      	lsls	r2, r0
 80074be:	4313      	orrs	r3, r2
 80074c0:	3401      	adds	r4, #1
 80074c2:	9304      	str	r3, [sp, #16]
 80074c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074c8:	4824      	ldr	r0, [pc, #144]	@ (800755c <_svfiprintf_r+0x1e8>)
 80074ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074ce:	2206      	movs	r2, #6
 80074d0:	f7f8 fe86 	bl	80001e0 <memchr>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	d036      	beq.n	8007546 <_svfiprintf_r+0x1d2>
 80074d8:	4b21      	ldr	r3, [pc, #132]	@ (8007560 <_svfiprintf_r+0x1ec>)
 80074da:	bb1b      	cbnz	r3, 8007524 <_svfiprintf_r+0x1b0>
 80074dc:	9b03      	ldr	r3, [sp, #12]
 80074de:	3307      	adds	r3, #7
 80074e0:	f023 0307 	bic.w	r3, r3, #7
 80074e4:	3308      	adds	r3, #8
 80074e6:	9303      	str	r3, [sp, #12]
 80074e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074ea:	4433      	add	r3, r6
 80074ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80074ee:	e76a      	b.n	80073c6 <_svfiprintf_r+0x52>
 80074f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80074f4:	460c      	mov	r4, r1
 80074f6:	2001      	movs	r0, #1
 80074f8:	e7a8      	b.n	800744c <_svfiprintf_r+0xd8>
 80074fa:	2300      	movs	r3, #0
 80074fc:	3401      	adds	r4, #1
 80074fe:	9305      	str	r3, [sp, #20]
 8007500:	4619      	mov	r1, r3
 8007502:	f04f 0c0a 	mov.w	ip, #10
 8007506:	4620      	mov	r0, r4
 8007508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800750c:	3a30      	subs	r2, #48	@ 0x30
 800750e:	2a09      	cmp	r2, #9
 8007510:	d903      	bls.n	800751a <_svfiprintf_r+0x1a6>
 8007512:	2b00      	cmp	r3, #0
 8007514:	d0c6      	beq.n	80074a4 <_svfiprintf_r+0x130>
 8007516:	9105      	str	r1, [sp, #20]
 8007518:	e7c4      	b.n	80074a4 <_svfiprintf_r+0x130>
 800751a:	fb0c 2101 	mla	r1, ip, r1, r2
 800751e:	4604      	mov	r4, r0
 8007520:	2301      	movs	r3, #1
 8007522:	e7f0      	b.n	8007506 <_svfiprintf_r+0x192>
 8007524:	ab03      	add	r3, sp, #12
 8007526:	9300      	str	r3, [sp, #0]
 8007528:	462a      	mov	r2, r5
 800752a:	4b0e      	ldr	r3, [pc, #56]	@ (8007564 <_svfiprintf_r+0x1f0>)
 800752c:	a904      	add	r1, sp, #16
 800752e:	4638      	mov	r0, r7
 8007530:	f7fd fe62 	bl	80051f8 <_printf_float>
 8007534:	1c42      	adds	r2, r0, #1
 8007536:	4606      	mov	r6, r0
 8007538:	d1d6      	bne.n	80074e8 <_svfiprintf_r+0x174>
 800753a:	89ab      	ldrh	r3, [r5, #12]
 800753c:	065b      	lsls	r3, r3, #25
 800753e:	f53f af2d 	bmi.w	800739c <_svfiprintf_r+0x28>
 8007542:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007544:	e72c      	b.n	80073a0 <_svfiprintf_r+0x2c>
 8007546:	ab03      	add	r3, sp, #12
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	462a      	mov	r2, r5
 800754c:	4b05      	ldr	r3, [pc, #20]	@ (8007564 <_svfiprintf_r+0x1f0>)
 800754e:	a904      	add	r1, sp, #16
 8007550:	4638      	mov	r0, r7
 8007552:	f7fe f8e9 	bl	8005728 <_printf_i>
 8007556:	e7ed      	b.n	8007534 <_svfiprintf_r+0x1c0>
 8007558:	08008578 	.word	0x08008578
 800755c:	08008582 	.word	0x08008582
 8007560:	080051f9 	.word	0x080051f9
 8007564:	080072bd 	.word	0x080072bd
 8007568:	0800857e 	.word	0x0800857e

0800756c <__sflush_r>:
 800756c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007574:	0716      	lsls	r6, r2, #28
 8007576:	4605      	mov	r5, r0
 8007578:	460c      	mov	r4, r1
 800757a:	d454      	bmi.n	8007626 <__sflush_r+0xba>
 800757c:	684b      	ldr	r3, [r1, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	dc02      	bgt.n	8007588 <__sflush_r+0x1c>
 8007582:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007584:	2b00      	cmp	r3, #0
 8007586:	dd48      	ble.n	800761a <__sflush_r+0xae>
 8007588:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800758a:	2e00      	cmp	r6, #0
 800758c:	d045      	beq.n	800761a <__sflush_r+0xae>
 800758e:	2300      	movs	r3, #0
 8007590:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007594:	682f      	ldr	r7, [r5, #0]
 8007596:	6a21      	ldr	r1, [r4, #32]
 8007598:	602b      	str	r3, [r5, #0]
 800759a:	d030      	beq.n	80075fe <__sflush_r+0x92>
 800759c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800759e:	89a3      	ldrh	r3, [r4, #12]
 80075a0:	0759      	lsls	r1, r3, #29
 80075a2:	d505      	bpl.n	80075b0 <__sflush_r+0x44>
 80075a4:	6863      	ldr	r3, [r4, #4]
 80075a6:	1ad2      	subs	r2, r2, r3
 80075a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80075aa:	b10b      	cbz	r3, 80075b0 <__sflush_r+0x44>
 80075ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80075ae:	1ad2      	subs	r2, r2, r3
 80075b0:	2300      	movs	r3, #0
 80075b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075b4:	6a21      	ldr	r1, [r4, #32]
 80075b6:	4628      	mov	r0, r5
 80075b8:	47b0      	blx	r6
 80075ba:	1c43      	adds	r3, r0, #1
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	d106      	bne.n	80075ce <__sflush_r+0x62>
 80075c0:	6829      	ldr	r1, [r5, #0]
 80075c2:	291d      	cmp	r1, #29
 80075c4:	d82b      	bhi.n	800761e <__sflush_r+0xb2>
 80075c6:	4a2a      	ldr	r2, [pc, #168]	@ (8007670 <__sflush_r+0x104>)
 80075c8:	410a      	asrs	r2, r1
 80075ca:	07d6      	lsls	r6, r2, #31
 80075cc:	d427      	bmi.n	800761e <__sflush_r+0xb2>
 80075ce:	2200      	movs	r2, #0
 80075d0:	6062      	str	r2, [r4, #4]
 80075d2:	04d9      	lsls	r1, r3, #19
 80075d4:	6922      	ldr	r2, [r4, #16]
 80075d6:	6022      	str	r2, [r4, #0]
 80075d8:	d504      	bpl.n	80075e4 <__sflush_r+0x78>
 80075da:	1c42      	adds	r2, r0, #1
 80075dc:	d101      	bne.n	80075e2 <__sflush_r+0x76>
 80075de:	682b      	ldr	r3, [r5, #0]
 80075e0:	b903      	cbnz	r3, 80075e4 <__sflush_r+0x78>
 80075e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80075e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075e6:	602f      	str	r7, [r5, #0]
 80075e8:	b1b9      	cbz	r1, 800761a <__sflush_r+0xae>
 80075ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075ee:	4299      	cmp	r1, r3
 80075f0:	d002      	beq.n	80075f8 <__sflush_r+0x8c>
 80075f2:	4628      	mov	r0, r5
 80075f4:	f7ff f9e0 	bl	80069b8 <_free_r>
 80075f8:	2300      	movs	r3, #0
 80075fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80075fc:	e00d      	b.n	800761a <__sflush_r+0xae>
 80075fe:	2301      	movs	r3, #1
 8007600:	4628      	mov	r0, r5
 8007602:	47b0      	blx	r6
 8007604:	4602      	mov	r2, r0
 8007606:	1c50      	adds	r0, r2, #1
 8007608:	d1c9      	bne.n	800759e <__sflush_r+0x32>
 800760a:	682b      	ldr	r3, [r5, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d0c6      	beq.n	800759e <__sflush_r+0x32>
 8007610:	2b1d      	cmp	r3, #29
 8007612:	d001      	beq.n	8007618 <__sflush_r+0xac>
 8007614:	2b16      	cmp	r3, #22
 8007616:	d11e      	bne.n	8007656 <__sflush_r+0xea>
 8007618:	602f      	str	r7, [r5, #0]
 800761a:	2000      	movs	r0, #0
 800761c:	e022      	b.n	8007664 <__sflush_r+0xf8>
 800761e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007622:	b21b      	sxth	r3, r3
 8007624:	e01b      	b.n	800765e <__sflush_r+0xf2>
 8007626:	690f      	ldr	r7, [r1, #16]
 8007628:	2f00      	cmp	r7, #0
 800762a:	d0f6      	beq.n	800761a <__sflush_r+0xae>
 800762c:	0793      	lsls	r3, r2, #30
 800762e:	680e      	ldr	r6, [r1, #0]
 8007630:	bf08      	it	eq
 8007632:	694b      	ldreq	r3, [r1, #20]
 8007634:	600f      	str	r7, [r1, #0]
 8007636:	bf18      	it	ne
 8007638:	2300      	movne	r3, #0
 800763a:	eba6 0807 	sub.w	r8, r6, r7
 800763e:	608b      	str	r3, [r1, #8]
 8007640:	f1b8 0f00 	cmp.w	r8, #0
 8007644:	dde9      	ble.n	800761a <__sflush_r+0xae>
 8007646:	6a21      	ldr	r1, [r4, #32]
 8007648:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800764a:	4643      	mov	r3, r8
 800764c:	463a      	mov	r2, r7
 800764e:	4628      	mov	r0, r5
 8007650:	47b0      	blx	r6
 8007652:	2800      	cmp	r0, #0
 8007654:	dc08      	bgt.n	8007668 <__sflush_r+0xfc>
 8007656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800765a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800765e:	81a3      	strh	r3, [r4, #12]
 8007660:	f04f 30ff 	mov.w	r0, #4294967295
 8007664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007668:	4407      	add	r7, r0
 800766a:	eba8 0800 	sub.w	r8, r8, r0
 800766e:	e7e7      	b.n	8007640 <__sflush_r+0xd4>
 8007670:	dfbffffe 	.word	0xdfbffffe

08007674 <_fflush_r>:
 8007674:	b538      	push	{r3, r4, r5, lr}
 8007676:	690b      	ldr	r3, [r1, #16]
 8007678:	4605      	mov	r5, r0
 800767a:	460c      	mov	r4, r1
 800767c:	b913      	cbnz	r3, 8007684 <_fflush_r+0x10>
 800767e:	2500      	movs	r5, #0
 8007680:	4628      	mov	r0, r5
 8007682:	bd38      	pop	{r3, r4, r5, pc}
 8007684:	b118      	cbz	r0, 800768e <_fflush_r+0x1a>
 8007686:	6a03      	ldr	r3, [r0, #32]
 8007688:	b90b      	cbnz	r3, 800768e <_fflush_r+0x1a>
 800768a:	f7fe f9f9 	bl	8005a80 <__sinit>
 800768e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d0f3      	beq.n	800767e <_fflush_r+0xa>
 8007696:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007698:	07d0      	lsls	r0, r2, #31
 800769a:	d404      	bmi.n	80076a6 <_fflush_r+0x32>
 800769c:	0599      	lsls	r1, r3, #22
 800769e:	d402      	bmi.n	80076a6 <_fflush_r+0x32>
 80076a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076a2:	f7fe fb38 	bl	8005d16 <__retarget_lock_acquire_recursive>
 80076a6:	4628      	mov	r0, r5
 80076a8:	4621      	mov	r1, r4
 80076aa:	f7ff ff5f 	bl	800756c <__sflush_r>
 80076ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076b0:	07da      	lsls	r2, r3, #31
 80076b2:	4605      	mov	r5, r0
 80076b4:	d4e4      	bmi.n	8007680 <_fflush_r+0xc>
 80076b6:	89a3      	ldrh	r3, [r4, #12]
 80076b8:	059b      	lsls	r3, r3, #22
 80076ba:	d4e1      	bmi.n	8007680 <_fflush_r+0xc>
 80076bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076be:	f7fe fb2b 	bl	8005d18 <__retarget_lock_release_recursive>
 80076c2:	e7dd      	b.n	8007680 <_fflush_r+0xc>

080076c4 <memmove>:
 80076c4:	4288      	cmp	r0, r1
 80076c6:	b510      	push	{r4, lr}
 80076c8:	eb01 0402 	add.w	r4, r1, r2
 80076cc:	d902      	bls.n	80076d4 <memmove+0x10>
 80076ce:	4284      	cmp	r4, r0
 80076d0:	4623      	mov	r3, r4
 80076d2:	d807      	bhi.n	80076e4 <memmove+0x20>
 80076d4:	1e43      	subs	r3, r0, #1
 80076d6:	42a1      	cmp	r1, r4
 80076d8:	d008      	beq.n	80076ec <memmove+0x28>
 80076da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076e2:	e7f8      	b.n	80076d6 <memmove+0x12>
 80076e4:	4402      	add	r2, r0
 80076e6:	4601      	mov	r1, r0
 80076e8:	428a      	cmp	r2, r1
 80076ea:	d100      	bne.n	80076ee <memmove+0x2a>
 80076ec:	bd10      	pop	{r4, pc}
 80076ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076f6:	e7f7      	b.n	80076e8 <memmove+0x24>

080076f8 <_sbrk_r>:
 80076f8:	b538      	push	{r3, r4, r5, lr}
 80076fa:	4d06      	ldr	r5, [pc, #24]	@ (8007714 <_sbrk_r+0x1c>)
 80076fc:	2300      	movs	r3, #0
 80076fe:	4604      	mov	r4, r0
 8007700:	4608      	mov	r0, r1
 8007702:	602b      	str	r3, [r5, #0]
 8007704:	f7fa fc92 	bl	800202c <_sbrk>
 8007708:	1c43      	adds	r3, r0, #1
 800770a:	d102      	bne.n	8007712 <_sbrk_r+0x1a>
 800770c:	682b      	ldr	r3, [r5, #0]
 800770e:	b103      	cbz	r3, 8007712 <_sbrk_r+0x1a>
 8007710:	6023      	str	r3, [r4, #0]
 8007712:	bd38      	pop	{r3, r4, r5, pc}
 8007714:	20000480 	.word	0x20000480

08007718 <memcpy>:
 8007718:	440a      	add	r2, r1
 800771a:	4291      	cmp	r1, r2
 800771c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007720:	d100      	bne.n	8007724 <memcpy+0xc>
 8007722:	4770      	bx	lr
 8007724:	b510      	push	{r4, lr}
 8007726:	f811 4b01 	ldrb.w	r4, [r1], #1
 800772a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800772e:	4291      	cmp	r1, r2
 8007730:	d1f9      	bne.n	8007726 <memcpy+0xe>
 8007732:	bd10      	pop	{r4, pc}

08007734 <__assert_func>:
 8007734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007736:	4614      	mov	r4, r2
 8007738:	461a      	mov	r2, r3
 800773a:	4b09      	ldr	r3, [pc, #36]	@ (8007760 <__assert_func+0x2c>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4605      	mov	r5, r0
 8007740:	68d8      	ldr	r0, [r3, #12]
 8007742:	b954      	cbnz	r4, 800775a <__assert_func+0x26>
 8007744:	4b07      	ldr	r3, [pc, #28]	@ (8007764 <__assert_func+0x30>)
 8007746:	461c      	mov	r4, r3
 8007748:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800774c:	9100      	str	r1, [sp, #0]
 800774e:	462b      	mov	r3, r5
 8007750:	4905      	ldr	r1, [pc, #20]	@ (8007768 <__assert_func+0x34>)
 8007752:	f000 f86f 	bl	8007834 <fiprintf>
 8007756:	f000 f87f 	bl	8007858 <abort>
 800775a:	4b04      	ldr	r3, [pc, #16]	@ (800776c <__assert_func+0x38>)
 800775c:	e7f4      	b.n	8007748 <__assert_func+0x14>
 800775e:	bf00      	nop
 8007760:	20000018 	.word	0x20000018
 8007764:	080085ce 	.word	0x080085ce
 8007768:	080085a0 	.word	0x080085a0
 800776c:	08008593 	.word	0x08008593

08007770 <_calloc_r>:
 8007770:	b570      	push	{r4, r5, r6, lr}
 8007772:	fba1 5402 	umull	r5, r4, r1, r2
 8007776:	b93c      	cbnz	r4, 8007788 <_calloc_r+0x18>
 8007778:	4629      	mov	r1, r5
 800777a:	f7ff f991 	bl	8006aa0 <_malloc_r>
 800777e:	4606      	mov	r6, r0
 8007780:	b928      	cbnz	r0, 800778e <_calloc_r+0x1e>
 8007782:	2600      	movs	r6, #0
 8007784:	4630      	mov	r0, r6
 8007786:	bd70      	pop	{r4, r5, r6, pc}
 8007788:	220c      	movs	r2, #12
 800778a:	6002      	str	r2, [r0, #0]
 800778c:	e7f9      	b.n	8007782 <_calloc_r+0x12>
 800778e:	462a      	mov	r2, r5
 8007790:	4621      	mov	r1, r4
 8007792:	f7fe fa42 	bl	8005c1a <memset>
 8007796:	e7f5      	b.n	8007784 <_calloc_r+0x14>

08007798 <__ascii_mbtowc>:
 8007798:	b082      	sub	sp, #8
 800779a:	b901      	cbnz	r1, 800779e <__ascii_mbtowc+0x6>
 800779c:	a901      	add	r1, sp, #4
 800779e:	b142      	cbz	r2, 80077b2 <__ascii_mbtowc+0x1a>
 80077a0:	b14b      	cbz	r3, 80077b6 <__ascii_mbtowc+0x1e>
 80077a2:	7813      	ldrb	r3, [r2, #0]
 80077a4:	600b      	str	r3, [r1, #0]
 80077a6:	7812      	ldrb	r2, [r2, #0]
 80077a8:	1e10      	subs	r0, r2, #0
 80077aa:	bf18      	it	ne
 80077ac:	2001      	movne	r0, #1
 80077ae:	b002      	add	sp, #8
 80077b0:	4770      	bx	lr
 80077b2:	4610      	mov	r0, r2
 80077b4:	e7fb      	b.n	80077ae <__ascii_mbtowc+0x16>
 80077b6:	f06f 0001 	mvn.w	r0, #1
 80077ba:	e7f8      	b.n	80077ae <__ascii_mbtowc+0x16>

080077bc <_realloc_r>:
 80077bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077c0:	4680      	mov	r8, r0
 80077c2:	4615      	mov	r5, r2
 80077c4:	460c      	mov	r4, r1
 80077c6:	b921      	cbnz	r1, 80077d2 <_realloc_r+0x16>
 80077c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077cc:	4611      	mov	r1, r2
 80077ce:	f7ff b967 	b.w	8006aa0 <_malloc_r>
 80077d2:	b92a      	cbnz	r2, 80077e0 <_realloc_r+0x24>
 80077d4:	f7ff f8f0 	bl	80069b8 <_free_r>
 80077d8:	2400      	movs	r4, #0
 80077da:	4620      	mov	r0, r4
 80077dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077e0:	f000 f841 	bl	8007866 <_malloc_usable_size_r>
 80077e4:	4285      	cmp	r5, r0
 80077e6:	4606      	mov	r6, r0
 80077e8:	d802      	bhi.n	80077f0 <_realloc_r+0x34>
 80077ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80077ee:	d8f4      	bhi.n	80077da <_realloc_r+0x1e>
 80077f0:	4629      	mov	r1, r5
 80077f2:	4640      	mov	r0, r8
 80077f4:	f7ff f954 	bl	8006aa0 <_malloc_r>
 80077f8:	4607      	mov	r7, r0
 80077fa:	2800      	cmp	r0, #0
 80077fc:	d0ec      	beq.n	80077d8 <_realloc_r+0x1c>
 80077fe:	42b5      	cmp	r5, r6
 8007800:	462a      	mov	r2, r5
 8007802:	4621      	mov	r1, r4
 8007804:	bf28      	it	cs
 8007806:	4632      	movcs	r2, r6
 8007808:	f7ff ff86 	bl	8007718 <memcpy>
 800780c:	4621      	mov	r1, r4
 800780e:	4640      	mov	r0, r8
 8007810:	f7ff f8d2 	bl	80069b8 <_free_r>
 8007814:	463c      	mov	r4, r7
 8007816:	e7e0      	b.n	80077da <_realloc_r+0x1e>

08007818 <__ascii_wctomb>:
 8007818:	4603      	mov	r3, r0
 800781a:	4608      	mov	r0, r1
 800781c:	b141      	cbz	r1, 8007830 <__ascii_wctomb+0x18>
 800781e:	2aff      	cmp	r2, #255	@ 0xff
 8007820:	d904      	bls.n	800782c <__ascii_wctomb+0x14>
 8007822:	228a      	movs	r2, #138	@ 0x8a
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	f04f 30ff 	mov.w	r0, #4294967295
 800782a:	4770      	bx	lr
 800782c:	700a      	strb	r2, [r1, #0]
 800782e:	2001      	movs	r0, #1
 8007830:	4770      	bx	lr
	...

08007834 <fiprintf>:
 8007834:	b40e      	push	{r1, r2, r3}
 8007836:	b503      	push	{r0, r1, lr}
 8007838:	4601      	mov	r1, r0
 800783a:	ab03      	add	r3, sp, #12
 800783c:	4805      	ldr	r0, [pc, #20]	@ (8007854 <fiprintf+0x20>)
 800783e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007842:	6800      	ldr	r0, [r0, #0]
 8007844:	9301      	str	r3, [sp, #4]
 8007846:	f000 f83f 	bl	80078c8 <_vfiprintf_r>
 800784a:	b002      	add	sp, #8
 800784c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007850:	b003      	add	sp, #12
 8007852:	4770      	bx	lr
 8007854:	20000018 	.word	0x20000018

08007858 <abort>:
 8007858:	b508      	push	{r3, lr}
 800785a:	2006      	movs	r0, #6
 800785c:	f000 fa08 	bl	8007c70 <raise>
 8007860:	2001      	movs	r0, #1
 8007862:	f7fa fb6a 	bl	8001f3a <_exit>

08007866 <_malloc_usable_size_r>:
 8007866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800786a:	1f18      	subs	r0, r3, #4
 800786c:	2b00      	cmp	r3, #0
 800786e:	bfbc      	itt	lt
 8007870:	580b      	ldrlt	r3, [r1, r0]
 8007872:	18c0      	addlt	r0, r0, r3
 8007874:	4770      	bx	lr

08007876 <__sfputc_r>:
 8007876:	6893      	ldr	r3, [r2, #8]
 8007878:	3b01      	subs	r3, #1
 800787a:	2b00      	cmp	r3, #0
 800787c:	b410      	push	{r4}
 800787e:	6093      	str	r3, [r2, #8]
 8007880:	da08      	bge.n	8007894 <__sfputc_r+0x1e>
 8007882:	6994      	ldr	r4, [r2, #24]
 8007884:	42a3      	cmp	r3, r4
 8007886:	db01      	blt.n	800788c <__sfputc_r+0x16>
 8007888:	290a      	cmp	r1, #10
 800788a:	d103      	bne.n	8007894 <__sfputc_r+0x1e>
 800788c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007890:	f000 b932 	b.w	8007af8 <__swbuf_r>
 8007894:	6813      	ldr	r3, [r2, #0]
 8007896:	1c58      	adds	r0, r3, #1
 8007898:	6010      	str	r0, [r2, #0]
 800789a:	7019      	strb	r1, [r3, #0]
 800789c:	4608      	mov	r0, r1
 800789e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <__sfputs_r>:
 80078a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a6:	4606      	mov	r6, r0
 80078a8:	460f      	mov	r7, r1
 80078aa:	4614      	mov	r4, r2
 80078ac:	18d5      	adds	r5, r2, r3
 80078ae:	42ac      	cmp	r4, r5
 80078b0:	d101      	bne.n	80078b6 <__sfputs_r+0x12>
 80078b2:	2000      	movs	r0, #0
 80078b4:	e007      	b.n	80078c6 <__sfputs_r+0x22>
 80078b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078ba:	463a      	mov	r2, r7
 80078bc:	4630      	mov	r0, r6
 80078be:	f7ff ffda 	bl	8007876 <__sfputc_r>
 80078c2:	1c43      	adds	r3, r0, #1
 80078c4:	d1f3      	bne.n	80078ae <__sfputs_r+0xa>
 80078c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080078c8 <_vfiprintf_r>:
 80078c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078cc:	460d      	mov	r5, r1
 80078ce:	b09d      	sub	sp, #116	@ 0x74
 80078d0:	4614      	mov	r4, r2
 80078d2:	4698      	mov	r8, r3
 80078d4:	4606      	mov	r6, r0
 80078d6:	b118      	cbz	r0, 80078e0 <_vfiprintf_r+0x18>
 80078d8:	6a03      	ldr	r3, [r0, #32]
 80078da:	b90b      	cbnz	r3, 80078e0 <_vfiprintf_r+0x18>
 80078dc:	f7fe f8d0 	bl	8005a80 <__sinit>
 80078e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078e2:	07d9      	lsls	r1, r3, #31
 80078e4:	d405      	bmi.n	80078f2 <_vfiprintf_r+0x2a>
 80078e6:	89ab      	ldrh	r3, [r5, #12]
 80078e8:	059a      	lsls	r2, r3, #22
 80078ea:	d402      	bmi.n	80078f2 <_vfiprintf_r+0x2a>
 80078ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078ee:	f7fe fa12 	bl	8005d16 <__retarget_lock_acquire_recursive>
 80078f2:	89ab      	ldrh	r3, [r5, #12]
 80078f4:	071b      	lsls	r3, r3, #28
 80078f6:	d501      	bpl.n	80078fc <_vfiprintf_r+0x34>
 80078f8:	692b      	ldr	r3, [r5, #16]
 80078fa:	b99b      	cbnz	r3, 8007924 <_vfiprintf_r+0x5c>
 80078fc:	4629      	mov	r1, r5
 80078fe:	4630      	mov	r0, r6
 8007900:	f000 f938 	bl	8007b74 <__swsetup_r>
 8007904:	b170      	cbz	r0, 8007924 <_vfiprintf_r+0x5c>
 8007906:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007908:	07dc      	lsls	r4, r3, #31
 800790a:	d504      	bpl.n	8007916 <_vfiprintf_r+0x4e>
 800790c:	f04f 30ff 	mov.w	r0, #4294967295
 8007910:	b01d      	add	sp, #116	@ 0x74
 8007912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007916:	89ab      	ldrh	r3, [r5, #12]
 8007918:	0598      	lsls	r0, r3, #22
 800791a:	d4f7      	bmi.n	800790c <_vfiprintf_r+0x44>
 800791c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800791e:	f7fe f9fb 	bl	8005d18 <__retarget_lock_release_recursive>
 8007922:	e7f3      	b.n	800790c <_vfiprintf_r+0x44>
 8007924:	2300      	movs	r3, #0
 8007926:	9309      	str	r3, [sp, #36]	@ 0x24
 8007928:	2320      	movs	r3, #32
 800792a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800792e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007932:	2330      	movs	r3, #48	@ 0x30
 8007934:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007ae4 <_vfiprintf_r+0x21c>
 8007938:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800793c:	f04f 0901 	mov.w	r9, #1
 8007940:	4623      	mov	r3, r4
 8007942:	469a      	mov	sl, r3
 8007944:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007948:	b10a      	cbz	r2, 800794e <_vfiprintf_r+0x86>
 800794a:	2a25      	cmp	r2, #37	@ 0x25
 800794c:	d1f9      	bne.n	8007942 <_vfiprintf_r+0x7a>
 800794e:	ebba 0b04 	subs.w	fp, sl, r4
 8007952:	d00b      	beq.n	800796c <_vfiprintf_r+0xa4>
 8007954:	465b      	mov	r3, fp
 8007956:	4622      	mov	r2, r4
 8007958:	4629      	mov	r1, r5
 800795a:	4630      	mov	r0, r6
 800795c:	f7ff ffa2 	bl	80078a4 <__sfputs_r>
 8007960:	3001      	adds	r0, #1
 8007962:	f000 80a7 	beq.w	8007ab4 <_vfiprintf_r+0x1ec>
 8007966:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007968:	445a      	add	r2, fp
 800796a:	9209      	str	r2, [sp, #36]	@ 0x24
 800796c:	f89a 3000 	ldrb.w	r3, [sl]
 8007970:	2b00      	cmp	r3, #0
 8007972:	f000 809f 	beq.w	8007ab4 <_vfiprintf_r+0x1ec>
 8007976:	2300      	movs	r3, #0
 8007978:	f04f 32ff 	mov.w	r2, #4294967295
 800797c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007980:	f10a 0a01 	add.w	sl, sl, #1
 8007984:	9304      	str	r3, [sp, #16]
 8007986:	9307      	str	r3, [sp, #28]
 8007988:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800798c:	931a      	str	r3, [sp, #104]	@ 0x68
 800798e:	4654      	mov	r4, sl
 8007990:	2205      	movs	r2, #5
 8007992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007996:	4853      	ldr	r0, [pc, #332]	@ (8007ae4 <_vfiprintf_r+0x21c>)
 8007998:	f7f8 fc22 	bl	80001e0 <memchr>
 800799c:	9a04      	ldr	r2, [sp, #16]
 800799e:	b9d8      	cbnz	r0, 80079d8 <_vfiprintf_r+0x110>
 80079a0:	06d1      	lsls	r1, r2, #27
 80079a2:	bf44      	itt	mi
 80079a4:	2320      	movmi	r3, #32
 80079a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079aa:	0713      	lsls	r3, r2, #28
 80079ac:	bf44      	itt	mi
 80079ae:	232b      	movmi	r3, #43	@ 0x2b
 80079b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80079b4:	f89a 3000 	ldrb.w	r3, [sl]
 80079b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80079ba:	d015      	beq.n	80079e8 <_vfiprintf_r+0x120>
 80079bc:	9a07      	ldr	r2, [sp, #28]
 80079be:	4654      	mov	r4, sl
 80079c0:	2000      	movs	r0, #0
 80079c2:	f04f 0c0a 	mov.w	ip, #10
 80079c6:	4621      	mov	r1, r4
 80079c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079cc:	3b30      	subs	r3, #48	@ 0x30
 80079ce:	2b09      	cmp	r3, #9
 80079d0:	d94b      	bls.n	8007a6a <_vfiprintf_r+0x1a2>
 80079d2:	b1b0      	cbz	r0, 8007a02 <_vfiprintf_r+0x13a>
 80079d4:	9207      	str	r2, [sp, #28]
 80079d6:	e014      	b.n	8007a02 <_vfiprintf_r+0x13a>
 80079d8:	eba0 0308 	sub.w	r3, r0, r8
 80079dc:	fa09 f303 	lsl.w	r3, r9, r3
 80079e0:	4313      	orrs	r3, r2
 80079e2:	9304      	str	r3, [sp, #16]
 80079e4:	46a2      	mov	sl, r4
 80079e6:	e7d2      	b.n	800798e <_vfiprintf_r+0xc6>
 80079e8:	9b03      	ldr	r3, [sp, #12]
 80079ea:	1d19      	adds	r1, r3, #4
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	9103      	str	r1, [sp, #12]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	bfbb      	ittet	lt
 80079f4:	425b      	neglt	r3, r3
 80079f6:	f042 0202 	orrlt.w	r2, r2, #2
 80079fa:	9307      	strge	r3, [sp, #28]
 80079fc:	9307      	strlt	r3, [sp, #28]
 80079fe:	bfb8      	it	lt
 8007a00:	9204      	strlt	r2, [sp, #16]
 8007a02:	7823      	ldrb	r3, [r4, #0]
 8007a04:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a06:	d10a      	bne.n	8007a1e <_vfiprintf_r+0x156>
 8007a08:	7863      	ldrb	r3, [r4, #1]
 8007a0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a0c:	d132      	bne.n	8007a74 <_vfiprintf_r+0x1ac>
 8007a0e:	9b03      	ldr	r3, [sp, #12]
 8007a10:	1d1a      	adds	r2, r3, #4
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	9203      	str	r2, [sp, #12]
 8007a16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007a1a:	3402      	adds	r4, #2
 8007a1c:	9305      	str	r3, [sp, #20]
 8007a1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007af4 <_vfiprintf_r+0x22c>
 8007a22:	7821      	ldrb	r1, [r4, #0]
 8007a24:	2203      	movs	r2, #3
 8007a26:	4650      	mov	r0, sl
 8007a28:	f7f8 fbda 	bl	80001e0 <memchr>
 8007a2c:	b138      	cbz	r0, 8007a3e <_vfiprintf_r+0x176>
 8007a2e:	9b04      	ldr	r3, [sp, #16]
 8007a30:	eba0 000a 	sub.w	r0, r0, sl
 8007a34:	2240      	movs	r2, #64	@ 0x40
 8007a36:	4082      	lsls	r2, r0
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	3401      	adds	r4, #1
 8007a3c:	9304      	str	r3, [sp, #16]
 8007a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a42:	4829      	ldr	r0, [pc, #164]	@ (8007ae8 <_vfiprintf_r+0x220>)
 8007a44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a48:	2206      	movs	r2, #6
 8007a4a:	f7f8 fbc9 	bl	80001e0 <memchr>
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	d03f      	beq.n	8007ad2 <_vfiprintf_r+0x20a>
 8007a52:	4b26      	ldr	r3, [pc, #152]	@ (8007aec <_vfiprintf_r+0x224>)
 8007a54:	bb1b      	cbnz	r3, 8007a9e <_vfiprintf_r+0x1d6>
 8007a56:	9b03      	ldr	r3, [sp, #12]
 8007a58:	3307      	adds	r3, #7
 8007a5a:	f023 0307 	bic.w	r3, r3, #7
 8007a5e:	3308      	adds	r3, #8
 8007a60:	9303      	str	r3, [sp, #12]
 8007a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a64:	443b      	add	r3, r7
 8007a66:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a68:	e76a      	b.n	8007940 <_vfiprintf_r+0x78>
 8007a6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a6e:	460c      	mov	r4, r1
 8007a70:	2001      	movs	r0, #1
 8007a72:	e7a8      	b.n	80079c6 <_vfiprintf_r+0xfe>
 8007a74:	2300      	movs	r3, #0
 8007a76:	3401      	adds	r4, #1
 8007a78:	9305      	str	r3, [sp, #20]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	f04f 0c0a 	mov.w	ip, #10
 8007a80:	4620      	mov	r0, r4
 8007a82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a86:	3a30      	subs	r2, #48	@ 0x30
 8007a88:	2a09      	cmp	r2, #9
 8007a8a:	d903      	bls.n	8007a94 <_vfiprintf_r+0x1cc>
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d0c6      	beq.n	8007a1e <_vfiprintf_r+0x156>
 8007a90:	9105      	str	r1, [sp, #20]
 8007a92:	e7c4      	b.n	8007a1e <_vfiprintf_r+0x156>
 8007a94:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a98:	4604      	mov	r4, r0
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e7f0      	b.n	8007a80 <_vfiprintf_r+0x1b8>
 8007a9e:	ab03      	add	r3, sp, #12
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	462a      	mov	r2, r5
 8007aa4:	4b12      	ldr	r3, [pc, #72]	@ (8007af0 <_vfiprintf_r+0x228>)
 8007aa6:	a904      	add	r1, sp, #16
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	f7fd fba5 	bl	80051f8 <_printf_float>
 8007aae:	4607      	mov	r7, r0
 8007ab0:	1c78      	adds	r0, r7, #1
 8007ab2:	d1d6      	bne.n	8007a62 <_vfiprintf_r+0x19a>
 8007ab4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ab6:	07d9      	lsls	r1, r3, #31
 8007ab8:	d405      	bmi.n	8007ac6 <_vfiprintf_r+0x1fe>
 8007aba:	89ab      	ldrh	r3, [r5, #12]
 8007abc:	059a      	lsls	r2, r3, #22
 8007abe:	d402      	bmi.n	8007ac6 <_vfiprintf_r+0x1fe>
 8007ac0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ac2:	f7fe f929 	bl	8005d18 <__retarget_lock_release_recursive>
 8007ac6:	89ab      	ldrh	r3, [r5, #12]
 8007ac8:	065b      	lsls	r3, r3, #25
 8007aca:	f53f af1f 	bmi.w	800790c <_vfiprintf_r+0x44>
 8007ace:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ad0:	e71e      	b.n	8007910 <_vfiprintf_r+0x48>
 8007ad2:	ab03      	add	r3, sp, #12
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	462a      	mov	r2, r5
 8007ad8:	4b05      	ldr	r3, [pc, #20]	@ (8007af0 <_vfiprintf_r+0x228>)
 8007ada:	a904      	add	r1, sp, #16
 8007adc:	4630      	mov	r0, r6
 8007ade:	f7fd fe23 	bl	8005728 <_printf_i>
 8007ae2:	e7e4      	b.n	8007aae <_vfiprintf_r+0x1e6>
 8007ae4:	08008578 	.word	0x08008578
 8007ae8:	08008582 	.word	0x08008582
 8007aec:	080051f9 	.word	0x080051f9
 8007af0:	080078a5 	.word	0x080078a5
 8007af4:	0800857e 	.word	0x0800857e

08007af8 <__swbuf_r>:
 8007af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afa:	460e      	mov	r6, r1
 8007afc:	4614      	mov	r4, r2
 8007afe:	4605      	mov	r5, r0
 8007b00:	b118      	cbz	r0, 8007b0a <__swbuf_r+0x12>
 8007b02:	6a03      	ldr	r3, [r0, #32]
 8007b04:	b90b      	cbnz	r3, 8007b0a <__swbuf_r+0x12>
 8007b06:	f7fd ffbb 	bl	8005a80 <__sinit>
 8007b0a:	69a3      	ldr	r3, [r4, #24]
 8007b0c:	60a3      	str	r3, [r4, #8]
 8007b0e:	89a3      	ldrh	r3, [r4, #12]
 8007b10:	071a      	lsls	r2, r3, #28
 8007b12:	d501      	bpl.n	8007b18 <__swbuf_r+0x20>
 8007b14:	6923      	ldr	r3, [r4, #16]
 8007b16:	b943      	cbnz	r3, 8007b2a <__swbuf_r+0x32>
 8007b18:	4621      	mov	r1, r4
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	f000 f82a 	bl	8007b74 <__swsetup_r>
 8007b20:	b118      	cbz	r0, 8007b2a <__swbuf_r+0x32>
 8007b22:	f04f 37ff 	mov.w	r7, #4294967295
 8007b26:	4638      	mov	r0, r7
 8007b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	6922      	ldr	r2, [r4, #16]
 8007b2e:	1a98      	subs	r0, r3, r2
 8007b30:	6963      	ldr	r3, [r4, #20]
 8007b32:	b2f6      	uxtb	r6, r6
 8007b34:	4283      	cmp	r3, r0
 8007b36:	4637      	mov	r7, r6
 8007b38:	dc05      	bgt.n	8007b46 <__swbuf_r+0x4e>
 8007b3a:	4621      	mov	r1, r4
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	f7ff fd99 	bl	8007674 <_fflush_r>
 8007b42:	2800      	cmp	r0, #0
 8007b44:	d1ed      	bne.n	8007b22 <__swbuf_r+0x2a>
 8007b46:	68a3      	ldr	r3, [r4, #8]
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	60a3      	str	r3, [r4, #8]
 8007b4c:	6823      	ldr	r3, [r4, #0]
 8007b4e:	1c5a      	adds	r2, r3, #1
 8007b50:	6022      	str	r2, [r4, #0]
 8007b52:	701e      	strb	r6, [r3, #0]
 8007b54:	6962      	ldr	r2, [r4, #20]
 8007b56:	1c43      	adds	r3, r0, #1
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d004      	beq.n	8007b66 <__swbuf_r+0x6e>
 8007b5c:	89a3      	ldrh	r3, [r4, #12]
 8007b5e:	07db      	lsls	r3, r3, #31
 8007b60:	d5e1      	bpl.n	8007b26 <__swbuf_r+0x2e>
 8007b62:	2e0a      	cmp	r6, #10
 8007b64:	d1df      	bne.n	8007b26 <__swbuf_r+0x2e>
 8007b66:	4621      	mov	r1, r4
 8007b68:	4628      	mov	r0, r5
 8007b6a:	f7ff fd83 	bl	8007674 <_fflush_r>
 8007b6e:	2800      	cmp	r0, #0
 8007b70:	d0d9      	beq.n	8007b26 <__swbuf_r+0x2e>
 8007b72:	e7d6      	b.n	8007b22 <__swbuf_r+0x2a>

08007b74 <__swsetup_r>:
 8007b74:	b538      	push	{r3, r4, r5, lr}
 8007b76:	4b29      	ldr	r3, [pc, #164]	@ (8007c1c <__swsetup_r+0xa8>)
 8007b78:	4605      	mov	r5, r0
 8007b7a:	6818      	ldr	r0, [r3, #0]
 8007b7c:	460c      	mov	r4, r1
 8007b7e:	b118      	cbz	r0, 8007b88 <__swsetup_r+0x14>
 8007b80:	6a03      	ldr	r3, [r0, #32]
 8007b82:	b90b      	cbnz	r3, 8007b88 <__swsetup_r+0x14>
 8007b84:	f7fd ff7c 	bl	8005a80 <__sinit>
 8007b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b8c:	0719      	lsls	r1, r3, #28
 8007b8e:	d422      	bmi.n	8007bd6 <__swsetup_r+0x62>
 8007b90:	06da      	lsls	r2, r3, #27
 8007b92:	d407      	bmi.n	8007ba4 <__swsetup_r+0x30>
 8007b94:	2209      	movs	r2, #9
 8007b96:	602a      	str	r2, [r5, #0]
 8007b98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b9c:	81a3      	strh	r3, [r4, #12]
 8007b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba2:	e033      	b.n	8007c0c <__swsetup_r+0x98>
 8007ba4:	0758      	lsls	r0, r3, #29
 8007ba6:	d512      	bpl.n	8007bce <__swsetup_r+0x5a>
 8007ba8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007baa:	b141      	cbz	r1, 8007bbe <__swsetup_r+0x4a>
 8007bac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bb0:	4299      	cmp	r1, r3
 8007bb2:	d002      	beq.n	8007bba <__swsetup_r+0x46>
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	f7fe feff 	bl	80069b8 <_free_r>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bbe:	89a3      	ldrh	r3, [r4, #12]
 8007bc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007bc4:	81a3      	strh	r3, [r4, #12]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	6063      	str	r3, [r4, #4]
 8007bca:	6923      	ldr	r3, [r4, #16]
 8007bcc:	6023      	str	r3, [r4, #0]
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	f043 0308 	orr.w	r3, r3, #8
 8007bd4:	81a3      	strh	r3, [r4, #12]
 8007bd6:	6923      	ldr	r3, [r4, #16]
 8007bd8:	b94b      	cbnz	r3, 8007bee <__swsetup_r+0x7a>
 8007bda:	89a3      	ldrh	r3, [r4, #12]
 8007bdc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007be0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007be4:	d003      	beq.n	8007bee <__swsetup_r+0x7a>
 8007be6:	4621      	mov	r1, r4
 8007be8:	4628      	mov	r0, r5
 8007bea:	f000 f883 	bl	8007cf4 <__smakebuf_r>
 8007bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bf2:	f013 0201 	ands.w	r2, r3, #1
 8007bf6:	d00a      	beq.n	8007c0e <__swsetup_r+0x9a>
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	60a2      	str	r2, [r4, #8]
 8007bfc:	6962      	ldr	r2, [r4, #20]
 8007bfe:	4252      	negs	r2, r2
 8007c00:	61a2      	str	r2, [r4, #24]
 8007c02:	6922      	ldr	r2, [r4, #16]
 8007c04:	b942      	cbnz	r2, 8007c18 <__swsetup_r+0xa4>
 8007c06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c0a:	d1c5      	bne.n	8007b98 <__swsetup_r+0x24>
 8007c0c:	bd38      	pop	{r3, r4, r5, pc}
 8007c0e:	0799      	lsls	r1, r3, #30
 8007c10:	bf58      	it	pl
 8007c12:	6962      	ldrpl	r2, [r4, #20]
 8007c14:	60a2      	str	r2, [r4, #8]
 8007c16:	e7f4      	b.n	8007c02 <__swsetup_r+0x8e>
 8007c18:	2000      	movs	r0, #0
 8007c1a:	e7f7      	b.n	8007c0c <__swsetup_r+0x98>
 8007c1c:	20000018 	.word	0x20000018

08007c20 <_raise_r>:
 8007c20:	291f      	cmp	r1, #31
 8007c22:	b538      	push	{r3, r4, r5, lr}
 8007c24:	4605      	mov	r5, r0
 8007c26:	460c      	mov	r4, r1
 8007c28:	d904      	bls.n	8007c34 <_raise_r+0x14>
 8007c2a:	2316      	movs	r3, #22
 8007c2c:	6003      	str	r3, [r0, #0]
 8007c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c32:	bd38      	pop	{r3, r4, r5, pc}
 8007c34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007c36:	b112      	cbz	r2, 8007c3e <_raise_r+0x1e>
 8007c38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c3c:	b94b      	cbnz	r3, 8007c52 <_raise_r+0x32>
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f000 f830 	bl	8007ca4 <_getpid_r>
 8007c44:	4622      	mov	r2, r4
 8007c46:	4601      	mov	r1, r0
 8007c48:	4628      	mov	r0, r5
 8007c4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c4e:	f000 b817 	b.w	8007c80 <_kill_r>
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d00a      	beq.n	8007c6c <_raise_r+0x4c>
 8007c56:	1c59      	adds	r1, r3, #1
 8007c58:	d103      	bne.n	8007c62 <_raise_r+0x42>
 8007c5a:	2316      	movs	r3, #22
 8007c5c:	6003      	str	r3, [r0, #0]
 8007c5e:	2001      	movs	r0, #1
 8007c60:	e7e7      	b.n	8007c32 <_raise_r+0x12>
 8007c62:	2100      	movs	r1, #0
 8007c64:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007c68:	4620      	mov	r0, r4
 8007c6a:	4798      	blx	r3
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	e7e0      	b.n	8007c32 <_raise_r+0x12>

08007c70 <raise>:
 8007c70:	4b02      	ldr	r3, [pc, #8]	@ (8007c7c <raise+0xc>)
 8007c72:	4601      	mov	r1, r0
 8007c74:	6818      	ldr	r0, [r3, #0]
 8007c76:	f7ff bfd3 	b.w	8007c20 <_raise_r>
 8007c7a:	bf00      	nop
 8007c7c:	20000018 	.word	0x20000018

08007c80 <_kill_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4d07      	ldr	r5, [pc, #28]	@ (8007ca0 <_kill_r+0x20>)
 8007c84:	2300      	movs	r3, #0
 8007c86:	4604      	mov	r4, r0
 8007c88:	4608      	mov	r0, r1
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	602b      	str	r3, [r5, #0]
 8007c8e:	f7fa f944 	bl	8001f1a <_kill>
 8007c92:	1c43      	adds	r3, r0, #1
 8007c94:	d102      	bne.n	8007c9c <_kill_r+0x1c>
 8007c96:	682b      	ldr	r3, [r5, #0]
 8007c98:	b103      	cbz	r3, 8007c9c <_kill_r+0x1c>
 8007c9a:	6023      	str	r3, [r4, #0]
 8007c9c:	bd38      	pop	{r3, r4, r5, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20000480 	.word	0x20000480

08007ca4 <_getpid_r>:
 8007ca4:	f7fa b931 	b.w	8001f0a <_getpid>

08007ca8 <__swhatbuf_r>:
 8007ca8:	b570      	push	{r4, r5, r6, lr}
 8007caa:	460c      	mov	r4, r1
 8007cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cb0:	2900      	cmp	r1, #0
 8007cb2:	b096      	sub	sp, #88	@ 0x58
 8007cb4:	4615      	mov	r5, r2
 8007cb6:	461e      	mov	r6, r3
 8007cb8:	da0d      	bge.n	8007cd6 <__swhatbuf_r+0x2e>
 8007cba:	89a3      	ldrh	r3, [r4, #12]
 8007cbc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007cc0:	f04f 0100 	mov.w	r1, #0
 8007cc4:	bf14      	ite	ne
 8007cc6:	2340      	movne	r3, #64	@ 0x40
 8007cc8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ccc:	2000      	movs	r0, #0
 8007cce:	6031      	str	r1, [r6, #0]
 8007cd0:	602b      	str	r3, [r5, #0]
 8007cd2:	b016      	add	sp, #88	@ 0x58
 8007cd4:	bd70      	pop	{r4, r5, r6, pc}
 8007cd6:	466a      	mov	r2, sp
 8007cd8:	f000 f848 	bl	8007d6c <_fstat_r>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	dbec      	blt.n	8007cba <__swhatbuf_r+0x12>
 8007ce0:	9901      	ldr	r1, [sp, #4]
 8007ce2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007ce6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007cea:	4259      	negs	r1, r3
 8007cec:	4159      	adcs	r1, r3
 8007cee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007cf2:	e7eb      	b.n	8007ccc <__swhatbuf_r+0x24>

08007cf4 <__smakebuf_r>:
 8007cf4:	898b      	ldrh	r3, [r1, #12]
 8007cf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cf8:	079d      	lsls	r5, r3, #30
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	460c      	mov	r4, r1
 8007cfe:	d507      	bpl.n	8007d10 <__smakebuf_r+0x1c>
 8007d00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007d04:	6023      	str	r3, [r4, #0]
 8007d06:	6123      	str	r3, [r4, #16]
 8007d08:	2301      	movs	r3, #1
 8007d0a:	6163      	str	r3, [r4, #20]
 8007d0c:	b003      	add	sp, #12
 8007d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d10:	ab01      	add	r3, sp, #4
 8007d12:	466a      	mov	r2, sp
 8007d14:	f7ff ffc8 	bl	8007ca8 <__swhatbuf_r>
 8007d18:	9f00      	ldr	r7, [sp, #0]
 8007d1a:	4605      	mov	r5, r0
 8007d1c:	4639      	mov	r1, r7
 8007d1e:	4630      	mov	r0, r6
 8007d20:	f7fe febe 	bl	8006aa0 <_malloc_r>
 8007d24:	b948      	cbnz	r0, 8007d3a <__smakebuf_r+0x46>
 8007d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d2a:	059a      	lsls	r2, r3, #22
 8007d2c:	d4ee      	bmi.n	8007d0c <__smakebuf_r+0x18>
 8007d2e:	f023 0303 	bic.w	r3, r3, #3
 8007d32:	f043 0302 	orr.w	r3, r3, #2
 8007d36:	81a3      	strh	r3, [r4, #12]
 8007d38:	e7e2      	b.n	8007d00 <__smakebuf_r+0xc>
 8007d3a:	89a3      	ldrh	r3, [r4, #12]
 8007d3c:	6020      	str	r0, [r4, #0]
 8007d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d42:	81a3      	strh	r3, [r4, #12]
 8007d44:	9b01      	ldr	r3, [sp, #4]
 8007d46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007d4a:	b15b      	cbz	r3, 8007d64 <__smakebuf_r+0x70>
 8007d4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d50:	4630      	mov	r0, r6
 8007d52:	f000 f81d 	bl	8007d90 <_isatty_r>
 8007d56:	b128      	cbz	r0, 8007d64 <__smakebuf_r+0x70>
 8007d58:	89a3      	ldrh	r3, [r4, #12]
 8007d5a:	f023 0303 	bic.w	r3, r3, #3
 8007d5e:	f043 0301 	orr.w	r3, r3, #1
 8007d62:	81a3      	strh	r3, [r4, #12]
 8007d64:	89a3      	ldrh	r3, [r4, #12]
 8007d66:	431d      	orrs	r5, r3
 8007d68:	81a5      	strh	r5, [r4, #12]
 8007d6a:	e7cf      	b.n	8007d0c <__smakebuf_r+0x18>

08007d6c <_fstat_r>:
 8007d6c:	b538      	push	{r3, r4, r5, lr}
 8007d6e:	4d07      	ldr	r5, [pc, #28]	@ (8007d8c <_fstat_r+0x20>)
 8007d70:	2300      	movs	r3, #0
 8007d72:	4604      	mov	r4, r0
 8007d74:	4608      	mov	r0, r1
 8007d76:	4611      	mov	r1, r2
 8007d78:	602b      	str	r3, [r5, #0]
 8007d7a:	f7fa f92e 	bl	8001fda <_fstat>
 8007d7e:	1c43      	adds	r3, r0, #1
 8007d80:	d102      	bne.n	8007d88 <_fstat_r+0x1c>
 8007d82:	682b      	ldr	r3, [r5, #0]
 8007d84:	b103      	cbz	r3, 8007d88 <_fstat_r+0x1c>
 8007d86:	6023      	str	r3, [r4, #0]
 8007d88:	bd38      	pop	{r3, r4, r5, pc}
 8007d8a:	bf00      	nop
 8007d8c:	20000480 	.word	0x20000480

08007d90 <_isatty_r>:
 8007d90:	b538      	push	{r3, r4, r5, lr}
 8007d92:	4d06      	ldr	r5, [pc, #24]	@ (8007dac <_isatty_r+0x1c>)
 8007d94:	2300      	movs	r3, #0
 8007d96:	4604      	mov	r4, r0
 8007d98:	4608      	mov	r0, r1
 8007d9a:	602b      	str	r3, [r5, #0]
 8007d9c:	f7fa f92d 	bl	8001ffa <_isatty>
 8007da0:	1c43      	adds	r3, r0, #1
 8007da2:	d102      	bne.n	8007daa <_isatty_r+0x1a>
 8007da4:	682b      	ldr	r3, [r5, #0]
 8007da6:	b103      	cbz	r3, 8007daa <_isatty_r+0x1a>
 8007da8:	6023      	str	r3, [r4, #0]
 8007daa:	bd38      	pop	{r3, r4, r5, pc}
 8007dac:	20000480 	.word	0x20000480

08007db0 <atan2f>:
 8007db0:	f000 b822 	b.w	8007df8 <__ieee754_atan2f>

08007db4 <sqrtf>:
 8007db4:	b508      	push	{r3, lr}
 8007db6:	ed2d 8b02 	vpush	{d8}
 8007dba:	eeb0 8a40 	vmov.f32	s16, s0
 8007dbe:	f000 f817 	bl	8007df0 <__ieee754_sqrtf>
 8007dc2:	eeb4 8a48 	vcmp.f32	s16, s16
 8007dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dca:	d60c      	bvs.n	8007de6 <sqrtf+0x32>
 8007dcc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8007dec <sqrtf+0x38>
 8007dd0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dd8:	d505      	bpl.n	8007de6 <sqrtf+0x32>
 8007dda:	f7fd ff71 	bl	8005cc0 <__errno>
 8007dde:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007de2:	2321      	movs	r3, #33	@ 0x21
 8007de4:	6003      	str	r3, [r0, #0]
 8007de6:	ecbd 8b02 	vpop	{d8}
 8007dea:	bd08      	pop	{r3, pc}
 8007dec:	00000000 	.word	0x00000000

08007df0 <__ieee754_sqrtf>:
 8007df0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007df4:	4770      	bx	lr
	...

08007df8 <__ieee754_atan2f>:
 8007df8:	ee10 2a90 	vmov	r2, s1
 8007dfc:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8007e00:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8007e04:	b510      	push	{r4, lr}
 8007e06:	eef0 7a40 	vmov.f32	s15, s0
 8007e0a:	d806      	bhi.n	8007e1a <__ieee754_atan2f+0x22>
 8007e0c:	ee10 0a10 	vmov	r0, s0
 8007e10:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8007e14:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007e18:	d904      	bls.n	8007e24 <__ieee754_atan2f+0x2c>
 8007e1a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8007e22:	bd10      	pop	{r4, pc}
 8007e24:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8007e28:	d103      	bne.n	8007e32 <__ieee754_atan2f+0x3a>
 8007e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e2e:	f000 b883 	b.w	8007f38 <atanf>
 8007e32:	1794      	asrs	r4, r2, #30
 8007e34:	f004 0402 	and.w	r4, r4, #2
 8007e38:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007e3c:	b943      	cbnz	r3, 8007e50 <__ieee754_atan2f+0x58>
 8007e3e:	2c02      	cmp	r4, #2
 8007e40:	d05e      	beq.n	8007f00 <__ieee754_atan2f+0x108>
 8007e42:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8007f14 <__ieee754_atan2f+0x11c>
 8007e46:	2c03      	cmp	r4, #3
 8007e48:	bf08      	it	eq
 8007e4a:	eef0 7a47 	vmoveq.f32	s15, s14
 8007e4e:	e7e6      	b.n	8007e1e <__ieee754_atan2f+0x26>
 8007e50:	b941      	cbnz	r1, 8007e64 <__ieee754_atan2f+0x6c>
 8007e52:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8007f18 <__ieee754_atan2f+0x120>
 8007e56:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8007f1c <__ieee754_atan2f+0x124>
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	bfb8      	it	lt
 8007e5e:	eef0 7a47 	vmovlt.f32	s15, s14
 8007e62:	e7dc      	b.n	8007e1e <__ieee754_atan2f+0x26>
 8007e64:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8007e68:	d110      	bne.n	8007e8c <__ieee754_atan2f+0x94>
 8007e6a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007e6e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007e72:	d107      	bne.n	8007e84 <__ieee754_atan2f+0x8c>
 8007e74:	2c02      	cmp	r4, #2
 8007e76:	d846      	bhi.n	8007f06 <__ieee754_atan2f+0x10e>
 8007e78:	4b29      	ldr	r3, [pc, #164]	@ (8007f20 <__ieee754_atan2f+0x128>)
 8007e7a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007e7e:	edd3 7a00 	vldr	s15, [r3]
 8007e82:	e7cc      	b.n	8007e1e <__ieee754_atan2f+0x26>
 8007e84:	2c02      	cmp	r4, #2
 8007e86:	d841      	bhi.n	8007f0c <__ieee754_atan2f+0x114>
 8007e88:	4b26      	ldr	r3, [pc, #152]	@ (8007f24 <__ieee754_atan2f+0x12c>)
 8007e8a:	e7f6      	b.n	8007e7a <__ieee754_atan2f+0x82>
 8007e8c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007e90:	d0df      	beq.n	8007e52 <__ieee754_atan2f+0x5a>
 8007e92:	1a5b      	subs	r3, r3, r1
 8007e94:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8007e98:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8007e9c:	da1a      	bge.n	8007ed4 <__ieee754_atan2f+0xdc>
 8007e9e:	2a00      	cmp	r2, #0
 8007ea0:	da01      	bge.n	8007ea6 <__ieee754_atan2f+0xae>
 8007ea2:	313c      	adds	r1, #60	@ 0x3c
 8007ea4:	db19      	blt.n	8007eda <__ieee754_atan2f+0xe2>
 8007ea6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8007eaa:	f000 f919 	bl	80080e0 <fabsf>
 8007eae:	f000 f843 	bl	8007f38 <atanf>
 8007eb2:	eef0 7a40 	vmov.f32	s15, s0
 8007eb6:	2c01      	cmp	r4, #1
 8007eb8:	d012      	beq.n	8007ee0 <__ieee754_atan2f+0xe8>
 8007eba:	2c02      	cmp	r4, #2
 8007ebc:	d017      	beq.n	8007eee <__ieee754_atan2f+0xf6>
 8007ebe:	2c00      	cmp	r4, #0
 8007ec0:	d0ad      	beq.n	8007e1e <__ieee754_atan2f+0x26>
 8007ec2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007f28 <__ieee754_atan2f+0x130>
 8007ec6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007eca:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8007f2c <__ieee754_atan2f+0x134>
 8007ece:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007ed2:	e7a4      	b.n	8007e1e <__ieee754_atan2f+0x26>
 8007ed4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8007f18 <__ieee754_atan2f+0x120>
 8007ed8:	e7ed      	b.n	8007eb6 <__ieee754_atan2f+0xbe>
 8007eda:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8007f30 <__ieee754_atan2f+0x138>
 8007ede:	e7ea      	b.n	8007eb6 <__ieee754_atan2f+0xbe>
 8007ee0:	ee17 3a90 	vmov	r3, s15
 8007ee4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007ee8:	ee07 3a90 	vmov	s15, r3
 8007eec:	e797      	b.n	8007e1e <__ieee754_atan2f+0x26>
 8007eee:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8007f28 <__ieee754_atan2f+0x130>
 8007ef2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ef6:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8007f2c <__ieee754_atan2f+0x134>
 8007efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007efe:	e78e      	b.n	8007e1e <__ieee754_atan2f+0x26>
 8007f00:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8007f2c <__ieee754_atan2f+0x134>
 8007f04:	e78b      	b.n	8007e1e <__ieee754_atan2f+0x26>
 8007f06:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8007f34 <__ieee754_atan2f+0x13c>
 8007f0a:	e788      	b.n	8007e1e <__ieee754_atan2f+0x26>
 8007f0c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8007f30 <__ieee754_atan2f+0x138>
 8007f10:	e785      	b.n	8007e1e <__ieee754_atan2f+0x26>
 8007f12:	bf00      	nop
 8007f14:	c0490fdb 	.word	0xc0490fdb
 8007f18:	3fc90fdb 	.word	0x3fc90fdb
 8007f1c:	bfc90fdb 	.word	0xbfc90fdb
 8007f20:	080086dc 	.word	0x080086dc
 8007f24:	080086d0 	.word	0x080086d0
 8007f28:	33bbbd2e 	.word	0x33bbbd2e
 8007f2c:	40490fdb 	.word	0x40490fdb
 8007f30:	00000000 	.word	0x00000000
 8007f34:	3f490fdb 	.word	0x3f490fdb

08007f38 <atanf>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	ee10 5a10 	vmov	r5, s0
 8007f3e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8007f42:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8007f46:	eef0 7a40 	vmov.f32	s15, s0
 8007f4a:	d310      	bcc.n	8007f6e <atanf+0x36>
 8007f4c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8007f50:	d904      	bls.n	8007f5c <atanf+0x24>
 8007f52:	ee70 7a00 	vadd.f32	s15, s0, s0
 8007f56:	eeb0 0a67 	vmov.f32	s0, s15
 8007f5a:	bd38      	pop	{r3, r4, r5, pc}
 8007f5c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8008094 <atanf+0x15c>
 8007f60:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8008098 <atanf+0x160>
 8007f64:	2d00      	cmp	r5, #0
 8007f66:	bfc8      	it	gt
 8007f68:	eef0 7a47 	vmovgt.f32	s15, s14
 8007f6c:	e7f3      	b.n	8007f56 <atanf+0x1e>
 8007f6e:	4b4b      	ldr	r3, [pc, #300]	@ (800809c <atanf+0x164>)
 8007f70:	429c      	cmp	r4, r3
 8007f72:	d810      	bhi.n	8007f96 <atanf+0x5e>
 8007f74:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8007f78:	d20a      	bcs.n	8007f90 <atanf+0x58>
 8007f7a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80080a0 <atanf+0x168>
 8007f7e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007f82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f86:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f8e:	dce2      	bgt.n	8007f56 <atanf+0x1e>
 8007f90:	f04f 33ff 	mov.w	r3, #4294967295
 8007f94:	e013      	b.n	8007fbe <atanf+0x86>
 8007f96:	f000 f8a3 	bl	80080e0 <fabsf>
 8007f9a:	4b42      	ldr	r3, [pc, #264]	@ (80080a4 <atanf+0x16c>)
 8007f9c:	429c      	cmp	r4, r3
 8007f9e:	d84f      	bhi.n	8008040 <atanf+0x108>
 8007fa0:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8007fa4:	429c      	cmp	r4, r3
 8007fa6:	d841      	bhi.n	800802c <atanf+0xf4>
 8007fa8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8007fac:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8007fb0:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007fba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007fbe:	1c5a      	adds	r2, r3, #1
 8007fc0:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007fc4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80080a8 <atanf+0x170>
 8007fc8:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80080ac <atanf+0x174>
 8007fcc:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80080b0 <atanf+0x178>
 8007fd0:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007fd4:	eee6 5a87 	vfma.f32	s11, s13, s14
 8007fd8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80080b4 <atanf+0x17c>
 8007fdc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007fe0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80080b8 <atanf+0x180>
 8007fe4:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007fe8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80080bc <atanf+0x184>
 8007fec:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007ff0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80080c0 <atanf+0x188>
 8007ff4:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007ff8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80080c4 <atanf+0x18c>
 8007ffc:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008000:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80080c8 <atanf+0x190>
 8008004:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008008:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80080cc <atanf+0x194>
 800800c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8008010:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80080d0 <atanf+0x198>
 8008014:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008018:	ee27 7a26 	vmul.f32	s14, s14, s13
 800801c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008020:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008024:	d121      	bne.n	800806a <atanf+0x132>
 8008026:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800802a:	e794      	b.n	8007f56 <atanf+0x1e>
 800802c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008030:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008034:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008038:	2301      	movs	r3, #1
 800803a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800803e:	e7be      	b.n	8007fbe <atanf+0x86>
 8008040:	4b24      	ldr	r3, [pc, #144]	@ (80080d4 <atanf+0x19c>)
 8008042:	429c      	cmp	r4, r3
 8008044:	d80b      	bhi.n	800805e <atanf+0x126>
 8008046:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800804a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800804e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008052:	2302      	movs	r3, #2
 8008054:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800805c:	e7af      	b.n	8007fbe <atanf+0x86>
 800805e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8008062:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008066:	2303      	movs	r3, #3
 8008068:	e7a9      	b.n	8007fbe <atanf+0x86>
 800806a:	4a1b      	ldr	r2, [pc, #108]	@ (80080d8 <atanf+0x1a0>)
 800806c:	491b      	ldr	r1, [pc, #108]	@ (80080dc <atanf+0x1a4>)
 800806e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008072:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008076:	edd3 6a00 	vldr	s13, [r3]
 800807a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800807e:	2d00      	cmp	r5, #0
 8008080:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008084:	edd2 7a00 	vldr	s15, [r2]
 8008088:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800808c:	bfb8      	it	lt
 800808e:	eef1 7a67 	vneglt.f32	s15, s15
 8008092:	e760      	b.n	8007f56 <atanf+0x1e>
 8008094:	bfc90fdb 	.word	0xbfc90fdb
 8008098:	3fc90fdb 	.word	0x3fc90fdb
 800809c:	3edfffff 	.word	0x3edfffff
 80080a0:	7149f2ca 	.word	0x7149f2ca
 80080a4:	3f97ffff 	.word	0x3f97ffff
 80080a8:	3c8569d7 	.word	0x3c8569d7
 80080ac:	3d4bda59 	.word	0x3d4bda59
 80080b0:	bd6ef16b 	.word	0xbd6ef16b
 80080b4:	3d886b35 	.word	0x3d886b35
 80080b8:	3dba2e6e 	.word	0x3dba2e6e
 80080bc:	3e124925 	.word	0x3e124925
 80080c0:	3eaaaaab 	.word	0x3eaaaaab
 80080c4:	bd15a221 	.word	0xbd15a221
 80080c8:	bd9d8795 	.word	0xbd9d8795
 80080cc:	bde38e38 	.word	0xbde38e38
 80080d0:	be4ccccd 	.word	0xbe4ccccd
 80080d4:	401bffff 	.word	0x401bffff
 80080d8:	080086f8 	.word	0x080086f8
 80080dc:	080086e8 	.word	0x080086e8

080080e0 <fabsf>:
 80080e0:	ee10 3a10 	vmov	r3, s0
 80080e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080e8:	ee00 3a10 	vmov	s0, r3
 80080ec:	4770      	bx	lr
	...

080080f0 <_init>:
 80080f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f2:	bf00      	nop
 80080f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080f6:	bc08      	pop	{r3}
 80080f8:	469e      	mov	lr, r3
 80080fa:	4770      	bx	lr

080080fc <_fini>:
 80080fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fe:	bf00      	nop
 8008100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008102:	bc08      	pop	{r3}
 8008104:	469e      	mov	lr, r3
 8008106:	4770      	bx	lr
